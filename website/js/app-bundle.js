(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["juicebox"] = factory();
	else
		root["juicebox"] = factory();
})(window, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./website/js/app.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./js/annotationWidget.js":
/*!********************************!*\
  !*** ./js/annotationWidget.js ***!
  \********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _hicTrack2D__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./hicTrack2D */ "./js/hicTrack2D.js");
/* harmony import */ var _hicEvent__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./hicEvent */ "./js/hicEvent.js");
/* harmony import */ var _hic__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./hic */ "./js/hic.js");
/* harmony import */ var _vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../vendor/jquery-1.12.4 */ "./vendor/jquery-1.12.4.js");
/* harmony import */ var _vendor_underscore__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../vendor/underscore */ "./vendor/underscore.js");
/* harmony import */ var _globals__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./globals */ "./js/globals.js");
/*
 *  The MIT License (MIT)
 *
 * Copyright (c) 2016-2017 The Regents of the University of California
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
 * associated documentation files (the "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the
 * following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial
 * portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
 * BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,  FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 */







var AnnotationWidget = function AnnotationWidget(browser, $parent, config, trackListRetrievalCallback) {
  var $container;
  this.browser = browser;
  this.trackListRetrievalCallback = trackListRetrievalCallback;
  $container = Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_3__["default"])("<div>", {
    class: 'hic-annotation-presentation-button-container'
  });
  $parent.append($container);
  annotationPresentationButton.call(this, $container, config.title, config.alertMessage);
  annotationPanel.call(this, this.browser.$root, config.title);
};

AnnotationWidget.prototype.updateBody = function (tracks) {
  var self = this,
      trackRenderers,
      isTrack2D,
      zi;
  self.$annotationPanel.find('.hic-annotation-row-container').remove();
  isTrack2D = _vendor_underscore__WEBPACK_IMPORTED_MODULE_4__["default"].first(tracks) instanceof _hicTrack2D__WEBPACK_IMPORTED_MODULE_0__["default"];

  if (isTrack2D) {
    // Reverse list to present layers in "z" order.
    for (zi = tracks.length - 1; zi >= 0; zi--) {
      annotationPanelRow.call(self, self.$annotationPanel, tracks[zi]);
    }
  } else {
    trackRenderers = tracks;

    _vendor_underscore__WEBPACK_IMPORTED_MODULE_4__["default"].each(trackRenderers, function (trackRenderer) {
      annotationPanelRow.call(self, self.$annotationPanel, trackRenderer);
    });
  }
};

function annotationPresentationButton($parent, title, alertMessage) {
  var self = this,
      $button;
  $button = Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_3__["default"])('<button>', {
    type: 'button'
  });
  $button.text(title);
  $parent.append($button);
  $button.on('click', function () {
    var list;
    list = self.trackListRetrievalCallback();

    if (list.length > 0) {
      self.updateBody(self.trackListRetrievalCallback());
      self.$annotationPanel.toggle();
    } else {
      igv.presentAlert(alertMessage);
    }

    self.browser.hideMenu();
  });
}

function annotationPanel($parent, title) {
  var self = this,
      $panel_header,
      $load_container,
      $div,
      $fa;
  this.$annotationPanel = Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_3__["default"])('<div>', {
    class: 'hic-annotation-panel-container'
  });
  $parent.append(this.$annotationPanel); // close button container

  $panel_header = Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_3__["default"])('<div>', {
    class: 'hic-annotation-panel-header'
  });
  this.$annotationPanel.append($panel_header); // panel title

  $div = Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_3__["default"])('<div>');
  $div.text(title);
  $panel_header.append($div); // close button

  $div = Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_3__["default"])('<div>', {
    class: 'hic-menu-close-button'
  });
  $panel_header.append($div);
  $fa = Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_3__["default"])("<i>", {
    class: 'fa fa-times'
  });
  $div.append($fa);
  $fa.on('click', function (e) {
    self.$annotationPanel.toggle();
  }); // TODO: Continue changes for load functions added to side panel
  // load container
  // $load_container = $('<div>', { class:'hic-annotation-panel-load-container' });
  // this.$annotationPanel.append($load_container);
  //
  // // Load
  // $div = $('<div>');
  // $load_container.append($div);
  // $div.text('Load:');
  //
  // // Blah
  // $div = $('<div>');
  // $load_container.append($div);
  // $div.text('Blah');
  //this.$annotationPanel.draggable();

  igv.makeDraggable(this.$annotationPanel.get(0), $panel_header.get(0));
  this.$annotationPanel.hide();
}

function annotationPanelRow($container, track) {
  var self = this,
      $colorpickerContainer,
      $colorpickerButton,
      $colorpicker,
      $row_container,
      $row,
      $hideShowTrack,
      $deleteTrack,
      $upTrack,
      $downTrack,
      $e,
      $o,
      hidden_color = '#f7f7f7',
      str,
      isTrack2D,
      trackList,
      xyTrackRendererPair,
      trackRenderer,
      track1D,
      index,
      upp,
      dwn;
  isTrack2D = track instanceof _hic__WEBPACK_IMPORTED_MODULE_2__["Track2D"];
  trackList = this.trackListRetrievalCallback();

  if (false === isTrack2D) {
    xyTrackRendererPair = track;
    track1D = xyTrackRendererPair.x.track;
    trackRenderer = xyTrackRendererPair.x.track.trackView;
  } // row container


  $row_container = Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_3__["default"])('<div>', {
    class: 'hic-annotation-row-container'
  });
  $container.append($row_container); // one row

  $row = Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_3__["default"])('<div>', {
    class: 'hic-annotation-modal-row'
  });
  $row_container.append($row); // track name

  $e = Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_3__["default"])("<div>");
  $e.text(isTrack2D ? track.config.name : track1D.config.name);
  $row.append($e); // track hide/show

  if (isTrack2D) {
    str = true === track.isVisible ? 'fa fa-eye fa-lg' : 'fa fa-eye-slash fa-lg';
    $hideShowTrack = Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_3__["default"])("<i>", {
      class: str,
      'aria-hidden': 'true'
    });
    $row.append($hideShowTrack);
    $hideShowTrack.on('click', function (e) {
      if ($hideShowTrack.hasClass('fa-eye')) {
        $hideShowTrack.addClass('fa-eye-slash');
        $hideShowTrack.removeClass('fa-eye');
        track.isVisible = false;
      } else {
        $hideShowTrack.addClass('fa-eye');
        $hideShowTrack.removeClass('fa-eye-slash');
        track.isVisible = true;
      }

      self.browser.contactMatrixView.clearImageCaches();
      self.browser.contactMatrixView.update();
    });
  }

  if (isTrack2D) {
    // matrix diagonal widget
    var $matrix_diagonal_div = Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_3__["default"])('<div>', {
      class: 'matrix-diagonal-widget-container matrix-diagonal-widget-all'
    });
    $row.append($matrix_diagonal_div);
    $matrix_diagonal_div.on('click.matrix_diagonal_div', function (e) {
      e.preventDefault();
      matrixDiagionalWidgetHandler($matrix_diagonal_div, track);
    });
  } // color swatch selector button


  $colorpickerButton = annotationColorSwatch(isTrack2D ? track.getColor() : track1D.color);
  $row.append($colorpickerButton); // color swatch selector

  $colorpickerContainer = createAnnotationPanelColorpickerContainer($row_container, {
    width: 29 * 24 + 1 + 1
  }, function () {
    $row.next('.hic-color-swatch-container').toggle();
  });
  $colorpickerButton.on('click', function (e) {
    $row.next('.hic-color-swatch-container').toggle();
  });
  $colorpickerContainer.hide();
  igv.createColorSwatchSelector($colorpickerContainer, function (color) {
    var $swatch;
    $swatch = $row.find('.fa-square');
    $swatch.css({
      'color': color
    });

    if (isTrack2D) {
      track.color = color;
      self.browser.eventBus.post(Object(_hicEvent__WEBPACK_IMPORTED_MODULE_1__["default"])('TrackState2D', track));
    } else {
      trackRenderer.setColor(color);
    }
  }); // track up/down

  $e = Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_3__["default"])('<div>', {
    class: 'up-down-arrow-container'
  });
  $row.append($e);
  $upTrack = Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_3__["default"])("<i>", {
    class: 'fa fa-arrow-up',
    'aria-hidden': 'true'
  });
  $e.append($upTrack);
  $downTrack = Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_3__["default"])("<i>", {
    class: 'fa fa-arrow-down',
    'aria-hidden': 'true'
  });
  $e.append($downTrack);

  if (1 === _vendor_underscore__WEBPACK_IMPORTED_MODULE_4__["default"].size(trackList)) {
    $upTrack.css('color', hidden_color);
    $downTrack.css('color', hidden_color);
  } else if (track === _vendor_underscore__WEBPACK_IMPORTED_MODULE_4__["default"].first(trackList)) {
    $o = isTrack2D ? $downTrack : $upTrack;
    $o.css('color', hidden_color);
  } else if (track === _vendor_underscore__WEBPACK_IMPORTED_MODULE_4__["default"].last(trackList)) {
    $o = isTrack2D ? $upTrack : $downTrack;
    $o.css('color', hidden_color);
  }

  index = _vendor_underscore__WEBPACK_IMPORTED_MODULE_4__["default"].indexOf(trackList, track);

  upp = function upp(e) {
    track = trackList[index + 1];
    trackList[index + 1] = trackList[index];
    trackList[index] = track;

    if (isTrack2D) {
      self.browser.eventBus.post(Object(_hicEvent__WEBPACK_IMPORTED_MODULE_1__["default"])('TrackState2D', trackList));
      self.updateBody(trackList);
    } else {
      self.browser.updateLayout();
      self.updateBody(trackList);
    }
  };

  dwn = function dwn(e) {
    track = trackList[index - 1];
    trackList[index - 1] = trackList[index];
    trackList[index] = track;

    if (isTrack2D) {
      self.browser.eventBus.post(Object(_hicEvent__WEBPACK_IMPORTED_MODULE_1__["default"])('TrackState2D', trackList));
      self.updateBody(trackList);
    } else {
      self.browser.updateLayout();
      self.updateBody(trackList);
    }
  };

  $upTrack.on('click', isTrack2D ? upp : dwn);
  $downTrack.on('click', isTrack2D ? dwn : upp); // track delete

  $deleteTrack = Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_3__["default"])("<i>", {
    class: 'fa fa-trash-o fa-lg',
    'aria-hidden': 'true'
  });
  $row.append($deleteTrack);
  $deleteTrack.on('click', function (e) {
    var index;

    if (isTrack2D) {
      index = _vendor_underscore__WEBPACK_IMPORTED_MODULE_4__["default"].indexOf(trackList, track);
      trackList.splice(index, 1);
      self.browser.contactMatrixView.clearImageCaches();
      self.browser.contactMatrixView.update();
      self.browser.eventBus.post(Object(_hicEvent__WEBPACK_IMPORTED_MODULE_1__["default"])('TrackLoad2D', trackList));
    } else {
      self.browser.layoutController.removeTrackRendererPair(trackRenderer.trackRenderPair);
    }

    self.updateBody(trackList);
  });
}

function matrixDiagionalWidgetHandler($icon, track2D) {
  if ($icon.hasClass('matrix-diagonal-widget-all')) {
    $icon.removeClass('matrix-diagonal-widget-all');
    $icon.addClass('matrix-diagonal-widget-lower');
    track2D.displayMode = _globals__WEBPACK_IMPORTED_MODULE_5__["Track2DDisplaceModes"].displayLowerMatrix;
  } else if ($icon.hasClass('matrix-diagonal-widget-lower')) {
    $icon.removeClass('matrix-diagonal-widget-lower');
    $icon.addClass('matrix-diagonal-widget-upper');
    track2D.displayMode = _globals__WEBPACK_IMPORTED_MODULE_5__["Track2DDisplaceModes"].displayUpperMatrix;
  } else if ($icon.hasClass('matrix-diagonal-widget-upper')) {
    $icon.removeClass('matrix-diagonal-widget-upper');
    $icon.addClass('matrix-diagonal-widget-all');
    track2D.displayMode = _globals__WEBPACK_IMPORTED_MODULE_5__["Track2DDisplaceModes"].displayAllMatrix;
  } else {
    $icon.addClass('matrix-diagonal-widget-all');
    track2D.displayMode = _globals__WEBPACK_IMPORTED_MODULE_5__["Track2DDisplaceModes"].displayAllMatrix;
  }
}

function annotationColorSwatch(rgbString) {
  var $swatch, $fa;
  $swatch = Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_3__["default"])('<div>', {
    class: 'igv-color-swatch'
  });
  $fa = Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_3__["default"])('<i>', {
    class: 'fa fa-square fa-lg',
    'aria-hidden': 'true'
  });
  $swatch.append($fa);
  $fa.css({
    color: rgbString
  });
  return $swatch;
}

function createAnnotationPanelColorpickerContainer($parent, config, closeHandler) {
  var $container, $header, $fa;
  $container = Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_3__["default"])('<div>', {
    class: 'hic-color-swatch-container'
  });
  $parent.append($container); // width

  if (config && config.width) {
    $container.width(config.width);
  } // height


  if (config && config.height) {
    $container.height(config.height);
  } // header


  $header = Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_3__["default"])('<div>');
  $container.append($header); // close button

  $fa = Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_3__["default"])("<i>", {
    class: 'fa fa-times'
  });
  $header.append($fa);
  $fa.on('click', function (e) {
    closeHandler();
  });
  return $container;
}

/* harmony default export */ __webpack_exports__["default"] = (AnnotationWidget);

/***/ }),

/***/ "./js/bitlyURL.js":
/*!************************!*\
  !*** ./js/bitlyURL.js ***!
  \************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

/*
 *  The MIT License (MIT)
 *
 * Copyright (c) 2016-2017 The Regents of the University of California
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
 * associated documentation files (the "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the
 * following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial
 * portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
 * BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,  FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 */
var BitlyURL = function BitlyURL(config) {
  this.api = "https://api-ssl.bitly.com";
  this.apiKey = !config.apiKey || "ABCD" === config.apiKey ? fetchBitlyApiKey : config.apiKey;
  this.hostname = config.hostname ? config.hostname : "bit.ly";
  this.devIP = "192.168.1.11"; // For development, replace with your IP address. Bitly will not shorten localhost !
};

BitlyURL.prototype.shortenURL =
/*#__PURE__*/
function () {
  var _ref = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee(url) {
    var self, key, endpoint, json;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            self = this;
            if (url.startsWith("http://localhost")) url = url.replace("localhost", this.devIP); // Dev hack

            _context.prev = 2;
            _context.next = 5;
            return getApiKey.call(this);

          case 5:
            key = _context.sent;
            endpoint = self.api + "/v3/shorten?access_token=" + key + "&longUrl=" + encodeURIComponent(url);
            _context.next = 9;
            return igv.xhr.loadJson(endpoint, {});

          case 9:
            json = _context.sent;

            if (!(500 === json.status_code)) {
              _context.next = 15;
              break;
            }

            alert("Error shortening URL: " + json.status_txt); //igv.presentAlert("Error shortening URL: " + json.status_txt)

            return _context.abrupt("return", url);

          case 15:
            return _context.abrupt("return", json.data.url);

          case 16:
            _context.next = 22;
            break;

          case 18:
            _context.prev = 18;
            _context.t0 = _context["catch"](2);
            alert("Error shortening URL: " + _context.t0); //igv.presentAlert("Error shortening URL: " + e)

            return _context.abrupt("return", url);

          case 22:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this, [[2, 18]]);
  }));

  return function (_x) {
    return _ref.apply(this, arguments);
  };
}();

BitlyURL.prototype.expandURL = function (url) {
  var self = this;
  return getApiKey.call(this).then(function (key) {
    var endpoint = self.api + "/v3/expand?access_token=" + key + "&shortUrl=" + encodeURIComponent(url);
    return igv.xhr.loadJson(endpoint, {});
  }).then(function (json) {
    var longUrl = json.data.expand[0].long_url; // Fix some Bitly "normalization"

    longUrl = longUrl.replace("{", "%7B").replace("}", "%7D");
    return longUrl;
  });
};

function getApiKey() {
  return _getApiKey.apply(this, arguments);
} // Example function for fetching an api key.


function _getApiKey() {
  _getApiKey = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee2() {
    var self, token;
    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            self = this;

            if (!(typeof self.apiKey === "string")) {
              _context2.next = 5;
              break;
            }

            return _context2.abrupt("return", self.apiKey);

          case 5:
            if (!(typeof self.apiKey === "function")) {
              _context2.next = 11;
              break;
            }

            _context2.next = 8;
            return self.apiKey();

          case 8:
            return _context2.abrupt("return", _context2.sent);

          case 11:
            throw new Error("Unknown apiKey type: " + this.apiKey);

          case 12:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, this);
  }));
  return _getApiKey.apply(this, arguments);
}

function fetchBitlyApiKey() {
  return _fetchBitlyApiKey.apply(this, arguments);
}

function _fetchBitlyApiKey() {
  _fetchBitlyApiKey = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee3() {
    var json;
    return regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _context3.next = 2;
            return igv.xhr.loadJson("https://s3.amazonaws.com/igv.org.restricted/bitly.json", {});

          case 2:
            json = _context3.sent;
            return _context3.abrupt("return", json["apiKey"]);

          case 4:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3, this);
  }));
  return _fetchBitlyApiKey.apply(this, arguments);
}

/* harmony default export */ __webpack_exports__["default"] = (BitlyURL);

/***/ }),

/***/ "./js/chromosomeSelectorWidget.js":
/*!****************************************!*\
  !*** ./js/chromosomeSelectorWidget.js ***!
  \****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../vendor/jquery-1.12.4 */ "./vendor/jquery-1.12.4.js");
/* harmony import */ var _vendor_underscore__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../vendor/underscore */ "./vendor/underscore.js");
/*
 *  The MIT License (MIT)
 *
 * Copyright (c) 2016-2017 The Regents of the University of California
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
 * associated documentation files (the "Software"), to deal in the Software without restriction, including 
 * without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell 
 * copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the 
 * following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial 
 * portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING 
 * BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,  FITNESS FOR A PARTICULAR PURPOSE AND 
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY 
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, 
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN 
 * THE SOFTWARE.
 *
 */

/**
 * Created by dat on 3/22/17.
 */



var ChromosomeSelectorWidget = function ChromosomeSelectorWidget(browser, $parent) {
  var self = this,
      $label,
      $selector_container,
      $doit;
  this.browser = browser;
  this.$container = Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__["default"])('<div class="hic-chromosome-selector-widget-container">');
  $parent.append(this.$container);
  $label = Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__["default"])('<div>');
  this.$container.append($label);
  $label.text('Chromosomes');
  $selector_container = Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__["default"])('<div>');
  this.$container.append($selector_container);
  this.$x_axis_selector = Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__["default"])('<select name="x-axis-selector">');
  $selector_container.append(this.$x_axis_selector);
  this.$y_axis_selector = Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__["default"])('<select name="y-axis-selector">');
  $selector_container.append(this.$y_axis_selector);
  this.$x_axis_selector.on('change', function (e) {
    if (0 === parseInt(Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__["default"])(this).val(), 10)) {
      self.$y_axis_selector.val(Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__["default"])(this).val());
    } else if (0 === parseInt(self.$y_axis_selector.val(), 10)) {
      self.$y_axis_selector.val(Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__["default"])(this).val());
    }
  });
  this.$y_axis_selector.on('change', function (e) {
    if (0 === parseInt(Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__["default"])(this).val(), 10)) {
      self.$x_axis_selector.val(Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__["default"])(this).val());
    } else if (0 === parseInt(self.$x_axis_selector.val(), 10)) {
      self.$x_axis_selector.val(Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__["default"])(this).val());
    }
  });
  $doit = Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__["default"])('<div>');
  $selector_container.append($doit);
  $doit.on('click', function (e) {
    var chr1Index, chr2Index;
    chr1Index = parseInt(self.$x_axis_selector.find('option:selected').val(), 10);
    chr2Index = parseInt(self.$y_axis_selector.find('option:selected').val(), 10);
    self.browser.setChromosomes(chr1Index, chr2Index);
  });
  this.dataLoadConfig = {
    receiveEvent: function receiveEvent(event) {
      if (event.type === "MapLoad") {
        self.respondToDataLoadWithDataset(event.data);
      }
    }
  };
  this.browser.eventBus.subscribe("MapLoad", this.dataLoadConfig);
  this.locusChangeConfig = {
    receiveEvent: function receiveEvent(event) {
      if (event.type === "LocusChange") {
        self.respondToLocusChangeWithState(event.data.state);
      }
    }
  };
  this.browser.eventBus.subscribe("LocusChange", this.locusChangeConfig);
};

ChromosomeSelectorWidget.prototype.respondToDataLoadWithDataset = function (dataset) {
  var elements, str, $xFound, $yFound;
  this.$x_axis_selector.empty();
  this.$y_axis_selector.empty();
  elements = _vendor_underscore__WEBPACK_IMPORTED_MODULE_1__["default"].map(dataset.chromosomes, function (chr, index) {
    return '<option value=' + index.toString() + '>' + chr.name + '</option>';
  });
  this.$x_axis_selector.append(elements.join(''));
  this.$y_axis_selector.append(elements.join(''));
  str = 'option[value=' + this.browser.state.chr1.toString() + ']';
  $xFound = this.$x_axis_selector.find(str);
  $xFound.prop('selected', true);
  str = 'option[value=' + this.browser.state.chr2.toString() + ']';
  $yFound = this.$y_axis_selector.find(str);
  $yFound.prop('selected', true);
};

ChromosomeSelectorWidget.prototype.respondToLocusChangeWithState = function (state) {
  var self = this,
      ssx,
      ssy,
      $xFound,
      $yFound,
      chr1,
      chr2;
  $xFound = this.$x_axis_selector.find('option');
  $yFound = this.$y_axis_selector.find('option'); // this happens when the first dataset is loaded.

  if (0 === _vendor_underscore__WEBPACK_IMPORTED_MODULE_1__["default"].size($xFound) || 0 === _vendor_underscore__WEBPACK_IMPORTED_MODULE_1__["default"].size($yFound)) {
    return;
  }

  $xFound = this.$x_axis_selector.find('option:selected');
  $yFound = this.$y_axis_selector.find('option:selected');
  $xFound.prop('selected', false);
  $yFound.prop('selected', false); // chr1 = parseInt($xFound.val(), 10);
  // chr2 = parseInt($yFound.val(), 10);
  // // It is the pair of chromosomes that is important,  1-2 == 2-1,  so update only if the pair does not match
  // if (false === ((chr1 === state.chr1 && chr2 === state.chr2) || (chr1 === state.chr2 && chr2 === state.chr1))) {
  //     ssx = 'option[value=' + state.chr1.toString() + ']';
  //     this.$x_axis_selector.find(ssx).attr('selected', 'selected');
  //
  //     ssx = 'option[value=' + state.chr2.toString() + ']';
  //     this.$y_axis_selector.find(ssx).attr('selected', 'selected');
  // }

  ssx = 'option[value=' + state.chr1.toString() + ']';
  ssy = 'option[value=' + state.chr2.toString() + ']';
  this.$x_axis_selector.find(ssx).prop('selected', true);
  this.$y_axis_selector.find(ssy).prop('selected', true);
};

/* harmony default export */ __webpack_exports__["default"] = (ChromosomeSelectorWidget);

/***/ }),

/***/ "./js/colorScale.js":
/*!**************************!*\
  !*** ./js/colorScale.js ***!
  \**************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/*
 *  The MIT License (MIT)
 *
 * Copyright (c) 2016-2017 The Regents of the University of California
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
 * associated documentation files (the "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the
 * following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial
 * portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
 * BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,  FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 */
var ColorScale = function ColorScale(scale) {
  this.threshold = scale.threshold;
  this.r = scale.r;
  this.g = scale.g;
  this.b = scale.b;
  this.cache = [];
  this.nbins = 2000;
  this.binsize = this.threshold / this.nbins;
};

ColorScale.prototype.setThreshold = function (threshold) {
  this.threshold = threshold;
  this.cache = [];
  this.binsize = this.threshold / this.nbins;
};

ColorScale.prototype.getThreshold = function () {
  return this.threshold;
};

ColorScale.prototype.setColorComponents = function (components) {
  this.r = components.r;
  this.g = components.g;
  this.b = components.b;
  this.cache = [];
};

ColorScale.prototype.getColorComponents = function () {
  return {
    r: this.r,
    g: this.g,
    b: this.b
  };
};

ColorScale.prototype.equals = function (cs) {
  return JSON.stringify(this) === JSON.stringify(cs);
};

ColorScale.prototype.getColor = function (value) {
  var bin = Math.floor(Math.min(this.threshold, value) / this.binsize);
  var color = this.cache[bin];

  if (!color) {
    var low = 0;
    var lowR = 255;
    var lowB = 255;
    var lowG = 255;
    if (value <= low) value = low;else if (value >= this.threshold) value = this.threshold;
    var diff = this.threshold - low;
    var frac = (value - low) / diff;
    var r = Math.floor(lowR + frac * (this.r - lowR));
    var g = Math.floor(lowG + frac * (this.g - lowG));
    var b = Math.floor(lowB + frac * (this.b - lowB));
    color = {
      red: r,
      green: g,
      blue: b,
      rgb: "rgb(" + r + "," + g + "," + b + ")"
    };
    this.cache[bin] = color;
  }

  return color;
};

ColorScale.prototype.stringify = function () {
  return "" + this.threshold + ',' + this.r + ',' + this.g + ',' + this.b;
};

/* harmony default export */ __webpack_exports__["default"] = (ColorScale);

/***/ }),

/***/ "./js/contactMatrixView.js":
/*!*********************************!*\
  !*** ./js/contactMatrixView.js ***!
  \*********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../vendor/jquery-1.12.4 */ "./vendor/jquery-1.12.4.js");
/* harmony import */ var _colorScale__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./colorScale */ "./js/colorScale.js");
/* harmony import */ var _ratioColorScale__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ratioColorScale */ "./js/ratioColorScale.js");
/* harmony import */ var _scrollbarWidget__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./scrollbarWidget */ "./js/scrollbarWidget.js");
/* harmony import */ var _sweepZoom__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./sweepZoom */ "./js/sweepZoom.js");
/* harmony import */ var _hicEvent__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./hicEvent */ "./js/hicEvent.js");
/* harmony import */ var _hicMath__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./hicMath */ "./js/hicMath.js");
/* harmony import */ var _hic__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./hic */ "./js/hic.js");
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

/*
 *  The MIT License (MIT)
 *
 * Copyright (c) 2016-2017 The Regents of the University of California
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
 * associated documentation files (the "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the
 * following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial
 * portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
 * BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,  FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 */

/**
 * @author Jim Robinson
 */








var DRAG_THRESHOLD = 2;
var DOUBLE_TAP_DIST_THRESHOLD = 20;
var DOUBLE_TAP_TIME_THRESHOLD = 300;

var ContactMatrixView = function ContactMatrixView(browser, $container) {
  var id;
  this.browser = browser;
  this.scrollbarWidget = new _scrollbarWidget__WEBPACK_IMPORTED_MODULE_3__["default"](browser);
  id = browser.id + '_' + 'viewport';
  this.$viewport = Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__["default"])("<div>", {
    id: id
  });
  $container.append(this.$viewport); // content canvas

  this.$canvas = Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__["default"])('<canvas>');
  this.$viewport.append(this.$canvas); // spinner

  this.$fa_spinner = Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__["default"])('<i class="fa fa-spinner fa-spin">');
  this.$fa_spinner.css("font-size", "48px");
  this.$fa_spinner.css("position", "absolute");
  this.$fa_spinner.css("left", "40%");
  this.$fa_spinner.css("top", "40%");
  this.$fa_spinner.css("display", "none");
  this.$viewport.append(this.$fa_spinner);
  this.spinnerCount = 0; // ruler sweeper widget surface

  this.sweepZoom = new _sweepZoom__WEBPACK_IMPORTED_MODULE_4__["default"](browser, this.$viewport);
  this.$viewport.append(this.sweepZoom.$rulerSweeper); // x - guide

  id = browser.id + '_' + 'x-guide';
  this.$x_guide = Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__["default"])("<div>", {
    id: id
  });
  this.$viewport.append(this.$x_guide); // y - guide

  id = browser.id + '_' + 'y-guide';
  this.$y_guide = Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__["default"])("<div>", {
    id: id
  });
  this.$viewport.append(this.$y_guide);
  $container.append(this.scrollbarWidget.$y_axis_scrollbar_container);
  this.displayMode = 'A';
  this.imageTileCache = {};
  this.imageTileCacheKeys = [];
  this.imageTileCacheLimit = 8; //8 is the minimum number required to support A/B cycling

  this.colorScaleThresholdCache = {}; // Set initial color scales.  These might be overriden / adjusted via parameters

  this.colorScale = new _colorScale__WEBPACK_IMPORTED_MODULE_1__["default"]({
    threshold: 2000,
    r: 255,
    g: 0,
    b: 0
  });
  this.ratioColorScale = new _ratioColorScale__WEBPACK_IMPORTED_MODULE_2__["default"](5); // this.diffColorScale = new RatioColorScale(100, false);

  this.browser.eventBus.subscribe("NormalizationChange", this);
  this.browser.eventBus.subscribe("TrackLoad2D", this);
  this.browser.eventBus.subscribe("TrackState2D", this);
  this.browser.eventBus.subscribe("MapLoad", this);
  this.browser.eventBus.subscribe("LocusChange", this);
  this.browser.eventBus.subscribe("ControlMapLoad", this);
  this.browser.eventBus.subscribe("ColorChange", this); //this.browser.eventBus.subscribe("DragStopped", this)

  this.drawsInProgress = new Set();
};

ContactMatrixView.prototype.setColorScale = function (colorScale) {
  switch (this.displayMode) {
    case 'AOB':
    case 'BOA':
      this.ratioColorScale = colorScale;
      break;

    case 'AMB':
      this.diffColorScale = colorScale;
      break;

    default:
      this.colorScale = colorScale;
  }

  this.colorScaleThresholdCache[colorScaleKey(this.browser.state, this.displayMode)] = colorScale.threshold;
};

ContactMatrixView.prototype.setColorScaleThreshold =
/*#__PURE__*/
function () {
  var _ref = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee(threshold) {
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            this.getColorScale().setThreshold(threshold);
            this.colorScaleThresholdCache[colorScaleKey(this.browser.state, this.displayMode)] = threshold;
            this.imageTileCache = {};
            _context.next = 5;
            return this.update();

          case 5:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function (_x) {
    return _ref.apply(this, arguments);
  };
}();

ContactMatrixView.prototype.getColorScale = function () {
  switch (this.displayMode) {
    case 'AOB':
    case 'BOA':
      return this.ratioColorScale;

    case 'AMB':
      return this.diffColorScale;

    default:
      return this.colorScale;
  }
};

ContactMatrixView.prototype.setDisplayMode =
/*#__PURE__*/
function () {
  var _ref2 = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee2(mode) {
    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            this.displayMode = mode;
            this.clearImageCaches();
            _context2.next = 4;
            return this.update();

          case 4:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, this);
  }));

  return function (_x2) {
    return _ref2.apply(this, arguments);
  };
}();

function colorScaleKey(state, displayMode) {
  return "" + state.chr1 + "_" + state.chr2 + "_" + state.zoom + "_" + state.normalization + "_" + displayMode;
}

ContactMatrixView.prototype.clearImageCaches = function () {
  this.imageTileCache = {};
  this.imageTileCacheKeys = [];
};

ContactMatrixView.prototype.getViewDimensions = function () {
  return {
    width: this.$viewport.width(),
    height: this.$viewport.height()
  };
};

ContactMatrixView.prototype.receiveEvent =
/*#__PURE__*/
function () {
  var _ref3 = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee3(event) {
    return regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            if (!("MapLoad" === event.type || "ControlMapLoad" === event.type)) {
              _context3.next = 6;
              break;
            }

            // Don't enable mouse actions until we have a dataset.
            if (!this.mouseHandlersEnabled) {
              addTouchHandlers.call(this, this.$viewport);
              addMouseHandlers.call(this, this.$viewport);
              this.mouseHandlersEnabled = true;
            }

            this.clearImageCaches();
            this.colorScaleThresholdCache = {};
            _context3.next = 9;
            break;

          case 6:
            if (!("LocusChange" === event.type || "DragStopped" === event.type)) {
              this.clearImageCaches();
            }

            _context3.next = 9;
            return this.update();

          case 9:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3, this);
  }));

  return function (_x3) {
    return _ref3.apply(this, arguments);
  };
}();

ContactMatrixView.prototype.update =
/*#__PURE__*/
_asyncToGenerator(
/*#__PURE__*/
regeneratorRuntime.mark(function _callee4() {
  return regeneratorRuntime.wrap(function _callee4$(_context4) {
    while (1) {
      switch (_context4.prev = _context4.next) {
        case 0:
          if (!this.disableUpdates) {
            _context4.next = 2;
            break;
          }

          return _context4.abrupt("return");

        case 2:
          _context4.next = 4;
          return this.repaint();

        case 4:
        case "end":
          return _context4.stop();
      }
    }
  }, _callee4, this);
}));
/**
 * Return a promise to load all neccessary data
 */

ContactMatrixView.prototype.repaint =
/*#__PURE__*/
_asyncToGenerator(
/*#__PURE__*/
regeneratorRuntime.mark(function _callee5() {
  var viewportWidth, viewportHeight, canvasWidth, canvasHeight, state, ds, dsControl, matrix, zd, zdControl, matrixControl, blockBinCount, pixelSizeInt, widthInBins, heightInBins, blockCol1, blockCol2, blockRow1, blockRow2, r, c, tile;
  return regeneratorRuntime.wrap(function _callee5$(_context5) {
    while (1) {
      switch (_context5.prev = _context5.next) {
        case 0:
          if (this.browser.dataset) {
            _context5.next = 2;
            break;
          }

          return _context5.abrupt("return");

        case 2:
          if (!this.ctx) {
            this.ctx = this.$canvas.get(0).getContext("2d");
          }

          viewportWidth = this.$viewport.width();
          viewportHeight = this.$viewport.height();
          canvasWidth = this.$canvas.width();
          canvasHeight = this.$canvas.height();

          if (canvasWidth !== viewportWidth || canvasHeight !== viewportHeight) {
            this.$canvas.width(viewportWidth);
            this.$canvas.height(viewportHeight);
            this.$canvas.attr('width', this.$viewport.width());
            this.$canvas.attr('height', this.$viewport.height());
          }

          state = this.browser.state;
          _context5.t0 = this.displayMode;
          _context5.next = _context5.t0 === 'A' ? 12 : _context5.t0 === 'B' ? 14 : _context5.t0 === 'AOB' ? 16 : _context5.t0 === 'AMB' ? 16 : _context5.t0 === 'BOA' ? 19 : 21;
          break;

        case 12:
          ds = this.browser.dataset;
          return _context5.abrupt("break", 21);

        case 14:
          ds = this.browser.controlDataset;
          return _context5.abrupt("break", 21);

        case 16:
          ds = this.browser.dataset;
          dsControl = this.browser.controlDataset;
          return _context5.abrupt("break", 21);

        case 19:
          ds = this.browser.controlDataset;
          dsControl = this.browser.dataset;

        case 21:
          _context5.next = 23;
          return ds.getMatrix(state.chr1, state.chr2);

        case 23:
          matrix = _context5.sent;
          zd = matrix.bpZoomData[state.zoom];

          if (!dsControl) {
            _context5.next = 30;
            break;
          }

          _context5.next = 28;
          return dsControl.getMatrix(state.chr1, state.chr2);

        case 28:
          matrixControl = _context5.sent;
          zdControl = matrixControl.bpZoomData[state.zoom];

        case 30:
          blockBinCount = zd.blockBinCount; // Dimension in bins of a block (width = height = blockBinCount)

          pixelSizeInt = Math.max(1, Math.floor(state.pixelSize));
          widthInBins = this.$viewport.width() / pixelSizeInt;
          heightInBins = this.$viewport.height() / pixelSizeInt;
          blockCol1 = Math.floor(state.x / blockBinCount);
          blockCol2 = Math.floor((state.x + widthInBins) / blockBinCount);
          blockRow1 = Math.floor(state.y / blockBinCount);
          blockRow2 = Math.floor((state.y + heightInBins) / blockBinCount);
          _context5.next = 40;
          return checkColorScale.call(this, ds, zd, blockRow1, blockRow2, blockCol1, blockCol2, state.normalization);

        case 40:
          r = blockRow1;

        case 41:
          if (!(r <= blockRow2)) {
            _context5.next = 54;
            break;
          }

          c = blockCol1;

        case 43:
          if (!(c <= blockCol2)) {
            _context5.next = 51;
            break;
          }

          _context5.next = 46;
          return this.getImageTile(ds, dsControl, zd, zdControl, r, c, state);

        case 46:
          tile = _context5.sent;
          this.paintTile(tile);

        case 48:
          c++;
          _context5.next = 43;
          break;

        case 51:
          r++;
          _context5.next = 41;
          break;

        case 54:
          // Record genomic extent of current canvas
          this.genomicExtent = {
            chr1: state.chr1,
            chr2: state.chr2,
            x: state.x * zd.zoom.binSize,
            y: state.y * zd.zoom.binSize,
            w: viewportWidth * zd.zoom.binSize / state.pixelSize,
            h: viewportHeight * zd.zoom.binSize / state.pixelSize
          };

        case 55:
        case "end":
          return _context5.stop();
      }
    }
  }, _callee5, this);
}));
/**
 * Returns a promise for an image tile
 *
 * @param zd
 * @param row
 * @param column
 * @param state
 * @returns {*}
 */

var inProgressCache = {};

function inProgressTile(imageSize) {
  var image = inProgressCache[imageSize];

  if (!image) {
    image = document.createElement('canvas');
    image.width = imageSize;
    image.height = imageSize;
    var ctx = image.getContext('2d');
    ctx.font = '24px sans-serif';
    ctx.fillStyle = 'rgb(230, 230, 230)';
    ctx.fillRect(0, 0, image.width, image.height);
    ctx.fillStyle = 'black';

    for (var i = 100; i < imageSize; i += 300) {
      for (var j = 100; j < imageSize; j += 300) {
        ctx.fillText('Loading...', i, j);
      }
    }

    inProgressCache[imageSize] = image;
  }

  return image;
}

ContactMatrixView.prototype.getImageTile =
/*#__PURE__*/
function () {
  var _ref6 = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee7(ds, dsControl, zd, zdControl, row, column, state) {
    var _this = this;

    var pixelSizeInt, useImageData, blockBinCount, key, imageSize, image, features, imageTile, _ret, setPixel, getNormalizedBlocks;

    return regeneratorRuntime.wrap(function _callee7$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            getNormalizedBlocks = function _ref8(ds, dsControl, zd, zdControl, blockNumber, normalization) {
              var promises = [];
              promises.push(ds.getNormalizedBlock(zd, blockNumber, normalization, this.browser.eventBus));

              if (zdControl) {
                promises.push(dsControl.getNormalizedBlock(zdControl, blockNumber, normalization, this.browser.eventBus));
              }

              return Promise.all(promises);
            };

            setPixel = function _ref7(imageData, x, y, r, g, b, a) {
              var index = (x + y * imageData.width) * 4;
              imageData.data[index + 0] = r;
              imageData.data[index + 1] = g;
              imageData.data[index + 2] = b;
              imageData.data[index + 3] = a;
            };

            pixelSizeInt = Math.max(1, Math.floor(state.pixelSize));
            useImageData = pixelSizeInt === 1;
            blockBinCount = zd.blockBinCount;
            key = "" + zd.chr1.name + "_" + zd.chr2.name + "_" + zd.zoom.binSize + "_" + zd.zoom.unit + "_" + row + "_" + column + "_" + pixelSizeInt + "_" + state.normalization + "_" + this.displayMode;

            if (!this.imageTileCache.hasOwnProperty(key)) {
              _context7.next = 10;
              break;
            }

            return _context7.abrupt("return", this.imageTileCache[key]);

          case 10:
            if (!this.drawsInProgress.has(key)) {
              _context7.next = 14;
              break;
            }

            //console.log("In progress")
            imageSize = Math.ceil(blockBinCount * pixelSizeInt);
            image = inProgressTile(imageSize);
            return _context7.abrupt("return", {
              row: row,
              column: column,
              blockBinCount: blockBinCount,
              image: image,
              inProgress: true // TODO return an image at a coarser resolution if avaliable

            });

          case 14:
            this.drawsInProgress.add(key);
            _context7.prev = 15;
            return _context7.delegateYield(
            /*#__PURE__*/
            regeneratorRuntime.mark(function _callee6() {
              var sameChr, blockColumnCount, widthInBins, transpose, blockNumber, block, controlBlock, averageCount, ctrlAverageCount, averageAcrossMapAndControl, image;
              return regeneratorRuntime.wrap(function _callee6$(_context6) {
                while (1) {
                  switch (_context6.prev = _context6.next) {
                    case 0:
                      _this.startSpinner();

                      sameChr = zd.chr1.index === zd.chr2.index;
                      blockColumnCount = zd.blockColumnCount;
                      widthInBins = zd.blockBinCount;
                      transpose = sameChr && row < column;

                      if (sameChr && row < column) {
                        blockNumber = column * blockColumnCount + row;
                      } else {
                        blockNumber = row * blockColumnCount + column;
                      } // Get blocks


                      _context6.next = 8;
                      return ds.getNormalizedBlock(zd, blockNumber, state.normalization, _this.browser.eventBus);

                    case 8:
                      block = _context6.sent;

                      if (!zdControl) {
                        _context6.next = 13;
                        break;
                      }

                      _context6.next = 12;
                      return dsControl.getNormalizedBlock(zdControl, blockNumber, state.normalization, _this.browser.eventBus);

                    case 12:
                      controlBlock = _context6.sent;

                    case 13:
                      averageCount = zd.averageCount;
                      ctrlAverageCount = zdControl ? zdControl.averageCount : 1;
                      averageAcrossMapAndControl = (averageCount + ctrlAverageCount) / 2;

                      if (block && block.records.length > 0) {
                        (function () {
                          var imageSize = Math.ceil(widthInBins * pixelSizeInt);
                          var blockNumber = block.blockNumber;
                          var row = Math.floor(blockNumber / blockColumnCount);
                          var col = blockNumber - row * blockColumnCount;
                          var x0 = blockBinCount * col;
                          var y0 = blockBinCount * row;
                          image = document.createElement('canvas');
                          image.width = imageSize;
                          image.height = imageSize;
                          var ctx = image.getContext('2d'); //ctx.clearRect(0, 0, image.width, image.height);

                          var controlRecords = {};

                          if ('AOB' === _this.displayMode || 'BOA' === _this.displayMode || 'AMB' === _this.displayMode) {
                            var _iteratorNormalCompletion = true;
                            var _didIteratorError = false;
                            var _iteratorError = undefined;

                            try {
                              for (var _iterator = controlBlock.records[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                                var record = _step.value;
                                controlRecords[record.getKey()] = record;
                              }
                            } catch (err) {
                              _didIteratorError = true;
                              _iteratorError = err;
                            } finally {
                              try {
                                if (!_iteratorNormalCompletion && _iterator.return != null) {
                                  _iterator.return();
                                }
                              } finally {
                                if (_didIteratorError) {
                                  throw _iteratorError;
                                }
                              }
                            }
                          }

                          var id;

                          if (useImageData) {
                            id = ctx.getImageData(0, 0, image.width, image.height);
                          }

                          for (var i = 0; i < block.records.length; i++) {
                            var rec = block.records[i];
                            var x = Math.floor((rec.bin1 - x0) * pixelSizeInt);
                            var y = Math.floor((rec.bin2 - y0) * pixelSizeInt);

                            if (transpose) {
                              var t = y;
                              y = x;
                              x = t;
                            }

                            var color = void 0;

                            switch (_this.displayMode) {
                              case 'AOB':
                              case 'BOA':
                                var _key = rec.getKey();

                                var controlRec = controlRecords[_key];

                                if (!controlRec) {
                                  continue; // Skip
                                }

                                var score = rec.counts / averageCount / (controlRec.counts / ctrlAverageCount);
                                color = _this.ratioColorScale.getColor(score);
                                break;

                              case 'AMB':
                                _key = rec.getKey();
                                controlRec = controlRecords[_key];

                                if (!controlRec) {
                                  continue; // Skip
                                }

                                score = averageAcrossMapAndControl * (rec.counts / averageCount - controlRec.counts / ctrlAverageCount);
                                color = _this.diffColorScale.getColor(score);
                                break;

                              default:
                                // Either 'A' or 'B'
                                color = _this.colorScale.getColor(rec.counts);
                            }

                            if (useImageData) {
                              // TODO -- verify that this bitblting is faster than fillRect
                              setPixel(id, x, y, color.red, color.green, color.blue, 255);

                              if (sameChr && row === col) {
                                setPixel(id, y, x, color.red, color.green, color.blue, 255);
                              }
                            } else {
                              ctx.fillStyle = color.rgb;
                              ctx.fillRect(x, y, pixelSizeInt, pixelSizeInt);

                              if (sameChr && row === col) {
                                ctx.fillRect(y, x, pixelSizeInt, pixelSizeInt);
                              }
                            }
                          }

                          if (useImageData) {
                            ctx.putImageData(id, 0, 0);
                          } //Draw 2D tracks


                          ctx.save();
                          ctx.lineWidth = 2;
                          var _iteratorNormalCompletion2 = true;
                          var _didIteratorError2 = false;
                          var _iteratorError2 = undefined;

                          try {
                            var _loop = function _loop() {
                              var track2D = _step2.value;

                              if (track2D.isVisible) {
                                features = track2D.getFeatures(zd.chr1.name, zd.chr2.name);

                                if (features) {
                                  features.forEach(function (f) {
                                    var x1 = Math.round((f.x1 / zd.zoom.binSize - x0) * pixelSizeInt);
                                    var x2 = Math.round((f.x2 / zd.zoom.binSize - x0) * pixelSizeInt);
                                    var y1 = Math.round((f.y1 / zd.zoom.binSize - y0) * pixelSizeInt);
                                    var y2 = Math.round((f.y2 / zd.zoom.binSize - y0) * pixelSizeInt);
                                    var w = x2 - x1;
                                    var h = y2 - y1;
                                    var t;

                                    if (transpose) {
                                      t = y1;
                                      y1 = x1;
                                      x1 = t;
                                      t = h;
                                      h = w;
                                      w = t;
                                    }

                                    var dim = Math.max(image.width, image.height);

                                    if (x2 > 0 && x1 < dim && y2 > 0 && y1 < dim) {
                                      ctx.strokeStyle = track2D.color ? track2D.color : f.color;
                                      ctx.strokeRect(x1, y1, w, h);

                                      if (sameChr && row === col) {
                                        ctx.strokeRect(y1, x1, h, w);
                                      }
                                    }
                                  });
                                }
                              }
                            };

                            for (var _iterator2 = _this.browser.tracks2D[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                              _loop();
                            }
                          } catch (err) {
                            _didIteratorError2 = true;
                            _iteratorError2 = err;
                          } finally {
                            try {
                              if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
                                _iterator2.return();
                              }
                            } finally {
                              if (_didIteratorError2) {
                                throw _iteratorError2;
                              }
                            }
                          }

                          ctx.restore(); // Uncomment to reveal tile boundaries for debugging.
                          // ctx.fillStyle = "rgb(255,255,255)";
                          // ctx.strokeRect(0, 0, image.width - 1, image.height - 1)
                        })();
                      } else {//console.log("No block for " + blockNumber);
                        }

                      imageTile = {
                        row: row,
                        column: column,
                        blockBinCount: blockBinCount,
                        image: image
                      };

                      if (_this.imageTileCacheLimit > 0) {
                        if (_this.imageTileCacheKeys.length > _this.imageTileCacheLimit) {
                          delete _this.imageTileCache[_this.imageTileCacheKeys[0]];

                          _this.imageTileCacheKeys.shift();
                        }

                        _this.imageTileCache[key] = imageTile;
                      }

                      _this.drawsInProgress.delete(key);

                      return _context6.abrupt("return", {
                        v: imageTile
                      });

                    case 21:
                    case "end":
                      return _context6.stop();
                  }
                }
              }, _callee6, this);
            })(), "t0", 17);

          case 17:
            _ret = _context7.t0;

            if (!(_typeof(_ret) === "object")) {
              _context7.next = 20;
              break;
            }

            return _context7.abrupt("return", _ret.v);

          case 20:
            _context7.prev = 20;
            //console.log("Finish load for " + key)
            this.stopSpinner();
            return _context7.finish(20);

          case 23:
          case "end":
            return _context7.stop();
        }
      }
    }, _callee7, this, [[15,, 20, 23]]);
  }));

  return function (_x4, _x5, _x6, _x7, _x8, _x9, _x10) {
    return _ref6.apply(this, arguments);
  };
}();

ContactMatrixView.prototype.zoomIn =
/*#__PURE__*/
_asyncToGenerator(
/*#__PURE__*/
regeneratorRuntime.mark(function _callee8() {
  var state, viewportWidth, viewportHeight, matrices, matrix, zd, newGenomicExtent, sx, sy, sWidth, sHeight, img, backCanvas, backCtx;
  return regeneratorRuntime.wrap(function _callee8$(_context8) {
    while (1) {
      switch (_context8.prev = _context8.next) {
        case 0:
          state = this.browser.state;
          viewportWidth = this.$viewport.width();
          viewportHeight = this.$viewport.height();
          _context8.next = 5;
          return getMatrices.call(this, state.chr1, state.chr2);

        case 5:
          matrices = _context8.sent;
          matrix = matrices[0];

          if (!matrix) {
            _context8.next = 26;
            break;
          }

          _context8.next = 10;
          return matrix.bpZoomData[state.zoom];

        case 10:
          zd = _context8.sent;
          newGenomicExtent = {
            x: state.x * zd.zoom.binSize,
            y: state.y * zd.zoom.binSize,
            w: viewportWidth * zd.zoom.binSize / state.pixelSize,
            h: viewportHeight * zd.zoom.binSize / state.pixelSize // Zoom out not supported

          };

          if (!(newGenomicExtent.w > this.genomicExtent.w)) {
            _context8.next = 14;
            break;
          }

          return _context8.abrupt("return");

        case 14:
          sx = (newGenomicExtent.x - this.genomicExtent.x) / this.genomicExtent.w * viewportWidth;
          sy = (newGenomicExtent.y - this.genomicExtent.y) / this.genomicExtent.w * viewportHeight;
          sWidth = newGenomicExtent.w / this.genomicExtent.w * viewportWidth;
          sHeight = newGenomicExtent.h / this.genomicExtent.h * viewportHeight;
          img = this.$canvas[0];
          backCanvas = document.createElement('canvas');
          backCanvas.width = img.width;
          backCanvas.height = img.height;
          backCtx = backCanvas.getContext('2d');
          backCtx.drawImage(img, sx, sy, sWidth, sHeight, 0, 0, viewportWidth, viewportHeight);
          this.ctx.clearRect(0, 0, viewportWidth, viewportHeight);
          this.ctx.drawImage(backCanvas, 0, 0);

        case 26:
        case "end":
          return _context8.stop();
      }
    }
  }, _callee8, this);
}));

ContactMatrixView.prototype.paintTile = function (imageTile) {
  var state = this.browser.state;
  var viewportWidth = this.$viewport.width();
  var viewportHeight = this.$viewport.height();
  var image = imageTile.image,
      pixelSizeInt = Math.max(1, Math.floor(state.pixelSize));

  if (image != null) {
    var row = imageTile.row;
    var col = imageTile.column;
    var x0 = imageTile.blockBinCount * col;
    var y0 = imageTile.blockBinCount * row;
    var offsetX = (x0 - state.x) * state.pixelSize;
    var offsetY = (y0 - state.y) * state.pixelSize;
    var scale = state.pixelSize / pixelSizeInt;
    var scaledWidth = image.width * scale;
    var scaledHeight = image.height * scale;

    if (offsetX <= viewportWidth && offsetX + scaledWidth >= 0 && offsetY <= viewportHeight && offsetY + scaledHeight >= 0) {
      this.ctx.clearRect(offsetX, offsetY, scaledWidth, scaledHeight);

      if (scale === 1) {
        this.ctx.drawImage(image, offsetX, offsetY);
      } else {
        this.ctx.drawImage(image, offsetX, offsetY, scaledWidth, scaledHeight);
      }
    }
  }
};

function getMatrices(chr1, chr2) {
  var promises = [];

  if ('B' === this.displayMode && this.browser.controlDataset) {
    promises.push(this.browser.controlDataset.getMatrix(chr1, chr2));
  } else {
    promises.push(this.browser.dataset.getMatrix(chr1, chr2));

    if (this.displayMode && 'A' !== this.displayMode && this.browser.controlDataset) {
      promises.push(this.browser.controlDataset.getMatrix(chr1, chr2));
    }
  }

  return Promise.all(promises);
}
/**
 * Return a promise to adjust the color scale, if needed.  This function might need to load the contact
 * data to computer scale.
 *
 * @param zd
 * @param row1
 * @param row2
 * @param col1
 * @param col2
 * @param normalization
 * @returns {*}
 */


function checkColorScale(_x11, _x12, _x13, _x14, _x15, _x16, _x17) {
  return _checkColorScale.apply(this, arguments);
}

function _checkColorScale() {
  _checkColorScale = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee9(ds, zd, row1, row2, col1, col2, normalization) {
    var colorKey, changed, promises, sameChr, blockNumber, row, column, blocks, s;
    return regeneratorRuntime.wrap(function _callee9$(_context9) {
      while (1) {
        switch (_context9.prev = _context9.next) {
          case 0:
            colorKey = colorScaleKey(this.browser.state, this.displayMode); // This doesn't feel right, state should be an argument

            if (!('AOB' === this.displayMode || 'BOA' === this.displayMode)) {
              _context9.next = 3;
              break;
            }

            return _context9.abrupt("return", this.ratioColorScale);

          case 3:
            if (!this.colorScaleThresholdCache[colorKey]) {
              _context9.next = 10;
              break;
            }

            changed = this.colorScale.threshold !== this.colorScaleThresholdCache[colorKey];
            this.colorScale.setThreshold(this.colorScaleThresholdCache[colorKey]);

            if (changed) {
              this.browser.eventBus.post(Object(_hicEvent__WEBPACK_IMPORTED_MODULE_5__["default"])("ColorScale", this.colorScale));
            }

            return _context9.abrupt("return", this.colorScale);

          case 10:
            promises = [];
            sameChr = zd.chr1.index === zd.chr2.index;

            for (row = row1; row <= row2; row++) {
              for (column = col1; column <= col2; column++) {
                if (sameChr && row < column) {
                  blockNumber = column * zd.blockColumnCount + row;
                } else {
                  blockNumber = row * zd.blockColumnCount + column;
                }

                promises.push(ds.getNormalizedBlock(zd, blockNumber, normalization, this.browser.eventBus));
              }
            }

            _context9.prev = 13;
            this.startSpinner();
            _context9.next = 17;
            return Promise.all(promises);

          case 17:
            blocks = _context9.sent;
            this.stopSpinner();
            s = computePercentile(blocks, 95);

            if (!isNaN(s)) {
              // Can return NaN if all blocks are empty
              if (0 === zd.chr1.index) s *= 4; // Heuristic for whole genome view

              this.colorScale = new _colorScale__WEBPACK_IMPORTED_MODULE_1__["default"](this.colorScale);
              this.colorScale.setThreshold(s);
              this.computeColorScale = false;
              this.browser.eventBus.post(Object(_hicEvent__WEBPACK_IMPORTED_MODULE_5__["default"])("ColorScale", this.colorScale));
            }

            this.colorScaleThresholdCache[colorKey] = s;
            return _context9.abrupt("return", this.colorScale);

          case 23:
            _context9.prev = 23;
            this.stopSpinner();
            return _context9.finish(23);

          case 26:
          case "end":
            return _context9.stop();
        }
      }
    }, _callee9, this, [[13,, 23, 26]]);
  }));
  return _checkColorScale.apply(this, arguments);
}

function computePercentile(blockArray, p) {
  var array = [];
  blockArray.forEach(function (block) {
    if (block) {
      for (var i = 0; i < block.records.length; i++) {
        array.push(block.records[i].counts);
      }
    }
  });
  return _hicMath__WEBPACK_IMPORTED_MODULE_6__["default"].percentile(array, p);
}

ContactMatrixView.prototype.startSpinner = function () {
  if (true === this.browser.isLoadingHICFile && this.browser.$user_interaction_shield) {
    this.browser.$user_interaction_shield.show();
  }

  this.$fa_spinner.css("display", "inline-block");
  this.spinnerCount++;
};

ContactMatrixView.prototype.stopSpinner = function () {
  this.spinnerCount--;

  if (0 === this.spinnerCount) {
    this.$fa_spinner.css("display", "none");
  }

  this.spinnerCount = Math.max(0, this.spinnerCount); // This should not be neccessary
};

function addMouseHandlers($viewport) {
  var self = this,
      isMouseDown = false,
      isDragging = false,
      isSweepZooming = false,
      mouseDown,
      mouseLast,
      mouseOver,
      lastWheelTime;
  this.isDragging = false;

  if (!this.browser.isMobile) {
    $viewport.dblclick(function (e) {
      e.preventDefault();
      e.stopPropagation();
      var mouseX = e.offsetX || e.layerX,
          mouseY = e.offsetY || e.layerX;
      self.browser.zoomAndCenter(1, mouseX, mouseY);
    });
    $viewport.on('mouseover', function (e) {
      mouseOver = true;
    });
    $viewport.on('mouseout', function (e) {
      mouseOver = undefined;
    });
    $viewport.on('mousedown', function (e) {
      var eFixed;
      e.preventDefault();
      e.stopPropagation();

      if (self.browser.$menu.is(':visible')) {
        self.browser.hideMenu();
      }

      mouseLast = {
        x: e.offsetX,
        y: e.offsetY
      };
      mouseDown = {
        x: e.offsetX,
        y: e.offsetY
      };
      isSweepZooming = true === e.altKey;

      if (isSweepZooming) {
        eFixed = _vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__["default"].event.fix(e);
        self.sweepZoom.initialize({
          x: eFixed.pageX,
          y: eFixed.pageY
        });
      }

      isMouseDown = true;
    });
    $viewport.on('mousemove', function (e) {
      var coords, eFixed, xy;
      e.preventDefault();
      e.stopPropagation();
      coords = {
        x: e.offsetX,
        y: e.offsetY
      }; // Sets pageX and pageY for browsers that don't support them

      eFixed = _vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__["default"].event.fix(e);
      xy = {
        x: eFixed.pageX - $viewport.offset().left,
        y: eFixed.pageY - $viewport.offset().top
      };
      self.browser.eventBus.post(Object(_hicEvent__WEBPACK_IMPORTED_MODULE_5__["default"])("UpdateContactMapMousePosition", xy, false));

      if (true === self.willShowCrosshairs) {
        self.browser.updateCrosshairs(xy);
        self.browser.showCrosshairs();
      }

      if (isMouseDown) {
        // Possibly dragging
        if (isSweepZooming) {
          self.sweepZoom.update({
            x: eFixed.pageX,
            y: eFixed.pageY
          });
        } else if (mouseDown.x && Math.abs(coords.x - mouseDown.x) > DRAG_THRESHOLD) {
          self.isDragging = true;
          var dx = mouseLast.x - coords.x;
          var dy = mouseLast.y - coords.y; // If matrix data is updating shift current map image while we wait

          if (self.updating) {
            shiftCurrentImage(self, -dx, -dy);
          }

          self.browser.shiftPixels(dx, dy);
        }

        mouseLast = coords;
      }
    }); //, 10));

    $viewport.on('mouseup', panMouseUpOrMouseOut);
    $viewport.on('mouseleave', function () {
      self.browser.layoutController.xAxisRuler.unhighlightWholeChromosome();
      self.browser.layoutController.yAxisRuler.unhighlightWholeChromosome();
      panMouseUpOrMouseOut();
    }); // Mousewheel events -- ie exposes event only via addEventListener, no onwheel attribute
    // NOte from spec -- trackpads commonly map pinch to mousewheel + ctrl

    $viewport[0].addEventListener("wheel", mouseWheelHandler, 250, false); // document level events

    Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__["default"])(document).on('keydown.contact_matrix_view', function (e) {
      if (undefined === self.willShowCrosshairs && true === mouseOver && true === e.shiftKey) {
        self.willShowCrosshairs = true;
      }
    });
    Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__["default"])(document).on('keyup.contact_matrix_view', function (e) {
      self.browser.hideCrosshairs();
      self.willShowCrosshairs = undefined;
    }); // for sweep-zoom allow user to sweep beyond viewport extent
    // sweep area clamps since viewport mouse handlers stop firing
    // when the viewport boundary is crossed.

    Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__["default"])(document).on('mouseup.contact_matrix_view', function (e) {
      e.preventDefault();
      e.stopPropagation();

      if (isSweepZooming) {
        isSweepZooming = false;
        self.sweepZoom.commit();
      }
    });
  }

  function panMouseUpOrMouseOut(e) {
    if (true === self.isDragging) {
      self.isDragging = false;
      self.browser.eventBus.post(Object(_hicEvent__WEBPACK_IMPORTED_MODULE_5__["default"])("DragStopped"));
    }

    isMouseDown = false;
    mouseDown = mouseLast = undefined;
  }

  function mouseWheelHandler(e) {
    e.preventDefault();
    e.stopPropagation();
    var t = Date.now();

    if (lastWheelTime === undefined || t - lastWheelTime > 1000) {
      // cross-browser wheel delta  -- Firefox returns a "detail" object that is opposite in sign to wheelDelta
      var direction = e.deltaY < 0 ? 1 : -1,
          coords = igv.translateMouseCoordinates(e, $viewport),
          x = coords.x,
          y = coords.y;
      self.browser.wheelClickZoom(direction, x, y);
      lastWheelTime = t;
    }
  }

  function shiftCurrentImage(self, dx, dy) {
    var canvasWidth = self.$canvas.width(),
        canvasHeight = self.$canvas.height(),
        imageData;
    imageData = self.ctx.getImageData(0, 0, canvasWidth, canvasHeight);
    self.ctx.clearRect(0, 0, canvasWidth, canvasHeight);
    self.ctx.putImageData(imageData, dx, dy);
  }
}
/**
 * Add touch handlers.  Touches are mapped to one of the following application level events
 *  - double tap, equivalent to double click
 *  - move
 *  - pinch
 *
 * @param $viewport
 */


function addTouchHandlers($viewport) {
  var self = this,
      lastTouch,
      pinch,
      viewport = $viewport[0];
  /**
   * Touch start -- 3 possibilities
   *   (1) beginning of a drag (pan)
   *   (2) first tap of a double tap
   *   (3) beginning of a pinch
   */

  viewport.ontouchstart = function (ev) {
    ev.preventDefault();
    ev.stopPropagation();
    var touchCoords = translateTouchCoordinates(ev.targetTouches[0], viewport),
        offsetX = touchCoords.x,
        offsetY = touchCoords.y,
        count = ev.targetTouches.length,
        timeStamp = ev.timeStamp || Date.now(),
        resolved = false,
        dx,
        dy,
        dist,
        direction;

    if (count === 2) {
      touchCoords = translateTouchCoordinates(ev.targetTouches[0], viewport);
      offsetX = (offsetX + touchCoords.x) / 2;
      offsetY = (offsetY + touchCoords.y) / 2;
    } // NOTE: If the user makes simultaneous touches, the browser may fire a
    // separate touchstart event for each touch point. Thus if there are
    // two simultaneous touches, the first touchstart event will have
    // targetTouches length of one and the second event will have a length
    // of two.  In this case replace previous touch with this one and return


    if (lastTouch && timeStamp - lastTouch.timeStamp < DOUBLE_TAP_TIME_THRESHOLD && ev.targetTouches.length > 1 && lastTouch.count === 1) {
      lastTouch = {
        x: offsetX,
        y: offsetY,
        timeStamp: timeStamp,
        count: ev.targetTouches.length
      };
      return;
    }

    if (lastTouch && timeStamp - lastTouch.timeStamp < DOUBLE_TAP_TIME_THRESHOLD) {
      direction = lastTouch.count === 2 || count === 2 ? -1 : 1;
      dx = lastTouch.x - offsetX;
      dy = lastTouch.y - offsetY;
      dist = Math.sqrt(dx * dx + dy * dy);

      if (dist < DOUBLE_TAP_DIST_THRESHOLD) {
        self.browser.zoomAndCenter(direction, offsetX, offsetY);
        lastTouch = undefined;
        resolved = true;
      }
    }

    if (!resolved) {
      lastTouch = {
        x: offsetX,
        y: offsetY,
        timeStamp: timeStamp,
        count: ev.targetTouches.length
      };
    }
  };

  viewport.ontouchmove = _hic__WEBPACK_IMPORTED_MODULE_7__["throttle"](function (ev) {
    var touchCoords1, touchCoords2, t;
    ev.preventDefault();
    ev.stopPropagation();

    if (ev.targetTouches.length === 2) {
      // Update pinch  (assuming 2 finger movement is a pinch)
      touchCoords1 = translateTouchCoordinates(ev.targetTouches[0], viewport);
      touchCoords2 = translateTouchCoordinates(ev.targetTouches[1], viewport);
      t = {
        x1: touchCoords1.x,
        y1: touchCoords1.y,
        x2: touchCoords2.x,
        y2: touchCoords2.y
      };

      if (pinch) {
        pinch.end = t;
      } else {
        pinch = {
          start: t
        };
      }
    } else {
      // Assuming 1 finger movement is a drag
      var touchCoords = translateTouchCoordinates(ev.targetTouches[0], viewport),
          offsetX = touchCoords.x,
          offsetY = touchCoords.y;

      if (lastTouch) {
        var dx = lastTouch.x - offsetX,
            dy = lastTouch.y - offsetY;

        if (!isNaN(dx) && !isNaN(dy)) {
          self.isDragging = true;
          self.browser.shiftPixels(lastTouch.x - offsetX, lastTouch.y - offsetY);
        }
      }

      lastTouch = {
        x: offsetX,
        y: offsetY,
        timeStamp: ev.timeStamp || Date.now(),
        count: ev.targetTouches.length
      };
    }
  }, 50);

  viewport.ontouchend = function (ev) {
    ev.preventDefault();
    ev.stopPropagation();

    if (pinch && pinch.end !== undefined) {
      var startT = pinch.start,
          endT = pinch.end,
          dxStart = startT.x2 - startT.x1,
          dyStart = startT.y2 - startT.y1,
          dxEnd = endT.x2 - endT.x1,
          dyEnd = endT.y2 - endT.y1,
          distStart = Math.sqrt(dxStart * dxStart + dyStart * dyStart),
          distEnd = Math.sqrt(dxEnd * dxEnd + dyEnd * dyEnd),
          scale = distEnd / distStart,
          deltaX = (endT.x1 + endT.x2) / 2 - (startT.x1 + startT.x2) / 2,
          deltaY = (endT.y1 + endT.y2) / 2 - (startT.y1 + startT.y2) / 2,
          anchorPx = (startT.x1 + startT.x2) / 2,
          anchorPy = (startT.y1 + startT.y2) / 2;

      if (scale < 0.8 || scale > 1.2) {
        lastTouch = undefined;
        self.browser.pinchZoom(anchorPx, anchorPy, scale);
      }
    } else if (self.isDragging) {
      self.isDragging = false;
      self.browser.eventBus.post(Object(_hicEvent__WEBPACK_IMPORTED_MODULE_5__["default"])("DragStopped"));
    } // a touch end always ends a pinch


    pinch = undefined;
  };

  function translateTouchCoordinates(e, target) {
    var $target = Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__["default"])(target),
        eFixed,
        posx,
        posy;
    posx = e.pageX - $target.offset().left;
    posy = e.pageY - $target.offset().top;
    return {
      x: posx,
      y: posy
    };
  }
}

/* harmony default export */ __webpack_exports__["default"] = (ContactMatrixView);

/***/ }),

/***/ "./js/controlMapWidget.js":
/*!********************************!*\
  !*** ./js/controlMapWidget.js ***!
  \********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../vendor/jquery-1.12.4 */ "./vendor/jquery-1.12.4.js");
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

/*
 *  The MIT License (MIT)
 *
 * Copyright (c) 2016-2017 The Regents of the University of California
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
 * associated documentation files (the "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the
 * following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial
 * portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
 * BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,  FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 */

/**
 * Created by dat on 3/21/17.
 */


var ControlMapWidget = function ControlMapWidget(browser, $parent) {
  var self = this;
  this.browser = browser; // container

  this.$container = Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__["default"])('<div class="hic-control-map-selector-container">');
  this.$container.hide();
  $parent.append(this.$container); // select

  this.$select = Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__["default"])('<select>');
  this.$select.attr('name', 'control_map_selector');
  this.$container.append(this.$select); // a-b toggle icon

  var $toggle_container = Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__["default"])('<div>');
  this.$container.append($toggle_container); // cycle button

  var $cycle_container = Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__["default"])('<div>');
  this.$container.append($cycle_container);
  this.controlMapHash = new ControlMapHash(browser, this.$select, $toggle_container, $cycle_container, toggle_arrows_up(), toggle_arrows_down());
  browser.eventBus.subscribe("ControlMapLoad", function (event) {
    self.controlMapHash.updateOptions(browser.getDisplayMode());
    self.$container.show();
  });
  browser.eventBus.subscribe("MapLoad", function (event) {
    if (!browser.controlDataset) {
      self.$container.hide();
    }
  });
  browser.eventBus.subscribe("DisplayMode", function (event) {
    self.controlMapHash.updateOptions(event.data);
  });
};

ControlMapWidget.prototype.toggleDisplayMode = function () {
  this.controlMapHash.toggleDisplayMode();
};

ControlMapWidget.prototype.toggleDisplayModeCycle = function () {
  this.controlMapHash.toggleDisplayModeCycle();
};

ControlMapWidget.prototype.getDisplayModeCycle = function () {
  return this.controlMapHash.cycleID;
};

var ControlMapHash = function ControlMapHash(browser, $select, $toggle, $cycle, $img_a, $img_b) {
  var self = this;
  this.browser = browser;
  this.$select = $select;
  this.$toggle = $toggle;
  this.$cycle = $cycle; // a arrow

  this.$img_a = $img_a;
  this.$toggle.append(this.$img_a); // b arrow

  this.$img_b = $img_b;
  this.$toggle.append(this.$img_b);
  var A = {
    title: 'A',
    value: 'A',
    other: 'B',
    $hidden: $img_b,
    $shown: $img_a
  };
  var B = {
    title: 'B',
    value: 'B',
    other: 'A',
    $hidden: $img_a,
    $shown: $img_b
  };
  var AOB = {
    title: 'A/B',
    value: 'AOB',
    other: 'BOA',
    $hidden: $img_b,
    $shown: $img_a
  };
  var BOA = {
    title: 'B/A',
    value: 'BOA',
    other: 'AOB',
    $hidden: $img_a,
    $shown: $img_b
  };
  this.hash = {
    'A': A,
    'B': B,
    'AOB': AOB,
    'BOA': BOA
  };
  this.$select.on('change', function (e) {
    var value;
    self.disableDisplayModeCycle();
    value = Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__["default"])(this).val();
    self.setDisplayMode(value);
  });
  this.$toggle.on('click', function (e) {
    self.disableDisplayModeCycle();
    self.toggleDisplayMode();
  }); // cycle outline

  this.$cycle_outline = cycle_outline();
  $cycle.append(this.$cycle_outline); // cycle solid

  this.$cycle_solid = cycle_solid();
  $cycle.append(this.$cycle_solid);
  this.$cycle_solid.hide();
  $cycle.on('click', function () {
    self.toggleDisplayModeCycle();
  });
  $cycle.hide();
};

ControlMapHash.prototype.disableDisplayModeCycle = function () {
  if (this.cycleID) {
    clearTimeout(this.cycleID);
    this.cycleID = undefined;
    this.$cycle_solid.hide();
    this.$cycle_outline.show();
  }
};

ControlMapHash.prototype.toggleDisplayModeCycle = function () {
  var self = this;

  if (this.cycleID) {
    this.disableDisplayModeCycle();
  } else {
    doToggle();
    this.$cycle_solid.show();
    this.$cycle_outline.hide();
  }

  function doToggle() {
    self.cycleID = setTimeout(
    /*#__PURE__*/
    _asyncToGenerator(
    /*#__PURE__*/
    regeneratorRuntime.mark(function _callee() {
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return self.toggleDisplayMode();

            case 2:
              doToggle();

            case 3:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    })), 2500);
  }
};

ControlMapHash.prototype.toggleDisplayMode =
/*#__PURE__*/
_asyncToGenerator(
/*#__PURE__*/
regeneratorRuntime.mark(function _callee2() {
  var displayModeOld, displayModeNew, str;
  return regeneratorRuntime.wrap(function _callee2$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          displayModeOld = this.browser.getDisplayMode(); // render new display mode

          displayModeNew = this.hash[displayModeOld].other;
          _context2.next = 4;
          return this.browser.setDisplayMode(displayModeNew);

        case 4:
          // update exchange icon
          this.hash[displayModeNew].$hidden.hide();
          this.hash[displayModeNew].$shown.show(); // update select element

          str = 'option[value=' + displayModeNew + ']';
          this.$select.find(str).prop('selected', true);

        case 8:
        case "end":
          return _context2.stop();
      }
    }
  }, _callee2, this);
}));

ControlMapHash.prototype.setDisplayMode = function (displayMode) {
  setDisplayModeHelper.call(this, displayMode);
  this.browser.setDisplayMode(displayMode);
};

ControlMapHash.prototype.updateOptions = function (displayMode) {
  var self = this;
  this.$img_a.hide();
  this.$img_b.hide();
  this.$select.empty();
  Object.keys(this.hash).forEach(function (key) {
    var item, option;
    item = self.hash[key];
    option = Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__["default"])('<option>').attr('title', item.title).attr('value', item.value).text(item.title);

    if (displayMode === item.value) {
      option.attr('selected', true);
      item.$shown.show();
      setDisplayModeHelper.call(self, displayMode);
    }

    self.$select.append(option);
  });
};

function setDisplayModeHelper(displayMode) {
  this.hash[displayMode].$hidden.hide();
  this.hash[displayMode].$shown.show();
  this.$cycle.show();
  this.$toggle.show(); // if ('A' === displayMode || 'B' === displayMode) {
  //     this.$cycle.show();
  //     this.$toggle.show();
  // } else {
  //     this.$cycle.hide();
  //     this.$toggle.hide();
  // }
}

function toggle_arrows_up() {
  var str, a;
  str = '<svg width="34px" height="34px" viewBox="0 0 34 34" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">\n' + '    <!-- Generator: Sketch 51 (57462) - http://www.bohemiancoding.com/sketch -->\n' + '    <title>Toggle Maps</title>\n' + '    <desc>Created with Sketch.</desc>\n' + '    <defs></defs>\n' + '    <g id="Page-1" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">\n' + '        <g id="Group">\n' + '            <rect id="Rectangle" stroke="#A6A6A6" stroke-width="1.25201381" fill="#F8F8F8" x="0.626006904" y="0.626006904" width="32.7479862" height="32.7479862" rx="3.91254315"></rect>\n' + '            <g id="arrows" transform="translate(6.533947, 7.003452)" fill-rule="nonzero" stroke="#5F5F5F" stroke-width="0.626006904">\n' + '                <path d="M25.9411017,8.76431329 L11.8559464,8.76431329 L11.8559464,6.88629258 C11.8559464,6.05237313 10.8440845,5.63114873 10.2529383,6.22229488 L7.12290378,9.3523294 C6.75622024,9.71905207 6.75622024,10.3136021 7.12290378,10.6802857 L10.2529383,13.8103202 C10.8409153,14.3982581 11.8559464,13.9850935 11.8559464,13.1463616 L11.8559464,11.2683409 L25.9411017,11.2683409 C26.4597093,11.2683409 26.8801121,10.8479381 26.8801121,10.3293306 L26.8801121,9.70332365 C26.8801121,9.18471605 26.4597093,8.76431329 25.9411017,8.76431329 Z" id="down-arrow" fill="#F8F8F8" transform="translate(16.864002, 10.016110) rotate(-90.000000) translate(-16.864002, -10.016110) "></path>\n' + '                <path d="M13.1470856,8.76431329 L-0.938069748,8.76431329 L-0.938069748,6.88629258 C-0.938069748,6.05237313 -1.94993166,5.63114873 -2.5410778,6.22229488 L-5.67111233,9.3523294 C-6.03779587,9.71905207 -6.03779587,10.3136021 -5.67111233,10.6802857 L-2.5410778,13.8103202 C-1.95310082,14.3982581 -0.938069748,13.9850935 -0.938069748,13.1463616 L-0.938069748,11.2683409 L13.1470856,11.2683409 C13.6656932,11.2683409 14.086096,10.8479381 14.086096,10.3293306 L14.086096,9.70332365 C14.086096,9.18471605 13.6656932,8.76431329 13.1470856,8.76431329 Z" id="up-arrow" fill="#5F5F5F" transform="translate(4.069985, 10.016110) scale(1, -1) rotate(-90.000000) translate(-4.069985, -10.016110) "></path>\n' + '            </g>\n' + '        </g>\n' + '    </g>\n' + '</svg>';
  a = str.split('\n').join(' ');
  return Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__["default"])(a);
}

function toggle_arrows_down() {
  var str, b;
  str = '<svg width="34px" height="34px" viewBox="0 0 34 34" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">\n' + '    <!-- Generator: Sketch 51 (57462) - http://www.bohemiancoding.com/sketch -->\n' + '    <title>Toggle Maps</title>\n' + '    <desc>Created with Sketch.</desc>\n' + '    <defs></defs>\n' + '    <g id="Page-1" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">\n' + '        <g id="Group">\n' + '            <rect id="Rectangle" stroke="#A6A6A6" stroke-width="1.25201381" fill="#F8F8F8" x="0.626006904" y="0.626006904" width="32.7479862" height="32.7479862" rx="3.91254315"></rect>\n' + '            <g id="arrows" transform="translate(6.533947, 7.003452)" fill-rule="nonzero" stroke="#5F5F5F" stroke-width="0.626006904">\n' + '                <path d="M25.9411017,8.76431329 L11.8559464,8.76431329 L11.8559464,6.88629258 C11.8559464,6.05237313 10.8440845,5.63114873 10.2529383,6.22229488 L7.12290378,9.3523294 C6.75622024,9.71905207 6.75622024,10.3136021 7.12290378,10.6802857 L10.2529383,13.8103202 C10.8409153,14.3982581 11.8559464,13.9850935 11.8559464,13.1463616 L11.8559464,11.2683409 L25.9411017,11.2683409 C26.4597093,11.2683409 26.8801121,10.8479381 26.8801121,10.3293306 L26.8801121,9.70332365 C26.8801121,9.18471605 26.4597093,8.76431329 25.9411017,8.76431329 Z" id="down-arrow" fill="#5F5F5F" transform="translate(16.864002, 10.016110) rotate(-90.000000) translate(-16.864002, -10.016110) "></path>\n' + '                <path d="M13.1470856,8.76431329 L-0.938069748,8.76431329 L-0.938069748,6.88629258 C-0.938069748,6.05237313 -1.94993166,5.63114873 -2.5410778,6.22229488 L-5.67111233,9.3523294 C-6.03779587,9.71905207 -6.03779587,10.3136021 -5.67111233,10.6802857 L-2.5410778,13.8103202 C-1.95310082,14.3982581 -0.938069748,13.9850935 -0.938069748,13.1463616 L-0.938069748,11.2683409 L13.1470856,11.2683409 C13.6656932,11.2683409 14.086096,10.8479381 14.086096,10.3293306 L14.086096,9.70332365 C14.086096,9.18471605 13.6656932,8.76431329 13.1470856,8.76431329 Z" id="up-arrow" fill="#F8F8F8" transform="translate(4.069985, 10.016110) scale(1, -1) rotate(-90.000000) translate(-4.069985, -10.016110) "></path>\n' + '            </g>\n' + '        </g>\n' + '    </g>\n' + '</svg>';
  b = str.split('\n').join(' ');
  return Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__["default"])(b);
}

function cycle_outline() {
  var str, b;
  str = '<svg width="34px" height="34px" viewBox="0 0 34 34" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">\n' + '    <!-- Generator: Sketch 51 (57462) - http://www.bohemiancoding.com/sketch -->\n' + '    <title>Cycle Maps</title>\n' + '    <desc>Created with Sketch.</desc>\n' + '    <defs></defs>\n' + '    <g id="Page-1" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">\n' + '        <g id="Group" fill="#F8F8F8">\n' + '            <rect id="Rectangle" stroke="#A6A6A6" stroke-width="1.25201381" x="0.626006904" y="0.626006904" width="32.7479862" height="32.7479862" rx="3.91254315"></rect>\n' + '            <g id="circle-notch-group" transform="translate(5.947066, 6.103567)" fill-rule="nonzero" stroke="#5F5F5F" stroke-width="0.75">\n' + '                <path d="M12.5012159,1.07356655 L12.5012159,1.81734411 C12.5012159,2.29971235 12.8262916,2.71738683 13.2908449,2.84717621 C16.7518005,3.81392183 19.2875784,6.98762275 19.2875784,10.7595067 C19.2875784,15.2996349 15.6133435,18.9745898 11.072508,18.9745898 C6.53238683,18.9745898 2.85743758,15.3003493 2.85743758,10.7595067 C2.85743758,6.98815851 5.39276905,3.81401113 8.85408182,2.84717621 C9.31872442,2.71738683 9.64380011,2.29962306 9.64380011,1.81721016 L9.64380011,1.07392373 C9.64380011,0.372561009 8.98150471,-0.138381443 8.30233269,0.0365908983 C3.5094195,1.27117502 -0.0270343765,5.6342771 0.00015572077,10.8189768 C0.0323016485,16.9379636 4.97728293,21.8448684 11.0963496,21.8319654 C17.2005487,21.819107 22.1449942,16.8667067 22.1449942,10.7595067 C22.1449942,5.5968181 18.611621,1.2595221 13.831209,0.0336441837 C13.1565464,-0.139363681 12.5012159,0.377070376 12.5012159,1.07356655 Z" id="circle-notch---solid"></path>\n' + '            </g>\n' + '        </g>\n' + '    </g>\n' + '</svg>';
  b = str.split('\n').join(' ');
  return Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__["default"])(b);
}

function cycle_solid() {
  var str, b;
  str = '<svg width="34px" height="34px" viewBox="0 0 34 34" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">\n' + '    <!-- Generator: Sketch 51 (57462) - http://www.bohemiancoding.com/sketch -->\n' + '    <title>Cycle Maps</title>\n' + '    <desc>Created with Sketch.</desc>\n' + '    <defs></defs>\n' + '    <g id="Page-1" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">\n' + '        <g id="Group">\n' + '            <rect id="Rectangle" stroke="#A6A6A6" stroke-width="1.25201381" fill="#F8F8F8" x="0.626006904" y="0.626006904" width="32.7479862" height="32.7479862" rx="3.91254315"></rect>\n' + '            <g id="circle-notch-group" transform="translate(5.947066, 6.103567)" fill="#5F5F5F" fill-rule="nonzero">\n' + '                <path d="M12.5012159,1.07356655 L12.5012159,1.81734411 C12.5012159,2.29971235 12.8262916,2.71738683 13.2908449,2.84717621 C16.7518005,3.81392183 19.2875784,6.98762275 19.2875784,10.7595067 C19.2875784,15.2996349 15.6133435,18.9745898 11.072508,18.9745898 C6.53238683,18.9745898 2.85743758,15.3003493 2.85743758,10.7595067 C2.85743758,6.98815851 5.39276905,3.81401113 8.85408182,2.84717621 C9.31872442,2.71738683 9.64380011,2.29962306 9.64380011,1.81721016 L9.64380011,1.07392373 C9.64380011,0.372561009 8.98150471,-0.138381443 8.30233269,0.0365908983 C3.5094195,1.27117502 -0.0270343765,5.6342771 0.00015572077,10.8189768 C0.0323016485,16.9379636 4.97728293,21.8448684 11.0963496,21.8319654 C17.2005487,21.819107 22.1449942,16.8667067 22.1449942,10.7595067 C22.1449942,5.5968181 18.611621,1.2595221 13.831209,0.0336441837 C13.1565464,-0.139363681 12.5012159,0.377070376 12.5012159,1.07356655 Z" id="circle-notch---solid"></path>\n' + '            </g>\n' + '        </g>\n' + '    </g>\n' + '</svg>';
  b = str.split('\n').join(' ');
  return Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__["default"])(b);
}

/* harmony default export */ __webpack_exports__["default"] = (ControlMapWidget);

/***/ }),

/***/ "./js/eventBus.js":
/*!************************!*\
  !*** ./js/eventBus.js ***!
  \************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/*
 *  The MIT License (MIT)
 *
 * Copyright (c) 2016-2017 The Regents of the University of California
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
 * associated documentation files (the "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the
 * following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial
 * portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
 * BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,  FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 */

/**
 * @author Jim Robinson
 */

/**
 * Barebones event bus.
 */
var EventBus = function EventBus() {
  // Map eventType -> list of subscribers
  this.subscribers = {};
  this.stack = [];
};

EventBus.prototype.subscribe = function (eventType, object) {
  var subscriberList = this.subscribers[eventType];

  if (subscriberList == undefined) {
    subscriberList = [];
    this.subscribers[eventType] = subscriberList;
  }

  subscriberList.push(object);
};

EventBus.prototype.post = function (event) {
  var eventType = event.type;

  if (this.hold) {
    this.stack.push(event);
  } else {
    var subscriberList = this.subscribers[eventType];

    if (subscriberList) {
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = subscriberList[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var subscriber = _step.value;

          if ("function" === typeof subscriber.receiveEvent) {
            subscriber.receiveEvent(event);
          } else if ("function" === typeof subscriber) {
            subscriber(event);
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return != null) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    }
  }
};

EventBus.prototype.hold = function () {
  this.hold = true;
};

EventBus.prototype.release = function () {
  this.hold = false;
  var _iteratorNormalCompletion2 = true;
  var _didIteratorError2 = false;
  var _iteratorError2 = undefined;

  try {
    for (var _iterator2 = this.stack[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
      var event = _step2.value;
      this.post(event);
    }
  } catch (err) {
    _didIteratorError2 = true;
    _iteratorError2 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
        _iterator2.return();
      }
    } finally {
      if (_didIteratorError2) {
        throw _iteratorError2;
      }
    }
  }

  this.stack = [];
};

/* harmony default export */ __webpack_exports__["default"] = (EventBus);

/***/ }),

/***/ "./js/genome.js":
/*!**********************!*\
  !*** ./js/genome.js ***!
  \**********************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/*
 *  The MIT License (MIT)
 *
 * Copyright (c) 2016-2017 The Regents of the University of California
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
 * associated documentation files (the "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the
 * following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial
 * portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
 * BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,  FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 */

/**
 * @author Jim Robinson
 */

/**
 *
 * @param id
 * @param chromosomes -- an array of hic.Chromosome objects.
 * @constructor
 */
var Genome = function Genome(id, chromosomes) {
  var self = this;
  this.id = id;
  this.chromosomes = chromosomes;
  this.chromosomeLookupTable = {}; // Alias for size for igv compatibility

  this.genomeLength = 0;
  this.chromosomes.forEach(function (c) {
    c.bpLength = c.size;

    if ('all' !== c.name.toLowerCase()) {
      self.genomeLength += c.size;
    }
  });
  /**
   * Maps the official chromosome name to an alias.  Deals with
   * 1 <-> chr1,  chrM <-> MT,  IV <-> chr4, etc.
   * @param str
   */

  var chrAliasTable = {}; // The standard mappings

  chromosomes.forEach(function (chromosome) {
    var name = chromosome.name,
        alias = name.startsWith("chr") ? name.substring(3) : "chr" + name;
    chrAliasTable[alias] = name;
    if (name === "chrM") chrAliasTable["MT"] = "chrM";
    if (name === "MT") chrAliasTable["chrmM"] = "MT";
    self.chromosomeLookupTable[name.toLowerCase()] = chromosome;
  });
  this.chrAliasTable = chrAliasTable;
};

Genome.prototype.getChromosomeName = function (str) {
  var chr = this.chrAliasTable[str];
  return chr ? chr : str;
};

Genome.prototype.getChromosome = function (str) {
  var chrname = this.getChromosomeName(str).toLowerCase();
  return this.chromosomeLookupTable[chrname];
};
/**
 * Return the genome coordinate for the give chromosome and position.
 */


Genome.prototype.getGenomeCoordinate = function (chr, bp) {
  return this.getCumulativeOffset(chr.name) + bp;
};

Genome.prototype.getChromsosomeForCoordinate = function (bp) {
  var i = 0,
      offset = 0,
      l;

  for (i = 1; i < this.chromosomes.length; i++) {
    l = this.chromosomes[i].size;
    if (offset + l > bp) return this.chromosomes[i];
    offset += l;
  }

  return this.chromosomes[this.chromosomes.length - 1];
};
/**
 * Return the offset in genome coordinates (kb) of the start of the given chromosome
 */


Genome.prototype.getCumulativeOffset = function (chr) {
  var queryChr;
  queryChr = this.getChromosomeName(chr);

  if (this.cumulativeOffsets === undefined) {
    computeCumulativeOffsets.call(this);
  }

  return this.cumulativeOffsets[queryChr];
};

function computeCumulativeOffsets() {
  var self = this,
      list,
      cumulativeOffsets,
      offset,
      i,
      chromosome;
  cumulativeOffsets = {};
  offset = 0; // Skip first chromosome (its chr all).

  for (i = 1; i < self.chromosomes.length; i++) {
    chromosome = self.chromosomes[i];
    cumulativeOffsets[chromosome.name] = Math.floor(offset); // Genome coordinates are in KB.  Beware 32-bit max value limit

    offset += chromosome.size; // / 1000);
  }

  self.cumulativeOffsets = cumulativeOffsets;
} // Required for igv.js


Genome.prototype.getGenomeLength = function () {
  return this.genomeLength;
};

/* harmony default export */ __webpack_exports__["default"] = (Genome);

/***/ }),

/***/ "./js/globals.js":
/*!***********************!*\
  !*** ./js/globals.js ***!
  \***********************/
/*! exports provided: Track2DDisplaceModes */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Track2DDisplaceModes", function() { return Track2DDisplaceModes; });
/*
 *  The MIT License (MIT)
 *
 * Copyright (c) 2016-2017 The Regents of the University of California
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
 * associated documentation files (the "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the
 * following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial
 * portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
 * BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,  FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 */
var Track2DDisplaceModes = {
  displayAllMatrix: 'displayAllMatrix',
  displayLowerMatrix: 'displayLowerMatrix',
  displayUpperMatrix: 'displayUpperMatrix'
};


/***/ }),

/***/ "./js/googleURL.js":
/*!*************************!*\
  !*** ./js/googleURL.js ***!
  \*************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

/*
 *  The MIT License (MIT)
 *
 * Copyright (c) 2019 The Regents of the University of California
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
 * associated documentation files (the "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the
 * following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial
 * portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
 * BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,  FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 */
var GoogleURL = function GoogleURL(config) {
  this.api = "https://www.googleapis.com/urlshortener/v1/url";
  this.apiKey = !config.apiKey || "ABCD" === config.apiKey ? fetchGoogleApiKey : config.apiKey;
  this.hostname = config.hostname || "goo.gl";
};

GoogleURL.prototype.shortenURL = function (url) {
  var self = this;
  return getApiKey.call(this).then(function (key) {
    var endpoint = self.api + "?key=" + key;
    return igv.xhr.loadJson(endpoint, {
      sendData: JSON.stringify({
        "longUrl": url
      }),
      contentType: "application/json"
    });
  }).then(function (json) {
    return json.id;
  });
};

GoogleURL.prototype.expandURL = function (url) {
  var self = this;
  return getApiKey.call(this).then(function (apiKey) {
    var endpoint;

    if (url.includes("goo.gl")) {
      endpoint = self.api + "?shortUrl=" + url + "&key=" + apiKey;
      return igv.xhr.loadJson(endpoint, {
        contentType: "application/json"
      }).then(function (json) {
        return json.longUrl;
      });
    } else {
      // Not a google url or no api key
      return Promise.resolve(url);
    }
  });
};

function getApiKey() {
  return _getApiKey.apply(this, arguments);
} // Example function for fetching an api key.


function _getApiKey() {
  _getApiKey = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee() {
    var self, token;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            self = this;

            if (!(typeof self.apiKey === "string")) {
              _context.next = 5;
              break;
            }

            return _context.abrupt("return", self.apiKey);

          case 5:
            if (!(typeof self.apiKey === "function")) {
              _context.next = 11;
              break;
            }

            _context.next = 8;
            return self.apiKey();

          case 8:
            return _context.abrupt("return", _context.sent);

          case 11:
            throw new Error("Unknown apiKey type: " + this.apiKey);

          case 12:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this);
  }));
  return _getApiKey.apply(this, arguments);
}

function fetchGoogleApiKey() {
  return _fetchGoogleApiKey.apply(this, arguments);
}

function _fetchGoogleApiKey() {
  _fetchGoogleApiKey = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee2() {
    var json;
    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return igv.xhr.loadJson("https://s3.amazonaws.com/igv.org.restricted/google.json", {});

          case 2:
            json = _context2.sent;
            return _context2.abrupt("return", json["apiKey"]);

          case 4:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, this);
  }));
  return _fetchGoogleApiKey.apply(this, arguments);
}

/* harmony default export */ __webpack_exports__["default"] = (GoogleURL);

/***/ }),

/***/ "./js/hic.js":
/*!*******************!*\
  !*** ./js/hic.js ***!
  \*******************/
/*! exports provided: defaultPixelSize, eventBus, allBrowsers, apiKey, createBrowser, extractQuery, deleteBrowserPanel, syncBrowsers, areCompatible, destringifyColorScale, destringifyState, isMobile, extractFilename, igvSupports, throttle, reflectionRotationWithContext, reflectionAboutYAxisAtOffsetWithContext, identityTransformWithContext, setURLShortener, shortenURL, expandURL, shortJuiceboxURL, decompressQueryParameter, initApp, expandJuiceboxUrl, createBrowsers, updateAllBrowsers */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "defaultPixelSize", function() { return defaultPixelSize; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "eventBus", function() { return eventBus; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "allBrowsers", function() { return allBrowsers; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "apiKey", function() { return apiKey; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createBrowser", function() { return createBrowser; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "extractQuery", function() { return extractQuery; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "deleteBrowserPanel", function() { return deleteBrowserPanel; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "syncBrowsers", function() { return syncBrowsers; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "areCompatible", function() { return areCompatible; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "destringifyColorScale", function() { return destringifyColorScale; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "destringifyState", function() { return destringifyState; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isMobile", function() { return isMobile; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "extractFilename", function() { return extractFilename; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "igvSupports", function() { return igvSupports; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "throttle", function() { return throttle; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "reflectionRotationWithContext", function() { return reflectionRotationWithContext; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "reflectionAboutYAxisAtOffsetWithContext", function() { return reflectionAboutYAxisAtOffsetWithContext; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "identityTransformWithContext", function() { return identityTransformWithContext; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setURLShortener", function() { return setURLShortener; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "shortenURL", function() { return shortenURL; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "expandURL", function() { return expandURL; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "shortJuiceboxURL", function() { return shortJuiceboxURL; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "decompressQueryParameter", function() { return decompressQueryParameter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "initApp", function() { return initApp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "expandJuiceboxUrl", function() { return expandJuiceboxUrl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createBrowsers", function() { return createBrowsers; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "updateAllBrowsers", function() { return updateAllBrowsers; });
/* harmony import */ var _vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../vendor/jquery-1.12.4 */ "./vendor/jquery-1.12.4.js");
/* harmony import */ var _hicBrowser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./hicBrowser */ "./js/hicBrowser.js");
/* harmony import */ var _colorScale__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./colorScale */ "./js/colorScale.js");
/* harmony import */ var _hicState__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./hicState */ "./js/hicState.js");
/* harmony import */ var _eventBus__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./eventBus */ "./js/eventBus.js");
/* harmony import */ var _hicEvent__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./hicEvent */ "./js/hicEvent.js");
/* harmony import */ var _igvReplacements__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./igvReplacements */ "./js/igvReplacements.js");
/* harmony import */ var _vendor_underscore__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../vendor/underscore */ "./vendor/underscore.js");
/* harmony import */ var _googleURL__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./googleURL */ "./js/googleURL.js");
/* harmony import */ var _bitlyURL__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./bitlyURL */ "./js/bitlyURL.js");
/* harmony import */ var _vendor_zlib_and_gzip__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../vendor/zlib_and_gzip */ "./vendor/zlib_and_gzip.js");
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

/*
 *  The MIT License (MIT)
 *
 * Copyright (c) 2016-2017 The Regents of the University of California
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
 * associated documentation files (the "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the
 * following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial
 * portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
 * BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,  FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 */











var apiKey;
var defaultPixelSize = 1;
var urlShorteners = [];
var defaultSize = {
  width: 640,
  height: 640
  /**
   * The global event bus.  For events outside the scope of a single browser.
   *
   * @type {EventBus}
   */

};
var eventBus = new _eventBus__WEBPACK_IMPORTED_MODULE_4__["default"]();
var allBrowsers = [];

function updateAllBrowsers() {
  return _updateAllBrowsers.apply(this, arguments);
}

function _updateAllBrowsers() {
  _updateAllBrowsers = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee() {
    var _i, b;

    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _i = 0;

          case 1:
            if (!(_i < allBrowsers.length)) {
              _context.next = 8;
              break;
            }

            b = allBrowsers[_i];
            _context.next = 5;
            return b.update();

          case 5:
            _i++;
            _context.next = 1;
            break;

          case 8:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this);
  }));
  return _updateAllBrowsers.apply(this, arguments);
}

function createBrowser(_x, _x2, _x3) {
  return _createBrowser.apply(this, arguments);
}

function _createBrowser() {
  _createBrowser = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee4(hic_container, config, callback) {
    var $hic_container, queryString, query, uriDecode, browser, hasControl, promises, tmp, setInitialDataset, _setInitialDataset, loadControlFile, _loadControlFile;

    return regeneratorRuntime.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            _loadControlFile = function _ref4() {
              _loadControlFile = _asyncToGenerator(
              /*#__PURE__*/
              regeneratorRuntime.mark(function _callee3(config) {
                return regeneratorRuntime.wrap(function _callee3$(_context3) {
                  while (1) {
                    switch (_context3.prev = _context3.next) {
                      case 0:
                        if (!config.controlUrl) {
                          _context3.next = 4;
                          break;
                        }

                        return _context3.abrupt("return", browser.loadHicControlFile({
                          url: config.controlUrl,
                          name: config.controlName,
                          nvi: config.controlNvi,
                          isControl: true
                        }, true));

                      case 4:
                        return _context3.abrupt("return", undefined);

                      case 5:
                      case "end":
                        return _context3.stop();
                    }
                  }
                }, _callee3, this);
              }));
              return _loadControlFile.apply(this, arguments);
            };

            loadControlFile = function _ref3(_x12) {
              return _loadControlFile.apply(this, arguments);
            };

            _setInitialDataset = function _ref2() {
              _setInitialDataset = _asyncToGenerator(
              /*#__PURE__*/
              regeneratorRuntime.mark(function _callee2(browser, config) {
                return regeneratorRuntime.wrap(function _callee2$(_context2) {
                  while (1) {
                    switch (_context2.prev = _context2.next) {
                      case 0:
                        if (!config.dataset) {
                          _context2.next = 12;
                          break;
                        }

                        config.dataset.name = config.name;
                        browser.$contactMaplabel.text(config.name);
                        browser.$contactMaplabel.attr('title', config.name);
                        browser.dataset = config.dataset;
                        browser.genome = new Genome(browser.dataset.genomeId, browser.dataset.chromosomes);
                        igv.browser.genome = browser.genome;
                        browser.eventBus.post(Object(_hicEvent__WEBPACK_IMPORTED_MODULE_5__["default"])("GenomeChange", browser.genome.id));
                        browser.eventBus.post(Object(_hicEvent__WEBPACK_IMPORTED_MODULE_5__["default"])("MapLoad", browser.dataset));
                        return _context2.abrupt("return", config.dataset);

                      case 12:
                        return _context2.abrupt("return", undefined);

                      case 13:
                      case "end":
                        return _context2.stop();
                    }
                  }
                }, _callee2, this);
              }));
              return _setInitialDataset.apply(this, arguments);
            };

            setInitialDataset = function _ref(_x10, _x11) {
              return _setInitialDataset.apply(this, arguments);
            };

            $hic_container = Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__["default"])(hic_container);
            setDefaults(config);
            apiKey = config.apiKey;

            if (apiKey) {
              igv.setApiKey(apiKey);
            }

            queryString = config.queryString || config.href; // href for backward compatibility

            if (queryString === undefined && config.initFromUrl !== false) {
              queryString = window.location.href;
            }

            if (queryString) {
              if (!queryString.includes("?")) {
                queryString = "?" + queryString;
              }

              query = extractQuery(queryString);
              uriDecode = queryString.includes("%2C");
              igv.Browser.decodeQuery(query, config, uriDecode);
            }

            browser = new _hicBrowser__WEBPACK_IMPORTED_MODULE_1__["default"]($hic_container, config);
            browser.eventBus.hold();
            allBrowsers.push(browser);
            _hicBrowser__WEBPACK_IMPORTED_MODULE_1__["default"].setCurrentBrowser(browser);

            if (allBrowsers.length > 1) {
              allBrowsers.forEach(function (b) {
                b.$browser_panel_delete_button.show();
              });
            }

            if (undefined === igv.browser) {
              createIGV($hic_container, browser);
            } ///////////////////////////////////


            _context4.prev = 17;
            browser.contactMatrixView.startSpinner();
            browser.$user_interaction_shield.show();
            hasControl = config.controlUrl !== undefined; // if (!config.name) config.name = await extractName(config)
            // const prefix = hasControl ? "A: " : "";
            // browser.$contactMaplabel.text(prefix + config.name);
            // browser.$contactMaplabel.attr('title', config.name);

            _context4.next = 23;
            return browser.loadHicFile(config, true);

          case 23:
            _context4.next = 25;
            return loadControlFile(config);

          case 25:
            if (config.cycle) {
              config.displayMode = "A";
            }

            if (config.displayMode) {
              browser.contactMatrixView.displayMode = config.displayMode;
              browser.eventBus.post({
                type: "DisplayMode",
                data: config.displayMode
              });
            }

            if (config.colorScale) {
              // This must be done after dataset load
              browser.contactMatrixView.setColorScale(config.colorScale);
              browser.eventBus.post({
                type: "ColorScale",
                data: browser.contactMatrixView.getColorScale()
              });
            }

            promises = [];

            if (config.tracks) {
              promises.push(browser.loadTracks(config.tracks));
            }

            if (config.normVectorFiles) {
              config.normVectorFiles.forEach(function (nv) {
                promises.push(browser.loadNormalizationFile(nv));
              });
            }

            _context4.next = 33;
            return Promise.all(promises);

          case 33:
            tmp = browser.contactMatrixView.colorScaleThresholdCache;
            browser.eventBus.release();
            browser.contactMatrixView.colorScaleThresholdCache = tmp;

            if (config.cycle) {
              browser.controlMapWidget.toggleDisplayModeCycle();
            } else {
              browser.update();
            }

            if (typeof callback === "function") callback();

          case 38:
            _context4.prev = 38;
            browser.contactMatrixView.stopSpinner();
            browser.$user_interaction_shield.hide();
            return _context4.finish(38);

          case 42:
            return _context4.abrupt("return", browser);

          case 43:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4, this, [[17,, 38, 42]]);
  }));
  return _createBrowser.apply(this, arguments);
}

function setApiKey(key) {
  apiKey = key;
  igv.setApiKey(key);
}

function extractQuery(uri) {
  var i1, i2, i, j, s, query, tokens;
  query = {};
  i1 = uri.indexOf("?");
  i2 = uri.lastIndexOf("#");

  if (i1 >= 0) {
    if (i2 < 0) i2 = uri.length;

    for (i = i1 + 1; i < i2;) {
      j = uri.indexOf("&", i);
      if (j < 0) j = i2;
      s = uri.substring(i, j);
      tokens = s.split("=", 2);

      if (tokens.length === 2) {
        query[tokens[0]] = tokens[1];
      }

      i = j + 1;
    }
  }

  return query;
}

function deleteBrowserPanel(browser) {
  if (browser === _hicBrowser__WEBPACK_IMPORTED_MODULE_1__["default"].getCurrentBrowser()) {
    _hicBrowser__WEBPACK_IMPORTED_MODULE_1__["default"].setCurrentBrowser(undefined);
  }

  allBrowsers.splice(_vendor_underscore__WEBPACK_IMPORTED_MODULE_7__["default"].indexOf(allBrowsers, browser), 1);
  browser.$root.remove();
  browser = undefined;

  if (1 === allBrowsers.length) {
    _hicBrowser__WEBPACK_IMPORTED_MODULE_1__["default"].setCurrentBrowser(allBrowsers[0]);
    _hicBrowser__WEBPACK_IMPORTED_MODULE_1__["default"].getCurrentBrowser().$browser_panel_delete_button.hide();
  }
}

function syncBrowsers(browsers) {
  var browsersWithMaps, genome, incompatibleDatasets, gid;
  browsersWithMaps = browsers.filter(function (b) {
    return b.dataset !== undefined;
  });

  if (browsersWithMaps.length < 2) {
    // Nothing to sync
    return;
  } // Canonical browser is the first one, arbitrarily


  genome = canonicalGenomeId(browsers[0].dataset.genomeId); // Sync compatible maps only

  incompatibleDatasets = [];
  browsersWithMaps.forEach(function (b1) {
    gid = canonicalGenomeId(b1.dataset.genomeId);

    if (areCompatible(browsers[0].dataset, b1.dataset)) {
      browsers.forEach(function (b2) {
        if (b1 !== b2 && !b1.synchedBrowsers.includes(b2)) {
          b1.synchedBrowsers.push(b2);
        }
      });
    } else {
      incompatibleDatasets.push(b1.dataset.genomeId);
    }
  });

  if (incompatibleDatasets.length > 0) {
    igv.presentAlert("Not all maps could be synchronized.  Incompatible assemblies: " + browsers[0].dataset.genomeId + " vs " + incompatibleDatasets.join());
  }

  function canonicalGenomeId(genomeId) {
    switch (genomeId) {
      case "GRCh38":
        return "hg38";

      case "GRCh37":
        return "hg19";

      case "GRCm38":
        return "mm10";

      default:
        return genomeId;
    }
  }
}
/**
 * Compare 2 datasets for compatibility.  Compatibility is defined as from the same assembly, even if
 * different IDs are used (e.g. GRCh38 vs hg38)
 * @param d1
 * @param d2
 */


function areCompatible(d1, d2) {
  return d1.genomeId === d2.genomeId || d1.compareChromosomes(d2);
}

function destringifyColorScale(string) {
  var pnstr, ratioCS;

  if (string.startsWith("R:")) {
    pnstr = string.substring(2).split(":");
    ratioCS = new RatioColorScale(Number.parseFloat(pnstr[0]));
    ratioCS.positiveScale = foo(pnstr[1]);
    ratioCS.negativeScale = foo(pnstr[2]);
    return ratioCS;
  } else {
    return foo(string);
  }

  function foo(str) {
    var cs, tokens;
    tokens = str.split(",");
    cs = {
      threshold: tokens[0],
      r: tokens[1],
      g: tokens[2],
      b: tokens[3]
    };
    return new _colorScale__WEBPACK_IMPORTED_MODULE_2__["default"](cs);
  }
}

function destringifyState(string) {
  var tokens = string.split(",");
  return new _hicState__WEBPACK_IMPORTED_MODULE_3__["default"](parseInt(tokens[0]), // chr1
  parseInt(tokens[1]), // chr2
  parseFloat(tokens[2]), // zoom
  parseFloat(tokens[3]), // x
  parseFloat(tokens[4]), // y
  parseFloat(tokens[5]), // pixelSize
  tokens.length > 6 ? tokens[6] : "NONE" // normalization
  );
}

function isMobile() {
  return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
}

function extractFilename(urlOrFile) {
  var idx, str;

  if (igv.isFilePath(urlOrFile)) {
    return urlOrFile.name;
  } else {
    str = urlOrFile.split('?').shift();
    idx = urlOrFile.lastIndexOf("/");
    return idx > 0 ? str.substring(idx + 1) : str;
  }
}

function igvSupports(path) {
  var config = {
    url: path
  };
  igv.inferTrackTypes(config);
  return config.type !== undefined;
}

function throttle(fn, threshhold, scope) {
  var last, deferTimer;
  threshhold || (threshhold = 200);
  return function () {
    var context, now, args;
    context = scope || this;
    now = +new Date();
    args = arguments;

    if (last && now < last + threshhold) {
      // hold on to it
      clearTimeout(deferTimer);
      deferTimer = setTimeout(function () {
        last = now;
        fn.apply(context, args);
      }, threshhold);
    } else {
      last = now;
      fn.apply(context, args);
    }
  };
}

function reflectionRotationWithContext(context) {
  context.scale(-1, 1);
  context.rotate(Math.PI / 2.0);
}

function reflectionAboutYAxisAtOffsetWithContext(context, exe) {
  context.translate(exe, 0);
  context.scale(-1, 1);
  context.translate(-exe, 0);
}

function identityTransformWithContext(context) {
  // 3x2 matrix. column major. (sx 0 0 sy tx ty).
  context.setTransform(1, 0, 0, 1, 0, 0);
}

function setURLShortener(shortenerConfigs) {
  if (!shortenerConfigs || shortenerConfigs === "none") {} else {
    shortenerConfigs.forEach(function (config) {
      urlShorteners.push(getShortener(config));
    });
  }

  function getShortener(shortener) {
    if (shortener.provider) {
      if (shortener.provider === "google") {
        return new _googleURL__WEBPACK_IMPORTED_MODULE_8__["default"](shortener);
      } else if (shortener.provider === "bitly") {
        return new _bitlyURL__WEBPACK_IMPORTED_MODULE_9__["default"](shortener);
      } else {
        igv.presentAlert("Unknown url shortener provider: " + shortener.provider);
      }
    } else {
      // Custom
      if (typeof shortener.shortenURL === "function" && typeof shortener.expandURL === "function" && typeof shortener.hostname === "string") {
        return shortener;
      } else {
        igv.presentAlert("URL shortener object must define functions 'shortenURL' and 'expandURL' and string constant 'hostname'");
      }
    }
  }
}

function shortenURL(url) {
  if (urlShorteners) {
    return urlShorteners[0].shortenURL(url);
  } else {
    return Promise.resolve(url);
  }
}

function expandURL(url) {
  var urlObject = new URL(url),
      hostname = urlObject.hostname,
      i,
      expander;

  if (urlShorteners) {
    for (i = 0; i < urlShorteners.length; i++) {
      expander = urlShorteners[i];

      if (hostname === expander.hostname) {
        return expander.expandURL(url);
      }
    }
  }

  igv.presentAlert("No expanders for URL: " + url);
  return Promise.resolve(url);
}

function shortJuiceboxURL(_x4) {
  return _shortJuiceboxURL.apply(this, arguments);
}

function _shortJuiceboxURL() {
  _shortJuiceboxURL = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee5(base) {
    var url, queryString, self, compressedString;
    return regeneratorRuntime.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            self = this;
            queryString = "{";
            allBrowsers.forEach(function (browser, index) {
              queryString += encodeURIComponent(browser.getQueryString());
              queryString += index === allBrowsers.length - 1 ? "}" : "},{";
            });
            compressedString = compressQueryParameter(queryString);
            url = base + "?juiceboxData=" + compressedString;

            if (!(url.length > 2048)) {
              _context5.next = 9;
              break;
            }

            return _context5.abrupt("return", url);

          case 9:
            return _context5.abrupt("return", self.shortenURL(url));

          case 10:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5, this);
  }));
  return _shortJuiceboxURL.apply(this, arguments);
}

function decompressQueryParameter(enc) {
  enc = enc.replace(/\./g, '+').replace(/_/g, '/').replace(/-/g, '=');
  var compressedString = atob(enc);
  var compressedBytes = [];

  for (var i = 0; i < compressedString.length; i++) {
    compressedBytes.push(compressedString.charCodeAt(i));
  }

  var bytes = new _vendor_zlib_and_gzip__WEBPACK_IMPORTED_MODULE_10__["default"].RawInflate(compressedBytes).decompress();
  var str = '';
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = bytes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var b = _step.value;
      str += String.fromCharCode(b);
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return != null) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return str;
}

function initApp(_x5, _x6) {
  return _initApp.apply(this, arguments);
}

function _initApp() {
  _initApp = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee6(container, config) {
    var apiKey, query, b;
    return regeneratorRuntime.wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            apiKey = config.apiKey;

            if (apiKey) {
              if (apiKey === "ABCD") apiKey = "AIzaSyDUUAUFpQEN4mumeMNIRWXSiTh5cPtUAD0";
              setApiKey(apiKey);
            }

            query = extractQuery(window.location.href);
            _context6.next = 5;
            return expandJuiceboxUrl(query);

          case 5:
            query = _context6.sent;
            _context6.next = 8;
            return createBrowsers(container, query);

          case 8:
            b = _context6.sent;
            syncBrowsers(allBrowsers);

          case 10:
          case "end":
            return _context6.stop();
        }
      }
    }, _callee6, this);
  }));
  return _initApp.apply(this, arguments);
}

function expandJuiceboxUrl(_x7) {
  return _expandJuiceboxUrl.apply(this, arguments);
}

function _expandJuiceboxUrl() {
  _expandJuiceboxUrl = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee7(query) {
    var jbURL;
    return regeneratorRuntime.wrap(function _callee7$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            if (!(query && query.hasOwnProperty("juiceboxURL"))) {
              _context7.next = 7;
              break;
            }

            _context7.next = 3;
            return expandURL(query["juiceboxURL"]);

          case 3:
            jbURL = _context7.sent;
            return _context7.abrupt("return", extractQuery(jbURL));

          case 7:
            return _context7.abrupt("return", query);

          case 8:
          case "end":
            return _context7.stop();
        }
      }
    }, _callee7, this);
  }));
  return _expandJuiceboxUrl.apply(this, arguments);
}

function createBrowsers(_x8, _x9) {
  return _createBrowsers.apply(this, arguments);
} // Set default values for config properties


function _createBrowsers() {
  _createBrowsers = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee8(container, query) {
    var parts, browser, i, q, _browser, promises, browsers, _browser2;

    return regeneratorRuntime.wrap(function _callee8$(_context8) {
      while (1) {
        switch (_context8.prev = _context8.next) {
          case 0:
            if (query && query.hasOwnProperty("juicebox")) {
              q = query["juicebox"];

              if (q.startsWith("%7B")) {
                q = decodeURIComponent(q);
              }
            } else if (query && query.hasOwnProperty("juiceboxData")) {
              q = decompressQueryParameter(query["juiceboxData"]);
            }

            if (!q) {
              _context8.next = 16;
              break;
            }

            q = q.substr(1, q.length - 2); // Strip leading and trailing bracket

            parts = q.split("},{");
            _context8.next = 6;
            return createBrowser(container, {
              queryString: decodeURIComponent(parts[0])
            });

          case 6:
            _browser = _context8.sent;

            if (!(parts && parts.length > 1)) {
              _context8.next = 13;
              break;
            }

            promises = [];

            for (i = 1; i < parts.length; i++) {
              promises.push(createBrowser(container, {
                queryString: decodeURIComponent(parts[i])
              })); //const b = await createBrowser($container.get(0), {queryString: decodeURIComponent(parts[i])})
              // b.eventBus.subscribe("GenomeChange", genomeChangeListener);
              // b.eventBus.subscribe("MapLoad", checkBDropdown);
            }

            _context8.next = 12;
            return Promise.all(promises);

          case 12:
            browsers = _context8.sent;

          case 13:
            return _context8.abrupt("return", _browser);

          case 16:
            _context8.next = 18;
            return createBrowser(container, {});

          case 18:
            _browser2 = _context8.sent;
            return _context8.abrupt("return", _browser2);

          case 20:
          case "end":
            return _context8.stop();
        }
      }
    }, _callee8, this);
  }));
  return _createBrowsers.apply(this, arguments);
}

function setDefaults(config) {
  if (config.figureMode === true) {
    config.showLocusGoto = false;
    config.showHicContactMapLabel = false;
    config.showChromosomeSelector = false;
  } else {
    if (undefined === config.width) {
      config.width = defaultSize.width;
    }

    if (undefined === config.height) {
      config.height = defaultSize.height;
    }

    if (undefined === config.showLocusGoto) {
      config.showLocusGoto = true;
    }

    if (undefined === config.showHicContactMapLabel) {
      config.showHicContactMapLabel = true;
    }

    if (undefined === config.showChromosomeSelector) {
      config.showChromosomeSelector = true;
    }
  }

  if (config.state) {
    // convert to state object
    config.state = new _hicState__WEBPACK_IMPORTED_MODULE_3__["default"](config.state.chr1, config.state.chr2, config.state.zoom, config.state.x, config.state.y, config.state.pixelSize, config.state.normalization);
  }
} // mock igv browser objects for igv.js compatibility


function createIGV($hic_container, hicBrowser) {
  igv.browser = {
    constants: {
      defaultColor: "rgb(0,0,150)"
    },
    // Compatibility wit igv menus
    trackContainerDiv: hicBrowser.layoutController.$x_track_container.get(0)
  }; // replace IGV functions with HIC equivalents

  Object(_igvReplacements__WEBPACK_IMPORTED_MODULE_6__["default"])(igv);
  igv.popover = new igv.Popover($hic_container, igv.browser);
  igv.alertDialog = new igv.AlertDialog(hicBrowser.$root, hicBrowser);
  hicBrowser.inputDialog = new igv.InputDialog($hic_container, hicBrowser);
  hicBrowser.trackRemovalDialog = new igv.TrackRemovalDialog($hic_container, hicBrowser);
  hicBrowser.dataRangeDialog = new igv.DataRangeDialog($hic_container, hicBrowser);
}

function compressQueryParameter(str) {
  var bytes, deflate, compressedBytes, compressedString, enc;
  bytes = [];

  for (var i = 0; i < str.length; i++) {
    bytes.push(str.charCodeAt(i));
  }

  compressedBytes = new _vendor_zlib_and_gzip__WEBPACK_IMPORTED_MODULE_10__["default"].RawDeflate(bytes).compress(); // UInt8Arry

  compressedString = String.fromCharCode.apply(null, compressedBytes); // Convert to string

  enc = btoa(compressedString);
  enc = enc.replace(/\+/g, '.').replace(/\//g, '_').replace(/\=/g, '-'); // URL safe
  //console.log(json);
  //console.log(enc);

  return enc;
} // function decompressQueryParameter(enc) {
//
//     enc = enc.replace(/\./g, '+').replace(/_/g, '/').replace(/-/g, '=')
//
//     const compressedString = atob(enc);
//     const compressedBytes = [];
//     for (let i = 0; i < compressedString.length; i++) {
//         compressedBytes.push(compressedString.charCodeAt(i));
//     }
//     const bytes = new Zlib.RawInflate(compressedBytes).decompress();
//
//     let str = ''
//     for (let b of bytes) {
//         str += String.fromCharCode(b)
//     }
//
//     return str;
// }
//export default hic




/***/ }),

/***/ "./js/hicBrowser.js":
/*!**************************!*\
  !*** ./js/hicBrowser.js ***!
  \**************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../vendor/jquery-1.12.4 */ "./vendor/jquery-1.12.4.js");
/* harmony import */ var _vendor_underscore__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../vendor/underscore */ "./vendor/underscore.js");
/* harmony import */ var _hic__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./hic */ "./js/hic.js");
/* harmony import */ var _hicTrack2D__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./hicTrack2D */ "./js/hicTrack2D.js");
/* harmony import */ var _igvReplacements__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./igvReplacements */ "./js/igvReplacements.js");
/* harmony import */ var _eventBus__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./eventBus */ "./js/eventBus.js");
/* harmony import */ var _layoutController__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./layoutController */ "./js/layoutController.js");
/* harmony import */ var _hicEvent__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./hicEvent */ "./js/hicEvent.js");
/* harmony import */ var _hicDataset__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./hicDataset */ "./js/hicDataset.js");
/* harmony import */ var _genome__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./genome */ "./js/genome.js");
/* harmony import */ var _hicState__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./hicState */ "./js/hicState.js");
/* harmony import */ var _vendor_hic_straw_es6__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../vendor/hic-straw_es6 */ "./vendor/hic-straw_es6.js");
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

/*
 *  The MIT License (MIT)
 *
 * Copyright (c) 2016-2017 The Regents of the University of California
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
 * associated documentation files (the "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the
 * following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial
 * portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
 * BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,  FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 */

/**
 * @author Jim Robinson
 */












var MAX_PIXEL_SIZE = 12;
var DEFAULT_ANNOTATION_COLOR = "rgb(22, 129, 198)";
var defaultState = new _hicState__WEBPACK_IMPORTED_MODULE_10__["default"](0, 0, 0, 0, 0, 1, "NONE");

var Browser = function Browser($app_container, config) {
  this.config = config;
  this.figureMode = config.figureMode || config.miniMode; // Mini mode for backward compatibility

  this.resolutionLocked = false;
  this.eventBus = new _eventBus__WEBPACK_IMPORTED_MODULE_5__["default"]();
  this.id = _vendor_underscore__WEBPACK_IMPORTED_MODULE_1__["default"].uniqueId('browser_');
  this.trackRenderers = [];
  this.tracks2D = [];
  this.normVectorFiles = [];
  this.synchedBrowsers = [];
  this.isMobile = _hic__WEBPACK_IMPORTED_MODULE_2__["isMobile"]();
  this.$root = Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__["default"])('<div class="hic-root unselect">');

  if (config.width) {
    this.$root.css("width", String(config.width));
  }

  if (config.height) {
    this.$root.css("height", String(config.height + _layoutController__WEBPACK_IMPORTED_MODULE_6__["default"].navbarHeight(this.config.figureMode)));
  }

  $app_container.append(this.$root);
  this.layoutController = new _layoutController__WEBPACK_IMPORTED_MODULE_6__["default"](this, this.$root); // <- contactMatixView created here, nasty side-effect!
  // prevent user interaction during lengthy data loads

  this.$user_interaction_shield = Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__["default"])('<div>', {
    class: 'hic-root-prevent-interaction'
  });
  this.$root.append(this.$user_interaction_shield);
  this.$user_interaction_shield.hide();
  this.hideCrosshairs();
  this.state = config.state ? config.state : defaultState.clone();
  this.eventBus.subscribe("LocusChange", this);
};

Browser.getCurrentBrowser = function () {
  if (_hic__WEBPACK_IMPORTED_MODULE_2__["allBrowsers"].length === 1) {
    return _hic__WEBPACK_IMPORTED_MODULE_2__["allBrowsers"][0];
  } else {
    return Browser.currentBrowser;
  }
};

Browser.setCurrentBrowser = function (browser) {
  // unselect current browser
  if (undefined === browser) {
    if (Browser.currentBrowser) {
      Browser.currentBrowser.$root.removeClass('hic-root-selected');
    }

    Browser.currentBrowser = browser;
    return;
  }

  if (browser !== Browser.currentBrowser) {
    if (Browser.currentBrowser) {
      Browser.currentBrowser.$root.removeClass('hic-root-selected');
    }

    browser.$root.addClass('hic-root-selected');
    Browser.currentBrowser = browser;
    _hic__WEBPACK_IMPORTED_MODULE_2__["eventBus"].post(Object(_hicEvent__WEBPACK_IMPORTED_MODULE_7__["default"])("BrowserSelect", browser));
  }
};

Browser.prototype.toggleMenu = function () {
  if (this.$menu.is(':visible')) {
    this.hideMenu();
  } else {
    this.showMenu();
  }
};

Browser.prototype.showMenu = function () {
  this.$menu.show();
};

Browser.prototype.hideMenu = function () {
  this.$menu.hide();
};

Browser.prototype.startSpinner = function () {
  this.contactMatrixView.startSpinner();
};

Browser.prototype.stopSpinner = function () {
  this.contactMatrixView.stopSpinner();
};

Browser.prototype.setDisplayMode =
/*#__PURE__*/
function () {
  var _ref = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee(mode) {
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return this.contactMatrixView.setDisplayMode(mode);

          case 2:
            this.eventBus.post(Object(_hicEvent__WEBPACK_IMPORTED_MODULE_7__["default"])("DisplayMode", mode));

          case 3:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function (_x) {
    return _ref.apply(this, arguments);
  };
}();

Browser.prototype.getDisplayMode = function () {
  return this.contactMatrixView ? this.contactMatrixView.displayMode : undefined;
};

Browser.prototype.toggleDisplayMode = function () {
  this.controlMapWidget.toggleDisplayMode();
};

Browser.prototype.getColorScale = function () {
  if (!this.contactMatrixView) return undefined;

  switch (this.getDisplayMode()) {
    case 'AOB':
    case 'BOA':
      return this.contactMatrixView.ratioColorScale;

    case 'AMB':
      return this.contactMatrixView.diffColorScale;

    default:
      return this.contactMatrixView.colorScale;
  }
};

Browser.prototype.setColorScaleThreshold = function (threshold) {
  this.contactMatrixView.setColorScaleThreshold(threshold);
};

Browser.prototype.updateCrosshairs = function (coords) {
  var xGuide, yGuide;
  xGuide = coords.y < 0 ? {
    left: 0
  } : {
    top: coords.y,
    left: 0
  };
  this.contactMatrixView.$x_guide.css(xGuide);
  this.layoutController.$x_track_guide.css(xGuide);
  yGuide = coords.x < 0 ? {
    top: 0
  } : {
    top: 0,
    left: coords.x
  };
  this.contactMatrixView.$y_guide.css(yGuide);
  this.layoutController.$y_track_guide.css(yGuide);
};

Browser.prototype.hideCrosshairs = function () {
  this.contactMatrixView.$x_guide.hide();
  this.layoutController.$x_track_guide.hide();
  this.contactMatrixView.$y_guide.hide();
  this.layoutController.$y_track_guide.hide();
};

Browser.prototype.showCrosshairs = function () {
  this.contactMatrixView.$x_guide.show();
  this.layoutController.$x_track_guide.show();
  this.contactMatrixView.$y_guide.show();
  this.layoutController.$y_track_guide.show();
};

Browser.prototype.genomicState = function (axis) {
  var gs, bpResolution;
  bpResolution = this.dataset.bpResolutions[this.state.zoom];
  gs = {
    bpp: bpResolution / this.state.pixelSize
  };

  if (axis === "x") {
    gs.chromosome = this.dataset.chromosomes[this.state.chr1];
    gs.startBP = this.state.x * bpResolution;
    gs.endBP = gs.startBP + gs.bpp * this.contactMatrixView.getViewDimensions().width;
  } else {
    gs.chromosome = this.dataset.chromosomes[this.state.chr2];
    gs.startBP = this.state.y * bpResolution;
    gs.endBP = gs.startBP + gs.bpp * this.contactMatrixView.getViewDimensions().height;
  }

  return gs;
};
/**
 * Load a list of 1D genome tracks (wig, etc).
 *
 * NOTE: public API function
 *
 * @param configs
 */


Browser.prototype.loadTracks =
/*#__PURE__*/
function () {
  var _ref2 = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee2(configs) {
    var self, errorPrefix, ps, trackConfigurations, trackXYPairs, promises2D, promisesNV, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, config, isLocal, fn, track, tracks2D, normVectors, inferTypes;

    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            inferTypes = function _ref3(trackConfigurations) {
              var promises = [];
              trackConfigurations.forEach(function (config) {
                var url = config.url;

                if (url && typeof url === "string" && url.includes("drive.google.com")) {
                  promises.push(igv.google.getDriveFileInfo(config.url).then(function (json) {
                    // Temporarily switch URL to infer tipes
                    config.url = json.originalFilename;
                    igv.inferTrackTypes(config);

                    if (config.name === undefined) {
                      config.name = json.originalFilename;
                    }

                    config.url = url;
                    return config;
                  }));
                } else {
                  igv.inferTrackTypes(config);

                  if (!config.name) {
                    config.name = _hic__WEBPACK_IMPORTED_MODULE_2__["extractFilename"](config.url);
                  }

                  promises.push(Promise.resolve(config));
                }
              });
              return promises;
            };

            self = this; // If loading a single track remember its name, for error message

            errorPrefix = 1 === configs.length ? "Error loading track " + configs[0].name : "Error loading tracks";
            _context2.prev = 3;
            this.contactMatrixView.startSpinner();
            ps = inferTypes(configs);
            _context2.next = 8;
            return Promise.all(ps);

          case 8:
            trackConfigurations = _context2.sent;
            trackXYPairs = [];
            promises2D = [];
            promisesNV = [];
            _iteratorNormalCompletion = true;
            _didIteratorError = false;
            _iteratorError = undefined;
            _context2.prev = 15;

            for (_iterator = trackConfigurations[Symbol.iterator](); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              config = _step.value;

              if (config) {
                isLocal = config.url instanceof File, fn = isLocal ? config.url.name : config.url;

                if ("annotation" === config.type && config.color === undefined) {
                  config.color = DEFAULT_ANNOTATION_COLOR;
                }

                config.height = this.layoutController.track_height;

                if (fn.endsWith(".juicerformat") || fn.endsWith("nv") || fn.endsWith(".juicerformat.gz") || fn.endsWith("nv.gz")) {
                  promisesNV.push(this.loadNormalizationFile(config.url));
                }

                if (config.type === undefined || "interaction" === config.type) {
                  // Assume this is a 2D track
                  promises2D.push(_hicTrack2D__WEBPACK_IMPORTED_MODULE_3__["default"].loadTrack2D(config));
                } else {
                  track = igv.createTrack(config, this);
                  trackXYPairs.push({
                    x: track,
                    y: track
                  });
                }
              }
            }

            _context2.next = 23;
            break;

          case 19:
            _context2.prev = 19;
            _context2.t0 = _context2["catch"](15);
            _didIteratorError = true;
            _iteratorError = _context2.t0;

          case 23:
            _context2.prev = 23;
            _context2.prev = 24;

            if (!_iteratorNormalCompletion && _iterator.return != null) {
              _iterator.return();
            }

          case 26:
            _context2.prev = 26;

            if (!_didIteratorError) {
              _context2.next = 29;
              break;
            }

            throw _iteratorError;

          case 29:
            return _context2.finish(26);

          case 30:
            return _context2.finish(23);

          case 31:
            if (!(trackXYPairs.length > 0)) {
              _context2.next = 35;
              break;
            }

            this.layoutController.tracksLoaded(trackXYPairs);
            _context2.next = 35;
            return this.updateLayout();

          case 35:
            _context2.next = 37;
            return Promise.all(promises2D);

          case 37:
            tracks2D = _context2.sent;

            if (tracks2D && tracks2D.length > 0) {
              this.tracks2D = self.tracks2D.concat(tracks2D);
              this.eventBus.post(Object(_hicEvent__WEBPACK_IMPORTED_MODULE_7__["default"])("TrackLoad2D", this.tracks2D));
            }

            _context2.next = 41;
            return Promise.all(promisesNV);

          case 41:
            normVectors = _context2.sent;
            _context2.next = 48;
            break;

          case 44:
            _context2.prev = 44;
            _context2.t1 = _context2["catch"](3);
            presentError(errorPrefix, _context2.t1);
            console.error(_context2.t1);

          case 48:
            _context2.prev = 48;
            this.contactMatrixView.stopSpinner();
            return _context2.finish(48);

          case 51:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, this, [[3, 44, 48, 51], [15, 19, 23, 31], [24,, 26, 30]]);
  }));

  return function (_x2) {
    return _ref2.apply(this, arguments);
  };
}();

Browser.prototype.loadNormalizationFile = function (url) {
  var self = this;
  if (!this.dataset) return;
  self.eventBus.post(Object(_hicEvent__WEBPACK_IMPORTED_MODULE_7__["default"])("NormalizationFileLoad", "start"));
  return this.dataset.hicFile.readNormalizationVectorFile(url, this.dataset.chromosomes).then(function (normVectors) {
    Object.assign(self.dataset.normVectorCache, normVectors);
    normVectors["types"].forEach(function (type) {
      if (!self.dataset.normalizationTypes) {
        self.dataset.normalizationTypes = [];
      }

      if (_vendor_underscore__WEBPACK_IMPORTED_MODULE_1__["default"].contains(self.dataset.normalizationTypes, type) === false) {
        self.dataset.normalizationTypes.push(type);
      }

      self.eventBus.post(Object(_hicEvent__WEBPACK_IMPORTED_MODULE_7__["default"])("NormVectorIndexLoad", self.dataset));
    });
    return normVectors;
  });
};

Browser.prototype.renderTracks = function () {
  var self = this;
  this.trackRenderers.forEach(function (xyTrackRenderPair, index) {
    self.renderTrackXY(xyTrackRenderPair);
  });
};
/**
 * Render the XY pair of tracks.
 *
 * @param xy
 */


Browser.prototype.renderTrackXY =
/*#__PURE__*/
function () {
  var _ref4 = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee3(xy) {
    return regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _context3.prev = 0;
            this.startSpinner();
            _context3.next = 4;
            return xy.x.repaint();

          case 4:
            _context3.next = 6;
            return xy.y.repaint();

          case 6:
            _context3.prev = 6;
            this.stopSpinner();
            return _context3.finish(6);

          case 9:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3, this, [[0,, 6, 9]]);
  }));

  return function (_x3) {
    return _ref4.apply(this, arguments);
  };
}();

Browser.prototype.reset = function () {
  this.layoutController.removeAllTrackXYPairs();
  this.contactMatrixView.clearImageCaches();
  this.tracks2D = [];
  this.tracks = [];
  this.$contactMaplabel.text("");
  this.$contactMaplabel.attr('title', "");
  this.$controlMaplabel.text("");
  this.$controlMaplabel.attr('title', "");
  this.dataset = undefined;
  this.controlDataset = undefined;
};

Browser.prototype.clearSession = function () {
  // Clear current datasets.
  this.dataset = undefined;
  this.controlDataset = undefined;
  this.setDisplayMode('A');
};
/**
 * Load a .hic file
 *
 * NOTE: public API function
 *
 * @return a promise for a dataset
 * @param config
 */


Browser.prototype.loadHicFile =
/*#__PURE__*/
function () {
  var _ref5 = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee4(config, noUpdates) {
    var name, prefix, previousGenomeId, eventBus, url, key, nviResponse, nvi, dataset;
    return regeneratorRuntime.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            if (config.url) {
              _context4.next = 2;
              break;
            }

            return _context4.abrupt("return", undefined);

          case 2:
            this.clearSession();
            _context4.prev = 3;

            if (!noUpdates) {
              this.contactMatrixView.startSpinner();
              this.$user_interaction_shield.show();
            }

            _context4.next = 7;
            return extractName(config);

          case 7:
            name = _context4.sent;
            prefix = this.controlDataset ? "A: " : "";
            this.$contactMaplabel.text(prefix + name);
            this.$contactMaplabel.attr('title', name);
            config.name = name;
            _context4.next = 14;
            return loadDataset(config);

          case 14:
            this.dataset = _context4.sent;
            this.dataset.name = name;
            previousGenomeId = this.genome ? this.genome.id : undefined;
            this.genome = new _genome__WEBPACK_IMPORTED_MODULE_9__["default"](this.dataset.genomeId, this.dataset.chromosomes); // TODO -- this is not going to work with browsers on different assemblies on the same page.

            igv.browser.genome = this.genome;

            if (this.genome.id !== previousGenomeId) {
              this.eventBus.post(Object(_hicEvent__WEBPACK_IMPORTED_MODULE_7__["default"])("GenomeChange", this.genome.id));
            }

            this.eventBus.post(Object(_hicEvent__WEBPACK_IMPORTED_MODULE_7__["default"])("MapLoad", this.dataset));

            if (config.state) {
              this.setState(config.state);
            } else if (config.synchState && this.canBeSynched(config.synchState)) {
              this.syncState(config.synchState);
            } else {
              this.setState(defaultState.clone());
            }

          case 22:
            _context4.prev = 22;

            if (!noUpdates) {
              this.$user_interaction_shield.hide();
              this.stopSpinner();
            }

            return _context4.finish(22);

          case 25:
            // Initiate loading of the norm vector index, but don't block if the "nvi" parameter is not available.
            // Let it load in the background
            eventBus = this.eventBus; // If nvi is not supplied, try reading it from remote lambda service

            if (!(!config.nvi && typeof config.url === "string")) {
              _context4.next = 37;
              break;
            }

            url = new URL(config.url);
            key = encodeURIComponent(url.hostname + url.pathname);
            _context4.next = 31;
            return fetch('https://t5dvc6kn3f.execute-api.us-east-1.amazonaws.com/dev/nvi/' + key);

          case 31:
            nviResponse = _context4.sent;

            if (!(nviResponse.status === 200)) {
              _context4.next = 37;
              break;
            }

            _context4.next = 35;
            return nviResponse.text();

          case 35:
            nvi = _context4.sent;

            if (nvi) {
              config.nvi = nvi;
            }

          case 37:
            if (!config.nvi) {
              _context4.next = 43;
              break;
            }

            _context4.next = 40;
            return this.dataset.getNormVectorIndex(config);

          case 40:
            eventBus.post(Object(_hicEvent__WEBPACK_IMPORTED_MODULE_7__["default"])("NormVectorIndexLoad", this.dataset));
            _context4.next = 45;
            break;

          case 43:
            dataset = this.dataset;
            dataset.getNormVectorIndex(config).then(function (normVectorIndex) {
              if (!config.isControl) {
                eventBus.post(Object(_hicEvent__WEBPACK_IMPORTED_MODULE_7__["default"])("NormVectorIndexLoad", dataset));
              }
            });

          case 45:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4, this, [[3,, 22, 25]]);
  }));

  return function (_x4, _x5) {
    return _ref5.apply(this, arguments);
  };
}();
/**
 * Load a .hic file for a control map
 *
 * NOTE: public API function
 *
 * @return a promise for a dataset
 * @param config
 */


Browser.prototype.loadHicControlFile =
/*#__PURE__*/
function () {
  var _ref6 = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee5(config, noUpdates) {
    var name, controlDataset;
    return regeneratorRuntime.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            _context5.prev = 0;
            this.$user_interaction_shield.show();
            this.contactMatrixView.startSpinner();
            this.controlUrl = config.url;
            _context5.next = 6;
            return extractName(config);

          case 6:
            name = _context5.sent;
            config.name = name;
            _context5.next = 10;
            return loadDataset(config);

          case 10:
            controlDataset = _context5.sent;
            controlDataset.name = name;

            if (!(!this.dataset || _hic__WEBPACK_IMPORTED_MODULE_2__["areCompatible"](this.dataset, controlDataset))) {
              _context5.next = 23;
              break;
            }

            this.controlDataset = controlDataset;

            if (this.dataset) {
              this.$contactMaplabel.text("A: " + this.dataset.name);
            }

            this.$controlMaplabel.text("B: " + controlDataset.name);
            this.$controlMaplabel.attr('title', controlDataset.name); //For the control dataset, block until the norm vector index is loaded

            _context5.next = 19;
            return controlDataset.getNormVectorIndex(config);

          case 19:
            this.eventBus.post(Object(_hicEvent__WEBPACK_IMPORTED_MODULE_7__["default"])("ControlMapLoad", this.controlDataset));

            if (!noUpdates) {
              this.update();
            }

            _context5.next = 24;
            break;

          case 23:
            igv.presentAlert('"B" map genome (' + controlDataset.genomeId + ') does not match "A" map genome (' + this.genome.id + ')');

          case 24:
            _context5.prev = 24;
            this.$user_interaction_shield.hide();
            this.stopSpinner();
            return _context5.finish(24);

          case 28:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5, this, [[0,, 24, 28]]);
  }));

  return function (_x6, _x7) {
    return _ref6.apply(this, arguments);
  };
}();
/**
 * Return a promise to extract the name of the dataset.  The promise is neccessacary because
 * google drive urls require a call to the API
 *
 * @returns Promise for the name
 */


function extractName(_x8) {
  return _extractName.apply(this, arguments);
}

function _extractName() {
  _extractName = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee15(config) {
    var json;
    return regeneratorRuntime.wrap(function _callee15$(_context15) {
      while (1) {
        switch (_context15.prev = _context15.next) {
          case 0:
            if (!(config.name === undefined && typeof config.url === "string" && config.url.includes("drive.google.com"))) {
              _context15.next = 7;
              break;
            }

            _context15.next = 3;
            return igv.google.getDriveFileInfo(config.url);

          case 3:
            json = _context15.sent;
            return _context15.abrupt("return", json.name);

          case 7:
            if (!(config.name === undefined)) {
              _context15.next = 11;
              break;
            }

            return _context15.abrupt("return", _hic__WEBPACK_IMPORTED_MODULE_2__["extractFilename"](config.url));

          case 11:
            return _context15.abrupt("return", config.name);

          case 12:
          case "end":
            return _context15.stop();
        }
      }
    }, _callee15, this);
  }));
  return _extractName.apply(this, arguments);
}

function findDefaultZoom(bpResolutions, defaultPixelSize, chrLength) {
  var viewDimensions = this.contactMatrixView.getViewDimensions(),
      d = Math.max(viewDimensions.width, viewDimensions.height),
      nBins = d / defaultPixelSize,
      z;

  for (z = bpResolutions.length - 1; z >= 0; z--) {
    if (chrLength / bpResolutions[z] <= nBins) {
      return z;
    }
  }

  return 0;
}

Browser.prototype.parseGotoInput =
/*#__PURE__*/
function () {
  var _ref7 = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee6(string) {
    var self, loci, xLocus, yLocus, result;
    return regeneratorRuntime.wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            self = this, loci = string.split(' ');

            if (loci.length === 1) {
              xLocus = self.parseLocusString(loci[0]);
              yLocus = xLocus;
            } else {
              xLocus = self.parseLocusString(loci[0]);
              yLocus = self.parseLocusString(loci[1]);
              if (yLocus === undefined) yLocus = xLocus;
            }

            if (!(xLocus === undefined)) {
              _context6.next = 9;
              break;
            }

            _context6.next = 5;
            return _hic__WEBPACK_IMPORTED_MODULE_2__["geneSearch"](this.genome.id, loci[0].trim());

          case 5:
            result = _context6.sent;

            if (result) {
              igv.selectedGene = loci[0].trim();
              xLocus = self.parseLocusString(result);
              yLocus = xLocus;
              self.state.selectedGene = loci[0].trim();
              self.goto(xLocus.chr, xLocus.start, xLocus.end, yLocus.chr, yLocus.start, yLocus.end, 5000);
            } else {
              alert('No feature found with name "' + loci[0] + '"');
            }

            _context6.next = 10;
            break;

          case 9:
            if (xLocus.wholeChr && yLocus.wholeChr) {
              self.setChromosomes(xLocus.chr, yLocus.chr);
            } else {
              self.goto(xLocus.chr, xLocus.start, xLocus.end, yLocus.chr, yLocus.start, yLocus.end);
            }

          case 10:
          case "end":
            return _context6.stop();
        }
      }
    }, _callee6, this);
  }));

  return function (_x9) {
    return _ref7.apply(this, arguments);
  };
}();

Browser.prototype.findMatchingZoomIndex = function (targetResolution, resolutionArray) {
  var z;

  for (z = resolutionArray.length - 1; z > 0; z--) {
    if (resolutionArray[z] >= targetResolution) {
      return z;
    }
  }

  return 0;
};

Browser.prototype.parseLocusString = function (locus) {
  var self = this,
      parts,
      chromosome,
      extent,
      locusObject = {},
      numeric;
  parts = locus.trim().split(':');
  chromosome = this.genome.getChromosome(_vendor_underscore__WEBPACK_IMPORTED_MODULE_1__["default"].first(parts).toLowerCase());

  if (!chromosome) {
    return undefined;
  } else {
    locusObject.chr = chromosome.index;
  }

  if (parts.length === 1) {
    // Chromosome name only
    locusObject.start = 0;
    locusObject.end = this.dataset.chromosomes[locusObject.chr].size;
    locusObject.wholeChr = true;
  } else {
    extent = parts[1].split("-");

    if (extent.length !== 2) {
      return undefined;
    } else {
      numeric = extent[0].replace(/\,/g, '');
      locusObject.start = isNaN(numeric) ? undefined : parseInt(numeric, 10) - 1;
      numeric = extent[1].replace(/\,/g, '');
      locusObject.end = isNaN(numeric) ? undefined : parseInt(numeric, 10);
    }
  }

  return locusObject;
};
/**
 * @param scaleFactor Values range from greater then 1 to decimal values less then one
 *                    Value > 1 are magnification (zoom in)
 *                    Decimal values (.9, .75, .25, etc.) are minification (zoom out)
 * @param anchorPx -- anchor position in pixels (should not move after transformation)
 * @param anchorPy
 */


Browser.prototype.pinchZoom =
/*#__PURE__*/
function () {
  var _ref8 = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee7(anchorPx, anchorPy, scaleFactor) {
    var bpResolutions, currentResolution, newResolution, newZoom, newPixelSize, zoomChanged, targetResolution, z, minPS, state, gx, gy;
    return regeneratorRuntime.wrap(function _callee7$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            if (!(this.state.chr1 === 0)) {
              _context7.next = 5;
              break;
            }

            _context7.next = 3;
            return this.zoomAndCenter(1, anchorPx, anchorPy);

          case 3:
            _context7.next = 34;
            break;

          case 5:
            _context7.prev = 5;
            this.startSpinner();
            bpResolutions = this.dataset.bpResolutions;
            currentResolution = bpResolutions[this.state.zoom];

            if (this.resolutionLocked || this.state.zoom === bpResolutions.length - 1 && scaleFactor > 1 || this.state.zoom === 0 && scaleFactor < 1) {
              // Can't change resolution level, must adjust pixel size
              newResolution = currentResolution;
              newPixelSize = Math.min(MAX_PIXEL_SIZE, this.state.pixelSize * scaleFactor);
              newZoom = this.state.zoom;
              zoomChanged = false;
            } else {
              targetResolution = currentResolution / this.state.pixelSize / scaleFactor;
              newZoom = this.findMatchingZoomIndex(targetResolution, bpResolutions);
              newResolution = bpResolutions[newZoom];
              zoomChanged = newZoom !== this.state.zoom;
              newPixelSize = Math.min(MAX_PIXEL_SIZE, newResolution / targetResolution);
            }

            _context7.next = 12;
            return minZoom.call(this, this.state.chr1, this.state.chr2);

          case 12:
            z = _context7.sent;

            if (!(!this.resolutionLocked && scaleFactor < 1 && newZoom < z)) {
              _context7.next = 17;
              break;
            }

            // Zoom out to whole genome
            this.setChromosomes(0, 0);
            _context7.next = 31;
            break;

          case 17:
            _context7.next = 19;
            return minPixelSize.call(this, this.state.chr1, this.state.chr2, newZoom);

          case 19:
            minPS = _context7.sent;
            state = this.state;
            newPixelSize = Math.max(newPixelSize, minPS); // Genomic anchor  -- this position should remain at anchorPx, anchorPy after state change

            gx = (state.x + anchorPx / state.pixelSize) * currentResolution;
            gy = (state.y + anchorPy / state.pixelSize) * currentResolution;
            state.x = gx / newResolution - anchorPx / newPixelSize;
            state.y = gy / newResolution - anchorPy / newPixelSize;
            state.zoom = newZoom;
            state.pixelSize = newPixelSize;
            this.clamp();
            this.contactMatrixView.zoomIn(anchorPx, anchorPy, 1 / scaleFactor);
            this.eventBus.post(Object(_hicEvent__WEBPACK_IMPORTED_MODULE_7__["default"])("LocusChange", {
              state: state,
              resolutionChanged: zoomChanged
            }));

          case 31:
            _context7.prev = 31;
            this.stopSpinner();
            return _context7.finish(31);

          case 34:
          case "end":
            return _context7.stop();
        }
      }
    }, _callee7, this, [[5,, 31, 34]]);
  }));

  return function (_x10, _x11, _x12) {
    return _ref8.apply(this, arguments);
  };
}();

Browser.prototype.wheelClickZoom =
/*#__PURE__*/
function () {
  var _ref9 = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee8(direction, centerPX, centerPY) {
    var z, newZoom;
    return regeneratorRuntime.wrap(function _callee8$(_context8) {
      while (1) {
        switch (_context8.prev = _context8.next) {
          case 0:
            if (!(this.resolutionLocked || this.state.chr1 === 0)) {
              _context8.next = 4;
              break;
            }

            // Resolution locked OR whole genome view
            this.zoomAndCenter(direction, centerPX, centerPY);
            _context8.next = 9;
            break;

          case 4:
            _context8.next = 6;
            return minZoom.call(this, this.state.chr1, this.state.chr2);

          case 6:
            z = _context8.sent;
            newZoom = this.state.zoom + direction;

            if (direction < 0 && newZoom < z) {
              this.setChromosomes(0, 0);
            } else {
              this.zoomAndCenter(direction, centerPX, centerPY);
            }

          case 9:
          case "end":
            return _context8.stop();
        }
      }
    }, _callee8, this);
  }));

  return function (_x13, _x14, _x15) {
    return _ref9.apply(this, arguments);
  };
}(); // Zoom in response to a double-click


Browser.prototype.zoomAndCenter =
/*#__PURE__*/
function () {
  var _ref10 = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee9(direction, centerPX, centerPY) {
    var genomeCoordX, genomeCoordY, chrX, chrY, bpResolutions, viewDimensions, dx, dy, minPS, state, newPixelSize, shiftRatio;
    return regeneratorRuntime.wrap(function _callee9$(_context9) {
      while (1) {
        switch (_context9.prev = _context9.next) {
          case 0:
            if (this.dataset) {
              _context9.next = 2;
              break;
            }

            return _context9.abrupt("return");

          case 2:
            if (!(this.state.chr1 === 0 && direction > 0)) {
              _context9.next = 7;
              break;
            }

            // jump from whole genome to chromosome
            genomeCoordX = centerPX * this.dataset.wholeGenomeResolution / this.state.pixelSize, genomeCoordY = centerPY * this.dataset.wholeGenomeResolution / this.state.pixelSize, chrX = this.genome.getChromsosomeForCoordinate(genomeCoordX), chrY = this.genome.getChromsosomeForCoordinate(genomeCoordY);
            this.setChromosomes(chrX.index, chrY.index);
            _context9.next = 28;
            break;

          case 7:
            bpResolutions = this.dataset.bpResolutions;
            viewDimensions = this.contactMatrixView.getViewDimensions();
            dx = centerPX === undefined ? 0 : centerPX - viewDimensions.width / 2;
            dy = centerPY === undefined ? 0 : centerPY - viewDimensions.height / 2;
            this.state.x += dx / this.state.pixelSize;
            this.state.y += dy / this.state.pixelSize;

            if (!(this.resolutionLocked || direction > 0 && this.state.zoom === bpResolutions.length - 1 || direction < 0 && this.state.zoom === 0)) {
              _context9.next = 27;
              break;
            }

            _context9.next = 16;
            return minPixelSize.call(this, this.state.chr1, this.state.chr2, this.state.zoom);

          case 16:
            minPS = _context9.sent;
            state = this.state;
            newPixelSize = Math.max(Math.min(MAX_PIXEL_SIZE, state.pixelSize * (direction > 0 ? 2 : 0.5)), minPS);
            shiftRatio = (newPixelSize - state.pixelSize) / newPixelSize;
            state.pixelSize = newPixelSize;
            state.x += shiftRatio * (viewDimensions.width / state.pixelSize);
            state.y += shiftRatio * (viewDimensions.height / state.pixelSize);
            this.clamp();
            this.eventBus.post(Object(_hicEvent__WEBPACK_IMPORTED_MODULE_7__["default"])("LocusChange", {
              state: state,
              resolutionChanged: false
            }));
            _context9.next = 28;
            break;

          case 27:
            this.setZoom(this.state.zoom + direction, centerPY, centerPY);

          case 28:
          case "end":
            return _context9.stop();
        }
      }
    }, _callee9, this);
  }));

  return function (_x16, _x17, _x18) {
    return _ref10.apply(this, arguments);
  };
}();

Browser.prototype.setZoom =
/*#__PURE__*/
function () {
  var _ref11 = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee10(zoom, cpx, cpy) {
    var bpResolutions, currentResolution, viewDimensions, xCenter, yCenter, newResolution, newXCenter, newYCenter, newPixelSize, zoomChanged, self, minPS, state;
    return regeneratorRuntime.wrap(function _callee10$(_context10) {
      while (1) {
        switch (_context10.prev = _context10.next) {
          case 0:
            _context10.prev = 0;
            // this.startSpinner()
            self = this; // Shift x,y to maintain center, if possible

            bpResolutions = this.dataset.bpResolutions;
            currentResolution = bpResolutions[this.state.zoom];
            viewDimensions = this.contactMatrixView.getViewDimensions();
            xCenter = this.state.x + viewDimensions.width / (2 * this.state.pixelSize); // center in bins

            yCenter = this.state.y + viewDimensions.height / (2 * this.state.pixelSize); // center in bins

            newResolution = bpResolutions[zoom];
            newXCenter = xCenter * (currentResolution / newResolution);
            newYCenter = yCenter * (currentResolution / newResolution);
            _context10.next = 12;
            return minPixelSize.call(this, this.state.chr1, this.state.chr2, zoom);

          case 12:
            minPS = _context10.sent;
            state = self.state;
            newPixelSize = Math.max(_hic__WEBPACK_IMPORTED_MODULE_2__["defaultPixelSize"], minPS);
            zoomChanged = state.zoom !== zoom;
            state.zoom = zoom;
            state.x = Math.max(0, newXCenter - viewDimensions.width / (2 * newPixelSize));
            state.y = Math.max(0, newYCenter - viewDimensions.height / (2 * newPixelSize));
            state.pixelSize = newPixelSize;
            self.clamp();
            _context10.next = 23;
            return self.contactMatrixView.zoomIn();

          case 23:
            self.eventBus.post(Object(_hicEvent__WEBPACK_IMPORTED_MODULE_7__["default"])("LocusChange", {
              state: state,
              resolutionChanged: zoomChanged
            }));

          case 24:
            _context10.prev = 24;
            return _context10.finish(24);

          case 26:
          case "end":
            return _context10.stop();
        }
      }
    }, _callee10, this, [[0,, 24, 26]]);
  }));

  return function (_x19, _x20, _x21) {
    return _ref11.apply(this, arguments);
  };
}();

Browser.prototype.setChromosomes =
/*#__PURE__*/
function () {
  var _ref12 = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee11(chr1, chr2) {
    var z, minPS;
    return regeneratorRuntime.wrap(function _callee11$(_context11) {
      while (1) {
        switch (_context11.prev = _context11.next) {
          case 0:
            _context11.prev = 0;
            this.startSpinner();
            this.state.chr1 = Math.min(chr1, chr2);
            this.state.chr2 = Math.max(chr1, chr2);
            this.state.x = 0;
            this.state.y = 0;
            _context11.next = 8;
            return minZoom.call(this, chr1, chr2);

          case 8:
            z = _context11.sent;
            this.state.zoom = z;
            _context11.next = 12;
            return minPixelSize.call(this, this.state.chr1, this.state.chr2, this.state.zoom);

          case 12:
            minPS = _context11.sent;
            this.state.pixelSize = Math.min(100, Math.max(_hic__WEBPACK_IMPORTED_MODULE_2__["defaultPixelSize"], minPS));
            this.eventBus.post(Object(_hicEvent__WEBPACK_IMPORTED_MODULE_7__["default"])("LocusChange", {
              state: this.state,
              resolutionChanged: true
            }));

          case 15:
            _context11.prev = 15;
            this.stopSpinner();
            return _context11.finish(15);

          case 18:
          case "end":
            return _context11.stop();
        }
      }
    }, _callee11, this, [[0,, 15, 18]]);
  }));

  return function (_x22, _x23) {
    return _ref12.apply(this, arguments);
  };
}();

Browser.prototype.updateLayout =
/*#__PURE__*/
_asyncToGenerator(
/*#__PURE__*/
regeneratorRuntime.mark(function _callee12() {
  var self, sync;
  return regeneratorRuntime.wrap(function _callee12$(_context12) {
    while (1) {
      switch (_context12.prev = _context12.next) {
        case 0:
          sync = function _ref14(trackRenderer, index) {
            trackRenderer.$viewport.css({
              order: index
            });
            trackRenderer.syncCanvas();
          };

          self = this;
          this.clamp();
          this.trackRenderers.forEach(function (xyTrackRenderPair, index) {
            sync(xyTrackRenderPair.x, index);
            sync(xyTrackRenderPair.y, index);
          });
          this.layoutController.xAxisRuler.update();
          this.layoutController.yAxisRuler.update();
          _context12.next = 8;
          return this.update();

        case 8:
        case "end":
          return _context12.stop();
      }
    }
  }, _callee12, this);
}));

function minZoom(_x24, _x25) {
  return _minZoom.apply(this, arguments);
}

function _minZoom() {
  _minZoom = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee16(chr1, chr2) {
    var viewDimensions, chr1Length, chr2Length, binSize, matrix;
    return regeneratorRuntime.wrap(function _callee16$(_context16) {
      while (1) {
        switch (_context16.prev = _context16.next) {
          case 0:
            viewDimensions = this.contactMatrixView.getViewDimensions();
            chr1Length = this.dataset.chromosomes[chr1].size;
            chr2Length = this.dataset.chromosomes[chr2].size;
            binSize = Math.max(chr1Length / viewDimensions.width, chr2Length / viewDimensions.height);
            _context16.next = 6;
            return this.dataset.getMatrix(chr1, chr2);

          case 6:
            matrix = _context16.sent;
            return _context16.abrupt("return", matrix.findZoomForResolution(binSize));

          case 8:
          case "end":
            return _context16.stop();
        }
      }
    }, _callee16, this);
  }));
  return _minZoom.apply(this, arguments);
}

function minPixelSize(_x26, _x27, _x28) {
  return _minPixelSize.apply(this, arguments);
}
/**
 * Set the matrix state.  Used to restore state from a bookmark
 * @param state  browser state
 */


function _minPixelSize() {
  _minPixelSize = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee17(chr1, chr2, z) {
    var viewDimensions, chr1Length, chr2Length, matrix, zd, binSize, nBins1, nBins2;
    return regeneratorRuntime.wrap(function _callee17$(_context17) {
      while (1) {
        switch (_context17.prev = _context17.next) {
          case 0:
            viewDimensions = this.contactMatrixView.getViewDimensions();
            chr1Length = this.dataset.chromosomes[chr1].size;
            chr2Length = this.dataset.chromosomes[chr2].size;
            _context17.next = 5;
            return this.dataset.getMatrix(chr1, chr2);

          case 5:
            matrix = _context17.sent;
            zd = matrix.getZoomDataByIndex(z, "BP");
            binSize = zd.zoom.binSize;
            nBins1 = chr1Length / binSize;
            nBins2 = chr2Length / binSize;
            return _context17.abrupt("return", Math.min(viewDimensions.width / nBins1, viewDimensions.height / nBins2));

          case 11:
          case "end":
            return _context17.stop();
        }
      }
    }, _callee17, this);
  }));
  return _minPixelSize.apply(this, arguments);
}

Browser.prototype.setState =
/*#__PURE__*/
function () {
  var _ref15 = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee13(state) {
    var minPS;
    return regeneratorRuntime.wrap(function _callee13$(_context13) {
      while (1) {
        switch (_context13.prev = _context13.next) {
          case 0:
            this.state = state; // Possibly adjust pixel size

            _context13.next = 3;
            return minPixelSize.call(this, this.state.chr1, this.state.chr2, this.state.zoom);

          case 3:
            minPS = _context13.sent;
            this.state.pixelSize = Math.max(state.pixelSize, minPS);
            this.eventBus.post(new _hicEvent__WEBPACK_IMPORTED_MODULE_7__["default"]("LocusChange", {
              state: this.state,
              resolutionChanged: true
            }));

          case 6:
          case "end":
            return _context13.stop();
        }
      }
    }, _callee13, this);
  }));

  return function (_x29) {
    return _ref15.apply(this, arguments);
  };
}();
/**
 * Return a modified state object used for synching.  Other datasets might have different chromosome ordering
 * and resolution arrays
 */


Browser.prototype.getSyncState = function () {
  return {
    chr1Name: this.dataset.chromosomes[this.state.chr1].name,
    chr2Name: this.dataset.chromosomes[this.state.chr2].name,
    binSize: this.dataset.bpResolutions[this.state.zoom],
    binX: this.state.x,
    // TODO -- tranlsate to lower right corner
    binY: this.state.y,
    pixelSize: this.state.pixelSize
  };
};
/**
 * Return true if this browser can be synched to the given state
 * @param syncState
 */


Browser.prototype.canBeSynched = function (syncState) {
  return this.dataset && this.dataset.getChrIndexFromName(syncState.chr1Name) !== undefined && this.dataset.getChrIndexFromName(syncState.chr2Name) !== undefined;
};
/**
 * Used to synch state with other browsers
 * @param state  browser state
 */


Browser.prototype.syncState = function (syncState) {
  if (!this.dataset) return;
  var chr1 = this.genome.getChromosome(syncState.chr1Name),
      chr2 = this.genome.getChromosome(syncState.chr2Name),
      zoom = this.dataset.getZoomIndexForBinSize(syncState.binSize, "BP"),
      x = syncState.binX,
      y = syncState.binY,
      pixelSize = syncState.pixelSize;

  if (!(chr1 && chr2)) {
    return; // Can't be synched.
  }

  if (zoom === undefined) {
    // Get the closest zoom available and adjust pixel size.   TODO -- cache this somehow
    zoom = this.findMatchingZoomIndex(syncState.binSize, this.dataset.bpResolutions); // Compute equivalent in basepairs / pixel

    pixelSize = syncState.pixelSize / syncState.binSize * this.dataset.bpResolutions[zoom]; // Translate bins so that origin is unchanged in basepairs

    x = syncState.binX / syncState.pixelSize * pixelSize;
    y = syncState.binY / syncState.pixelSize * pixelSize;

    if (pixelSize > MAX_PIXEL_SIZE) {
      return;
    }
  }

  var zoomChanged = this.state.zoom !== zoom;
  this.state.chr1 = chr1.index;
  this.state.chr2 = chr2.index;
  this.state.zoom = zoom;
  this.state.x = x;
  this.state.y = y;
  this.state.pixelSize = pixelSize;
  this.eventBus.post(Object(_hicEvent__WEBPACK_IMPORTED_MODULE_7__["default"])("LocusChange", {
    state: this.state,
    resolutionChanged: zoomChanged
  }, false));
};

Browser.prototype.setNormalization = function (normalization) {
  this.state.normalization = normalization;
  this.eventBus.post(Object(_hicEvent__WEBPACK_IMPORTED_MODULE_7__["default"])("NormalizationChange", this.state.normalization));
};

Browser.prototype.shiftPixels = function (dx, dy) {
  var self = this;
  if (!this.dataset) return;
  this.state.x += dx / this.state.pixelSize;
  this.state.y += dy / this.state.pixelSize;
  this.clamp();
  var locusChangeEvent = Object(_hicEvent__WEBPACK_IMPORTED_MODULE_7__["default"])("LocusChange", {
    state: this.state,
    resolutionChanged: false,
    dragging: true
  });
  locusChangeEvent.dragging = true;
  this.eventBus.post(locusChangeEvent);
};

Browser.prototype.goto = function (chr1, bpX, bpXMax, chr2, bpY, bpYMax, minResolution) {
  var xCenter,
      yCenter,
      targetResolution,
      newResolution,
      viewDimensions = this.contactMatrixView.getViewDimensions(),
      bpResolutions = this.dataset.bpResolutions,
      viewWidth = viewDimensions.width,
      maxExtent,
      newZoom,
      newPixelSize,
      newXBin,
      newYBin,
      zoomChanged;
  targetResolution = Math.max((bpXMax - bpX) / viewDimensions.width, (bpYMax - bpY) / viewDimensions.height);

  if (minResolution && targetResolution < minResolution) {
    maxExtent = viewWidth * minResolution;
    xCenter = (bpX + bpXMax) / 2;
    yCenter = (bpY + bpYMax) / 2;
    bpX = Math.max(xCenter - maxExtent / 2);
    bpY = Math.max(0, yCenter - maxExtent / 2);
    targetResolution = minResolution;
  }

  if (true === this.resolutionLocked && minResolution === undefined) {
    zoomChanged = false;
    newZoom = this.state.zoom;
  } else {
    newZoom = this.findMatchingZoomIndex(targetResolution, bpResolutions);
    zoomChanged = newZoom !== this.state.zoom;
  }

  newResolution = bpResolutions[newZoom];
  newPixelSize = Math.min(MAX_PIXEL_SIZE, Math.max(1, newResolution / targetResolution));
  newXBin = bpX / newResolution;
  newYBin = bpY / newResolution;
  this.state.chr1 = chr1;
  this.state.chr2 = chr2;
  this.state.zoom = newZoom;
  this.state.x = newXBin;
  this.state.y = newYBin;
  this.state.pixelSize = newPixelSize;
  this.contactMatrixView.clearImageCaches();
  this.eventBus.post(Object(_hicEvent__WEBPACK_IMPORTED_MODULE_7__["default"])("LocusChange", {
    state: this.state,
    resolutionChanged: zoomChanged
  }));
};

Browser.prototype.clamp = function () {
  var viewDimensions = this.contactMatrixView.getViewDimensions(),
      chr1Length = this.dataset.chromosomes[this.state.chr1].size,
      chr2Length = this.dataset.chromosomes[this.state.chr2].size,
      binSize = this.dataset.bpResolutions[this.state.zoom],
      maxX = chr1Length / binSize - viewDimensions.width / this.state.pixelSize,
      maxY = chr2Length / binSize - viewDimensions.height / this.state.pixelSize; // Negative maxX, maxY indicates pixelSize is not enough to fill view.  In this case we clamp x, y to 0,0

  maxX = Math.max(0, maxX);
  maxY = Math.max(0, maxY);
  this.state.x = Math.min(Math.max(0, this.state.x), maxX);
  this.state.y = Math.min(Math.max(0, this.state.y), maxY);
};

Browser.prototype.receiveEvent = function (event) {
  var self = this;

  if ("LocusChange" === event.type) {
    if (event.propogate) {
      self.synchedBrowsers.forEach(function (browser) {
        browser.syncState(self.getSyncState());
      });
    }

    this.update(event);
  }
};
/**
 * Update the maps and tracks.
 *
 * @param event
 */


Browser.prototype.update =
/*#__PURE__*/
function () {
  var _ref16 = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee14(event) {
    return regeneratorRuntime.wrap(function _callee14$(_context14) {
      while (1) {
        switch (_context14.prev = _context14.next) {
          case 0:
            try {
              this.startSpinner();

              if (event !== undefined && "LocusChange" === event.type) {
                this.layoutController.xAxisRuler.locusChange(event);
                this.layoutController.yAxisRuler.locusChange(event);
              }

              this.renderTracks(); //this.contactMatrixView.update();
            } finally {
              this.stopSpinner();
            }

          case 1:
          case "end":
            return _context14.stop();
        }
      }
    }, _callee14, this);
  }));

  return function (_x30) {
    return _ref16.apply(this, arguments);
  };
}();

Browser.prototype.repaintMatrix = function () {
  this.contactMatrixView.imageTileCache = {};
  this.contactMatrixView.initialImage = undefined;
  this.contactMatrixView.update();
};

Browser.prototype.resolution = function () {
  return this.dataset.bpResolutions[this.state.zoom];
};

function getNviString(dataset) {
  return dataset.hicFile.config.nvi; // if (dataset.hicFile.normalizationVectorIndexRange) {
  //     var range = dataset.hicFile.normalizationVectorIndexRange,
  //         nviString = String(range.start) + "," + String(range.size);
  //     return nviString
  // } else {
  //     return undefined;
  // }
}

function getBlockString(dataset) {} // parseUri 1.2.2
// (c) Steven Levithan <stevenlevithan.com>
// MIT License


function parseUri(str) {
  var o = parseUri.options,
      m = o.parser[o.strictMode ? "strict" : "loose"].exec(str),
      uri = {},
      i = 14;

  while (i--) {
    uri[o.key[i]] = m[i] || "";
  }

  uri[o.q.name] = {};
  uri[o.key[12]].replace(o.q.parser, function ($0, $1, $2) {
    if ($1) uri[o.q.name][$1] = $2;
  });
  return uri;
}

parseUri.options = {
  strictMode: false,
  key: ["source", "protocol", "authority", "userInfo", "user", "password", "host", "port", "relative", "path", "directory", "file", "query", "anchor"],
  q: {
    name: "queryKey",
    parser: /(?:^|&)([^&=]*)=?([^&]*)/g
  },
  parser: {
    strict: /^(?:([^:\/?#]+):)?(?:\/\/((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\/?#]*)(?::(\d*))?))?((((?:[^?#\/]*\/)*)([^?#]*))(?:\?([^#]*))?(?:#(.*))?)/,
    loose: /^(?:(?![^:@]+:[^:@\/]*@)([^:\/?#.]+):)?(?:\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/
  }
};

function gup(href, name) {
  name = name.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]");
  var regexS = "[\\?&]" + name + "=([^&#]*)";
  var regex = new RegExp(regexS);
  var results = regex.exec(href);
  if (results == null) return undefined;else return results[1];
}

function replaceAll(str, target, replacement) {
  return str.split(target).join(replacement);
}

var urlShortcuts = {
  "*s3e/": "https://hicfiles.s3.amazonaws.com/external/",
  "*s3/": "https://hicfiles.s3.amazonaws.com/",
  "*s3e_/": "http://hicfiles.s3.amazonaws.com/external/",
  "*s3_/": "http://hicfiles.s3.amazonaws.com/",
  "*enc/": "https://www.encodeproject.org/files/"
};

Browser.prototype.getQueryString = function () {
  var queryString, nviString, trackString, displayMode;
  if (!(this.dataset && this.dataset.url)) return ""; // URL is required

  queryString = [];
  queryString.push(paramString("hicUrl", this.dataset.url));

  if (this.dataset.name) {
    queryString.push(paramString("name", this.dataset.name));
  }

  queryString.push(paramString("state", this.state.stringify()));
  queryString.push(paramString("colorScale", this.contactMatrixView.getColorScale().stringify()));

  if (igv.selectedGene) {
    queryString.push(paramString("selectedGene", igv.selectedGene));
  }

  nviString = getNviString(this.dataset);

  if (nviString) {
    queryString.push(paramString("nvi", nviString));
  }

  if (this.controlDataset) {
    queryString.push(paramString("controlUrl", this.controlUrl));

    if (this.controlDataset.name) {
      queryString.push(paramString("controlName", this.controlDataset.name));
    }

    displayMode = this.getDisplayMode();

    if (displayMode) {
      queryString.push(paramString("displayMode", this.getDisplayMode()));
    }

    nviString = getNviString(this.controlDataset);

    if (nviString) {
      queryString.push(paramString("controlNvi", nviString));
    }

    if (this.controlMapWidget.getDisplayModeCycle() !== undefined) {
      queryString.push(paramString("cycle", "true"));
    }
  }

  if (this.trackRenderers.length > 0 || this.tracks2D.length > 0) {
    trackString = "";
    this.trackRenderers.forEach(function (trackRenderer) {
      var track = trackRenderer.x.track,
          config = track.config,
          url = config.url,
          dataRange = track.dataRange;

      if (typeof url === "string") {
        if (trackString.length > 0) trackString += "|||";
        trackString += url;
        trackString += "|" + (track.name ? replaceAll(track.name, "|", "$") : '');
        trackString += "|" + (dataRange ? dataRange.min + "-" + dataRange.max : "");
        trackString += "|" + track.color;
      }
    });
    this.tracks2D.forEach(function (track) {
      var config = track.config,
          url = config.url;

      if (typeof url === "string") {
        if (trackString.length > 0) trackString += "|||";
        trackString += url;
        trackString += "|" + (track.name ? replaceAll(track.name, "|", "$") : '');
        trackString += "|"; // Data range

        trackString += "|" + track.color;
      }
    });

    if (trackString.length > 0) {
      queryString.push(paramString("tracks", trackString));
    }
  }

  var captionDiv = document.getElementById('hic-caption');

  if (captionDiv) {
    var captionText = captionDiv.textContent;

    if (captionText) {
      captionText = captionText.trim();

      if (captionText) {
        queryString.push(paramString("caption", captionText));
      }
    }
  } // if (this.config.normVectorFiles && this.config.normVectorFiles.length > 0) {
  //
  //     var normVectorString = "";
  //     this.config.normVectorFiles.forEach(function (url) {
  //
  //         if (normVectorString.length > 0) normVectorString += "|||";
  //         normVectorString += url;
  //
  //     });
  //     queryString.push(paramString("normVectorFiles", normVectorString));
  // }


  return queryString.join("&");

  function paramString(key, value) {
    return key + "=" + paramEncode(value);
  }
};
/**
 * Extend config properties with query parameters
 *
 * @param query
 * @param config
 */


igv.Browser.decodeQuery = function (query, config, uriDecode) {
  var hicUrl, name, stateString, colorScale, trackString, selectedGene, nvi, normVectorString, controlUrl, ratioColorScale, controlName, displayMode, controlNvi, captionText, cycle;
  hicUrl = query["hicUrl"];
  name = query["name"];
  stateString = query["state"];
  colorScale = query["colorScale"];
  trackString = query["tracks"];
  selectedGene = query["selectedGene"];
  nvi = query["nvi"];
  normVectorString = query["normVectorFiles"];
  controlUrl = query["controlUrl"];
  controlName = query["controlName"];
  ratioColorScale = query["ratioColorScale"];
  displayMode = query["displayMode"];
  controlNvi = query["controlNvi"];
  captionText = query["caption"];
  cycle = query["cycle"];

  if (hicUrl) {
    hicUrl = paramDecode(hicUrl, uriDecode);
    Object.keys(urlShortcuts).forEach(function (key) {
      var value = urlShortcuts[key];
      if (hicUrl.startsWith(key)) hicUrl = hicUrl.replace(key, value);
    });
    config.url = hicUrl;
  }

  if (name) {
    config.name = paramDecode(name, uriDecode);
  }

  if (controlUrl) {
    controlUrl = paramDecode(controlUrl, uriDecode);
    Object.keys(urlShortcuts).forEach(function (key) {
      var value = urlShortcuts[key];
      if (controlUrl.startsWith(key)) controlUrl = controlUrl.replace(key, value);
    });
    config.controlUrl = controlUrl;
  }

  if (controlName) {
    config.controlName = paramDecode(controlName, uriDecode);
  }

  if (stateString) {
    stateString = paramDecode(stateString, uriDecode);
    config.state = destringifyStateV0(stateString);
  }

  if (colorScale) {
    colorScale = paramDecode(colorScale, uriDecode);
    config.colorScale = _hic__WEBPACK_IMPORTED_MODULE_2__["destringifyColorScale"](colorScale);
  }

  if (displayMode) {
    config.displayMode = paramDecode(displayMode, uriDecode);
  }

  if (trackString) {
    trackString = paramDecode(trackString, uriDecode);
    config.tracks = destringifyTracksV0(trackString); // If an oAuth token is provided append it to track configs.

    if (config.tracks && config.oauthToken) {
      config.tracks.forEach(function (t) {
        t.oauthToken = config.oauthToken;
      });
    }
  }

  if (selectedGene) {
    igv.selectedGene = selectedGene;
  }

  if (captionText) {
    captionText = paramDecode(captionText, uriDecode);
    var captionDiv = document.getElementById("hic-caption");

    if (captionDiv) {
      captionDiv.textContent = captionText;
    }
  }

  config.cycle = cycle; // Norm vector file loading disabled -- too slow
  // if (normVectorString) {
  //     config.normVectorFiles = normVectorString.split("|||");
  // }

  if (nvi) {
    config.nvi = paramDecode(nvi, uriDecode);
  }

  if (controlNvi) {
    config.controlNvi = paramDecode(controlNvi, uriDecode);
  }

  function destringifyStateV0(string) {
    var tokens = string.split(",");
    return new _hicState__WEBPACK_IMPORTED_MODULE_10__["default"](parseInt(tokens[0]), // chr1
    parseInt(tokens[1]), // chr2
    parseFloat(tokens[2]), // zoom
    parseFloat(tokens[3]), // x
    parseFloat(tokens[4]), // y
    parseFloat(tokens[5]), // pixelSize
    tokens.length > 6 ? tokens[6] : "NONE" // normalization
    );
  }

  function destringifyTracksV0(tracks) {
    var trackStringList = tracks.split("|||"),
        configList = [],
        keys,
        key,
        i,
        len;
    trackStringList.forEach(function (trackString) {
      var tokens, url, config, name, dataRangeString, color, r;
      tokens = trackString.split("|");
      color = tokens.pop();
      url = tokens[0];

      if (url && url.trim().length > 0) {
        keys = Object.keys(urlShortcuts);

        for (i = 0, len = keys.length; i < len; i++) {
          key = keys[i];
          var value = urlShortcuts[key];

          if (url.startsWith(key)) {
            url = url.replace(key, value);
            break;
          }
        }

        config = {
          url: url
        };

        if (tokens.length > 1) {
          name = tokens[1];
        }

        if (tokens.length > 2) {
          dataRangeString = tokens[2];
        }

        if (name) {
          config.name = replaceAll(name, "$", "|");
        }

        if (dataRangeString) {
          if (dataRangeString.startsWith("-")) {
            r = dataRangeString.substring(1).split("-");
            config.min = -parseFloat(r[0]);
            config.max = parseFloat(r[1]);
          } else {
            r = dataRangeString.split("-");
            config.min = parseFloat(r[0]);
            config.max = parseFloat(r[1]);
          }
        }

        if (color) {
          config.color = color;
        }

        configList.push(config);
      }
    });
    return configList;
  }
};
/**
 * Minimally encode a parameter string (i.e. value in a query string).  In general its not neccessary
 * to fully % encode parameter values (see RFC3986).
 *
 * @param str
 */


function paramEncode(str) {
  var s = replaceAll(str, '&', '%26');
  s = replaceAll(s, ' ', '+');
  s = replaceAll(s, "#", "%23");
  s = replaceAll(s, "?", "%3F");
  s = replaceAll(s, "=", "%3D");
  return s;
}

function paramDecode(str, uriDecode) {
  if (uriDecode) {
    return decodeURIComponent(str); // Still more backward compatibility
  } else {
    var s = replaceAll(str, '%26', '&');
    s = replaceAll(s, '%20', ' ');
    s = replaceAll(s, '+', ' ');
    s = replaceAll(s, "%7C", "|");
    s = replaceAll(s, "%23", "#");
    s = replaceAll(s, "%3F", "?");
    s = replaceAll(s, "%3D", "=");
    return s;
  }
}
/**
 * Encode an array of strings.  A "|" is used as a delimiter, therefore any "|" in individual elements
 * must be encoded.
 *
 * @param array
 * @returns {string}
 */


function encodeArray(array) {
  var arrayStr = "",
      i;

  if (array.length > 0) {
    arrayStr += encodeArrayElement(array[0]);

    for (i = 1; i < array.length; i++) {
      arrayStr += "|";
      arrayStr += encodeArrayElement(array[i]);
    }
  }

  return arrayStr;

  function encodeArrayElement(elem) {
    var s = paramEncode(elem);
    s = replaceAll(s, "|", "%7C");
    return s;
  }
}
/**
 * Decode a string to an array of strings.  Its assumed that the string was created with encodeArray.
 *
 * @param str
 * @returns {Array}
 */


function decodeArray(str) {
  var array, elements;
  array = [];
  elements = str.split("|");
  elements.forEach(function (elem) {
    array.push(decodeArrayElement(elem));
  });
  return array;

  function decodeArrayElement(elem) {
    var s = paramDecode(elem, false);
    s = replaceAll(s, "%7C", "|");
    return s;
  }
}

function loadDataset(_x31) {
  return _loadDataset.apply(this, arguments);
}

function _loadDataset() {
  _loadDataset = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee18(config) {
    var straw, hicFile, dataset;
    return regeneratorRuntime.wrap(function _callee18$(_context18) {
      while (1) {
        switch (_context18.prev = _context18.next) {
          case 0:
            // If this is a local file, supply an io.File object.  Straw knows nothing about browser local files
            if (config.url instanceof File) {
              config.blob = config.url; //config.file = new hic.LocalFile(config.url)

              delete config.url;
            } else {
              // If this is a google url, add api KEY
              if (config.url.indexOf("drive.google.com") >= 0 || config.url.indexOf("www.googleapis.com") > 0) {
                config.url = igv.google.driveDownloadURL(config.url);
                config.apiKey = igv.google.apiKey;
              }
            }

            straw = new _vendor_hic_straw_es6__WEBPACK_IMPORTED_MODULE_11__["default"](config);
            hicFile = straw.hicFile;
            _context18.next = 5;
            return hicFile.init();

          case 5:
            dataset = new _hicDataset__WEBPACK_IMPORTED_MODULE_8__["default"](hicFile);
            dataset.url = config.url;
            return _context18.abrupt("return", dataset);

          case 8:
          case "end":
            return _context18.stop();
        }
      }
    }, _callee18, this);
  }));
  return _loadDataset.apply(this, arguments);
}

function presentError(prefix, error) {
  var httpMessages = {
    "401": "Access unauthorized",
    "403": "Access forbidden",
    "404": "Not found"
  };
  var msg = error.message;

  if (httpMessages.hasOwnProperty(msg)) {
    msg = httpMessages[msg];
  }

  igv.presentAlert(prefix + ": " + msg);
}

;
/* harmony default export */ __webpack_exports__["default"] = (Browser);

/***/ }),

/***/ "./js/hicColorScaleWidget.js":
/*!***********************************!*\
  !*** ./js/hicColorScaleWidget.js ***!
  \***********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../vendor/jquery-1.12.4 */ "./vendor/jquery-1.12.4.js");
/*
 *  The MIT License (MIT)
 *
 * Copyright (c) 2016-2017 The Regents of the University of California
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
 * associated documentation files (the "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the
 * following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial
 * portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
 * BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,  FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 */

/**
 * Created by dat on 3/3/17.
 */


var ColorScaleWidget = function ColorScaleWidget(browser, $container) {
  var self = this,
      $fa,
      rgbString;
  this.browser = browser;
  this.$container = Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__["default"])('<div class="hic-colorscale-widget-container">');
  $container.append(this.$container); // '-' color swatch

  rgbString = getRGBString(browser, '-', "blue"); // TODO -- get the default from browser.

  this.$minusButton = colorSwatch(rgbString);
  this.$container.append(this.$minusButton);
  this.$minusButton.hide();
  this.minusColorPicker = createColorPicker(browser, this.$minusButton, '-', function () {
    self.minusColorPicker.$container.hide();
  });
  this.minusColorPicker.$container.hide(); // '+' color swatch

  rgbString = getRGBString(browser, '+', "red"); // TODO -- get the default from browser

  this.$plusButton = colorSwatch(rgbString);
  this.$container.append(this.$plusButton);
  this.plusColorPicker = createColorPicker(browser, this.$plusButton, '+', function () {
    self.plusColorPicker.$container.hide();
  });
  this.plusColorPicker.$container.hide();
  this.$minusButton.on('click', function (e) {
    self.presentColorPicker(Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__["default"])(this), self.minusColorPicker.$container);
  });
  this.$plusButton.on('click', function (e) {
    self.presentColorPicker(Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__["default"])(this), self.plusColorPicker.$container);
  }); // threshold

  this.$high_colorscale_input = Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__["default"])('<input>', {
    'type': 'text',
    'placeholder': '',
    'title': 'color scale input'
  });
  this.$container.append(this.$high_colorscale_input);
  this.$high_colorscale_input.on('change', function (e) {
    var numeric;
    numeric = igv.numberUnFormatter(Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__["default"])(this).val());

    if (isNaN(numeric)) {// do nothing
    } else {
      browser.setColorScaleThreshold(numeric);
    }
  }); // threshold -

  $fa = Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__["default"])("<i>", {
    class: 'fa fa-minus',
    'aria-hidden': 'true',
    'title': 'negative threshold'
  });
  $fa.on('click', function (e) {
    updateThreshold(1.0 / 2.0);
  });
  this.$container.append($fa); // threshold +

  $fa = Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__["default"])("<i>", {
    class: 'fa fa-plus',
    'aria-hidden': 'true',
    'title': 'positive threshold'
  });
  $fa.on('click', function (e) {
    updateThreshold(2.0);
  });
  this.$container.append($fa);
  this.browser.eventBus.subscribe("MapLoad", this);
  this.browser.eventBus.subscribe("ColorScale", this);
  this.browser.eventBus.subscribe("DisplayMode", this);

  function updateThreshold(scaleFactor) {
    var threshold, colorScale;
    colorScale = browser.getColorScale();
    threshold = colorScale.getThreshold() * scaleFactor;
    browser.setColorScaleThreshold(threshold);
    self.$high_colorscale_input.val(igv.numberFormatter(colorScale.getThreshold()));
  }
};

ColorScaleWidget.prototype.receiveEvent = function (event) {
  if ('ColorScale' === event.type) {
    this.$high_colorscale_input.val(event.data.threshold);
    this.$plusButton.find('.fa-square').css({
      color: igv.Color.rgbColor(event.data.r, event.data.g, event.data.b)
    });
  } else if ("DisplayMode" === event.type) {
    if ("AOB" === event.data || "BOA" === event.data) {
      this.$minusButton.show();
    } else {
      this.$minusButton.hide();
    }
  }
};

ColorScaleWidget.prototype.presentColorPicker = function ($presentingButton, $colorpicker) {
  this.$plusButton.find('.fa-square').css({
    '-webkit-text-stroke-color': 'transparent'
  });
  this.$minusButton.find('.fa-square').css({
    '-webkit-text-stroke-color': 'transparent'
  });
  this.$presentingButton = $presentingButton;
  this.$presentingButton.find('.fa-square').css({
    '-webkit-text-stroke-color': 'black'
  });
  $colorpicker.show();
};

function getRGBString(browser, type, defaultColor) {
  var colorScale, comps;
  colorScale = browser.getColorScale();

  if (colorScale) {
    comps = colorScale.getColorComponents(type);
    return igv.Color.rgbColor(comps.r, comps.g, comps.b);
  } else {
    return defaultColor;
  }
}

function createColorPicker(browser, $presentingButton, type, closeHandler) {
  var config = {
    $parent: $presentingButton,
    width: 456,
    height: undefined,
    closeHandler: closeHandler
  };
  var colorPicker = new igv.genericContainer(config);

  function colorHandler(hexString) {
    var rgbString, rgb;
    $presentingButton.find('.fa-square').css({
      color: hexString
    });
    rgbString = igv.Color.hexToRgb(hexString);
    rgb = rgbString.split('(').pop().split(')').shift().split(',').map(function (str) {
      return parseInt(str, 10);
    });
    browser.getColorScale().setColorComponents({
      r: rgb[0],
      g: rgb[1],
      b: rgb[2]
    }, type);
    browser.repaintMatrix();
  }

  igv.createColorSwatchSelector(colorPicker.$container, colorHandler, undefined);
  return colorPicker;
}

function colorSwatch(rgbString, doPlusOrMinusOrUndefined) {
  var $swatch, $span, $fa_square, $fa_plus_minus, $fa, str;
  $swatch = Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__["default"])('<div>', {
    class: 'igv-color-swatch'
  });
  $fa = Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__["default"])('<i>', {
    class: 'fa fa-square fa-2x',
    'title': 'Present color swatches'
  });
  $swatch.append($fa);
  $fa.css({
    color: rgbString
  }); // if (undefined === doPlusOrMinusOrUndefined) {
  //     $fa = $('<i>', { class: 'fa fa-square fa-lg' });
  //     $swatch.append($fa);
  //     $fa.css({color: rgbString});
  //
  // } else {
  //
  //     $span = $('<span>', { class: 'fa-stack' });
  //     $swatch.append($span);
  //
  //     // background square
  //     $fa_square = $('<i>', { class: 'fa fa-square fa-stack-2x' });
  //     $span.append($fa_square);
  //     $fa_square.css({ color: rgbString, '-webkit-text-stroke-width':'2px', '-webkit-text-stroke-color':'transparent' });
  //
  //     // foreground +/-
  //     // str = '+' === doPlusOrMinusOrUndefined ? 'fa fa-plus fa-stack-1x' : 'fa fa-minus fa-stack-1x';
  //     str = '';
  //     $fa_plus_minus = $('<i>', { class: str });
  //     $span.append($fa_plus_minus);
  //     $fa_plus_minus.css({ color: 'white' });
  //
  // }

  return $swatch;
}

/* harmony default export */ __webpack_exports__["default"] = (ColorScaleWidget);

/***/ }),

/***/ "./js/hicDataset.js":
/*!**************************!*\
  !*** ./js/hicDataset.js ***!
  \**************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _hic__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./hic */ "./js/hic.js");
/* harmony import */ var _normalizationVector__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./normalizationVector */ "./js/normalizationVector.js");
/* harmony import */ var _hicEvent__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./hicEvent */ "./js/hicEvent.js");
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

/*
 *  The MIT License (MIT)
 *
 * Copyright (c) 2016-2017 The Regents of the University of California
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
 * associated documentation files (the "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the
 * following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial
 * portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
 * BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,  FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 */

/**
 * @author Jim Robinson
 */



var knownGenomes = {
  "hg19": [249250621, 243199373, 198022430],
  "hg38": [248956422, 242193529, 198295559],
  "mm10": [195471971, 182113224, 160039680],
  "mm9": [197195432, 181748087, 159599783]
};

var Dataset = function Dataset(hicFile) {
  this.hicFile = hicFile;
  this.matrixCache = {};
  this.blockCache = {};
  this.blockCacheKeys = [];
  this.normVectorCache = {};
  this.normalizationTypes = ['NONE']; // Cache at most 10 blocks

  this.blockCacheLimit = _hic__WEBPACK_IMPORTED_MODULE_0__["isMobile"]() ? 4 : 10;
  this.genomeId = hicFile.genomeId;
  this.chromosomes = hicFile.chromosomes;
  this.bpResolutions = hicFile.bpResolutions;
  this.wholeGenomeChromosome = hicFile.wholeGenomeChromosome;
  this.wholeGenomeResolution = hicFile.wholeGenomeResolution; // Attempt to determine genomeId if not recognized

  if (!Object.keys(knownGenomes).includes(this.genomeId)) {
    var tmp = matchGenome(this.chromosomes);
    if (tmp) this.genomeId = tmp;
  }
};

Dataset.prototype.clearCaches = function () {
  this.matrixCache = {};
  this.blockCache = {};
  this.normVectorCache = {};
  this.colorScaleCache = {};
};

Dataset.prototype.getMatrix =
/*#__PURE__*/
function () {
  var _ref = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee(chr1, chr2) {
    var tmp, key, matrix;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (chr1 > chr2) {
              tmp = chr1;
              chr1 = chr2;
              chr2 = tmp;
            }

            key = "".concat(chr1, "_").concat(chr2);

            if (!this.matrixCache.hasOwnProperty(key)) {
              _context.next = 6;
              break;
            }

            return _context.abrupt("return", this.matrixCache[key]);

          case 6:
            _context.next = 8;
            return this.hicFile.readMatrix(chr1, chr2);

          case 8:
            matrix = _context.sent;
            this.matrixCache[key] = matrix;
            return _context.abrupt("return", matrix);

          case 11:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function (_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();

Dataset.prototype.getNormalizedBlock =
/*#__PURE__*/
function () {
  var _ref2 = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee2(zd, blockNumber, normalization, eventBus) {
    var block, nv1, nv2, normRecords, normBlock, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, record, x, y, nvnv, counts;

    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return this.getBlock(zd, blockNumber);

          case 2:
            block = _context2.sent;

            if (!(normalization === undefined || "NONE" === normalization || block === null || block === undefined)) {
              _context2.next = 7;
              break;
            }

            return _context2.abrupt("return", block);

          case 7:
            _context2.next = 9;
            return this.getNormalizationVector(normalization, zd.chr1.index, zd.zoom.unit, zd.zoom.binSize);

          case 9:
            nv1 = _context2.sent;

            if (!(zd.chr1 === zd.chr2)) {
              _context2.next = 14;
              break;
            }

            _context2.t0 = nv1;
            _context2.next = 17;
            break;

          case 14:
            _context2.next = 16;
            return this.getNormalizationVector(normalization, zd.chr2.index, zd.zoom.unit, zd.zoom.binSize);

          case 16:
            _context2.t0 = _context2.sent;

          case 17:
            nv2 = _context2.t0;
            normRecords = [];

            if (!(nv1 === undefined || nv2 === undefined)) {
              _context2.next = 25;
              break;
            }

            igv.presentAlert("Normalization option " + normalization + " unavailable at this resolution.");

            if (eventBus) {
              eventBus.post(new _hicEvent__WEBPACK_IMPORTED_MODULE_2__["default"]("NormalizationExternalChange", "NONE"));
            }

            return _context2.abrupt("return", block);

          case 25:
            _iteratorNormalCompletion = true;
            _didIteratorError = false;
            _iteratorError = undefined;
            _context2.prev = 28;

            for (_iterator = block.records[Symbol.iterator](); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              record = _step.value;
              x = record.bin1;
              y = record.bin2;
              nvnv = nv1.data[x] * nv2.data[y];

              if (nvnv[x] !== 0 && !isNaN(nvnv)) {
                counts = record.counts / nvnv;
                normRecords.push(new ContactRecord(x, y, counts));
              }
            }

            _context2.next = 36;
            break;

          case 32:
            _context2.prev = 32;
            _context2.t1 = _context2["catch"](28);
            _didIteratorError = true;
            _iteratorError = _context2.t1;

          case 36:
            _context2.prev = 36;
            _context2.prev = 37;

            if (!_iteratorNormalCompletion && _iterator.return != null) {
              _iterator.return();
            }

          case 39:
            _context2.prev = 39;

            if (!_didIteratorError) {
              _context2.next = 42;
              break;
            }

            throw _iteratorError;

          case 42:
            return _context2.finish(39);

          case 43:
            return _context2.finish(36);

          case 44:
            normBlock = new Block(blockNumber, zd, normRecords); // TODO - cache this?
            //normBlock.percentile95 = block.percentile95;

            return _context2.abrupt("return", normBlock);

          case 46:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, this, [[28, 32, 36, 44], [37,, 39, 43]]);
  }));

  return function (_x3, _x4, _x5, _x6) {
    return _ref2.apply(this, arguments);
  };
}();

Dataset.prototype.getBlock =
/*#__PURE__*/
function () {
  var _ref3 = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee3(zd, blockNumber) {
    var key, block;
    return regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            key = "" + zd.chr1.name + "_" + zd.chr2.name + "_" + zd.zoom.binSize + "_" + zd.zoom.unit + "_" + blockNumber;

            if (!this.blockCache.hasOwnProperty(key)) {
              _context3.next = 5;
              break;
            }

            return _context3.abrupt("return", this.blockCache[key]);

          case 5:
            _context3.next = 7;
            return this.hicFile.readBlock(blockNumber, zd);

          case 7:
            block = _context3.sent;

            if (this.blockCacheKeys.length > this.blockCacheLimit) {
              delete this.blockCache[this.blockCacheKeys[0]];
              this.blockCacheKeys.shift();
            }

            this.blockCacheKeys.push(key);
            this.blockCache[key] = block;
            return _context3.abrupt("return", block);

          case 12:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3, this);
  }));

  return function (_x7, _x8) {
    return _ref3.apply(this, arguments);
  };
}();

Dataset.prototype.getNormalizationVector =
/*#__PURE__*/
function () {
  var _ref4 = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee4(type, chrIdx, unit, binSize) {
    var key, nv;
    return regeneratorRuntime.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            key = _normalizationVector__WEBPACK_IMPORTED_MODULE_1__["default"].getNormalizationVectorKey(type, chrIdx, unit, binSize);

            if (!this.normVectorCache.hasOwnProperty(key)) {
              _context4.next = 5;
              break;
            }

            return _context4.abrupt("return", this.normVectorCache[key]);

          case 5:
            _context4.next = 7;
            return this.hicFile.getNormalizationVector(type, chrIdx, unit, binSize);

          case 7:
            nv = _context4.sent;
            this.normVectorCache[key] = nv;
            return _context4.abrupt("return", nv);

          case 10:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4, this);
  }));

  return function (_x9, _x10, _x11, _x12) {
    return _ref4.apply(this, arguments);
  };
}();

Dataset.prototype.getZoomIndexForBinSize = function (binSize, unit) {
  var i, resolutionArray;
  unit = unit || "BP";

  if (unit === "BP") {
    resolutionArray = this.bpResolutions;
  } else if (unit === "FRAG") {
    resolutionArray = this.fragResolutions;
  } else {
    throw new Error("Invalid unit: " + unit);
  }

  for (i = 0; i < resolutionArray.length; i++) {
    if (resolutionArray[i] === binSize) return i;
  }

  return -1;
};

Dataset.prototype.getChrIndexFromName = function (chrName) {
  var i;

  for (i = 0; i < this.chromosomes.length; i++) {
    if (chrName === this.chromosomes[i].name) return i;
  }

  return undefined;
};

Dataset.prototype.compareChromosomes = function (otherDataset) {
  var chrs = this.chromosomes;
  var otherChrs = otherDataset.chromosomes;

  if (chrs.length !== otherChrs.length) {
    return false;
  }

  for (var i = 0; i < chrs.length; i++) {
    if (chrs[i].size !== otherChrs[i].size) {
      return false;
    }
  }

  return true;
};

Dataset.prototype.getNormVectorIndex =
/*#__PURE__*/
_asyncToGenerator(
/*#__PURE__*/
regeneratorRuntime.mark(function _callee5() {
  return regeneratorRuntime.wrap(function _callee5$(_context5) {
    while (1) {
      switch (_context5.prev = _context5.next) {
        case 0:
          return _context5.abrupt("return", this.hicFile.getNormVectorIndex());

        case 1:
        case "end":
          return _context5.stop();
      }
    }
  }, _callee5, this);
}));
Dataset.prototype.getNormalizationOptions =
/*#__PURE__*/
_asyncToGenerator(
/*#__PURE__*/
regeneratorRuntime.mark(function _callee6() {
  return regeneratorRuntime.wrap(function _callee6$(_context6) {
    while (1) {
      switch (_context6.prev = _context6.next) {
        case 0:
          return _context6.abrupt("return", this.hicFile.getNormalizationOptions());

        case 1:
        case "end":
          return _context6.stop();
      }
    }
  }, _callee6, this);
}));

var Block = function Block(blockNumber, zoomData, records) {
  this.blockNumber = blockNumber;
  this.zoomData = zoomData;
  this.records = records;
};

var ContactRecord = function ContactRecord(bin1, bin2, counts) {
  this.bin1 = bin1;
  this.bin2 = bin2;
  this.counts = counts;
};

ContactRecord.prototype.getKey = function () {
  return "" + this.bin1 + "_" + this.bin2;
};

function matchGenome(chromosomes) {
  var keys = Object.keys(knownGenomes),
      i,
      l;
  if (chromosomes.length < 4) return undefined;

  for (i = 0; i < keys.length; i++) {
    l = knownGenomes[keys[i]];

    if (chromosomes[1].size === l[0] && chromosomes[2].size === l[1] && chromosomes[3].size === l[2]) {
      return keys[i];
    }
  }

  return undefined;
}

/* harmony default export */ __webpack_exports__["default"] = (Dataset);

/***/ }),

/***/ "./js/hicEvent.js":
/*!************************!*\
  !*** ./js/hicEvent.js ***!
  \************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/*
 *  The MIT License (MIT)
 *
 * Copyright (c) 2016-2017 The Regents of the University of California
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
 * associated documentation files (the "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the
 * following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial
 * portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
 * BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,  FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 */
var HICEvent = function HICEvent(type, data, propogate) {
  return {
    type: type,
    data: data || {},
    propogate: propogate !== undefined ? propogate : true // Default to true

  };
};

/* harmony default export */ __webpack_exports__["default"] = (HICEvent);

/***/ }),

/***/ "./js/hicLocusGoto.js":
/*!****************************!*\
  !*** ./js/hicLocusGoto.js ***!
  \****************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../vendor/jquery-1.12.4 */ "./vendor/jquery-1.12.4.js");
/*
 *  The MIT License (MIT)
 *
 * Copyright (c) 2016-2017 The Regents of the University of California
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
 * associated documentation files (the "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the
 * following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial
 * portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
 * BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,  FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 */

/**
 * Created by dat on 3/3/17.
 */


var LocusGoto = function LocusGoto(browser, $container) {
  var $label;
  this.browser = browser;
  this.$container = Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__["default"])("<div>", {
    class: 'hic-chromosome-goto-container',
    title: 'Chromosome Goto'
  });
  $container.append(this.$container);
  this.$resolution_selector = Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__["default"])('<input type="text" placeholder="chr-x-axis chr-y-axis">');
  this.$container.append(this.$resolution_selector);
  this.$resolution_selector.on('change', function (e) {
    browser.parseGotoInput(Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__["default"])(this).val());
    Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__["default"])(this).blur();
  });
  this.browser.eventBus.subscribe("LocusChange", this);
};

LocusGoto.prototype.receiveEvent = function (event) {
  var self = this,
      bpPerBin,
      pixelsPerBin,
      dimensionsPixels,
      chrs,
      startBP1,
      startBP2,
      endBP1,
      endBP2,
      xy,
      state,
      chr1,
      chr2;

  if (event.type === "LocusChange") {
    state = event.data.state || self.browser.state;

    if (0 === state.chr1) {
      xy = 'All';
    } else {
      chr1 = self.browser.dataset.chromosomes[state.chr1];
      chr2 = self.browser.dataset.chromosomes[state.chr2];
      bpPerBin = this.browser.dataset.bpResolutions[state.zoom];
      dimensionsPixels = this.browser.contactMatrixView.getViewDimensions();
      pixelsPerBin = state.pixelSize;
      startBP1 = 1 + Math.round(state.x * bpPerBin);
      startBP2 = 1 + Math.round(state.y * bpPerBin);
      endBP1 = Math.min(chr1.size, Math.round(dimensionsPixels.width / pixelsPerBin * bpPerBin) + startBP1 - 1);
      endBP2 = Math.min(chr2.size, Math.round(dimensionsPixels.height / pixelsPerBin * bpPerBin) + startBP2 - 1);
      xy = chr1.name + ":" + igv.numberFormatter(startBP1) + "-" + igv.numberFormatter(endBP1) + " " + chr2.name + ":" + igv.numberFormatter(startBP2) + "-" + igv.numberFormatter(endBP2);
    }

    this.$resolution_selector.val(xy);
  }
};

/* harmony default export */ __webpack_exports__["default"] = (LocusGoto);

/***/ }),

/***/ "./js/hicMath.js":
/*!***********************!*\
  !*** ./js/hicMath.js ***!
  \***********************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/*
 *  The MIT License (MIT)
 *
 * Copyright (c) 2016-2017 The Regents of the University of California
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
 * associated documentation files (the "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the
 * following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial
 * portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
 * BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,  FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 */
var HICMath = {
  mean: function mean(array) {
    var t = 0,
        n = 0,
        i;

    for (i = 0; i < array.length; i++) {
      if (!isNaN(array[i])) {
        t += array[i];
        n++;
      }
    }

    return n > 0 ? t / n : 0;
  },
  percentile: function percentile(array, p) {
    if (array.length === 0) return undefined;
    var k = Math.floor(array.length * ((100 - p) / 100));

    if (k == 0) {
      array.sort(function (a, b) {
        return b - a;
      });
      return array[0];
    }

    return this.selectElement(array, k);
  },
  selectElement: function selectElement(array, k) {
    // Credit Steve Hanov http://stevehanov.ca/blog/index.php?id=122
    var heap = new BinaryHeap(),
        i;

    for (i = 0; i < array.length; i++) {
      var item = array[i]; // If we have not yet found k items, or the current item is larger than
      // the smallest item on the heap, add current item

      if (heap.content.length < k || item > heap.content[0]) {
        // If the heap is full, remove the smallest element on the heap.
        if (heap.content.length === k) {
          var r = heap.pop();
        }

        heap.push(item);
      }
    }

    return heap.content[0];
  }
};

function BinaryHeap() {
  this.content = [];
}

BinaryHeap.prototype = {
  push: function push(element) {
    // Add the new element to the end of the array.
    this.content.push(element); // Allow it to bubble up.

    this.bubbleUp(this.content.length - 1);
  },
  pop: function pop() {
    // Store the first element so we can return it later.
    var result = this.content[0]; // Get the element at the end of the array.

    var end = this.content.pop(); // If there are any elements left, put the end element at the
    // start, and let it sink down.

    if (this.content.length > 0) {
      this.content[0] = end;
      this.sinkDown(0);
    }

    return result;
  },
  remove: function remove(node) {
    var length = this.content.length; // To remove a value, we must search through the array to find
    // it.

    for (var i = 0; i < length; i++) {
      if (this.content[i] != node) continue; // When it is found, the process seen in 'pop' is repeated
      // to fill up the hole.

      var end = this.content.pop(); // If the element we popped was the one we needed to remove,
      // we're done.

      if (i == length - 1) break; // Otherwise, we replace the removed element with the popped
      // one, and allow it to float up or sink down as appropriate.

      this.content[i] = end;
      this.bubbleUp(i);
      this.sinkDown(i);
      break;
    }
  },
  size: function size() {
    return this.content.length;
  },
  bubbleUp: function bubbleUp(n) {
    // Fetch the element that has to be moved.
    var element = this.content[n],
        score = element; // When at 0, an element can not go up any further.

    while (n > 0) {
      // Compute the parent element's index, and fetch it.
      var parentN = Math.floor((n + 1) / 2) - 1,
          parent = this.content[parentN]; // If the parent has a lesser score, things are in order and we
      // are done.

      if (score >= parent) break; // Otherwise, swap the parent with the current element and
      // continue.

      this.content[parentN] = element;
      this.content[n] = parent;
      n = parentN;
    }
  },
  sinkDown: function sinkDown(n) {
    // Look up the target element and its score.
    var length = this.content.length,
        element = this.content[n],
        elemScore = element;

    while (true) {
      // Compute the indices of the child elements.
      var child2N = (n + 1) * 2,
          child1N = child2N - 1; // This is used to store the new position of the element,
      // if any.

      var swap = null; // If the first child exists (is inside the array)...

      if (child1N < length) {
        // Look it up and compute its score.
        var child1 = this.content[child1N],
            child1Score = child1; // If the score is less than our element's, we need to swap.

        if (child1Score < elemScore) swap = child1N;
      } // Do the same checks for the other child.


      if (child2N < length) {
        var child2 = this.content[child2N],
            child2Score = child2;
        if (child2Score < (swap == null ? elemScore : child1Score)) swap = child2N;
      } // No need to swap further, we are done.


      if (swap == null) break; // Otherwise, swap and continue.

      this.content[n] = this.content[swap];
      this.content[swap] = element;
      n = swap;
    }
  }
};
/* harmony default export */ __webpack_exports__["default"] = (HICMath);

/***/ }),

/***/ "./js/hicResolutionSelector.js":
/*!*************************************!*\
  !*** ./js/hicResolutionSelector.js ***!
  \*************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../vendor/jquery-1.12.4 */ "./vendor/jquery-1.12.4.js");
/*
 *  The MIT License (MIT)
 *
 * Copyright (c) 2016-2017 The Regents of the University of California
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
 * associated documentation files (the "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the
 * following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial
 * portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
 * BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,  FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 */

/**
 * Created by dat on 3/4/17.
 */


var ResolutionSelector = function ResolutionSelector(browser, $parent) {
  var self = this;
  this.browser = browser;
  this.$container = Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__["default"])("<div>", {
    class: 'hic-resolution-selector-container',
    title: 'Resolution'
  });
  $parent.append(this.$container); // label container

  this.$label_container = Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__["default"])('<div id="hic-resolution-label-container">');
  this.$container.append(this.$label_container); // Resolution (kb)

  this.$label = Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__["default"])("<div>");
  this.$label_container.append(this.$label);
  this.$label.text('Resolution (kb)');
  this.$label.hide(); // lock/unlock

  this.$resolution_lock = Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__["default"])('<i id="hic-resolution-lock" class="fa fa-unlock" aria-hidden="true">');
  this.$label_container.append(this.$resolution_lock);
  this.$label_container.on('click', function (e) {
    self.browser.resolutionLocked = !self.browser.resolutionLocked;
    self.setResolutionLock(self.browser.resolutionLocked);
  });
  this.$resolution_selector = Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__["default"])('<select name="select">');
  this.$container.append(this.$resolution_selector);
  this.$resolution_selector.attr('name', 'resolution_selector');
  this.$resolution_selector.on('change', function (e) {
    var zoomIndex = parseInt(Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__["default"])(this).val());
    self.browser.setZoom(zoomIndex);
  });
  this.browser.eventBus.subscribe("LocusChange", this);
  this.browser.eventBus.subscribe("MapLoad", this);
  this.browser.eventBus.subscribe("ControlMapLoad", this);
};

ResolutionSelector.prototype.setResolutionLock = function (resolutionLocked) {
  this.$resolution_lock.removeClass(true === resolutionLocked ? 'fa-unlock' : 'fa-lock');
  this.$resolution_lock.addClass(true === resolutionLocked ? 'fa-lock' : 'fa-unlock');
};

ResolutionSelector.prototype.receiveEvent = function (event) {
  var self = this,
      htmlString,
      selectedIndex,
      isWholeGenome,
      divisor,
      list;

  if (event.type === "LocusChange") {
    if (true === event.data.resolutionChanged) {
      this.browser.resolutionLocked = false;
      self.setResolutionLock(this.browser.resolutionLocked);
    }

    isWholeGenome = 0 === event.data.state.chr1;
    this.$label.text(isWholeGenome ? 'Resolution (mb)' : 'Resolution (kb)');
    selectedIndex = isWholeGenome ? 0 : this.browser.state.zoom;
    divisor = isWholeGenome ? 1e6 : 1e3;
    list = isWholeGenome ? [this.browser.dataset.wholeGenomeResolution] : this.browser.dataset.bpResolutions;
    htmlString = optionListHTML(list, selectedIndex, divisor);
    this.$resolution_selector.empty();
    this.$resolution_selector.append(htmlString);
    this.$resolution_selector.find('option').filter(function (index) {
      return index === selectedIndex;
    }).prop('selected', true);
  } else if (event.type === "MapLoad") {
    this.browser.resolutionLocked = false;
    this.setResolutionLock(this.browser.resolutionLocked);
    htmlString = optionListHTML(event.data.bpResolutions, this.browser.state.zoom, 1e3);
    this.$resolution_selector.empty();
    this.$resolution_selector.append(htmlString);
  } else if (event.type === "ControlMapLoad") {}

  function harmonizeContactAndControlResolutuionOptions($options, resolutions) {
    var dictionary;
    dictionary = resolutionDictionary(resolutions); // reset

    $options.removeAttr('disabled');
    $options.each(function (index) {
      var $option, str;
      $option = Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__["default"])(this);
      str = $option.data('resolution');

      if (undefined === dictionary[str]) {
        $option.attr('disabled', 'disabled');
      }
    });

    function resolutionDictionary(list) {
      var d = {};
      list.forEach(function (resolution) {
        d[resolution.toString()] = resolution;
      });
      return d;
    }
  }

  function optionListHTML(resolutions, selectedIndex, divisor) {
    var list;
    list = resolutions.map(function (resolution, index) {
      var selected, unit, pretty;

      if (resolution >= 1e6) {
        divisor = 1e6;
        unit = 'mb';
      } else if (resolution >= 1e3) {
        divisor = 1e3;
        unit = 'kb';
      } else {
        divisor = 1;
        unit = 'bp';
      }

      pretty = igv.numberFormatter(Math.round(resolution / divisor)) + ' ' + unit;
      selected = selectedIndex === index;
      if (resolution) return '<option' + ' data-resolution=' + resolution.toString() + ' value=' + index + (selected ? ' selected' : '') + '>' + pretty + '</option>';else return '';
    });
    return list.join('');
  }
};

/* harmony default export */ __webpack_exports__["default"] = (ResolutionSelector);

/***/ }),

/***/ "./js/hicRuler.js":
/*!************************!*\
  !*** ./js/hicRuler.js ***!
  \************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../vendor/jquery-1.12.4 */ "./vendor/jquery-1.12.4.js");
/* harmony import */ var _vendor_underscore__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../vendor/underscore */ "./vendor/underscore.js");
/*
 *  The MIT License (MIT)
 *
 * Copyright (c) 2016-2017 The Regents of the University of California
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
 * associated documentation files (the "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the
 * following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial
 * portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
 * BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,  FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 */

/**
 * @author Jim Robinson
 */



var Ruler = function Ruler(browser, axis, $parent) {
  var id;
  this.browser = browser;
  this.axis = axis;
  id = browser.id + '_' + this.axis + '-axis';
  this.$axis = Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__["default"])("<div>", {
    id: id
  });
  $parent.append(this.$axis); // canvas

  this.$canvas = Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__["default"])('<canvas>');
  this.$axis.append(this.$canvas);
  this.$canvas.width(this.$axis.width());
  this.$canvas.attr('width', this.$axis.width());
  this.$canvas.height(this.$axis.height());
  this.$canvas.attr('height', this.$axis.height()); // whole genome container

  id = browser.id + '_' + this.axis + '-axis-whole-genome-container';
  this.$wholeGenomeContainer = Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__["default"])("<div>", {
    id: id
  });
  this.$axis.append(this.$wholeGenomeContainer);
  this.ctx = this.$canvas.get(0).getContext("2d");

  this.yAxisTransformWithContext = function (context) {
    context.scale(-1, 1);
    context.rotate(Math.PI / 2.0);
  };

  this.setAxisTransform(axis);
  this.browser.eventBus.subscribe('MapLoad', this);
  this.browser.eventBus.subscribe("UpdateContactMapMousePosition", this);
};

Ruler.prototype.wholeGenomeLayout = function ($axis, $wholeGenomeContainer, axisName, dataset) {
  var self = this,
      list,
      dimen,
      extent,
      scraps,
      $div,
      $firstDiv,
      $e,
      id,
      className; // discard current tiles

  $wholeGenomeContainer.empty();
  list = dataset.chromosomes.filter(function (chromosome) {
    return 'all' !== chromosome.name.toLowerCase();
  });
  extent = 0; // could use reduce for this

  list.forEach(function (chromosome) {
    extent += chromosome.size;
  });
  dimen = 'x' === axisName ? $axis.width() : $axis.height();
  scraps = 0;
  this.bboxes = [];
  $firstDiv = undefined;
  list.forEach(function (chr) {
    var size, percentage;
    percentage = chr.bpLength / extent;

    if (percentage * dimen < 1.0) {
      scraps += percentage;
    } else {
      className = self.axis + '-axis-whole-genome-chromosome-container';
      $div = Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__["default"])("<div>", {
        class: className
      });
      $wholeGenomeContainer.append($div);
      $div.data('label', chr.name);

      if (!$firstDiv) {
        $firstDiv = $div;
      }

      if ('x' === axisName) {
        size = Math.round(percentage * dimen) - 2;
        $div.width(size);
      } else {
        size = Math.round(percentage * dimen) - 2;
        $div.height(size);
      }

      className = self.axis + '-axis-whole-genome-chromosome';
      $e = Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__["default"])("<div>", {
        class: className
      });
      $div.append($e);
      $e.text($div.data('label')); // $e.css({ 'background-color': igv.Color.randomRGBConstantAlpha(128, 255, 0.75) });

      decorate.call(self, $div);
    }
  });
  scraps *= dimen;
  scraps = Math.floor(scraps);

  if (scraps >= 1) {
    className = self.axis + '-axis-whole-genome-chromosome-container';
    $div = Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__["default"])("<div>", {
      class: className
    });
    $wholeGenomeContainer.append($div);
    $div.data('label', '-');
    $div.width(scraps);
    className = self.axis + '-axis-whole-genome-chromosome';
    $e = Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__["default"])("<div>", {
      class: className
    });
    $div.append($e);
    $e.text($div.data('label')); // $e.css({ 'background-color': igv.Color.randomRGBConstantAlpha(128, 255, 0.75) });

    decorate.call(self, $div);
  }

  $wholeGenomeContainer.children().each(function (index) {
    self.bboxes.push(bbox(axisName, Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__["default"])(this), $firstDiv));
  }); // initially hide

  this.hideWholeGenome();

  function decorate($d) {
    var self = this;
    $d.on('click', function (e) {
      var $o;
      $o = Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__["default"])(this).first();
      self.browser.parseGotoInput($o.text());
      self.unhighlightWholeChromosome();
      self.otherRuler.unhighlightWholeChromosome();
    }); // DIAGNOSTIC BACKGROUND COLOR
    // $d.css({ 'background-color': igv.Color.randomRGB(128, 255) });
    // return;

    $d.hover(function () {
      hoverHandler.call(self, Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__["default"])(this), true);
    }, function () {
      hoverHandler.call(self, Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__["default"])(this), false);
    });
  }

  function hoverHandler($e, doHover) {
    var target, $target;
    target = $e.data('label');
    this.otherRuler.$wholeGenomeContainer.children().each(function (index) {
      if (target === Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__["default"])(this).data('label')) {
        $target = Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__["default"])(this);
      }
    });

    if (true === doHover) {
      $e.addClass('hic-whole-genome-chromosome-highlight');
      $target.addClass('hic-whole-genome-chromosome-highlight');
    } else {
      $e.removeClass('hic-whole-genome-chromosome-highlight');
      $target.removeClass('hic-whole-genome-chromosome-highlight');
    }
  }
};

function bbox(axis, $child, $firstChild) {
  var delta, size, o, fo;
  o = 'x' === axis ? $child.offset().left : $child.offset().top;
  fo = 'x' === axis ? $firstChild.offset().left : $firstChild.offset().top;
  delta = o - fo;
  size = 'x' === axis ? $child.width() : $child.height();
  return {
    $e: $child,
    a: delta,
    b: delta + size
  };
}

function hitTest(bboxes, value) {
  var $result, success;
  success = false;
  $result = undefined;
  bboxes.forEach(function (bbox) {
    if (false === success) {
      if (value < bbox.a) {// nuthin
      } else if (value > bbox.b) {// nuthin
      } else {
        $result = bbox.$e;
        success = true;
      }
    }
  });
  return $result;
}

Ruler.prototype.hideWholeGenome = function () {
  this.$wholeGenomeContainer.hide();
  this.$canvas.show();
};

Ruler.prototype.showWholeGenome = function () {
  this.$canvas.hide();
  this.$wholeGenomeContainer.show();
};

Ruler.prototype.setAxisTransform = function (axis) {
  this.canvasTransform = 'y' === axis ? this.yAxisTransformWithContext : identityTransformWithContext;
  this.labelReflectionTransform = 'y' === axis ? reflectionTransformWithContext : function (context, exe) {};
};

Ruler.prototype.unhighlightWholeChromosome = function () {
  this.$wholeGenomeContainer.children().removeClass('hic-whole-genome-chromosome-highlight');
};

Ruler.prototype.receiveEvent = function (event) {
  var offset, $e;

  if ('MapLoad' === event.type) {
    this.wholeGenomeLayout(this.$axis, this.$wholeGenomeContainer, this.axis, event.data);
  } else if ('UpdateContactMapMousePosition' === event.type) {
    if (this.bboxes) {
      this.unhighlightWholeChromosome();
      offset = 'x' === this.axis ? event.data.x : event.data.y;
      $e = hitTest(this.bboxes, offset);

      if ($e) {
        // console.log(this.axis + ' highlight chr ' + $e.text());
        $e.addClass('hic-whole-genome-chromosome-highlight');
      }
    }
  }
};

Ruler.prototype.locusChange = function (event) {
  this.update();
};

Ruler.prototype.updateWidthWithCalculation = function (calc) {
  this.$axis.css('width', calc);
  this.$canvas.width(this.$axis.width());
  this.$canvas.attr('width', this.$axis.width());
  this.wholeGenomeLayout(this.$axis, this.$wholeGenomeContainer, this.axis, this.browser.dataset);
  this.update();
};

Ruler.prototype.updateHeight = function (height) {
  this.$canvas.height(height);
  this.$canvas.attr('height', height);
  this.wholeGenomeLayout(this.$axis, this.$wholeGenomeContainer, this.axis, this.browser.dataset);
  this.update();
};

Ruler.prototype.update = function () {
  var w,
      h,
      bin,
      config = {},
      browser = this.browser;

  if (isBrowserInWholeGenomeView(browser.state)) {
    this.showWholeGenome();
    return;
  }

  this.hideWholeGenome();
  identityTransformWithContext(this.ctx);
  igv.graphics.fillRect(this.ctx, 0, 0, this.$canvas.width(), this.$canvas.height(), {
    fillStyle: igv.Color.rgbColor(255, 255, 255)
  });
  this.canvasTransform(this.ctx);
  w = 'x' === this.axis ? this.$canvas.width() : this.$canvas.height();
  h = 'x' === this.axis ? this.$canvas.height() : this.$canvas.width();
  igv.graphics.fillRect(this.ctx, 0, 0, w, h, {
    fillStyle: igv.Color.rgbColor(255, 255, 255)
  });
  config.bpPerPixel = browser.dataset.bpResolutions[browser.state.zoom] / browser.state.pixelSize;
  bin = 'x' === this.axis ? browser.state.x : browser.state.y;
  config.bpStart = bin * browser.dataset.bpResolutions[browser.state.zoom];
  config.rulerTickMarkReferencePixels = Math.max(Math.max(this.$canvas.width(), this.$canvas.height()), Math.max(this.$otherRulerCanvas.width(), this.$otherRulerCanvas.height()));
  config.rulerLengthPixels = w;
  config.rulerHeightPixels = h;
  config.height = Math.min(this.$canvas.width(), this.$canvas.height());
  this.draw(config);
};

Ruler.prototype.draw = function (options) {
  var self = this,
      fontStyle,
      tickSpec,
      majorTickSpacing,
      nTick,
      pixelLast,
      pixel,
      tickSpacingPixels,
      labelWidthPixels,
      modulo,
      l,
      yShim,
      tickHeight,
      rulerLabel,
      chrSize,
      chrName,
      chromosomes = this.browser.dataset.chromosomes;
  chrName = 'x' === this.axis ? chromosomes[this.browser.state.chr1].name : chromosomes[this.browser.state.chr2].name;
  chrSize = 'x' === this.axis ? chromosomes[this.browser.state.chr1].size : chromosomes[this.browser.state.chr2].size;

  if (options.chrName === "all") {} else {
    igv.graphics.fillRect(this.ctx, 0, 0, options.rulerLengthPixels, options.rulerHeightPixels, {
      fillStyle: igv.Color.rgbColor(255, 255, 255)
    });
    fontStyle = {
      textAlign: 'center',
      font: '9px PT Sans',
      fillStyle: "rgba(64, 64, 64, 1)",
      strokeStyle: "rgba(64, 64, 64, 1)"
    };
    tickSpec = findSpacing(Math.floor(options.rulerTickMarkReferencePixels * options.bpPerPixel));
    majorTickSpacing = tickSpec.majorTick; // Find starting point closest to the current origin

    nTick = Math.floor(options.bpStart / majorTickSpacing) - 1;
    pixel = pixelLast = 0;
    igv.graphics.setProperties(this.ctx, fontStyle);
    this.ctx.lineWidth = 1.0;
    yShim = 1;
    tickHeight = 8;

    while (pixel < options.rulerLengthPixels) {
      l = Math.floor(nTick * majorTickSpacing);
      pixel = Math.round((l - 1 - options.bpStart + 0.5) / options.bpPerPixel);
      rulerLabel = formatNumber(l / tickSpec.unitMultiplier, 0) + " " + tickSpec.majorUnit;
      tickSpacingPixels = Math.abs(pixel - pixelLast);
      labelWidthPixels = this.ctx.measureText(rulerLabel).width;

      if (labelWidthPixels > tickSpacingPixels) {
        if (tickSpacingPixels < 32) {
          modulo = 4;
        } else {
          modulo = 2;
        }
      } else {
        modulo = 1;
      } // modulo = 1;


      if (0 === nTick % modulo) {
        if (Math.floor(pixel * options.bpPerPixel + options.bpStart) < chrSize) {
          // console.log('   label delta(' + Math.abs(pixel - pixelLast) + ') modulo(' + modulo + ') bpp(' + options.bpPerPixel + ')');
          this.ctx.save();
          this.labelReflectionTransform(this.ctx, pixel);
          igv.graphics.fillText(this.ctx, rulerLabel, pixel, options.height - tickHeight / 0.75);
          this.ctx.restore();
        }
      } else {// console.log('no label');
      }

      if (Math.floor(pixel * options.bpPerPixel + options.bpStart) < chrSize) {
        igv.graphics.strokeLine(this.ctx, pixel, options.height - tickHeight, pixel, options.height - yShim);
      }

      pixelLast = pixel;
      nTick++;
    } // while (pixel < options.rulerLengthPixels)


    igv.graphics.strokeLine(this.ctx, 0, options.height - yShim, options.rulerLengthPixels, options.height - yShim);
  }

  function formatNumber(anynum, decimal) {
    //decimal  - the number of decimals after the digit from 0 to 3
    //-- Returns the passed number as a string in the xxx,xxx.xx format.
    //anynum = eval(obj.value);
    var divider = 10;

    switch (decimal) {
      case 0:
        divider = 1;
        break;

      case 1:
        divider = 10;
        break;

      case 2:
        divider = 100;
        break;

      default:
        //for 3 decimal places
        divider = 1000;
    }

    var workNum = Math.abs(Math.round(anynum * divider) / divider);
    var workStr = "" + workNum;

    if (-1 === workStr.indexOf(".")) {
      workStr += ".";
    }

    var dStr = workStr.substr(0, workStr.indexOf("."));
    var dNum = dStr - 0;
    var pStr = workStr.substr(workStr.indexOf("."));

    while (pStr.length - 1 < decimal) {
      pStr += "0";
    }

    if ('.' === pStr) {
      pStr = '';
    } //--- Adds a comma in the thousands place.


    if (dNum >= 1000) {
      var dLen = dStr.length;
      dStr = parseInt("" + dNum / 1000) + "," + dStr.substring(dLen - 3, dLen);
    } //-- Adds a comma in the millions place.


    if (dNum >= 1000000) {
      dLen = dStr.length;
      dStr = parseInt("" + dNum / 1000000) + "," + dStr.substring(dLen - 7, dLen);
    }

    var retval = dStr + pStr; //-- Put numbers in parentheses if negative.

    if (anynum < 0) {
      retval = "(" + retval + ")";
    } //You could include a dollar sign in the return value.
    //retval =  "$"+retval


    return retval;
  }

  function drawAll() {
    var self = this,
        lastX = 0,
        yShim = 2,
        tickHeight = 10;

    _vendor_underscore__WEBPACK_IMPORTED_MODULE_1__["default"].each(self.browser.genome.chromosomes, function (chromosome) {
      var chrName = chromosome.name,
          bp = self.browser.genome.getGenomeCoordinate(chrName, chromosome.size),
          x = Math.round((bp - options.bpStart) / options.bpPerPixel),
          chrLabel = chrName.startsWith("chr") ? chrName.substr(3) : chrName;
      self.ctx.textAlign = 'center';
      igv.graphics.strokeLine(self.ctx, x, self.height - tickHeight, x, self.height - yShim);
      igv.graphics.fillText(self.ctx, chrLabel, (lastX + x) / 2, self.height - tickHeight / 0.75);
      lastX = x;
    });

    igv.graphics.strokeLine(self.ctx, 0, self.height - yShim, options.rulerLengthPixels, self.height - yShim);
  }
};

function isBrowserInWholeGenomeView(state) {
  return 0 === state.chr1 && state.chr1 === state.chr1;
}

function TickSpacing(majorTick, majorUnit, unitMultiplier) {
  this.majorTick = majorTick;
  this.majorUnit = majorUnit;
  this.unitMultiplier = unitMultiplier;
}

function findSpacing(rulerLengthBP) {
  if (rulerLengthBP < 10) {
    return new TickSpacing(1, "", 1);
  } // How many zeroes?


  var nZeroes = Math.floor(log10(rulerLengthBP));
  var majorUnit = "";
  var unitMultiplier = 1;

  if (nZeroes > 9) {
    majorUnit = "gb";
    unitMultiplier = 1000000000;
  }

  if (nZeroes > 6) {
    majorUnit = "mb";
    unitMultiplier = 1000000;
  } else if (nZeroes > 3) {
    majorUnit = "kb";
    unitMultiplier = 1000;
  }

  var nMajorTicks = rulerLengthBP / Math.pow(10, nZeroes - 1);

  if (nMajorTicks < 25) {
    return new TickSpacing(Math.pow(10, nZeroes - 1), majorUnit, unitMultiplier);
  } else {
    return new TickSpacing(Math.pow(10, nZeroes) / 2, majorUnit, unitMultiplier);
  }

  function log10(x) {
    var dn = Math.log(10);
    return Math.log(x) / dn;
  }
}

function reflectionTransformWithContext(context, exe) {
  context.translate(exe, 0);
  context.scale(-1, 1);
  context.translate(-exe, 0);
}

function identityTransformWithContext(context) {
  // 3x2 matrix. column major. (sx 0 0 sy tx ty).
  context.setTransform(1, 0, 0, 1, 0, 0);
}

/* harmony default export */ __webpack_exports__["default"] = (Ruler);

/***/ }),

/***/ "./js/hicState.js":
/*!************************!*\
  !*** ./js/hicState.js ***!
  \************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/*
 *  The MIT License (MIT)
 *
 * Copyright (c) 2016-2017 The Regents of the University of California
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
 * associated documentation files (the "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the
 * following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial
 * portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
 * BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,  FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 */

/**
 * @author Jim Robinson
 */
var State = function State(chr1, chr2, zoom, x, y, pixelSize, normalization) {
  if (Number.isNaN(pixelSize)) {
    pixelSize = 1;
  }

  if (chr1 !== undefined) {
    if (chr1 <= chr2) {
      this.chr1 = chr1;
      this.chr2 = chr2;
      this.x = x;
      this.y = y;
    } else {
      // Transpose
      this.chr1 = chr2;
      this.chr2 = chr1;
      this.x = y;
      this.y = x;
    }

    this.zoom = zoom;
    this.pixelSize = pixelSize;

    if ("undefined" === normalization) {
      normalization = undefined;
    }

    this.normalization = normalization;
  }
};

State.prototype.stringify = function () {
  return "" + this.chr1 + "," + this.chr2 + "," + this.zoom + "," + this.x + "," + this.y + "," + this.pixelSize + "," + this.normalization;
};

State.prototype.clone = function () {
  return Object.assign(new State(), this);
};

State.prototype.equals = function (state) {
  var s1 = JSON.stringify(this);
  var s2 = JSON.stringify(state);
  return s1 === s2;
};

/* harmony default export */ __webpack_exports__["default"] = (State);

/***/ }),

/***/ "./js/hicTrack2D.js":
/*!**************************!*\
  !*** ./js/hicTrack2D.js ***!
  \**************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _hic__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./hic */ "./js/hic.js");
/* harmony import */ var _globals__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./globals */ "./js/globals.js");
/*
 *  The MIT License (MIT)
 *
 * Copyright (c) 2016-2017 The Regents of the University of California
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
 * associated documentation files (the "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the
 * following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial
 * portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
 * BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,  FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 */

/**
 * @author Jim Robinson
 */



var Track2D = function Track2D(config, features) {
  var self = this;
  this.config = config;
  this.name = config.name;
  this.featureMap = {};
  this.featureCount = 0;
  this.isVisible = true;
  this.displayMode = _globals__WEBPACK_IMPORTED_MODULE_1__["Track2DDisplaceModes"].displayAllMatrix;

  if (config.color && validateColor(config.color)) {
    this.color = this.color = config.color; // If specified, this will override colors of individual records.
  }

  this.repColor = features.length > 0 ? features[0].color : "black";
  features.forEach(function (f) {
    self.featureCount++;
    var key = getKey(f.chr1, f.chr2),
        list = self.featureMap[key];

    if (!list) {
      list = [];
      self.featureMap[key] = list;
    }

    list.push(f);
  });
};

Track2D.loadTrack2D = function (config) {
  return igv.xhr.loadString(config.url, igv.buildOptions(config)).then(function (data) {
    var features = parseData(data, isBedPE(config));
    return new _hic__WEBPACK_IMPORTED_MODULE_0__["Track2D"](config, features);
  });
};

Track2D.prototype.getColor = function () {
  return this.color || this.repColor;
};

Track2D.prototype.getFeatures = function (chr1, chr2) {
  var key = getKey(chr1, chr2),
      features = this.featureMap[key];
  return features || this.featureMap[getAltKey(chr1, chr2)];
};

function isBedPE(config) {
  if (typeof config.url === "string") {
    return config.url.toLowerCase().indexOf(".bedpe") > 0;
  } else if (typeof config.name === "string") {
    return config.name.toLowerCase().indexOf(".bedpe") > 0;
  } else {
    return true; // Default
  }
}

function parseData(data, isBedPE) {
  if (!data) return null;
  var feature,
      lines = igv.splitLines(data),
      len = lines.length,
      tokens,
      allFeatures = [],
      line,
      i,
      delimiter = "\t",
      start,
      colorColumn;
  start = isBedPE ? 0 : 1;
  colorColumn = isBedPE ? 10 : 6;

  for (i = start; i < len; i++) {
    line = lines[i];

    if (line.startsWith("#") || line.startsWith("track") || line.startsWith("browser")) {
      continue;
    }

    tokens = lines[i].split(delimiter);

    if (tokens.length < 7) {
      //console.log("Could not parse line: " + line);
      continue;
    }

    feature = {
      chr1: tokens[0],
      x1: parseInt(tokens[1]),
      x2: parseInt(tokens[2]),
      chr2: tokens[3],
      y1: parseInt(tokens[4]),
      y2: parseInt(tokens[5]),
      color: "rgb(" + tokens[colorColumn] + ")"
    };

    if (!Number.isNaN(feature.x1)) {
      allFeatures.push(feature);
    }
  }

  return allFeatures;
}

function getKey(chr1, chr2) {
  return chr1 > chr2 ? chr2 + "_" + chr1 : chr1 + "_" + chr2;
}

function getAltKey(chr1, chr2) {
  var chr1Alt = chr1.startsWith("chr") ? chr1.substr(3) : "chr" + chr1,
      chr2Alt = chr2.startsWith("chr") ? chr2.substr(3) : "chr" + chr2;
  return chr1 > chr2 ? chr2Alt + "_" + chr1Alt : chr1Alt + "_" + chr2Alt;
}

function validateColor(str) {
  var div = document.createElement("div");
  div.style.borderColor = str;
  return div.style.borderColor !== "";
}

/* harmony default export */ __webpack_exports__["default"] = (Track2D);

/***/ }),

/***/ "./js/igvReplacements.js":
/*!*******************************!*\
  !*** ./js/igvReplacements.js ***!
  \*******************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../vendor/jquery-1.12.4 */ "./vendor/jquery-1.12.4.js");
/**
 * Created by dat on 5/7/17.
 */


var igvReplacements = function igvReplacements(igv) {
  igv.trackMenuItem = function (trackRenderer, menuItemLabel, dialogLabelHandler, dialogInputValue, dialogClickHandler) {
    var $e, clickHandler;
    $e = Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__["default"])('<div>');
    $e.text(menuItemLabel);

    clickHandler = function clickHandler() {
      igv.inputDialog.configure(dialogLabelHandler, dialogInputValue, dialogClickHandler, undefined, undefined);
      igv.inputDialog.show(trackRenderer.$viewport);
    };

    return {
      object: $e,
      click: clickHandler
    };
  };

  igv.trackMenuItemList = function (trackRenderer) {
    var menuItems = [];
    menuItems.push(colorPickerMenuItem(trackRenderer));
    menuItems.push(trackRenameMenuItem(trackRenderer));

    if (trackRenderer.track.menuItemList) {
      menuItems = menuItems.concat(trackRenderer.track.menuItemList());
    }

    menuItems.push('<hr/>');
    menuItems.push(trackRemovalMenuItem(trackRenderer));
    return menuItems;
  };

  igv.presentAlert = function (alert, $parent) {
    var httpMessages = {
      "401": "Access unauthorized",
      "403": "Access forbidden",
      "404": "Not found"
    };
    var string = alert.message || alert;

    if (httpMessages.hasOwnProperty(string)) {
      string = httpMessages[string];
    }

    igv.alertDialog.configure({
      label: string
    });
    igv.alertDialog.present($parent);
  };
};

function colorPickerMenuItem(trackRender) {
  var $e, clickHandler;
  $e = Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__["default"])('<div>');
  $e.text('Set track color');

  clickHandler = function clickHandler() {
    trackRender.colorPicker.$container.show();
  };

  return {
    object: $e,
    click: clickHandler
  };
}

;

function trackRenameMenuItem(trackRenderer) {
  var $e, menuClickHandler;
  $e = Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__["default"])('<div>');
  $e.text('Set track name');

  menuClickHandler = function menuClickHandler() {
    var dialogClickHandler;

    dialogClickHandler = function dialogClickHandler() {
      var value = trackRenderer.browser.inputDialog.$input.val().trim();
      value = '' === value || undefined === value ? 'untitled' : value;
      trackRenderer.setTrackName(value);
    };

    trackRenderer.browser.inputDialog.configure({
      label: 'Track Name',
      input: trackRenderer.track.name,
      click: dialogClickHandler
    });
    trackRenderer.browser.inputDialog.present(Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__["default"])(trackRenderer.trackDiv));
  };

  return {
    object: $e,
    click: menuClickHandler
  };
}

;

function trackRemovalMenuItem(trackRenderer) {
  var $e, menuClickHandler;
  $e = Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__["default"])('<div>');
  $e.text('Remove track');

  menuClickHandler = function menuClickHandler() {
    var browser = trackRenderer.browser;
    browser.layoutController.removeTrackRendererPair(trackRenderer.trackRenderPair);
  };

  return {
    object: $e,
    click: menuClickHandler
  };
}

;
/* harmony default export */ __webpack_exports__["default"] = (igvReplacements);

/***/ }),

/***/ "./js/layoutController.js":
/*!********************************!*\
  !*** ./js/layoutController.js ***!
  \********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../vendor/jquery-1.12.4 */ "./vendor/jquery-1.12.4.js");
/* harmony import */ var _vendor_underscore__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../vendor/underscore */ "./vendor/underscore.js");
/* harmony import */ var _hicBrowser__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./hicBrowser */ "./js/hicBrowser.js");
/* harmony import */ var _contactMatrixView__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./contactMatrixView */ "./js/contactMatrixView.js");
/* harmony import */ var _chromosomeSelectorWidget__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./chromosomeSelectorWidget */ "./js/chromosomeSelectorWidget.js");
/* harmony import */ var _controlMapWidget__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./controlMapWidget */ "./js/controlMapWidget.js");
/* harmony import */ var _hicLocusGoto__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./hicLocusGoto */ "./js/hicLocusGoto.js");
/* harmony import */ var _hicResolutionSelector__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./hicResolutionSelector */ "./js/hicResolutionSelector.js");
/* harmony import */ var _hicColorScaleWidget__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./hicColorScaleWidget */ "./js/hicColorScaleWidget.js");
/* harmony import */ var _normalizationWidget__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./normalizationWidget */ "./js/normalizationWidget.js");
/* harmony import */ var _hicRuler__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./hicRuler */ "./js/hicRuler.js");
/* harmony import */ var _trackRenderer__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./trackRenderer */ "./js/trackRenderer.js");
/* harmony import */ var _annotationWidget__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./annotationWidget */ "./js/annotationWidget.js");
/* harmony import */ var _hic__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./hic */ "./js/hic.js");
/**
 * Created by dat on 4/4/17.
 */















var LayoutController = function LayoutController(browser, $root) {
  this.browser = browser;
  createNavBar.call(this, browser, $root);
  createAllContainers.call(this, browser, $root);
  this.scrollbar_height = 20;
  this.axis_height = 32; // track dimension

  this.track_height = 32; // Keep in sync with .x-track-canvas-container (margin-bottom) and .y-track-canvas-container (margin-right)

  this.track_margin = 2;
}; // Dupes of corresponding juicebox.scss variables
// Invariant during app running. If edited in juicebox.scss they MUST be kept in sync


LayoutController.nav_bar_label_height = 36;
LayoutController.nav_bar_widget_container_height = 36;
LayoutController.nav_bar_shim_height = 4;

LayoutController.navbarHeight = function () {
  var height;
  height = 2 * LayoutController.nav_bar_label_height + 2 * LayoutController.nav_bar_widget_container_height + LayoutController.nav_bar_shim_height;
  return height;
};

function createNavBar(browser, $root) {
  var id, $navbar_container, $map_container, $upper_widget_container, $lower_widget_container, $e, $browser_panel_delete_button, $fa;
  $navbar_container = Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__["default"])('<div class="hic-navbar-container">');
  $root.append($navbar_container);
  $navbar_container.on('click', function (e) {
    e.stopPropagation();
    e.preventDefault();
    _hicBrowser__WEBPACK_IMPORTED_MODULE_2__["default"].setCurrentBrowser(browser);
  }); // container: contact map label | menu button | browser delete button

  id = browser.id + '_contact-map-' + 'hic-nav-bar-map-container';
  $map_container = Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__["default"])("<div>", {
    id: id
  });
  $navbar_container.append($map_container); // contact map label

  id = browser.id + '_contact-map-' + 'hic-nav-bar-map-label';
  browser.$contactMaplabel = Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__["default"])("<div>", {
    id: id
  });
  $map_container.append(browser.$contactMaplabel); // navbar button container

  $e = Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__["default"])("<div>", {
    class: 'hic-nav-bar-button-container'
  });
  $map_container.append($e); // menu present/dismiss button

  browser.$menuPresentDismiss = Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__["default"])("<i>", {
    class: 'fa fa-bars fa-lg',
    'title': 'Present menu'
  });
  $e.append(browser.$menuPresentDismiss);
  browser.$menuPresentDismiss.on('click', function (e) {
    browser.toggleMenu();
  }); // browser delete button

  browser.$browser_panel_delete_button = Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__["default"])("<i>", {
    class: 'fa fa-minus-circle fa-lg',
    'title': 'Delete browser panel'
  });
  $e.append(browser.$browser_panel_delete_button);
  browser.$browser_panel_delete_button.on('click', function (e) {
    _hic__WEBPACK_IMPORTED_MODULE_13__["deleteBrowserPanel"](browser);
  }); // hide delete buttons for now. Delete button is only
  // if there is more then one browser instance.

  browser.$browser_panel_delete_button.hide(); // container: control map label

  id = browser.id + '_control-map-' + 'hic-nav-bar-map-container';
  $map_container = Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__["default"])("<div>", {
    id: id
  });
  $navbar_container.append($map_container); // control map label

  id = browser.id + '_control-map-' + 'hic-nav-bar-map-label';
  browser.$controlMaplabel = Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__["default"])("<div>", {
    id: id
  });
  $map_container.append(browser.$controlMaplabel); // upper widget container

  id = browser.id + '_upper_' + 'hic-nav-bar-widget-container';
  $upper_widget_container = Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__["default"])("<div>", {
    id: id
  });
  $navbar_container.append($upper_widget_container); // location box / goto

  browser.locusGoto = new _hicLocusGoto__WEBPACK_IMPORTED_MODULE_6__["default"](browser, $upper_widget_container); // resolution widget

  browser.resolutionSelector = new _hicResolutionSelector__WEBPACK_IMPORTED_MODULE_7__["default"](browser, $upper_widget_container);
  browser.resolutionSelector.setResolutionLock(browser.resolutionLocked); // lower widget container

  id = browser.id + '_lower_' + 'hic-nav-bar-widget-container';
  $lower_widget_container = Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__["default"])("<div>", {
    id: id
  });
  $navbar_container.append($lower_widget_container); // colorscale

  browser.colorscaleWidget = new _hicColorScaleWidget__WEBPACK_IMPORTED_MODULE_8__["default"](browser, $lower_widget_container); // control map

  browser.controlMapWidget = new _controlMapWidget__WEBPACK_IMPORTED_MODULE_5__["default"](browser, $lower_widget_container); // normalization

  browser.normalizationSelector = new _normalizationWidget__WEBPACK_IMPORTED_MODULE_9__["default"](browser, $lower_widget_container);
}

function createAllContainers(browser, $root) {
  var id, tokens, height_calc, $container, $e; // .hic-x-track-container

  id = browser.id + '_' + 'x-track-container';
  this.$x_track_container = Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__["default"])("<div>", {
    id: id
  });
  $root.append(this.$x_track_container); // track labels

  id = browser.id + '_' + 'track-shim';
  this.$track_shim = Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__["default"])("<div>", {
    id: id
  });
  this.$x_track_container.append(this.$track_shim); // x-tracks

  id = browser.id + '_' + 'x-tracks';
  this.$x_tracks = Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__["default"])("<div>", {
    id: id
  });
  this.$x_track_container.append(this.$x_tracks); // crosshairs guide

  id = browser.id + '_' + 'y-track-guide';
  this.$y_track_guide = Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__["default"])("<div>", {
    id: id
  });
  this.$x_tracks.append(this.$y_track_guide); // content container

  id = browser.id + '_' + 'content-container';
  this.$content_container = Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__["default"])("<div>", {
    id: id
  });
  $root.append(this.$content_container); // menu

  createMenu(browser, $root); // container: x-axis

  id = browser.id + '_' + 'x-axis-container';
  $container = Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__["default"])("<div>", {
    id: id
  });
  this.$content_container.append($container);
  this.xAxisRuler = new _hicRuler__WEBPACK_IMPORTED_MODULE_10__["default"](browser, 'x', $container); // container: y-tracks | y-axis | viewport | y-scrollbar

  id = browser.id + '_' + 'y-tracks-y-axis-viewport-y-scrollbar';
  $container = Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__["default"])("<div>", {
    id: id
  });
  this.$content_container.append($container); // y-tracks

  id = browser.id + '_' + 'y-tracks';
  this.$y_tracks = Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__["default"])("<div>", {
    id: id
  });
  $container.append(this.$y_tracks); // crosshairs guide

  id = browser.id + '_' + 'x-track-guide';
  this.$x_track_guide = Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__["default"])("<div>", {
    id: id
  });
  this.$y_tracks.append(this.$x_track_guide); // y-axis

  this.yAxisRuler = new _hicRuler__WEBPACK_IMPORTED_MODULE_10__["default"](browser, 'y', $container);
  this.xAxisRuler.$otherRulerCanvas = this.yAxisRuler.$canvas;
  this.xAxisRuler.otherRuler = this.yAxisRuler;
  this.yAxisRuler.$otherRulerCanvas = this.xAxisRuler.$canvas;
  this.yAxisRuler.otherRuler = this.xAxisRuler; // viewport | y-scrollbar

  browser.contactMatrixView = new _contactMatrixView__WEBPACK_IMPORTED_MODULE_3__["default"](browser, $container); // container: x-scrollbar

  id = browser.id + '_' + 'x-scrollbar-container';
  $container = Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__["default"])("<div>", {
    id: id
  });
  this.$content_container.append($container); // x-scrollbar

  $container.append(browser.contactMatrixView.scrollbarWidget.$x_axis_scrollbar_container);
}

function createMenu(browser, $root) {
  var $menu, $div, $fa, config; // menu

  $menu = Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__["default"])('<div>', {
    class: 'hic-menu'
  });
  $root.append($menu); // menu close button

  $div = Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__["default"])('<div>', {
    class: 'hic-menu-close-button'
  });
  $menu.append($div); // $fa = $("<i>", { class:'fa fa-minus-circle fa-lg' });

  $fa = Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__["default"])("<i>", {
    class: 'fa fa-times'
  });
  $div.append($fa);
  $fa.on('click', function (e) {
    browser.toggleMenu();
  }); // chromosome select widget

  browser.chromosomeSelector = new _chromosomeSelectorWidget__WEBPACK_IMPORTED_MODULE_4__["default"](browser, $menu);
  config = {
    title: '2D Annotations',
    loadTitle: 'Load:',
    alertMessage: 'No 2D annotations currently loaded for this map'
  };
  browser.annotation2DWidget = new _annotationWidget__WEBPACK_IMPORTED_MODULE_12__["default"](browser, $menu, config, function () {
    return browser.tracks2D;
  }); // config =
  //     {
  //         title: 'Tracks',
  //         loadTitle: 'Load Tracks:',
  //         alertMessage: 'No tracks currently loaded for this map'
  //     };
  //
  // browser.annotation1DDWidget = new hic.AnnotationWidget(browser, $menu, config, function () {
  //     return browser.trackRenderers;
  // });

  browser.$menu = $menu;
  browser.$menu.hide();
}

LayoutController.prototype.tracksLoaded = function (trackXYPairs) {
  var self = this,
      trackRendererPair;
  self.doLayoutTrackXYPairCount(trackXYPairs.length + self.browser.trackRenderers.length);
  trackXYPairs.forEach(function (trackPair, index) {
    var w, h;
    trackRendererPair = {};
    w = h = self.track_height;
    trackRendererPair.x = new _trackRenderer__WEBPACK_IMPORTED_MODULE_11__["default"](self.browser, {
      width: undefined,
      height: h
    }, self.$x_tracks, trackRendererPair, trackPair, 'x', index);
    trackRendererPair.y = new _trackRenderer__WEBPACK_IMPORTED_MODULE_11__["default"](self.browser, {
      width: w,
      height: undefined
    }, self.$y_tracks, trackRendererPair, trackPair, 'y', index);
    self.browser.trackRenderers.push(trackRendererPair);
  });
};

LayoutController.prototype.removeAllTrackXYPairs = function () {
  var self = this,
      indices;
  indices = _vendor_underscore__WEBPACK_IMPORTED_MODULE_1__["default"].range(_vendor_underscore__WEBPACK_IMPORTED_MODULE_1__["default"].size(this.browser.trackRenderers));

  if (0 === _vendor_underscore__WEBPACK_IMPORTED_MODULE_1__["default"].size(indices)) {
    return;
  }

  _vendor_underscore__WEBPACK_IMPORTED_MODULE_1__["default"].each(indices, function (unused) {
    var discard, index; // select last track to dicard

    discard = _vendor_underscore__WEBPACK_IMPORTED_MODULE_1__["default"].last(self.browser.trackRenderers); // discard DOM element's

    discard['x'].$viewport.remove();
    discard['y'].$viewport.remove(); // remove discard from list

    index = self.browser.trackRenderers.indexOf(discard);
    self.browser.trackRenderers.splice(index, 1);
    discard = undefined;
    self.doLayoutTrackXYPairCount(_vendor_underscore__WEBPACK_IMPORTED_MODULE_1__["default"].size(self.browser.trackRenderers));
  }); // this.browser.updateLayout();

};

LayoutController.prototype.removeLastTrackXYPair = function () {
  var index, discard;

  if (_vendor_underscore__WEBPACK_IMPORTED_MODULE_1__["default"].size(this.browser.trackRenderers) > 0) {
    // select last track to dicard
    discard = _vendor_underscore__WEBPACK_IMPORTED_MODULE_1__["default"].last(this.browser.trackRenderers); // discard DOM element's

    discard['x'].$viewport.remove();
    discard['y'].$viewport.remove(); // remove discard from list

    index = this.browser.trackRenderers.indexOf(discard);
    this.browser.trackRenderers.splice(index, 1);
    discard = undefined;
    this.doLayoutTrackXYPairCount(_vendor_underscore__WEBPACK_IMPORTED_MODULE_1__["default"].size(this.browser.trackRenderers));
    this.browser.updateLayout();
  } else {//console.log('No more tracks.');
  }
};

LayoutController.prototype.removeTrackRendererPair = function (trackRendererPair) {
  var index, discard;

  if (_vendor_underscore__WEBPACK_IMPORTED_MODULE_1__["default"].size(this.browser.trackRenderers) > 0) {
    discard = trackRendererPair; // discard DOM element's

    discard['x'].$viewport.remove();
    discard['y'].$viewport.remove(); // remove discard from list

    index = this.browser.trackRenderers.indexOf(discard);
    this.browser.trackRenderers.splice(index, 1);
    this.doLayoutTrackXYPairCount(_vendor_underscore__WEBPACK_IMPORTED_MODULE_1__["default"].size(this.browser.trackRenderers));
    this.browser.updateLayout();
  } else {//console.log('No more tracks.');
  }
};

LayoutController.prototype.doLayoutTrackXYPairCount = function (trackXYPairCount) {
  var track_aggregate_height, tokens, width_calc, height_calc;
  track_aggregate_height = 0 === trackXYPairCount ? 0 : trackXYPairCount * (this.track_height + this.track_margin);
  tokens = _vendor_underscore__WEBPACK_IMPORTED_MODULE_1__["default"].map([LayoutController.navbarHeight(), track_aggregate_height], function (number) {
    return number.toString() + 'px';
  });
  height_calc = 'calc(100% - (' + tokens.join(' + ') + '))';
  tokens = _vendor_underscore__WEBPACK_IMPORTED_MODULE_1__["default"].map([track_aggregate_height, this.axis_height, this.scrollbar_height], function (number) {
    return number.toString() + 'px';
  });
  width_calc = 'calc(100% - (' + tokens.join(' + ') + '))'; // x-track container

  this.$x_track_container.height(track_aggregate_height); // track labels

  this.$track_shim.width(track_aggregate_height); // x-tracks

  this.$x_tracks.css('width', width_calc); // content container

  this.$content_container.css('height', height_calc); // x-axis - repaint canvas

  this.xAxisRuler.updateWidthWithCalculation(width_calc); // y-tracks

  this.$y_tracks.width(track_aggregate_height); // y-axis - repaint canvas

  this.yAxisRuler.updateHeight(this.yAxisRuler.$axis.height()); // viewport

  this.browser.contactMatrixView.$viewport.css('width', width_calc); // x-scrollbar

  this.browser.contactMatrixView.scrollbarWidget.$x_axis_scrollbar_container.css('width', width_calc);
};

LayoutController.prototype.doLayoutWithRootContainerSize = function (size) {
  var count;
  this.browser.$root.width(size.width);
  this.browser.$root.height(size.height + LayoutController.navbarHeight());
  count = _vendor_underscore__WEBPACK_IMPORTED_MODULE_1__["default"].size(this.browser.trackRenderers) > 0 ? _vendor_underscore__WEBPACK_IMPORTED_MODULE_1__["default"].size(this.browser.trackRenderers) : 0;
  this.doLayoutTrackXYPairCount(count);
  this.browser.updateLayout();
};

/* harmony default export */ __webpack_exports__["default"] = (LayoutController);

/***/ }),

/***/ "./js/normalizationVector.js":
/*!***********************************!*\
  !*** ./js/normalizationVector.js ***!
  \***********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/*
 *  The MIT License (MIT)
 *
 * Copyright (c) 2016-2017 The Regents of the University of California
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
 * associated documentation files (the "Software"), to deal in the Software without restriction, including 
 * without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell 
 * copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the 
 * following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial 
 * portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING 
 * BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,  FITNESS FOR A PARTICULAR PURPOSE AND 
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY 
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, 
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN 
 * THE SOFTWARE.
 *
 */

/**
 * @author Jim Robinson
 */
var NormalizationVector = function NormalizationVector(type, chrIdx, unit, resolution, values) {
  var mean = hic.Math.mean(values),
      i;

  if (mean > 0) {
    for (i = 0; i < values.length; i++) {
      values[i] /= mean;
    }
  }

  this.type = type;
  this.chrIdx = chrIdx;
  this.unit = unit;
  this.resolution = resolution;
  this.data = values;
};

NormalizationVector.getNormalizationVectorKey = function (type, chrIdx, unit, resolution) {
  return type + "_" + chrIdx + "_" + unit + "_" + resolution;
};

NormalizationVector.prototype.getKey = function () {
  return NormalizationVector.getKey(this.type, this.chrIdx, this.unit, this.resolution);
};

/* harmony default export */ __webpack_exports__["default"] = (NormalizationVector);

/***/ }),

/***/ "./js/normalizationWidget.js":
/*!***********************************!*\
  !*** ./js/normalizationWidget.js ***!
  \***********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../vendor/jquery-1.12.4 */ "./vendor/jquery-1.12.4.js");
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

/*
 *  The MIT License (MIT)
 *
 * Copyright (c) 2016-2017 The Regents of the University of California
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
 * associated documentation files (the "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the
 * following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial
 * portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
 * BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,  FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 */

/**
 * Created by dat on 3/21/17.
 */

var labels = {
  NONE: 'None',
  VC: 'Coverage',
  VC_SQRT: 'Coverage - Sqrt',
  KR: 'Balanced',
  INTER_VC: 'Interchromosomal Coverage',
  INTER_VC_SQRT: 'Interchromosomal Coverage - Sqrt',
  INTER_KR: 'Interchromosomal Balanced',
  GW_VC: 'Genome-wide Coverage',
  GW_VC_SQRT: 'Genome-wide Coverage - Sqrt',
  GW_KR: 'Genome-wide Balanced'
};

var NormalizationWidget = function NormalizationWidget(browser, $parent) {
  var self = this,
      $label;
  this.browser = browser; // container

  this.$container = Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__["default"])("<div>", {
    class: 'hic-normalization-selector-container',
    title: 'Normalization'
  });
  $parent.append(this.$container); // label

  $label = Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__["default"])('<div>');
  $label.text('Norm');
  this.$container.append($label); // $label.hide();
  // select

  this.$normalization_selector = Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__["default"])('<select name="select">');
  this.$normalization_selector.attr('name', 'normalization_selector');
  this.$normalization_selector.on('change', function (e) {
    self.browser.setNormalization(Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__["default"])(this).val());
  });
  this.$container.append(this.$normalization_selector); // spinner

  this.$spinner = Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__["default"])('<div>');
  this.$spinner.text('Loading ...');
  this.$container.append(this.$spinner);
  this.$spinner.hide();
  this.browser.eventBus.subscribe("MapLoad", this);
  this.browser.eventBus.subscribe("NormVectorIndexLoad", this);
  this.browser.eventBus.subscribe("NormalizationFileLoad", this);
  this.browser.eventBus.subscribe("NormalizationExternalChange", this);
};

NormalizationWidget.prototype.startNotReady = function () {
  this.$normalization_selector.hide();
  this.$spinner.show();
};

NormalizationWidget.prototype.stopNotReady = function () {
  this.$spinner.hide();
  this.$normalization_selector.show();
};

NormalizationWidget.prototype.receiveEvent = function (event) {
  // TODO -- this is quite fragile.  If the NormVectorIndexLoad event is received before MapLoad you'll never see the pulldown widget
  // if ("MapLoad" === event.type) {
  //     // TODO -- start norm widget "not ready" state
  //     this.startNotReady();
  //
  //     updateOptions.call(this);
  //
  // } else
  if ("NormVectorIndexLoad" === event.type) {
    updateOptions.call(this); // TODO -- end norm widget "not ready" state

    this.stopNotReady();
  } else if ("NormalizationFileLoad" === event.type) {
    if (event.data === "start") {
      this.startNotReady();
    } else {
      this.stopNotReady();
    }
  } else if ("NormalizationExternalChange" === event.type) {
    var filter = this.$normalization_selector.find('option').filter(function (index) {
      var s1 = this.value;
      var s2 = event.data;
      return s1 === s2;
    }).prop('selected', true);
  }

  function updateOptions() {
    return _updateOptions.apply(this, arguments);
  }

  function _updateOptions() {
    _updateOptions = _asyncToGenerator(
    /*#__PURE__*/
    regeneratorRuntime.mark(function _callee() {
      var dataset, normalizationTypes, elements, norm;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              dataset = event.data, norm = this.browser.state.normalization;
              _context.next = 3;
              return dataset.getNormalizationOptions();

            case 3:
              normalizationTypes = _context.sent;

              if (normalizationTypes) {
                elements = normalizationTypes.map(function (normalization) {
                  var label, labelPresentation, isSelected, titleString, valueString;
                  label = labels[normalization] || normalization;
                  isSelected = norm === normalization;
                  titleString = label === undefined ? '' : ' title = "' + label + '" ';
                  valueString = ' value=' + normalization + (isSelected ? ' selected' : '');
                  labelPresentation = '&nbsp &nbsp' + label + '&nbsp &nbsp';
                  return '<option' + titleString + valueString + '>' + labelPresentation + '</option>';
                });
                this.$normalization_selector.empty();
                this.$normalization_selector.append(elements.join(''));
              }

            case 5:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));
    return _updateOptions.apply(this, arguments);
  }
};

/* harmony default export */ __webpack_exports__["default"] = (NormalizationWidget);

/***/ }),

/***/ "./js/ratioColorScale.js":
/*!*******************************!*\
  !*** ./js/ratioColorScale.js ***!
  \*******************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _colorScale__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./colorScale */ "./js/colorScale.js");
/*
 *  The MIT License (MIT)
 *
 * Copyright (c) 2016-2017 The Regents of the University of California
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
 * associated documentation files (the "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the
 * following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial
 * portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
 * BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,  FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 */


var RatioColorScale = function RatioColorScale(threshold) {
  this.threshold = threshold;
  this.positiveScale = new _colorScale__WEBPACK_IMPORTED_MODULE_0__["default"]({
    threshold: Math.log(threshold),
    r: 255,
    g: 0,
    b: 0
  });
  this.negativeScale = new _colorScale__WEBPACK_IMPORTED_MODULE_0__["default"]({
    threshold: Math.log(threshold),
    r: 0,
    g: 0,
    b: 255
  });
};

RatioColorScale.prototype.setThreshold = function (threshold) {
  this.threshold = threshold;
  this.positiveScale.setThreshold(Math.log(threshold));
  this.negativeScale.setThreshold(Math.log(threshold));
};

RatioColorScale.prototype.getThreshold = function () {
  return this.threshold;
};

RatioColorScale.prototype.setColorComponents = function (components, plusOrMinus) {
  if ('-' === plusOrMinus) {
    return this.negativeScale.setColorComponents(components);
  } else {
    return this.positiveScale.setColorComponents(components);
  }
};

RatioColorScale.prototype.getColorComponents = function (plusOrMinus) {
  if ('-' === plusOrMinus) {
    return this.negativeScale.getColorComponents();
  } else {
    return this.positiveScale.getColorComponents();
  }
};

RatioColorScale.prototype.getColor = function (score) {
  var logScore = Math.log(score);

  if (logScore < 0) {
    return this.negativeScale.getColor(-logScore);
  } else {
    return this.positiveScale.getColor(logScore);
  }
};

RatioColorScale.prototype.stringify = function () {
  return "R:" + this.threshold + ":" + this.positiveScale.stringify() + ":" + this.negativeScale.stringify();
};

/* harmony default export */ __webpack_exports__["default"] = (RatioColorScale);

/***/ }),

/***/ "./js/scrollbarWidget.js":
/*!*******************************!*\
  !*** ./js/scrollbarWidget.js ***!
  \*******************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../vendor/jquery-1.12.4 */ "./vendor/jquery-1.12.4.js");
/* harmony import */ var _vendor_underscore__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../vendor/underscore */ "./vendor/underscore.js");
/*
 *  The MIT License (MIT)
 *
 * Copyright (c) 2016-2017 The Regents of the University of California
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
 * associated documentation files (the "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the
 * following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial
 * portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
 * BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,  FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 */

/**
 * Created by dat on 3/7/17.
 */



var ScrollbarWidget = function ScrollbarWidget(browser) {
  var self = this,
      id;
  this.browser = browser;
  this.isDragging = false; // x-axis

  id = browser.id + '_' + 'x-axis-scrollbar-container';
  this.$x_axis_scrollbar_container = Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__["default"])("<div>", {
    id: id
  });
  id = browser.id + '_' + 'x-axis-scrollbar';
  this.$x_axis_scrollbar = Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__["default"])("<div>", {
    id: id
  });
  this.$x_axis_scrollbar_container.append(this.$x_axis_scrollbar);
  this.$x_label = Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__["default"])('<div>');
  this.$x_label.text('');
  this.$x_axis_scrollbar.append(this.$x_label); // y-axis

  id = browser.id + '_' + 'y-axis-scrollbar-container';
  this.$y_axis_scrollbar_container = Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__["default"])("<div>", {
    id: id
  });
  id = browser.id + '_' + 'y-axis-scrollbar';
  this.$y_axis_scrollbar = Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__["default"])("<div>", {
    id: id
  });
  this.$y_axis_scrollbar_container.append(this.$y_axis_scrollbar);
  this.$y_label = Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__["default"])('<div class="scrollbar-label-rotation-in-place">');
  this.$y_label.text('');
  this.$y_axis_scrollbar.append(this.$y_label); // this.$x_axis_scrollbar_container.hide();
  // this.$y_axis_scrollbar_container.hide();
  // this.$x_axis_scrollbar.draggable({
  //     containment: 'parent',
  //     start: function() {
  //         self.isDragging = true;
  //     },
  //     drag: hic.throttle(xAxisDragger, 250),
  //     stop: function() {
  //         self.isDragging = false;
  //     }
  // });
  // this.$y_axis_scrollbar.draggable({
  //
  //     containment: 'parent',
  //     start: function() {
  //         self.isDragging = true;
  //     },
  //     drag: hic.throttle(yAxisDragger, 250),
  //     stop: function() {
  //         self.isDragging = false;
  //     }
  // });

  this.browser.eventBus.subscribe("LocusChange", this); // function xAxisDragger () {
  //     var bin,
  //         st = self.browser.state;
  //
  //     bin = self.css2Bin(self.browser.hicReader.chromosomes[ self.browser.state.chr1 ], self.$x_axis_scrollbar, 'left');
  //     self.browser.setState( new hic.State(st.chr1, st.chr2, st.zoom, bin, st.y, st.pixelSize) );
  // }
  // function yAxisDragger () {
  //     var bin,
  //         st = self.browser.state;
  //
  //     bin = self.css2Bin(self.browser.hicReader.chromosomes[ self.browser.state.chr2 ], self.$y_axis_scrollbar, 'top');
  //     self.browser.setState( new hic.State(st.chr1, st.chr2, st.zoom, st.x, bin, st.pixelSize) );
  // }
};

ScrollbarWidget.prototype.css2Bin = function (chromosome, $element, attribute) {
  var numer, denom, percentage;
  numer = $element.css(attribute).slice(0, -2);
  denom = $element.parent().css('left' === attribute ? 'width' : 'height').slice(0, -2);
  percentage = parseInt(numer, 10) / parseInt(denom, 10);
  return percentage * chromosome.size / this.browser.dataset.bpResolutions[this.browser.state.zoom];
};

ScrollbarWidget.prototype.receiveEvent = function (event) {
  var self = this,
      chromosomeLengthsBin,
      chromosomeLengthsPixel,
      width,
      height,
      pixels,
      widthBin,
      heightBin,
      bins,
      percentage,
      percentages,
      str;

  if (!this.isDragging && event.type === "LocusChange") {
    var state = event.data.state,
        dataset = self.browser.dataset;

    if (0 === state.chr1) {
      this.$x_axis_scrollbar.hide();
      this.$y_axis_scrollbar.hide();
    } else {
      this.$x_axis_scrollbar.show();
      this.$y_axis_scrollbar.show();
      this.$x_axis_scrollbar_container.show();
      this.$y_axis_scrollbar_container.show();
      chromosomeLengthsBin = _vendor_underscore__WEBPACK_IMPORTED_MODULE_1__["default"].map([state.chr1, state.chr2], function (index) {
        // bp / bp-per-bin -> bin
        return dataset.chromosomes[index].size / dataset.bpResolutions[state.zoom];
      });
      chromosomeLengthsPixel = _vendor_underscore__WEBPACK_IMPORTED_MODULE_1__["default"].map(chromosomeLengthsBin, function (bin) {
        // bin * pixel-per-bin -> pixel
        return bin * state.pixelSize;
      });
      pixels = [this.browser.contactMatrixView.getViewDimensions().width, this.browser.contactMatrixView.getViewDimensions().height]; // pixel / pixel-per-bin -> bin

      bins = [_vendor_underscore__WEBPACK_IMPORTED_MODULE_1__["default"].first(pixels) / state.pixelSize, _vendor_underscore__WEBPACK_IMPORTED_MODULE_1__["default"].last(pixels) / state.pixelSize]; // bin / bin -> percentage

      percentages = _vendor_underscore__WEBPACK_IMPORTED_MODULE_1__["default"].map(bins, function (bin, i) {
        var binPercentage, pixelPercentage;
        binPercentage = Math.min(bin, chromosomeLengthsBin[i]) / chromosomeLengthsBin[i];
        pixelPercentage = Math.min(chromosomeLengthsPixel[i], pixels[i]) / pixels[i];
        return Math.max(1, Math.round(100 * binPercentage * pixelPercentage));
      });
      this.$x_axis_scrollbar.css('width', _vendor_underscore__WEBPACK_IMPORTED_MODULE_1__["default"].first(percentages).toString() + '%');
      this.$y_axis_scrollbar.css('height', _vendor_underscore__WEBPACK_IMPORTED_MODULE_1__["default"].last(percentages).toString() + '%'); // bin / bin -> percentage

      percentage = Math.round(100 * state.x / _vendor_underscore__WEBPACK_IMPORTED_MODULE_1__["default"].first(chromosomeLengthsBin));
      percentage = percentage.toString() + '%';
      this.$x_axis_scrollbar.css('left', percentage); // bin / bin -> percentage

      percentage = Math.round(100 * state.y / _vendor_underscore__WEBPACK_IMPORTED_MODULE_1__["default"].last(chromosomeLengthsBin));
      percentage = percentage.toString() + '%';
      this.$y_axis_scrollbar.css('top', percentage);
      this.$x_label.text(dataset.chromosomes[state.chr1].name);
      this.$y_label.text(dataset.chromosomes[state.chr2].name);
    }
  }
};

/* harmony default export */ __webpack_exports__["default"] = (ScrollbarWidget);

/***/ }),

/***/ "./js/sweepZoom.js":
/*!*************************!*\
  !*** ./js/sweepZoom.js ***!
  \*************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../vendor/jquery-1.12.4 */ "./vendor/jquery-1.12.4.js");
/*
 *  The MIT License (MIT)
 *
 * Copyright (c) 2016-2017 The Regents of the University of California
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
 * associated documentation files (the "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the
 * following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial
 * portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
 * BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,  FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 */

/**
 * Created by dat on 3/14/17.
 */


var SweepZoom = function SweepZoom(browser, $target) {
  var id;
  id = browser.id + '_' + 'sweep-zoom-container';
  this.browser = browser;
  this.$rulerSweeper = Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__["default"])("<div>", {
    id: id
  });
  this.$rulerSweeper.hide();
  this.$target = $target;
  this.sweepRect = {};
};

SweepZoom.prototype.initialize = function (pageCoords) {
  this.anchor = pageCoords;
  this.coordinateFrame = this.$rulerSweeper.parent().offset();
  this.aspectRatio = this.$target.width() / this.$target.height();
  this.sweepRect.x = {
    x: pageCoords.x,
    y: pageCoords.y,
    width: 1,
    height: 1
  };
  this.clipped = {
    value: false
  };
};

SweepZoom.prototype.update = function (pageCoords) {
  var anchor = this.anchor,
      dx = Math.abs(pageCoords.x - anchor.x),
      dy = Math.abs(pageCoords.y - anchor.y); // Adjust deltas to conform to aspect ratio

  if (dx / dy > this.aspectRatio) {
    dy = dx / this.aspectRatio;
  } else {
    dx = dy * this.aspectRatio;
  }

  this.sweepRect.width = dx;
  this.sweepRect.height = dy;
  this.sweepRect.x = anchor.x < pageCoords.x ? anchor.x : anchor.x - dx;
  this.sweepRect.y = anchor.y < pageCoords.y ? anchor.y : anchor.y - dy;
  this.$rulerSweeper.width(this.sweepRect.width);
  this.$rulerSweeper.height(this.sweepRect.height);
  this.$rulerSweeper.offset({
    left: this.sweepRect.x,
    top: this.sweepRect.y
  });
  this.$rulerSweeper.show();
};

SweepZoom.prototype.commit = function () {
  var state, resolution, posX, posY, x, y, width, height, xMax, yMax, minimumResolution;
  this.$rulerSweeper.hide();
  state = this.browser.state; // bp-per-bin

  resolution = this.browser.resolution(); // Convert page -> offset coordinates

  posX = this.sweepRect.x - this.$target.offset().left;
  posY = this.sweepRect.y - this.$target.offset().top; // bp = ((bin + pixel/pixel-per-bin) / bp-per-bin)

  x = (state.x + posX / state.pixelSize) * resolution;
  y = (state.y + posY / state.pixelSize) * resolution; // bp = ((bin + pixel/pixel-per-bin) / bp-per-bin)

  width = this.sweepRect.width / state.pixelSize * resolution;
  height = this.sweepRect.height / state.pixelSize * resolution; // bp = bp + bp

  xMax = x + width;
  yMax = y + height;
  minimumResolution = this.browser.dataset.bpResolutions[this.browser.dataset.bpResolutions.length - 1];
  this.browser.goto(state.chr1, x, xMax, state.chr2, y, yMax, minimumResolution);
};

/* harmony default export */ __webpack_exports__["default"] = (SweepZoom);

/***/ }),

/***/ "./js/trackRenderer.js":
/*!*****************************!*\
  !*** ./js/trackRenderer.js ***!
  \*****************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../vendor/jquery-1.12.4 */ "./vendor/jquery-1.12.4.js");
/* harmony import */ var _vendor_underscore__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../vendor/underscore */ "./vendor/underscore.js");
/* harmony import */ var _hic__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./hic */ "./js/hic.js");
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

/**
 * Created by dat on 4/5/17.
 */




var TrackRenderer = function TrackRenderer(browser, size, $container, trackRenderPair, trackPair, axis, order) {
  this.browser = browser;
  this.trackRenderPair = trackRenderPair;
  this.track = trackPair[axis];
  this.id = _vendor_underscore__WEBPACK_IMPORTED_MODULE_1__["default"].uniqueId('trackRenderer_');
  this.axis = axis;
  this.initializationHelper($container, size, order);
};

TrackRenderer.prototype.initializationHelper = function ($container, size, order) {
  var _this = this;

  var self = this,
      str,
      doShowLabelAndGear,
      $x_track_label; // track canvas container

  this.$viewport = 'x' === this.axis ? Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__["default"])('<div class="x-track-canvas-container">') : Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__["default"])('<div class="y-track-canvas-container">');

  if (size.width) {
    this.$viewport.width(size.width);
  }

  if (size.height) {
    this.$viewport.height(size.height);
  }

  $container.append(this.$viewport);
  this.$viewport.css({
    order: order
  }); // canvas

  this.$canvas = Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__["default"])('<canvas>');
  this.$viewport.append(this.$canvas);
  this.ctx = this.$canvas.get(0).getContext("2d");

  if ('x' === this.axis) {
    // label
    this.$label = Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__["default"])('<div class="x-track-label">');
    str = this.track.name || 'untitled';
    this.$label.text(str); // note the pre-existing state of track labels/gear. hide/show accordingly.

    $x_track_label = $container.find(this.$label);
    doShowLabelAndGear = 0 === _vendor_underscore__WEBPACK_IMPORTED_MODULE_1__["default"].size($x_track_label) ? true : $x_track_label.is(':visible');
    this.$viewport.append(this.$label);
  } // track spinner container


  this.$spinner = 'x' === this.axis ? Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__["default"])('<div class="x-track-spinner">') : Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_0__["default"])('<div class="y-track-spinner">');
  this.$viewport.append(this.$spinner);
  this.stopSpinner(); // color picker

  if ('x' === this.axis) {
    this.colorPicker = createColorPicker_ColorScaleWidget_version(this.$viewport, function () {
      _this.colorPicker.$container.hide();
    }, function (color) {
      _this.setColor(color);
    });
    this.colorPicker.$container.hide();
  }

  if ('x' === this.axis) {
    // igvjs compatibility
    this.track.trackView = this;
    this.track.trackView.trackDiv = this.$viewport.get(0);
    igv.appendRightHandGutter.call(this, this.$viewport);
    this.$viewport.on('click', function (e) {
      e.preventDefault();
      e.stopPropagation();
      $container.find('.x-track-label').toggle();
      $container.find('.igv-right-hand-gutter').toggle();
    });
  }

  this.configTrackTransforms();
};

TrackRenderer.prototype.configTrackTransforms = function () {
  this.canvasTransform = 'y' === this.axis ? _hic__WEBPACK_IMPORTED_MODULE_2__["reflectionRotationWithContext"] : _hic__WEBPACK_IMPORTED_MODULE_2__["identityTransformWithContext"];
  this.labelReflectionTransform = 'y' === this.axis ? _hic__WEBPACK_IMPORTED_MODULE_2__["reflectionAboutYAxisAtOffsetWithContext"] : function (context, exe) {
    /* nuthin */
  };
};

TrackRenderer.prototype.syncCanvas = function () {
  this.$canvas.width(this.$viewport.width());
  this.$canvas.attr('width', this.$viewport.width());
  this.$canvas.height(this.$viewport.height());
  this.$canvas.attr('height', this.$viewport.height());
};

TrackRenderer.prototype.presentColorPicker = function () {
  var bbox = this.trackDiv.getBoundingClientRect();
  this.colorPicker.origin = {
    x: bbox.x,
    y: 0
  };
  this.colorPicker.$container.offset({
    left: this.colorPicker.origin.x,
    top: this.colorPicker.origin.y
  });
  this.colorPicker.$container.show();
};

TrackRenderer.prototype.setTrackName = function (name) {
  if ('x' === this.axis) {
    this.track.name = name;
    this.$label.text(name);
  }
};

TrackRenderer.prototype.setColor = function (color) {
  setColor(this.trackRenderPair.x);
  setColor(this.trackRenderPair.y);

  function setColor(trackRenderer) {
    trackRenderer.tile = undefined;
    trackRenderer.track.color = color;
  }

  this.browser.renderTrackXY(this.trackRenderPair);
};

TrackRenderer.prototype.dataRange = function () {
  return this.track.dataRange ? this.track.dataRange : undefined;
};

TrackRenderer.prototype.setDataRange = function (min, max, autoscale) {
  if (min !== undefined) {
    this.track.dataRange.min = min;
    this.track.config.min = min;
  }

  if (max !== undefined) {
    this.track.dataRange.max = max;
    this.track.config.max = max;
  }

  this.track.autoscale = autoscale;
  this.track.config.autoScale = autoscale;
  this.repaint();
};
/**
 * Return a promise to get the renderer ready to paint,  that is with a valid tile, loading features
 * and drawing tile if neccessary.
 *
 * @returns {*}
 */


TrackRenderer.prototype.readyToPaint =
/*#__PURE__*/
_asyncToGenerator(
/*#__PURE__*/
regeneratorRuntime.mark(function _callee() {
  var self, genomicState, chrName, lengthPixel, lengthBP, startBP, endBP, features, buffer, ctx;
  return regeneratorRuntime.wrap(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          self = this;
          genomicState = self.browser.genomicState(self.axis);
          chrName = genomicState.chromosome.name;

          if (!(self.tile && self.tile.containsRange(chrName, genomicState.startBP, genomicState.endBP, genomicState.bpp))) {
            _context.next = 7;
            break;
          }

          return _context.abrupt("return");

        case 7:
          if (!(genomicState.bpp * Math.max(self.$canvas.width(), self.$canvas.height()) > self.track.visibilityWindow)) {
            _context.next = 11;
            break;
          }

          return _context.abrupt("return");

        case 11:
          // Expand the requested range so we can pan a bit without reloading
          lengthPixel = 3 * Math.max(self.$canvas.width(), self.$canvas.height());
          lengthBP = Math.round(genomicState.bpp * lengthPixel);
          startBP = Math.max(0, Math.round(genomicState.startBP - lengthBP / 3));
          endBP = startBP + lengthBP;
          _context.next = 17;
          return self.track.getFeatures(genomicState.chromosome.name, startBP, endBP, genomicState.bpp);

        case 17:
          features = _context.sent;
          buffer = document.createElement('canvas');
          buffer.width = 'x' === self.axis ? lengthPixel : self.$canvas.width();
          buffer.height = 'x' === self.axis ? self.$canvas.height() : lengthPixel;
          ctx = buffer.getContext("2d");

          if (features) {
            if (typeof self.track.doAutoscale === 'function') {
              self.track.doAutoscale(features);
            } else {
              self.track.dataRange = igv.doAutoscale(features);
            }

            self.canvasTransform(ctx);
            self.drawConfiguration = {
              features: features,
              context: ctx,
              pixelWidth: lengthPixel,
              pixelHeight: Math.min(buffer.width, buffer.height),
              bpStart: startBP,
              bpEnd: endBP,
              bpPerPixel: genomicState.bpp,
              genomicState: genomicState,
              viewportContainerX: (genomicState.startBP - startBP) / genomicState.bpp,
              viewportContainerWidth: Math.max(self.$canvas.width(), self.$canvas.height()),
              labelTransform: self.labelReflectionTransform
            };
            self.track.draw(self.drawConfiguration);
          } else {
            ctx.clearRect(0, 0, self.$canvas.width(), self.$canvas.height());
          }

          self.tile = new Tile(chrName, startBP, endBP, genomicState.bpp, buffer);
          return _context.abrupt("return", self.tile);

        case 25:
        case "end":
          return _context.stop();
      }
    }
  }, _callee, this);
}));
/**
 *
 */

TrackRenderer.prototype.repaint =
/*#__PURE__*/
_asyncToGenerator(
/*#__PURE__*/
regeneratorRuntime.mark(function _callee2() {
  var genomicState, chrName;
  return regeneratorRuntime.wrap(function _callee2$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          genomicState = this.browser.genomicState(this.axis);

          if (!this.checkZoomIn()) {
            this.tile = undefined;
            this.ctx.clearRect(0, 0, this.$canvas.width(), this.$canvas.height());
          }

          chrName = genomicState.chromosome.name;

          if (this.tile && this.tile.containsRange(chrName, genomicState.startBP, genomicState.endBP, genomicState.bpp)) {
            _context2.next = 6;
            break;
          }

          _context2.next = 6;
          return this.readyToPaint();

        case 6:
          this.drawTileWithGenomicState(this.tile, genomicState);

        case 7:
        case "end":
          return _context2.stop();
      }
    }
  }, _callee2, this);
}));

TrackRenderer.prototype.checkZoomIn = function () {
  if (this.track.visibilityWindow && this.track.visibilityWindow > 0) {
    if (genomicState.bpp * Math.max(this.$canvas.width(), this.$canvas.height()) > this.track.visibilityWindow) {
      return false;
    }
  }

  return true;
};

TrackRenderer.prototype.drawTileWithGenomicState = function (tile, genomicState) {
  if (tile) {
    this.ctx.clearRect(0, 0, this.$canvas.width(), this.$canvas.height());
    this.offsetPixel = Math.round((tile.startBP - genomicState.startBP) / genomicState.bpp);

    if ('x' === this.axis) {
      this.ctx.drawImage(tile.buffer, this.offsetPixel, 0);
    } else {
      this.ctx.drawImage(tile.buffer, 0, this.offsetPixel);
    } // this.ctx.save();
    // this.ctx.restore();

  }
};

TrackRenderer.prototype.startSpinner = function () {
  this.browser.startSpinner();
};

TrackRenderer.prototype.stopSpinner = function () {
  this.browser.stopSpinner();
};

TrackRenderer.prototype.isLoading = function () {
  return !(undefined === this.loading);
}; // ColorScaleWidget version of color picker


function createColorPicker_ColorScaleWidget_version($parent, closeHandler, colorHandler) {
  var config = {
    $parent: $parent,
    width: 456,
    height: undefined,
    closeHandler: closeHandler
  };
  var genericContainer = new igv.genericContainer(config);
  igv.createColorSwatchSelector(genericContainer.$container, colorHandler);
  return genericContainer;
}

var Tile = function Tile(chr, startBP, endBP, bpp, buffer) {
  this.chr = chr;
  this.startBP = startBP;
  this.endBP = endBP;
  this.bpp = bpp;
  this.buffer = buffer;
};

Tile.prototype.containsRange = function (chr, startBP, endBP, bpp) {
  return chr === this.chr && this.bpp === bpp && this.startBP <= startBP && this.endBP >= endBP;
};

/* harmony default export */ __webpack_exports__["default"] = (TrackRenderer);

/***/ }),

/***/ "./vendor/hic-straw_es6.js":
/*!*********************************!*\
  !*** ./vendor/hic-straw_es6.js ***!
  \*********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
function _typeof(obj){if(typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"){_typeof=function _typeof(obj){return typeof obj;};}else{_typeof=function _typeof(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;};}return _typeof(obj);}var HicStraw=/******/function(modules){// webpackBootstrap
/******/ // The module cache
/******/var installedModules={};/******/ /******/ // The require function
/******/function __webpack_require__(moduleId){/******/ /******/ // Check if module is in cache
/******/if(installedModules[moduleId]){/******/return installedModules[moduleId].exports;/******/}/******/ // Create a new module (and put it into the cache)
/******/var module=installedModules[moduleId]={/******/i:moduleId,/******/l:false,/******/exports:{}/******/};/******/ /******/ // Execute the module function
/******/modules[moduleId].call(module.exports,module,module.exports,__webpack_require__);/******/ /******/ // Flag the module as loaded
/******/module.l=true;/******/ /******/ // Return the exports of the module
/******/return module.exports;/******/}/******/ /******/ /******/ // expose the modules object (__webpack_modules__)
/******/__webpack_require__.m=modules;/******/ /******/ // expose the module cache
/******/__webpack_require__.c=installedModules;/******/ /******/ // define getter function for harmony exports
/******/__webpack_require__.d=function(exports,name,getter){/******/if(!__webpack_require__.o(exports,name)){/******/Object.defineProperty(exports,name,{enumerable:true,get:getter});/******/}/******/};/******/ /******/ // define __esModule on exports
/******/__webpack_require__.r=function(exports){/******/if(typeof Symbol!=='undefined'&&Symbol.toStringTag){/******/Object.defineProperty(exports,Symbol.toStringTag,{value:'Module'});/******/}/******/Object.defineProperty(exports,'__esModule',{value:true});/******/};/******/ /******/ // create a fake namespace object
/******/ // mode & 1: value is a module id, require it
/******/ // mode & 2: merge all properties of value into the ns
/******/ // mode & 4: return value when already ns object
/******/ // mode & 8|1: behave like require
/******/__webpack_require__.t=function(value,mode){/******/if(mode&1)value=__webpack_require__(value);/******/if(mode&8)return value;/******/if(mode&4&&_typeof(value)==='object'&&value&&value.__esModule)return value;/******/var ns=Object.create(null);/******/__webpack_require__.r(ns);/******/Object.defineProperty(ns,'default',{enumerable:true,value:value});/******/if(mode&2&&typeof value!='string')for(var key in value){__webpack_require__.d(ns,key,function(key){return value[key];}.bind(null,key));}/******/return ns;/******/};/******/ /******/ // getDefaultExport function for compatibility with non-harmony modules
/******/__webpack_require__.n=function(module){/******/var getter=module&&module.__esModule?/******/function getDefault(){return module['default'];}:/******/function getModuleExports(){return module;};/******/__webpack_require__.d(getter,'a',getter);/******/return getter;/******/};/******/ /******/ // Object.prototype.hasOwnProperty.call
/******/__webpack_require__.o=function(object,property){return Object.prototype.hasOwnProperty.call(object,property);};/******/ /******/ // __webpack_public_path__
/******/__webpack_require__.p="";/******/ /******/ /******/ // Load entry module and return exports
/******/return __webpack_require__(__webpack_require__.s="./src/index.js");/******/}(/************************************************************************/ /******/{/***/"./node_modules/assert/assert.js":/*!***************************************!*\
  !*** ./node_modules/assert/assert.js ***!
  \***************************************/ /*! no static exports found */ /***/function node_modulesAssertAssertJs(module,exports,__webpack_require__){"use strict";eval("/* WEBPACK VAR INJECTION */(function(global) {\n\n// compare and isBuffer taken from https://github.com/feross/buffer/blob/680e9e5e488f22aac27599a57dc844a6315928dd/index.js\n// original notice:\n\n/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\nfunction compare(a, b) {\n  if (a === b) {\n    return 0;\n  }\n\n  var x = a.length;\n  var y = b.length;\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i];\n      y = b[i];\n      break;\n    }\n  }\n\n  if (x < y) {\n    return -1;\n  }\n  if (y < x) {\n    return 1;\n  }\n  return 0;\n}\nfunction isBuffer(b) {\n  if (global.Buffer && typeof global.Buffer.isBuffer === 'function') {\n    return global.Buffer.isBuffer(b);\n  }\n  return !!(b != null && b._isBuffer);\n}\n\n// based on node assert, original notice:\n\n// http://wiki.commonjs.org/wiki/Unit_Testing/1.0\n//\n// THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!\n//\n// Originally from narwhal.js (http://narwhaljs.org)\n// Copyright (c) 2009 Thomas Robinson <280north.com>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the 'Software'), to\n// deal in the Software without restriction, including without limitation the\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n// sell copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar util = __webpack_require__(/*! util/ */ \"./node_modules/util/util.js\");\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar pSlice = Array.prototype.slice;\nvar functionsHaveNames = (function () {\n  return function foo() {}.name === 'foo';\n}());\nfunction pToString (obj) {\n  return Object.prototype.toString.call(obj);\n}\nfunction isView(arrbuf) {\n  if (isBuffer(arrbuf)) {\n    return false;\n  }\n  if (typeof global.ArrayBuffer !== 'function') {\n    return false;\n  }\n  if (typeof ArrayBuffer.isView === 'function') {\n    return ArrayBuffer.isView(arrbuf);\n  }\n  if (!arrbuf) {\n    return false;\n  }\n  if (arrbuf instanceof DataView) {\n    return true;\n  }\n  if (arrbuf.buffer && arrbuf.buffer instanceof ArrayBuffer) {\n    return true;\n  }\n  return false;\n}\n// 1. The assert module provides functions that throw\n// AssertionError's when particular conditions are not met. The\n// assert module must conform to the following interface.\n\nvar assert = module.exports = ok;\n\n// 2. The AssertionError is defined in assert.\n// new assert.AssertionError({ message: message,\n//                             actual: actual,\n//                             expected: expected })\n\nvar regex = /\\s*function\\s+([^\\(\\s]*)\\s*/;\n// based on https://github.com/ljharb/function.prototype.name/blob/adeeeec8bfcc6068b187d7d9fb3d5bb1d3a30899/implementation.js\nfunction getName(func) {\n  if (!util.isFunction(func)) {\n    return;\n  }\n  if (functionsHaveNames) {\n    return func.name;\n  }\n  var str = func.toString();\n  var match = str.match(regex);\n  return match && match[1];\n}\nassert.AssertionError = function AssertionError(options) {\n  this.name = 'AssertionError';\n  this.actual = options.actual;\n  this.expected = options.expected;\n  this.operator = options.operator;\n  if (options.message) {\n    this.message = options.message;\n    this.generatedMessage = false;\n  } else {\n    this.message = getMessage(this);\n    this.generatedMessage = true;\n  }\n  var stackStartFunction = options.stackStartFunction || fail;\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, stackStartFunction);\n  } else {\n    // non v8 browsers so we can have a stacktrace\n    var err = new Error();\n    if (err.stack) {\n      var out = err.stack;\n\n      // try to strip useless frames\n      var fn_name = getName(stackStartFunction);\n      var idx = out.indexOf('\\n' + fn_name);\n      if (idx >= 0) {\n        // once we have located the function frame\n        // we need to strip out everything before it (and its line)\n        var next_line = out.indexOf('\\n', idx + 1);\n        out = out.substring(next_line + 1);\n      }\n\n      this.stack = out;\n    }\n  }\n};\n\n// assert.AssertionError instanceof Error\nutil.inherits(assert.AssertionError, Error);\n\nfunction truncate(s, n) {\n  if (typeof s === 'string') {\n    return s.length < n ? s : s.slice(0, n);\n  } else {\n    return s;\n  }\n}\nfunction inspect(something) {\n  if (functionsHaveNames || !util.isFunction(something)) {\n    return util.inspect(something);\n  }\n  var rawname = getName(something);\n  var name = rawname ? ': ' + rawname : '';\n  return '[Function' +  name + ']';\n}\nfunction getMessage(self) {\n  return truncate(inspect(self.actual), 128) + ' ' +\n         self.operator + ' ' +\n         truncate(inspect(self.expected), 128);\n}\n\n// At present only the three keys mentioned above are used and\n// understood by the spec. Implementations or sub modules can pass\n// other keys to the AssertionError's constructor - they will be\n// ignored.\n\n// 3. All of the following functions must throw an AssertionError\n// when a corresponding condition is not met, with a message that\n// may be undefined if not provided.  All assertion methods provide\n// both the actual and expected values to the assertion error for\n// display purposes.\n\nfunction fail(actual, expected, message, operator, stackStartFunction) {\n  throw new assert.AssertionError({\n    message: message,\n    actual: actual,\n    expected: expected,\n    operator: operator,\n    stackStartFunction: stackStartFunction\n  });\n}\n\n// EXTENSION! allows for well behaved errors defined elsewhere.\nassert.fail = fail;\n\n// 4. Pure assertion tests whether a value is truthy, as determined\n// by !!guard.\n// assert.ok(guard, message_opt);\n// This statement is equivalent to assert.equal(true, !!guard,\n// message_opt);. To test strictly for the value true, use\n// assert.strictEqual(true, guard, message_opt);.\n\nfunction ok(value, message) {\n  if (!value) fail(value, true, message, '==', assert.ok);\n}\nassert.ok = ok;\n\n// 5. The equality assertion tests shallow, coercive equality with\n// ==.\n// assert.equal(actual, expected, message_opt);\n\nassert.equal = function equal(actual, expected, message) {\n  if (actual != expected) fail(actual, expected, message, '==', assert.equal);\n};\n\n// 6. The non-equality assertion tests for whether two objects are not equal\n// with != assert.notEqual(actual, expected, message_opt);\n\nassert.notEqual = function notEqual(actual, expected, message) {\n  if (actual == expected) {\n    fail(actual, expected, message, '!=', assert.notEqual);\n  }\n};\n\n// 7. The equivalence assertion tests a deep equality relation.\n// assert.deepEqual(actual, expected, message_opt);\n\nassert.deepEqual = function deepEqual(actual, expected, message) {\n  if (!_deepEqual(actual, expected, false)) {\n    fail(actual, expected, message, 'deepEqual', assert.deepEqual);\n  }\n};\n\nassert.deepStrictEqual = function deepStrictEqual(actual, expected, message) {\n  if (!_deepEqual(actual, expected, true)) {\n    fail(actual, expected, message, 'deepStrictEqual', assert.deepStrictEqual);\n  }\n};\n\nfunction _deepEqual(actual, expected, strict, memos) {\n  // 7.1. All identical values are equivalent, as determined by ===.\n  if (actual === expected) {\n    return true;\n  } else if (isBuffer(actual) && isBuffer(expected)) {\n    return compare(actual, expected) === 0;\n\n  // 7.2. If the expected value is a Date object, the actual value is\n  // equivalent if it is also a Date object that refers to the same time.\n  } else if (util.isDate(actual) && util.isDate(expected)) {\n    return actual.getTime() === expected.getTime();\n\n  // 7.3 If the expected value is a RegExp object, the actual value is\n  // equivalent if it is also a RegExp object with the same source and\n  // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).\n  } else if (util.isRegExp(actual) && util.isRegExp(expected)) {\n    return actual.source === expected.source &&\n           actual.global === expected.global &&\n           actual.multiline === expected.multiline &&\n           actual.lastIndex === expected.lastIndex &&\n           actual.ignoreCase === expected.ignoreCase;\n\n  // 7.4. Other pairs that do not both pass typeof value == 'object',\n  // equivalence is determined by ==.\n  } else if ((actual === null || typeof actual !== 'object') &&\n             (expected === null || typeof expected !== 'object')) {\n    return strict ? actual === expected : actual == expected;\n\n  // If both values are instances of typed arrays, wrap their underlying\n  // ArrayBuffers in a Buffer each to increase performance\n  // This optimization requires the arrays to have the same type as checked by\n  // Object.prototype.toString (aka pToString). Never perform binary\n  // comparisons for Float*Arrays, though, since e.g. +0 === -0 but their\n  // bit patterns are not identical.\n  } else if (isView(actual) && isView(expected) &&\n             pToString(actual) === pToString(expected) &&\n             !(actual instanceof Float32Array ||\n               actual instanceof Float64Array)) {\n    return compare(new Uint8Array(actual.buffer),\n                   new Uint8Array(expected.buffer)) === 0;\n\n  // 7.5 For all other Object pairs, including Array objects, equivalence is\n  // determined by having the same number of owned properties (as verified\n  // with Object.prototype.hasOwnProperty.call), the same set of keys\n  // (although not necessarily the same order), equivalent values for every\n  // corresponding key, and an identical 'prototype' property. Note: this\n  // accounts for both named and indexed properties on Arrays.\n  } else if (isBuffer(actual) !== isBuffer(expected)) {\n    return false;\n  } else {\n    memos = memos || {actual: [], expected: []};\n\n    var actualIndex = memos.actual.indexOf(actual);\n    if (actualIndex !== -1) {\n      if (actualIndex === memos.expected.indexOf(expected)) {\n        return true;\n      }\n    }\n\n    memos.actual.push(actual);\n    memos.expected.push(expected);\n\n    return objEquiv(actual, expected, strict, memos);\n  }\n}\n\nfunction isArguments(object) {\n  return Object.prototype.toString.call(object) == '[object Arguments]';\n}\n\nfunction objEquiv(a, b, strict, actualVisitedObjects) {\n  if (a === null || a === undefined || b === null || b === undefined)\n    return false;\n  // if one is a primitive, the other must be same\n  if (util.isPrimitive(a) || util.isPrimitive(b))\n    return a === b;\n  if (strict && Object.getPrototypeOf(a) !== Object.getPrototypeOf(b))\n    return false;\n  var aIsArgs = isArguments(a);\n  var bIsArgs = isArguments(b);\n  if ((aIsArgs && !bIsArgs) || (!aIsArgs && bIsArgs))\n    return false;\n  if (aIsArgs) {\n    a = pSlice.call(a);\n    b = pSlice.call(b);\n    return _deepEqual(a, b, strict);\n  }\n  var ka = objectKeys(a);\n  var kb = objectKeys(b);\n  var key, i;\n  // having the same number of owned properties (keys incorporates\n  // hasOwnProperty)\n  if (ka.length !== kb.length)\n    return false;\n  //the same set of keys (although not necessarily the same order),\n  ka.sort();\n  kb.sort();\n  //~~~cheap key test\n  for (i = ka.length - 1; i >= 0; i--) {\n    if (ka[i] !== kb[i])\n      return false;\n  }\n  //equivalent values for every corresponding key, and\n  //~~~possibly expensive deep test\n  for (i = ka.length - 1; i >= 0; i--) {\n    key = ka[i];\n    if (!_deepEqual(a[key], b[key], strict, actualVisitedObjects))\n      return false;\n  }\n  return true;\n}\n\n// 8. The non-equivalence assertion tests for any deep inequality.\n// assert.notDeepEqual(actual, expected, message_opt);\n\nassert.notDeepEqual = function notDeepEqual(actual, expected, message) {\n  if (_deepEqual(actual, expected, false)) {\n    fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);\n  }\n};\n\nassert.notDeepStrictEqual = notDeepStrictEqual;\nfunction notDeepStrictEqual(actual, expected, message) {\n  if (_deepEqual(actual, expected, true)) {\n    fail(actual, expected, message, 'notDeepStrictEqual', notDeepStrictEqual);\n  }\n}\n\n\n// 9. The strict equality assertion tests strict equality, as determined by ===.\n// assert.strictEqual(actual, expected, message_opt);\n\nassert.strictEqual = function strictEqual(actual, expected, message) {\n  if (actual !== expected) {\n    fail(actual, expected, message, '===', assert.strictEqual);\n  }\n};\n\n// 10. The strict non-equality assertion tests for strict inequality, as\n// determined by !==.  assert.notStrictEqual(actual, expected, message_opt);\n\nassert.notStrictEqual = function notStrictEqual(actual, expected, message) {\n  if (actual === expected) {\n    fail(actual, expected, message, '!==', assert.notStrictEqual);\n  }\n};\n\nfunction expectedException(actual, expected) {\n  if (!actual || !expected) {\n    return false;\n  }\n\n  if (Object.prototype.toString.call(expected) == '[object RegExp]') {\n    return expected.test(actual);\n  }\n\n  try {\n    if (actual instanceof expected) {\n      return true;\n    }\n  } catch (e) {\n    // Ignore.  The instanceof check doesn't work for arrow functions.\n  }\n\n  if (Error.isPrototypeOf(expected)) {\n    return false;\n  }\n\n  return expected.call({}, actual) === true;\n}\n\nfunction _tryBlock(block) {\n  var error;\n  try {\n    block();\n  } catch (e) {\n    error = e;\n  }\n  return error;\n}\n\nfunction _throws(shouldThrow, block, expected, message) {\n  var actual;\n\n  if (typeof block !== 'function') {\n    throw new TypeError('\"block\" argument must be a function');\n  }\n\n  if (typeof expected === 'string') {\n    message = expected;\n    expected = null;\n  }\n\n  actual = _tryBlock(block);\n\n  message = (expected && expected.name ? ' (' + expected.name + ').' : '.') +\n            (message ? ' ' + message : '.');\n\n  if (shouldThrow && !actual) {\n    fail(actual, expected, 'Missing expected exception' + message);\n  }\n\n  var userProvidedMessage = typeof message === 'string';\n  var isUnwantedException = !shouldThrow && util.isError(actual);\n  var isUnexpectedException = !shouldThrow && actual && !expected;\n\n  if ((isUnwantedException &&\n      userProvidedMessage &&\n      expectedException(actual, expected)) ||\n      isUnexpectedException) {\n    fail(actual, expected, 'Got unwanted exception' + message);\n  }\n\n  if ((shouldThrow && actual && expected &&\n      !expectedException(actual, expected)) || (!shouldThrow && actual)) {\n    throw actual;\n  }\n}\n\n// 11. Expected to throw an error:\n// assert.throws(block, Error_opt, message_opt);\n\nassert.throws = function(block, /*optional*/error, /*optional*/message) {\n  _throws(true, block, error, message);\n};\n\n// EXTENSION! This is annoying to write outside this module.\nassert.doesNotThrow = function(block, /*optional*/error, /*optional*/message) {\n  _throws(false, block, error, message);\n};\n\nassert.ifError = function(err) { if (err) throw err; };\n\nvar objectKeys = Object.keys || function (obj) {\n  var keys = [];\n  for (var key in obj) {\n    if (hasOwn.call(obj, key)) keys.push(key);\n  }\n  return keys;\n};\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))\n\n//# sourceURL=webpack://HicStraw/./node_modules/assert/assert.js?");/***/},/***/"./node_modules/base64-js/index.js":/*!*****************************************!*\
  !*** ./node_modules/base64-js/index.js ***!
  \*****************************************/ /*! no static exports found */ /***/function node_modulesBase64JsIndexJs(module,exports,__webpack_require__){"use strict";eval("\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  for (var i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(\n      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)\n    ))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n\n\n//# sourceURL=webpack://HicStraw/./node_modules/base64-js/index.js?");/***/},/***/"./node_modules/browser-or-node/lib/index.js":/*!***************************************************!*\
  !*** ./node_modules/browser-or-node/lib/index.js ***!
  \***************************************************/ /*! no static exports found */ /***/function node_modulesBrowserOrNodeLibIndexJs(module,exports,__webpack_require__){"use strict";eval("/* WEBPACK VAR INJECTION */(function(process) {\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/* global window */\n\nvar isBrowser = typeof window !== 'undefined' && typeof window.document !== 'undefined';\n\nvar isNode = typeof process !== 'undefined' && process.versions != null && process.versions.node != null;\n\nexports.isBrowser = isBrowser;\nexports.isNode = isNode;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../process/browser.js */ \"./node_modules/process/browser.js\")))\n\n//# sourceURL=webpack://HicStraw/./node_modules/browser-or-node/lib/index.js?");/***/},/***/"./node_modules/browserify-zlib/lib/binding.js":/*!*****************************************************!*\
  !*** ./node_modules/browserify-zlib/lib/binding.js ***!
  \*****************************************************/ /*! no static exports found */ /***/function node_modulesBrowserifyZlibLibBindingJs(module,exports,__webpack_require__){"use strict";eval("/* WEBPACK VAR INJECTION */(function(Buffer, process) {\n/* eslint camelcase: \"off\" */\n\nvar assert = __webpack_require__(/*! assert */ \"./node_modules/assert/assert.js\");\n\nvar Zstream = __webpack_require__(/*! pako/lib/zlib/zstream */ \"./node_modules/pako/lib/zlib/zstream.js\");\nvar zlib_deflate = __webpack_require__(/*! pako/lib/zlib/deflate.js */ \"./node_modules/pako/lib/zlib/deflate.js\");\nvar zlib_inflate = __webpack_require__(/*! pako/lib/zlib/inflate.js */ \"./node_modules/pako/lib/zlib/inflate.js\");\nvar constants = __webpack_require__(/*! pako/lib/zlib/constants */ \"./node_modules/pako/lib/zlib/constants.js\");\n\nfor (var key in constants) {\n  exports[key] = constants[key];\n}\n\n// zlib modes\nexports.NONE = 0;\nexports.DEFLATE = 1;\nexports.INFLATE = 2;\nexports.GZIP = 3;\nexports.GUNZIP = 4;\nexports.DEFLATERAW = 5;\nexports.INFLATERAW = 6;\nexports.UNZIP = 7;\n\nvar GZIP_HEADER_ID1 = 0x1f;\nvar GZIP_HEADER_ID2 = 0x8b;\n\n/**\n * Emulate Node's zlib C++ layer for use by the JS layer in index.js\n */\nfunction Zlib(mode) {\n  if (typeof mode !== 'number' || mode < exports.DEFLATE || mode > exports.UNZIP) {\n    throw new TypeError('Bad argument');\n  }\n\n  this.dictionary = null;\n  this.err = 0;\n  this.flush = 0;\n  this.init_done = false;\n  this.level = 0;\n  this.memLevel = 0;\n  this.mode = mode;\n  this.strategy = 0;\n  this.windowBits = 0;\n  this.write_in_progress = false;\n  this.pending_close = false;\n  this.gzip_id_bytes_read = 0;\n}\n\nZlib.prototype.close = function () {\n  if (this.write_in_progress) {\n    this.pending_close = true;\n    return;\n  }\n\n  this.pending_close = false;\n\n  assert(this.init_done, 'close before init');\n  assert(this.mode <= exports.UNZIP);\n\n  if (this.mode === exports.DEFLATE || this.mode === exports.GZIP || this.mode === exports.DEFLATERAW) {\n    zlib_deflate.deflateEnd(this.strm);\n  } else if (this.mode === exports.INFLATE || this.mode === exports.GUNZIP || this.mode === exports.INFLATERAW || this.mode === exports.UNZIP) {\n    zlib_inflate.inflateEnd(this.strm);\n  }\n\n  this.mode = exports.NONE;\n\n  this.dictionary = null;\n};\n\nZlib.prototype.write = function (flush, input, in_off, in_len, out, out_off, out_len) {\n  return this._write(true, flush, input, in_off, in_len, out, out_off, out_len);\n};\n\nZlib.prototype.writeSync = function (flush, input, in_off, in_len, out, out_off, out_len) {\n  return this._write(false, flush, input, in_off, in_len, out, out_off, out_len);\n};\n\nZlib.prototype._write = function (async, flush, input, in_off, in_len, out, out_off, out_len) {\n  assert.equal(arguments.length, 8);\n\n  assert(this.init_done, 'write before init');\n  assert(this.mode !== exports.NONE, 'already finalized');\n  assert.equal(false, this.write_in_progress, 'write already in progress');\n  assert.equal(false, this.pending_close, 'close is pending');\n\n  this.write_in_progress = true;\n\n  assert.equal(false, flush === undefined, 'must provide flush value');\n\n  this.write_in_progress = true;\n\n  if (flush !== exports.Z_NO_FLUSH && flush !== exports.Z_PARTIAL_FLUSH && flush !== exports.Z_SYNC_FLUSH && flush !== exports.Z_FULL_FLUSH && flush !== exports.Z_FINISH && flush !== exports.Z_BLOCK) {\n    throw new Error('Invalid flush value');\n  }\n\n  if (input == null) {\n    input = Buffer.alloc(0);\n    in_len = 0;\n    in_off = 0;\n  }\n\n  this.strm.avail_in = in_len;\n  this.strm.input = input;\n  this.strm.next_in = in_off;\n  this.strm.avail_out = out_len;\n  this.strm.output = out;\n  this.strm.next_out = out_off;\n  this.flush = flush;\n\n  if (!async) {\n    // sync version\n    this._process();\n\n    if (this._checkError()) {\n      return this._afterSync();\n    }\n    return;\n  }\n\n  // async version\n  var self = this;\n  process.nextTick(function () {\n    self._process();\n    self._after();\n  });\n\n  return this;\n};\n\nZlib.prototype._afterSync = function () {\n  var avail_out = this.strm.avail_out;\n  var avail_in = this.strm.avail_in;\n\n  this.write_in_progress = false;\n\n  return [avail_in, avail_out];\n};\n\nZlib.prototype._process = function () {\n  var next_expected_header_byte = null;\n\n  // If the avail_out is left at 0, then it means that it ran out\n  // of room.  If there was avail_out left over, then it means\n  // that all of the input was consumed.\n  switch (this.mode) {\n    case exports.DEFLATE:\n    case exports.GZIP:\n    case exports.DEFLATERAW:\n      this.err = zlib_deflate.deflate(this.strm, this.flush);\n      break;\n    case exports.UNZIP:\n      if (this.strm.avail_in > 0) {\n        next_expected_header_byte = this.strm.next_in;\n      }\n\n      switch (this.gzip_id_bytes_read) {\n        case 0:\n          if (next_expected_header_byte === null) {\n            break;\n          }\n\n          if (this.strm.input[next_expected_header_byte] === GZIP_HEADER_ID1) {\n            this.gzip_id_bytes_read = 1;\n            next_expected_header_byte++;\n\n            if (this.strm.avail_in === 1) {\n              // The only available byte was already read.\n              break;\n            }\n          } else {\n            this.mode = exports.INFLATE;\n            break;\n          }\n\n        // fallthrough\n        case 1:\n          if (next_expected_header_byte === null) {\n            break;\n          }\n\n          if (this.strm.input[next_expected_header_byte] === GZIP_HEADER_ID2) {\n            this.gzip_id_bytes_read = 2;\n            this.mode = exports.GUNZIP;\n          } else {\n            // There is no actual difference between INFLATE and INFLATERAW\n            // (after initialization).\n            this.mode = exports.INFLATE;\n          }\n\n          break;\n        default:\n          throw new Error('invalid number of gzip magic number bytes read');\n      }\n\n    // fallthrough\n    case exports.INFLATE:\n    case exports.GUNZIP:\n    case exports.INFLATERAW:\n      this.err = zlib_inflate.inflate(this.strm, this.flush\n\n      // If data was encoded with dictionary\n      );if (this.err === exports.Z_NEED_DICT && this.dictionary) {\n        // Load it\n        this.err = zlib_inflate.inflateSetDictionary(this.strm, this.dictionary);\n        if (this.err === exports.Z_OK) {\n          // And try to decode again\n          this.err = zlib_inflate.inflate(this.strm, this.flush);\n        } else if (this.err === exports.Z_DATA_ERROR) {\n          // Both inflateSetDictionary() and inflate() return Z_DATA_ERROR.\n          // Make it possible for After() to tell a bad dictionary from bad\n          // input.\n          this.err = exports.Z_NEED_DICT;\n        }\n      }\n      while (this.strm.avail_in > 0 && this.mode === exports.GUNZIP && this.err === exports.Z_STREAM_END && this.strm.next_in[0] !== 0x00) {\n        // Bytes remain in input buffer. Perhaps this is another compressed\n        // member in the same archive, or just trailing garbage.\n        // Trailing zero bytes are okay, though, since they are frequently\n        // used for padding.\n\n        this.reset();\n        this.err = zlib_inflate.inflate(this.strm, this.flush);\n      }\n      break;\n    default:\n      throw new Error('Unknown mode ' + this.mode);\n  }\n};\n\nZlib.prototype._checkError = function () {\n  // Acceptable error states depend on the type of zlib stream.\n  switch (this.err) {\n    case exports.Z_OK:\n    case exports.Z_BUF_ERROR:\n      if (this.strm.avail_out !== 0 && this.flush === exports.Z_FINISH) {\n        this._error('unexpected end of file');\n        return false;\n      }\n      break;\n    case exports.Z_STREAM_END:\n      // normal statuses, not fatal\n      break;\n    case exports.Z_NEED_DICT:\n      if (this.dictionary == null) {\n        this._error('Missing dictionary');\n      } else {\n        this._error('Bad dictionary');\n      }\n      return false;\n    default:\n      // something else.\n      this._error('Zlib error');\n      return false;\n  }\n\n  return true;\n};\n\nZlib.prototype._after = function () {\n  if (!this._checkError()) {\n    return;\n  }\n\n  var avail_out = this.strm.avail_out;\n  var avail_in = this.strm.avail_in;\n\n  this.write_in_progress = false;\n\n  // call the write() cb\n  this.callback(avail_in, avail_out);\n\n  if (this.pending_close) {\n    this.close();\n  }\n};\n\nZlib.prototype._error = function (message) {\n  if (this.strm.msg) {\n    message = this.strm.msg;\n  }\n  this.onerror(message, this.err\n\n  // no hope of rescue.\n  );this.write_in_progress = false;\n  if (this.pending_close) {\n    this.close();\n  }\n};\n\nZlib.prototype.init = function (windowBits, level, memLevel, strategy, dictionary) {\n  assert(arguments.length === 4 || arguments.length === 5, 'init(windowBits, level, memLevel, strategy, [dictionary])');\n\n  assert(windowBits >= 8 && windowBits <= 15, 'invalid windowBits');\n  assert(level >= -1 && level <= 9, 'invalid compression level');\n\n  assert(memLevel >= 1 && memLevel <= 9, 'invalid memlevel');\n\n  assert(strategy === exports.Z_FILTERED || strategy === exports.Z_HUFFMAN_ONLY || strategy === exports.Z_RLE || strategy === exports.Z_FIXED || strategy === exports.Z_DEFAULT_STRATEGY, 'invalid strategy');\n\n  this._init(level, windowBits, memLevel, strategy, dictionary);\n  this._setDictionary();\n};\n\nZlib.prototype.params = function () {\n  throw new Error('deflateParams Not supported');\n};\n\nZlib.prototype.reset = function () {\n  this._reset();\n  this._setDictionary();\n};\n\nZlib.prototype._init = function (level, windowBits, memLevel, strategy, dictionary) {\n  this.level = level;\n  this.windowBits = windowBits;\n  this.memLevel = memLevel;\n  this.strategy = strategy;\n\n  this.flush = exports.Z_NO_FLUSH;\n\n  this.err = exports.Z_OK;\n\n  if (this.mode === exports.GZIP || this.mode === exports.GUNZIP) {\n    this.windowBits += 16;\n  }\n\n  if (this.mode === exports.UNZIP) {\n    this.windowBits += 32;\n  }\n\n  if (this.mode === exports.DEFLATERAW || this.mode === exports.INFLATERAW) {\n    this.windowBits = -1 * this.windowBits;\n  }\n\n  this.strm = new Zstream();\n\n  switch (this.mode) {\n    case exports.DEFLATE:\n    case exports.GZIP:\n    case exports.DEFLATERAW:\n      this.err = zlib_deflate.deflateInit2(this.strm, this.level, exports.Z_DEFLATED, this.windowBits, this.memLevel, this.strategy);\n      break;\n    case exports.INFLATE:\n    case exports.GUNZIP:\n    case exports.INFLATERAW:\n    case exports.UNZIP:\n      this.err = zlib_inflate.inflateInit2(this.strm, this.windowBits);\n      break;\n    default:\n      throw new Error('Unknown mode ' + this.mode);\n  }\n\n  if (this.err !== exports.Z_OK) {\n    this._error('Init error');\n  }\n\n  this.dictionary = dictionary;\n\n  this.write_in_progress = false;\n  this.init_done = true;\n};\n\nZlib.prototype._setDictionary = function () {\n  if (this.dictionary == null) {\n    return;\n  }\n\n  this.err = exports.Z_OK;\n\n  switch (this.mode) {\n    case exports.DEFLATE:\n    case exports.DEFLATERAW:\n      this.err = zlib_deflate.deflateSetDictionary(this.strm, this.dictionary);\n      break;\n    default:\n      break;\n  }\n\n  if (this.err !== exports.Z_OK) {\n    this._error('Failed to set dictionary');\n  }\n};\n\nZlib.prototype._reset = function () {\n  this.err = exports.Z_OK;\n\n  switch (this.mode) {\n    case exports.DEFLATE:\n    case exports.DEFLATERAW:\n    case exports.GZIP:\n      this.err = zlib_deflate.deflateReset(this.strm);\n      break;\n    case exports.INFLATE:\n    case exports.INFLATERAW:\n    case exports.GUNZIP:\n      this.err = zlib_inflate.inflateReset(this.strm);\n      break;\n    default:\n      break;\n  }\n\n  if (this.err !== exports.Z_OK) {\n    this._error('Failed to reset stream');\n  }\n};\n\nexports.Zlib = Zlib;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../buffer/index.js */ \"./node_modules/buffer/index.js\").Buffer, __webpack_require__(/*! ./../../process/browser.js */ \"./node_modules/process/browser.js\")))\n\n//# sourceURL=webpack://HicStraw/./node_modules/browserify-zlib/lib/binding.js?");/***/},/***/"./node_modules/browserify-zlib/lib/index.js":/*!***************************************************!*\
  !*** ./node_modules/browserify-zlib/lib/index.js ***!
  \***************************************************/ /*! no static exports found */ /***/function node_modulesBrowserifyZlibLibIndexJs(module,exports,__webpack_require__){"use strict";eval("/* WEBPACK VAR INJECTION */(function(process) {\n\nvar Buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\").Buffer;\nvar Transform = __webpack_require__(/*! stream */ \"./node_modules/stream-browserify/index.js\").Transform;\nvar binding = __webpack_require__(/*! ./binding */ \"./node_modules/browserify-zlib/lib/binding.js\");\nvar util = __webpack_require__(/*! util */ \"./node_modules/util/util.js\");\nvar assert = __webpack_require__(/*! assert */ \"./node_modules/assert/assert.js\").ok;\nvar kMaxLength = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\").kMaxLength;\nvar kRangeErrorMessage = 'Cannot create final Buffer. It would be larger ' + 'than 0x' + kMaxLength.toString(16) + ' bytes';\n\n// zlib doesn't provide these, so kludge them in following the same\n// const naming scheme zlib uses.\nbinding.Z_MIN_WINDOWBITS = 8;\nbinding.Z_MAX_WINDOWBITS = 15;\nbinding.Z_DEFAULT_WINDOWBITS = 15;\n\n// fewer than 64 bytes per chunk is stupid.\n// technically it could work with as few as 8, but even 64 bytes\n// is absurdly low.  Usually a MB or more is best.\nbinding.Z_MIN_CHUNK = 64;\nbinding.Z_MAX_CHUNK = Infinity;\nbinding.Z_DEFAULT_CHUNK = 16 * 1024;\n\nbinding.Z_MIN_MEMLEVEL = 1;\nbinding.Z_MAX_MEMLEVEL = 9;\nbinding.Z_DEFAULT_MEMLEVEL = 8;\n\nbinding.Z_MIN_LEVEL = -1;\nbinding.Z_MAX_LEVEL = 9;\nbinding.Z_DEFAULT_LEVEL = binding.Z_DEFAULT_COMPRESSION;\n\n// expose all the zlib constants\nvar bkeys = Object.keys(binding);\nfor (var bk = 0; bk < bkeys.length; bk++) {\n  var bkey = bkeys[bk];\n  if (bkey.match(/^Z/)) {\n    Object.defineProperty(exports, bkey, {\n      enumerable: true, value: binding[bkey], writable: false\n    });\n  }\n}\n\n// translation table for return codes.\nvar codes = {\n  Z_OK: binding.Z_OK,\n  Z_STREAM_END: binding.Z_STREAM_END,\n  Z_NEED_DICT: binding.Z_NEED_DICT,\n  Z_ERRNO: binding.Z_ERRNO,\n  Z_STREAM_ERROR: binding.Z_STREAM_ERROR,\n  Z_DATA_ERROR: binding.Z_DATA_ERROR,\n  Z_MEM_ERROR: binding.Z_MEM_ERROR,\n  Z_BUF_ERROR: binding.Z_BUF_ERROR,\n  Z_VERSION_ERROR: binding.Z_VERSION_ERROR\n};\n\nvar ckeys = Object.keys(codes);\nfor (var ck = 0; ck < ckeys.length; ck++) {\n  var ckey = ckeys[ck];\n  codes[codes[ckey]] = ckey;\n}\n\nObject.defineProperty(exports, 'codes', {\n  enumerable: true, value: Object.freeze(codes), writable: false\n});\n\nexports.Deflate = Deflate;\nexports.Inflate = Inflate;\nexports.Gzip = Gzip;\nexports.Gunzip = Gunzip;\nexports.DeflateRaw = DeflateRaw;\nexports.InflateRaw = InflateRaw;\nexports.Unzip = Unzip;\n\nexports.createDeflate = function (o) {\n  return new Deflate(o);\n};\n\nexports.createInflate = function (o) {\n  return new Inflate(o);\n};\n\nexports.createDeflateRaw = function (o) {\n  return new DeflateRaw(o);\n};\n\nexports.createInflateRaw = function (o) {\n  return new InflateRaw(o);\n};\n\nexports.createGzip = function (o) {\n  return new Gzip(o);\n};\n\nexports.createGunzip = function (o) {\n  return new Gunzip(o);\n};\n\nexports.createUnzip = function (o) {\n  return new Unzip(o);\n};\n\n// Convenience methods.\n// compress/decompress a string or buffer in one step.\nexports.deflate = function (buffer, opts, callback) {\n  if (typeof opts === 'function') {\n    callback = opts;\n    opts = {};\n  }\n  return zlibBuffer(new Deflate(opts), buffer, callback);\n};\n\nexports.deflateSync = function (buffer, opts) {\n  return zlibBufferSync(new Deflate(opts), buffer);\n};\n\nexports.gzip = function (buffer, opts, callback) {\n  if (typeof opts === 'function') {\n    callback = opts;\n    opts = {};\n  }\n  return zlibBuffer(new Gzip(opts), buffer, callback);\n};\n\nexports.gzipSync = function (buffer, opts) {\n  return zlibBufferSync(new Gzip(opts), buffer);\n};\n\nexports.deflateRaw = function (buffer, opts, callback) {\n  if (typeof opts === 'function') {\n    callback = opts;\n    opts = {};\n  }\n  return zlibBuffer(new DeflateRaw(opts), buffer, callback);\n};\n\nexports.deflateRawSync = function (buffer, opts) {\n  return zlibBufferSync(new DeflateRaw(opts), buffer);\n};\n\nexports.unzip = function (buffer, opts, callback) {\n  if (typeof opts === 'function') {\n    callback = opts;\n    opts = {};\n  }\n  return zlibBuffer(new Unzip(opts), buffer, callback);\n};\n\nexports.unzipSync = function (buffer, opts) {\n  return zlibBufferSync(new Unzip(opts), buffer);\n};\n\nexports.inflate = function (buffer, opts, callback) {\n  if (typeof opts === 'function') {\n    callback = opts;\n    opts = {};\n  }\n  return zlibBuffer(new Inflate(opts), buffer, callback);\n};\n\nexports.inflateSync = function (buffer, opts) {\n  return zlibBufferSync(new Inflate(opts), buffer);\n};\n\nexports.gunzip = function (buffer, opts, callback) {\n  if (typeof opts === 'function') {\n    callback = opts;\n    opts = {};\n  }\n  return zlibBuffer(new Gunzip(opts), buffer, callback);\n};\n\nexports.gunzipSync = function (buffer, opts) {\n  return zlibBufferSync(new Gunzip(opts), buffer);\n};\n\nexports.inflateRaw = function (buffer, opts, callback) {\n  if (typeof opts === 'function') {\n    callback = opts;\n    opts = {};\n  }\n  return zlibBuffer(new InflateRaw(opts), buffer, callback);\n};\n\nexports.inflateRawSync = function (buffer, opts) {\n  return zlibBufferSync(new InflateRaw(opts), buffer);\n};\n\nfunction zlibBuffer(engine, buffer, callback) {\n  var buffers = [];\n  var nread = 0;\n\n  engine.on('error', onError);\n  engine.on('end', onEnd);\n\n  engine.end(buffer);\n  flow();\n\n  function flow() {\n    var chunk;\n    while (null !== (chunk = engine.read())) {\n      buffers.push(chunk);\n      nread += chunk.length;\n    }\n    engine.once('readable', flow);\n  }\n\n  function onError(err) {\n    engine.removeListener('end', onEnd);\n    engine.removeListener('readable', flow);\n    callback(err);\n  }\n\n  function onEnd() {\n    var buf;\n    var err = null;\n\n    if (nread >= kMaxLength) {\n      err = new RangeError(kRangeErrorMessage);\n    } else {\n      buf = Buffer.concat(buffers, nread);\n    }\n\n    buffers = [];\n    engine.close();\n    callback(err, buf);\n  }\n}\n\nfunction zlibBufferSync(engine, buffer) {\n  if (typeof buffer === 'string') buffer = Buffer.from(buffer);\n\n  if (!Buffer.isBuffer(buffer)) throw new TypeError('Not a string or buffer');\n\n  var flushFlag = engine._finishFlushFlag;\n\n  return engine._processChunk(buffer, flushFlag);\n}\n\n// generic zlib\n// minimal 2-byte header\nfunction Deflate(opts) {\n  if (!(this instanceof Deflate)) return new Deflate(opts);\n  Zlib.call(this, opts, binding.DEFLATE);\n}\n\nfunction Inflate(opts) {\n  if (!(this instanceof Inflate)) return new Inflate(opts);\n  Zlib.call(this, opts, binding.INFLATE);\n}\n\n// gzip - bigger header, same deflate compression\nfunction Gzip(opts) {\n  if (!(this instanceof Gzip)) return new Gzip(opts);\n  Zlib.call(this, opts, binding.GZIP);\n}\n\nfunction Gunzip(opts) {\n  if (!(this instanceof Gunzip)) return new Gunzip(opts);\n  Zlib.call(this, opts, binding.GUNZIP);\n}\n\n// raw - no header\nfunction DeflateRaw(opts) {\n  if (!(this instanceof DeflateRaw)) return new DeflateRaw(opts);\n  Zlib.call(this, opts, binding.DEFLATERAW);\n}\n\nfunction InflateRaw(opts) {\n  if (!(this instanceof InflateRaw)) return new InflateRaw(opts);\n  Zlib.call(this, opts, binding.INFLATERAW);\n}\n\n// auto-detect header.\nfunction Unzip(opts) {\n  if (!(this instanceof Unzip)) return new Unzip(opts);\n  Zlib.call(this, opts, binding.UNZIP);\n}\n\nfunction isValidFlushFlag(flag) {\n  return flag === binding.Z_NO_FLUSH || flag === binding.Z_PARTIAL_FLUSH || flag === binding.Z_SYNC_FLUSH || flag === binding.Z_FULL_FLUSH || flag === binding.Z_FINISH || flag === binding.Z_BLOCK;\n}\n\n// the Zlib class they all inherit from\n// This thing manages the queue of requests, and returns\n// true or false if there is anything in the queue when\n// you call the .write() method.\n\nfunction Zlib(opts, mode) {\n  var _this = this;\n\n  this._opts = opts = opts || {};\n  this._chunkSize = opts.chunkSize || exports.Z_DEFAULT_CHUNK;\n\n  Transform.call(this, opts);\n\n  if (opts.flush && !isValidFlushFlag(opts.flush)) {\n    throw new Error('Invalid flush flag: ' + opts.flush);\n  }\n  if (opts.finishFlush && !isValidFlushFlag(opts.finishFlush)) {\n    throw new Error('Invalid flush flag: ' + opts.finishFlush);\n  }\n\n  this._flushFlag = opts.flush || binding.Z_NO_FLUSH;\n  this._finishFlushFlag = typeof opts.finishFlush !== 'undefined' ? opts.finishFlush : binding.Z_FINISH;\n\n  if (opts.chunkSize) {\n    if (opts.chunkSize < exports.Z_MIN_CHUNK || opts.chunkSize > exports.Z_MAX_CHUNK) {\n      throw new Error('Invalid chunk size: ' + opts.chunkSize);\n    }\n  }\n\n  if (opts.windowBits) {\n    if (opts.windowBits < exports.Z_MIN_WINDOWBITS || opts.windowBits > exports.Z_MAX_WINDOWBITS) {\n      throw new Error('Invalid windowBits: ' + opts.windowBits);\n    }\n  }\n\n  if (opts.level) {\n    if (opts.level < exports.Z_MIN_LEVEL || opts.level > exports.Z_MAX_LEVEL) {\n      throw new Error('Invalid compression level: ' + opts.level);\n    }\n  }\n\n  if (opts.memLevel) {\n    if (opts.memLevel < exports.Z_MIN_MEMLEVEL || opts.memLevel > exports.Z_MAX_MEMLEVEL) {\n      throw new Error('Invalid memLevel: ' + opts.memLevel);\n    }\n  }\n\n  if (opts.strategy) {\n    if (opts.strategy != exports.Z_FILTERED && opts.strategy != exports.Z_HUFFMAN_ONLY && opts.strategy != exports.Z_RLE && opts.strategy != exports.Z_FIXED && opts.strategy != exports.Z_DEFAULT_STRATEGY) {\n      throw new Error('Invalid strategy: ' + opts.strategy);\n    }\n  }\n\n  if (opts.dictionary) {\n    if (!Buffer.isBuffer(opts.dictionary)) {\n      throw new Error('Invalid dictionary: it should be a Buffer instance');\n    }\n  }\n\n  this._handle = new binding.Zlib(mode);\n\n  var self = this;\n  this._hadError = false;\n  this._handle.onerror = function (message, errno) {\n    // there is no way to cleanly recover.\n    // continuing only obscures problems.\n    _close(self);\n    self._hadError = true;\n\n    var error = new Error(message);\n    error.errno = errno;\n    error.code = exports.codes[errno];\n    self.emit('error', error);\n  };\n\n  var level = exports.Z_DEFAULT_COMPRESSION;\n  if (typeof opts.level === 'number') level = opts.level;\n\n  var strategy = exports.Z_DEFAULT_STRATEGY;\n  if (typeof opts.strategy === 'number') strategy = opts.strategy;\n\n  this._handle.init(opts.windowBits || exports.Z_DEFAULT_WINDOWBITS, level, opts.memLevel || exports.Z_DEFAULT_MEMLEVEL, strategy, opts.dictionary);\n\n  this._buffer = Buffer.allocUnsafe(this._chunkSize);\n  this._offset = 0;\n  this._level = level;\n  this._strategy = strategy;\n\n  this.once('end', this.close);\n\n  Object.defineProperty(this, '_closed', {\n    get: function () {\n      return !_this._handle;\n    },\n    configurable: true,\n    enumerable: true\n  });\n}\n\nutil.inherits(Zlib, Transform);\n\nZlib.prototype.params = function (level, strategy, callback) {\n  if (level < exports.Z_MIN_LEVEL || level > exports.Z_MAX_LEVEL) {\n    throw new RangeError('Invalid compression level: ' + level);\n  }\n  if (strategy != exports.Z_FILTERED && strategy != exports.Z_HUFFMAN_ONLY && strategy != exports.Z_RLE && strategy != exports.Z_FIXED && strategy != exports.Z_DEFAULT_STRATEGY) {\n    throw new TypeError('Invalid strategy: ' + strategy);\n  }\n\n  if (this._level !== level || this._strategy !== strategy) {\n    var self = this;\n    this.flush(binding.Z_SYNC_FLUSH, function () {\n      assert(self._handle, 'zlib binding closed');\n      self._handle.params(level, strategy);\n      if (!self._hadError) {\n        self._level = level;\n        self._strategy = strategy;\n        if (callback) callback();\n      }\n    });\n  } else {\n    process.nextTick(callback);\n  }\n};\n\nZlib.prototype.reset = function () {\n  assert(this._handle, 'zlib binding closed');\n  return this._handle.reset();\n};\n\n// This is the _flush function called by the transform class,\n// internally, when the last chunk has been written.\nZlib.prototype._flush = function (callback) {\n  this._transform(Buffer.alloc(0), '', callback);\n};\n\nZlib.prototype.flush = function (kind, callback) {\n  var _this2 = this;\n\n  var ws = this._writableState;\n\n  if (typeof kind === 'function' || kind === undefined && !callback) {\n    callback = kind;\n    kind = binding.Z_FULL_FLUSH;\n  }\n\n  if (ws.ended) {\n    if (callback) process.nextTick(callback);\n  } else if (ws.ending) {\n    if (callback) this.once('end', callback);\n  } else if (ws.needDrain) {\n    if (callback) {\n      this.once('drain', function () {\n        return _this2.flush(kind, callback);\n      });\n    }\n  } else {\n    this._flushFlag = kind;\n    this.write(Buffer.alloc(0), '', callback);\n  }\n};\n\nZlib.prototype.close = function (callback) {\n  _close(this, callback);\n  process.nextTick(emitCloseNT, this);\n};\n\nfunction _close(engine, callback) {\n  if (callback) process.nextTick(callback);\n\n  // Caller may invoke .close after a zlib error (which will null _handle).\n  if (!engine._handle) return;\n\n  engine._handle.close();\n  engine._handle = null;\n}\n\nfunction emitCloseNT(self) {\n  self.emit('close');\n}\n\nZlib.prototype._transform = function (chunk, encoding, cb) {\n  var flushFlag;\n  var ws = this._writableState;\n  var ending = ws.ending || ws.ended;\n  var last = ending && (!chunk || ws.length === chunk.length);\n\n  if (chunk !== null && !Buffer.isBuffer(chunk)) return cb(new Error('invalid input'));\n\n  if (!this._handle) return cb(new Error('zlib binding closed'));\n\n  // If it's the last chunk, or a final flush, we use the Z_FINISH flush flag\n  // (or whatever flag was provided using opts.finishFlush).\n  // If it's explicitly flushing at some other time, then we use\n  // Z_FULL_FLUSH. Otherwise, use Z_NO_FLUSH for maximum compression\n  // goodness.\n  if (last) flushFlag = this._finishFlushFlag;else {\n    flushFlag = this._flushFlag;\n    // once we've flushed the last of the queue, stop flushing and\n    // go back to the normal behavior.\n    if (chunk.length >= ws.length) {\n      this._flushFlag = this._opts.flush || binding.Z_NO_FLUSH;\n    }\n  }\n\n  this._processChunk(chunk, flushFlag, cb);\n};\n\nZlib.prototype._processChunk = function (chunk, flushFlag, cb) {\n  var availInBefore = chunk && chunk.length;\n  var availOutBefore = this._chunkSize - this._offset;\n  var inOff = 0;\n\n  var self = this;\n\n  var async = typeof cb === 'function';\n\n  if (!async) {\n    var buffers = [];\n    var nread = 0;\n\n    var error;\n    this.on('error', function (er) {\n      error = er;\n    });\n\n    assert(this._handle, 'zlib binding closed');\n    do {\n      var res = this._handle.writeSync(flushFlag, chunk, // in\n      inOff, // in_off\n      availInBefore, // in_len\n      this._buffer, // out\n      this._offset, //out_off\n      availOutBefore); // out_len\n    } while (!this._hadError && callback(res[0], res[1]));\n\n    if (this._hadError) {\n      throw error;\n    }\n\n    if (nread >= kMaxLength) {\n      _close(this);\n      throw new RangeError(kRangeErrorMessage);\n    }\n\n    var buf = Buffer.concat(buffers, nread);\n    _close(this);\n\n    return buf;\n  }\n\n  assert(this._handle, 'zlib binding closed');\n  var req = this._handle.write(flushFlag, chunk, // in\n  inOff, // in_off\n  availInBefore, // in_len\n  this._buffer, // out\n  this._offset, //out_off\n  availOutBefore); // out_len\n\n  req.buffer = chunk;\n  req.callback = callback;\n\n  function callback(availInAfter, availOutAfter) {\n    // When the callback is used in an async write, the callback's\n    // context is the `req` object that was created. The req object\n    // is === this._handle, and that's why it's important to null\n    // out the values after they are done being used. `this._handle`\n    // can stay in memory longer than the callback and buffer are needed.\n    if (this) {\n      this.buffer = null;\n      this.callback = null;\n    }\n\n    if (self._hadError) return;\n\n    var have = availOutBefore - availOutAfter;\n    assert(have >= 0, 'have should not go down');\n\n    if (have > 0) {\n      var out = self._buffer.slice(self._offset, self._offset + have);\n      self._offset += have;\n      // serve some output to the consumer.\n      if (async) {\n        self.push(out);\n      } else {\n        buffers.push(out);\n        nread += out.length;\n      }\n    }\n\n    // exhausted the output buffer, or used all the input create a new one.\n    if (availOutAfter === 0 || self._offset >= self._chunkSize) {\n      availOutBefore = self._chunkSize;\n      self._offset = 0;\n      self._buffer = Buffer.allocUnsafe(self._chunkSize);\n    }\n\n    if (availOutAfter === 0) {\n      // Not actually done.  Need to reprocess.\n      // Also, update the availInBefore to the availInAfter value,\n      // so that if we have to hit it a third (fourth, etc.) time,\n      // it'll have the correct byte counts.\n      inOff += availInBefore - availInAfter;\n      availInBefore = availInAfter;\n\n      if (!async) return true;\n\n      var newReq = self._handle.write(flushFlag, chunk, inOff, availInBefore, self._buffer, self._offset, self._chunkSize);\n      newReq.callback = callback; // this same function\n      newReq.buffer = chunk;\n      return;\n    }\n\n    if (!async) return false;\n\n    // finished with the chunk.\n    cb();\n  }\n};\n\nutil.inherits(Deflate, Zlib);\nutil.inherits(Inflate, Zlib);\nutil.inherits(Gzip, Zlib);\nutil.inherits(Gunzip, Zlib);\nutil.inherits(DeflateRaw, Zlib);\nutil.inherits(InflateRaw, Zlib);\nutil.inherits(Unzip, Zlib);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../process/browser.js */ \"./node_modules/process/browser.js\")))\n\n//# sourceURL=webpack://HicStraw/./node_modules/browserify-zlib/lib/index.js?");/***/},/***/"./node_modules/buffer/index.js":/*!**************************************!*\
  !*** ./node_modules/buffer/index.js ***!
  \**************************************/ /*! no static exports found */ /***/function node_modulesBufferIndexJs(module,exports,__webpack_require__){"use strict";eval("/* WEBPACK VAR INJECTION */(function(global) {/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n\n\nvar base64 = __webpack_require__(/*! base64-js */ \"./node_modules/base64-js/index.js\")\nvar ieee754 = __webpack_require__(/*! ieee754 */ \"./node_modules/ieee754/index.js\")\nvar isArray = __webpack_require__(/*! isarray */ \"./node_modules/isarray/index.js\")\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))\n\n//# sourceURL=webpack://HicStraw/./node_modules/buffer/index.js?");/***/},/***/"./node_modules/core-util-is/lib/util.js":/*!***********************************************!*\
  !*** ./node_modules/core-util-is/lib/util.js ***!
  \***********************************************/ /*! no static exports found */ /***/function node_modulesCoreUtilIsLibUtilJs(module,exports,__webpack_require__){eval("/* WEBPACK VAR INJECTION */(function(Buffer) {// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// NOTE: These type checking functions intentionally don't use `instanceof`\n// because it is fragile and can be easily faked with `Object.create()`.\n\nfunction isArray(arg) {\n  if (Array.isArray) {\n    return Array.isArray(arg);\n  }\n  return objectToString(arg) === '[object Array]';\n}\nexports.isArray = isArray;\n\nfunction isBoolean(arg) {\n  return typeof arg === 'boolean';\n}\nexports.isBoolean = isBoolean;\n\nfunction isNull(arg) {\n  return arg === null;\n}\nexports.isNull = isNull;\n\nfunction isNullOrUndefined(arg) {\n  return arg == null;\n}\nexports.isNullOrUndefined = isNullOrUndefined;\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\nexports.isNumber = isNumber;\n\nfunction isString(arg) {\n  return typeof arg === 'string';\n}\nexports.isString = isString;\n\nfunction isSymbol(arg) {\n  return typeof arg === 'symbol';\n}\nexports.isSymbol = isSymbol;\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\nexports.isUndefined = isUndefined;\n\nfunction isRegExp(re) {\n  return objectToString(re) === '[object RegExp]';\n}\nexports.isRegExp = isRegExp;\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\nexports.isObject = isObject;\n\nfunction isDate(d) {\n  return objectToString(d) === '[object Date]';\n}\nexports.isDate = isDate;\n\nfunction isError(e) {\n  return (objectToString(e) === '[object Error]' || e instanceof Error);\n}\nexports.isError = isError;\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\nexports.isFunction = isFunction;\n\nfunction isPrimitive(arg) {\n  return arg === null ||\n         typeof arg === 'boolean' ||\n         typeof arg === 'number' ||\n         typeof arg === 'string' ||\n         typeof arg === 'symbol' ||  // ES6 symbol\n         typeof arg === 'undefined';\n}\nexports.isPrimitive = isPrimitive;\n\nexports.isBuffer = Buffer.isBuffer;\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../buffer/index.js */ \"./node_modules/buffer/index.js\").Buffer))\n\n//# sourceURL=webpack://HicStraw/./node_modules/core-util-is/lib/util.js?");/***/},/***/"./node_modules/cross-fetch/dist/browser-ponyfill.js":/*!***********************************************************!*\
  !*** ./node_modules/cross-fetch/dist/browser-ponyfill.js ***!
  \***********************************************************/ /*! no static exports found */ /***/function node_modulesCrossFetchDistBrowserPonyfillJs(module,exports){eval("var __root__ = (function (root) {\nfunction F() { this.fetch = false; }\nF.prototype = root;\nreturn new F();\n})(typeof self !== 'undefined' ? self : this);\n(function(self) {\n\nvar irrelevant = (function (exports) {\n  var support = {\n    searchParams: 'URLSearchParams' in self,\n    iterable: 'Symbol' in self && 'iterator' in Symbol,\n    blob:\n      'FileReader' in self &&\n      'Blob' in self &&\n      (function() {\n        try {\n          new Blob();\n          return true\n        } catch (e) {\n          return false\n        }\n      })(),\n    formData: 'FormData' in self,\n    arrayBuffer: 'ArrayBuffer' in self\n  };\n\n  function isDataView(obj) {\n    return obj && DataView.prototype.isPrototypeOf(obj)\n  }\n\n  if (support.arrayBuffer) {\n    var viewClasses = [\n      '[object Int8Array]',\n      '[object Uint8Array]',\n      '[object Uint8ClampedArray]',\n      '[object Int16Array]',\n      '[object Uint16Array]',\n      '[object Int32Array]',\n      '[object Uint32Array]',\n      '[object Float32Array]',\n      '[object Float64Array]'\n    ];\n\n    var isArrayBufferView =\n      ArrayBuffer.isView ||\n      function(obj) {\n        return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1\n      };\n  }\n\n  function normalizeName(name) {\n    if (typeof name !== 'string') {\n      name = String(name);\n    }\n    if (/[^a-z0-9\\-#$%&'*+.^_`|~]/i.test(name)) {\n      throw new TypeError('Invalid character in header field name')\n    }\n    return name.toLowerCase()\n  }\n\n  function normalizeValue(value) {\n    if (typeof value !== 'string') {\n      value = String(value);\n    }\n    return value\n  }\n\n  // Build a destructive iterator for the value list\n  function iteratorFor(items) {\n    var iterator = {\n      next: function() {\n        var value = items.shift();\n        return {done: value === undefined, value: value}\n      }\n    };\n\n    if (support.iterable) {\n      iterator[Symbol.iterator] = function() {\n        return iterator\n      };\n    }\n\n    return iterator\n  }\n\n  function Headers(headers) {\n    this.map = {};\n\n    if (headers instanceof Headers) {\n      headers.forEach(function(value, name) {\n        this.append(name, value);\n      }, this);\n    } else if (Array.isArray(headers)) {\n      headers.forEach(function(header) {\n        this.append(header[0], header[1]);\n      }, this);\n    } else if (headers) {\n      Object.getOwnPropertyNames(headers).forEach(function(name) {\n        this.append(name, headers[name]);\n      }, this);\n    }\n  }\n\n  Headers.prototype.append = function(name, value) {\n    name = normalizeName(name);\n    value = normalizeValue(value);\n    var oldValue = this.map[name];\n    this.map[name] = oldValue ? oldValue + ', ' + value : value;\n  };\n\n  Headers.prototype['delete'] = function(name) {\n    delete this.map[normalizeName(name)];\n  };\n\n  Headers.prototype.get = function(name) {\n    name = normalizeName(name);\n    return this.has(name) ? this.map[name] : null\n  };\n\n  Headers.prototype.has = function(name) {\n    return this.map.hasOwnProperty(normalizeName(name))\n  };\n\n  Headers.prototype.set = function(name, value) {\n    this.map[normalizeName(name)] = normalizeValue(value);\n  };\n\n  Headers.prototype.forEach = function(callback, thisArg) {\n    for (var name in this.map) {\n      if (this.map.hasOwnProperty(name)) {\n        callback.call(thisArg, this.map[name], name, this);\n      }\n    }\n  };\n\n  Headers.prototype.keys = function() {\n    var items = [];\n    this.forEach(function(value, name) {\n      items.push(name);\n    });\n    return iteratorFor(items)\n  };\n\n  Headers.prototype.values = function() {\n    var items = [];\n    this.forEach(function(value) {\n      items.push(value);\n    });\n    return iteratorFor(items)\n  };\n\n  Headers.prototype.entries = function() {\n    var items = [];\n    this.forEach(function(value, name) {\n      items.push([name, value]);\n    });\n    return iteratorFor(items)\n  };\n\n  if (support.iterable) {\n    Headers.prototype[Symbol.iterator] = Headers.prototype.entries;\n  }\n\n  function consumed(body) {\n    if (body.bodyUsed) {\n      return Promise.reject(new TypeError('Already read'))\n    }\n    body.bodyUsed = true;\n  }\n\n  function fileReaderReady(reader) {\n    return new Promise(function(resolve, reject) {\n      reader.onload = function() {\n        resolve(reader.result);\n      };\n      reader.onerror = function() {\n        reject(reader.error);\n      };\n    })\n  }\n\n  function readBlobAsArrayBuffer(blob) {\n    var reader = new FileReader();\n    var promise = fileReaderReady(reader);\n    reader.readAsArrayBuffer(blob);\n    return promise\n  }\n\n  function readBlobAsText(blob) {\n    var reader = new FileReader();\n    var promise = fileReaderReady(reader);\n    reader.readAsText(blob);\n    return promise\n  }\n\n  function readArrayBufferAsText(buf) {\n    var view = new Uint8Array(buf);\n    var chars = new Array(view.length);\n\n    for (var i = 0; i < view.length; i++) {\n      chars[i] = String.fromCharCode(view[i]);\n    }\n    return chars.join('')\n  }\n\n  function bufferClone(buf) {\n    if (buf.slice) {\n      return buf.slice(0)\n    } else {\n      var view = new Uint8Array(buf.byteLength);\n      view.set(new Uint8Array(buf));\n      return view.buffer\n    }\n  }\n\n  function Body() {\n    this.bodyUsed = false;\n\n    this._initBody = function(body) {\n      this._bodyInit = body;\n      if (!body) {\n        this._bodyText = '';\n      } else if (typeof body === 'string') {\n        this._bodyText = body;\n      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n        this._bodyBlob = body;\n      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n        this._bodyFormData = body;\n      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n        this._bodyText = body.toString();\n      } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n        this._bodyArrayBuffer = bufferClone(body.buffer);\n        // IE 10-11 can't handle a DataView body.\n        this._bodyInit = new Blob([this._bodyArrayBuffer]);\n      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n        this._bodyArrayBuffer = bufferClone(body);\n      } else {\n        this._bodyText = body = Object.prototype.toString.call(body);\n      }\n\n      if (!this.headers.get('content-type')) {\n        if (typeof body === 'string') {\n          this.headers.set('content-type', 'text/plain;charset=UTF-8');\n        } else if (this._bodyBlob && this._bodyBlob.type) {\n          this.headers.set('content-type', this._bodyBlob.type);\n        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');\n        }\n      }\n    };\n\n    if (support.blob) {\n      this.blob = function() {\n        var rejected = consumed(this);\n        if (rejected) {\n          return rejected\n        }\n\n        if (this._bodyBlob) {\n          return Promise.resolve(this._bodyBlob)\n        } else if (this._bodyArrayBuffer) {\n          return Promise.resolve(new Blob([this._bodyArrayBuffer]))\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as blob')\n        } else {\n          return Promise.resolve(new Blob([this._bodyText]))\n        }\n      };\n\n      this.arrayBuffer = function() {\n        if (this._bodyArrayBuffer) {\n          return consumed(this) || Promise.resolve(this._bodyArrayBuffer)\n        } else {\n          return this.blob().then(readBlobAsArrayBuffer)\n        }\n      };\n    }\n\n    this.text = function() {\n      var rejected = consumed(this);\n      if (rejected) {\n        return rejected\n      }\n\n      if (this._bodyBlob) {\n        return readBlobAsText(this._bodyBlob)\n      } else if (this._bodyArrayBuffer) {\n        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))\n      } else if (this._bodyFormData) {\n        throw new Error('could not read FormData body as text')\n      } else {\n        return Promise.resolve(this._bodyText)\n      }\n    };\n\n    if (support.formData) {\n      this.formData = function() {\n        return this.text().then(decode)\n      };\n    }\n\n    this.json = function() {\n      return this.text().then(JSON.parse)\n    };\n\n    return this\n  }\n\n  // HTTP methods whose capitalization should be normalized\n  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];\n\n  function normalizeMethod(method) {\n    var upcased = method.toUpperCase();\n    return methods.indexOf(upcased) > -1 ? upcased : method\n  }\n\n  function Request(input, options) {\n    options = options || {};\n    var body = options.body;\n\n    if (input instanceof Request) {\n      if (input.bodyUsed) {\n        throw new TypeError('Already read')\n      }\n      this.url = input.url;\n      this.credentials = input.credentials;\n      if (!options.headers) {\n        this.headers = new Headers(input.headers);\n      }\n      this.method = input.method;\n      this.mode = input.mode;\n      this.signal = input.signal;\n      if (!body && input._bodyInit != null) {\n        body = input._bodyInit;\n        input.bodyUsed = true;\n      }\n    } else {\n      this.url = String(input);\n    }\n\n    this.credentials = options.credentials || this.credentials || 'same-origin';\n    if (options.headers || !this.headers) {\n      this.headers = new Headers(options.headers);\n    }\n    this.method = normalizeMethod(options.method || this.method || 'GET');\n    this.mode = options.mode || this.mode || null;\n    this.signal = options.signal || this.signal;\n    this.referrer = null;\n\n    if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n      throw new TypeError('Body not allowed for GET or HEAD requests')\n    }\n    this._initBody(body);\n  }\n\n  Request.prototype.clone = function() {\n    return new Request(this, {body: this._bodyInit})\n  };\n\n  function decode(body) {\n    var form = new FormData();\n    body\n      .trim()\n      .split('&')\n      .forEach(function(bytes) {\n        if (bytes) {\n          var split = bytes.split('=');\n          var name = split.shift().replace(/\\+/g, ' ');\n          var value = split.join('=').replace(/\\+/g, ' ');\n          form.append(decodeURIComponent(name), decodeURIComponent(value));\n        }\n      });\n    return form\n  }\n\n  function parseHeaders(rawHeaders) {\n    var headers = new Headers();\n    // Replace instances of \\r\\n and \\n followed by at least one space or horizontal tab with a space\n    // https://tools.ietf.org/html/rfc7230#section-3.2\n    var preProcessedHeaders = rawHeaders.replace(/\\r?\\n[\\t ]+/g, ' ');\n    preProcessedHeaders.split(/\\r?\\n/).forEach(function(line) {\n      var parts = line.split(':');\n      var key = parts.shift().trim();\n      if (key) {\n        var value = parts.join(':').trim();\n        headers.append(key, value);\n      }\n    });\n    return headers\n  }\n\n  Body.call(Request.prototype);\n\n  function Response(bodyInit, options) {\n    if (!options) {\n      options = {};\n    }\n\n    this.type = 'default';\n    this.status = options.status === undefined ? 200 : options.status;\n    this.ok = this.status >= 200 && this.status < 300;\n    this.statusText = 'statusText' in options ? options.statusText : 'OK';\n    this.headers = new Headers(options.headers);\n    this.url = options.url || '';\n    this._initBody(bodyInit);\n  }\n\n  Body.call(Response.prototype);\n\n  Response.prototype.clone = function() {\n    return new Response(this._bodyInit, {\n      status: this.status,\n      statusText: this.statusText,\n      headers: new Headers(this.headers),\n      url: this.url\n    })\n  };\n\n  Response.error = function() {\n    var response = new Response(null, {status: 0, statusText: ''});\n    response.type = 'error';\n    return response\n  };\n\n  var redirectStatuses = [301, 302, 303, 307, 308];\n\n  Response.redirect = function(url, status) {\n    if (redirectStatuses.indexOf(status) === -1) {\n      throw new RangeError('Invalid status code')\n    }\n\n    return new Response(null, {status: status, headers: {location: url}})\n  };\n\n  exports.DOMException = self.DOMException;\n  try {\n    new exports.DOMException();\n  } catch (err) {\n    exports.DOMException = function(message, name) {\n      this.message = message;\n      this.name = name;\n      var error = Error(message);\n      this.stack = error.stack;\n    };\n    exports.DOMException.prototype = Object.create(Error.prototype);\n    exports.DOMException.prototype.constructor = exports.DOMException;\n  }\n\n  function fetch(input, init) {\n    return new Promise(function(resolve, reject) {\n      var request = new Request(input, init);\n\n      if (request.signal && request.signal.aborted) {\n        return reject(new exports.DOMException('Aborted', 'AbortError'))\n      }\n\n      var xhr = new XMLHttpRequest();\n\n      function abortXhr() {\n        xhr.abort();\n      }\n\n      xhr.onload = function() {\n        var options = {\n          status: xhr.status,\n          statusText: xhr.statusText,\n          headers: parseHeaders(xhr.getAllResponseHeaders() || '')\n        };\n        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');\n        var body = 'response' in xhr ? xhr.response : xhr.responseText;\n        resolve(new Response(body, options));\n      };\n\n      xhr.onerror = function() {\n        reject(new TypeError('Network request failed'));\n      };\n\n      xhr.ontimeout = function() {\n        reject(new TypeError('Network request failed'));\n      };\n\n      xhr.onabort = function() {\n        reject(new exports.DOMException('Aborted', 'AbortError'));\n      };\n\n      xhr.open(request.method, request.url, true);\n\n      if (request.credentials === 'include') {\n        xhr.withCredentials = true;\n      } else if (request.credentials === 'omit') {\n        xhr.withCredentials = false;\n      }\n\n      if ('responseType' in xhr && support.blob) {\n        xhr.responseType = 'blob';\n      }\n\n      request.headers.forEach(function(value, name) {\n        xhr.setRequestHeader(name, value);\n      });\n\n      if (request.signal) {\n        request.signal.addEventListener('abort', abortXhr);\n\n        xhr.onreadystatechange = function() {\n          // DONE (success or failure)\n          if (xhr.readyState === 4) {\n            request.signal.removeEventListener('abort', abortXhr);\n          }\n        };\n      }\n\n      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);\n    })\n  }\n\n  fetch.polyfill = true;\n\n  if (!self.fetch) {\n    self.fetch = fetch;\n    self.Headers = Headers;\n    self.Request = Request;\n    self.Response = Response;\n  }\n\n  exports.Headers = Headers;\n  exports.Request = Request;\n  exports.Response = Response;\n  exports.fetch = fetch;\n\n  return exports;\n\n}({}));\n})(__root__);\ndelete __root__.fetch.polyfill\nmodule.exports = exports = __root__.fetch\nexports.fetch = __root__.fetch\nexports.Headers = __root__.Headers\nexports.Request = __root__.Request\nexports.Response = __root__.Response\n// Needed for TypeScript consumers without esModuleInterop.\nexports.default = __root__.fetch\n\n\n//# sourceURL=webpack://HicStraw/./node_modules/cross-fetch/dist/browser-ponyfill.js?");/***/},/***/"./node_modules/events/events.js":/*!***************************************!*\
  !*** ./node_modules/events/events.js ***!
  \***************************************/ /*! no static exports found */ /***/function node_modulesEventsEventsJs(module,exports){eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nfunction EventEmitter() {\n  this._events = this._events || {};\n  this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners = 10;\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function(n) {\n  if (!isNumber(n) || n < 0 || isNaN(n))\n    throw TypeError('n must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nEventEmitter.prototype.emit = function(type) {\n  var er, handler, len, args, i, listeners;\n\n  if (!this._events)\n    this._events = {};\n\n  // If there is no 'error' event listener then throw.\n  if (type === 'error') {\n    if (!this._events.error ||\n        (isObject(this._events.error) && !this._events.error.length)) {\n      er = arguments[1];\n      if (er instanceof Error) {\n        throw er; // Unhandled 'error' event\n      } else {\n        // At least give some kind of context to the user\n        var err = new Error('Uncaught, unspecified \"error\" event. (' + er + ')');\n        err.context = er;\n        throw err;\n      }\n    }\n  }\n\n  handler = this._events[type];\n\n  if (isUndefined(handler))\n    return false;\n\n  if (isFunction(handler)) {\n    switch (arguments.length) {\n      // fast cases\n      case 1:\n        handler.call(this);\n        break;\n      case 2:\n        handler.call(this, arguments[1]);\n        break;\n      case 3:\n        handler.call(this, arguments[1], arguments[2]);\n        break;\n      // slower\n      default:\n        args = Array.prototype.slice.call(arguments, 1);\n        handler.apply(this, args);\n    }\n  } else if (isObject(handler)) {\n    args = Array.prototype.slice.call(arguments, 1);\n    listeners = handler.slice();\n    len = listeners.length;\n    for (i = 0; i < len; i++)\n      listeners[i].apply(this, args);\n  }\n\n  return true;\n};\n\nEventEmitter.prototype.addListener = function(type, listener) {\n  var m;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events)\n    this._events = {};\n\n  // To avoid recursion in the case that type === \"newListener\"! Before\n  // adding it to the listeners, first emit \"newListener\".\n  if (this._events.newListener)\n    this.emit('newListener', type,\n              isFunction(listener.listener) ?\n              listener.listener : listener);\n\n  if (!this._events[type])\n    // Optimize the case of one listener. Don't need the extra array object.\n    this._events[type] = listener;\n  else if (isObject(this._events[type]))\n    // If we've already got an array, just append.\n    this._events[type].push(listener);\n  else\n    // Adding the second element, need to change to array.\n    this._events[type] = [this._events[type], listener];\n\n  // Check for listener leak\n  if (isObject(this._events[type]) && !this._events[type].warned) {\n    if (!isUndefined(this._maxListeners)) {\n      m = this._maxListeners;\n    } else {\n      m = EventEmitter.defaultMaxListeners;\n    }\n\n    if (m && m > 0 && this._events[type].length > m) {\n      this._events[type].warned = true;\n      console.error('(node) warning: possible EventEmitter memory ' +\n                    'leak detected. %d listeners added. ' +\n                    'Use emitter.setMaxListeners() to increase limit.',\n                    this._events[type].length);\n      if (typeof console.trace === 'function') {\n        // not supported in IE 10\n        console.trace();\n      }\n    }\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.once = function(type, listener) {\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  var fired = false;\n\n  function g() {\n    this.removeListener(type, g);\n\n    if (!fired) {\n      fired = true;\n      listener.apply(this, arguments);\n    }\n  }\n\n  g.listener = listener;\n  this.on(type, g);\n\n  return this;\n};\n\n// emits a 'removeListener' event iff the listener was removed\nEventEmitter.prototype.removeListener = function(type, listener) {\n  var list, position, length, i;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events || !this._events[type])\n    return this;\n\n  list = this._events[type];\n  length = list.length;\n  position = -1;\n\n  if (list === listener ||\n      (isFunction(list.listener) && list.listener === listener)) {\n    delete this._events[type];\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n\n  } else if (isObject(list)) {\n    for (i = length; i-- > 0;) {\n      if (list[i] === listener ||\n          (list[i].listener && list[i].listener === listener)) {\n        position = i;\n        break;\n      }\n    }\n\n    if (position < 0)\n      return this;\n\n    if (list.length === 1) {\n      list.length = 0;\n      delete this._events[type];\n    } else {\n      list.splice(position, 1);\n    }\n\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.removeAllListeners = function(type) {\n  var key, listeners;\n\n  if (!this._events)\n    return this;\n\n  // not listening for removeListener, no need to emit\n  if (!this._events.removeListener) {\n    if (arguments.length === 0)\n      this._events = {};\n    else if (this._events[type])\n      delete this._events[type];\n    return this;\n  }\n\n  // emit removeListener for all listeners on all events\n  if (arguments.length === 0) {\n    for (key in this._events) {\n      if (key === 'removeListener') continue;\n      this.removeAllListeners(key);\n    }\n    this.removeAllListeners('removeListener');\n    this._events = {};\n    return this;\n  }\n\n  listeners = this._events[type];\n\n  if (isFunction(listeners)) {\n    this.removeListener(type, listeners);\n  } else if (listeners) {\n    // LIFO order\n    while (listeners.length)\n      this.removeListener(type, listeners[listeners.length - 1]);\n  }\n  delete this._events[type];\n\n  return this;\n};\n\nEventEmitter.prototype.listeners = function(type) {\n  var ret;\n  if (!this._events || !this._events[type])\n    ret = [];\n  else if (isFunction(this._events[type]))\n    ret = [this._events[type]];\n  else\n    ret = this._events[type].slice();\n  return ret;\n};\n\nEventEmitter.prototype.listenerCount = function(type) {\n  if (this._events) {\n    var evlistener = this._events[type];\n\n    if (isFunction(evlistener))\n      return 1;\n    else if (evlistener)\n      return evlistener.length;\n  }\n  return 0;\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  return emitter.listenerCount(type);\n};\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\n\n\n//# sourceURL=webpack://HicStraw/./node_modules/events/events.js?");/***/},/***/"./node_modules/ieee754/index.js":/*!***************************************!*\
  !*** ./node_modules/ieee754/index.js ***!
  \***************************************/ /*! no static exports found */ /***/function node_modulesIeee754IndexJs(module,exports){eval("exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n\n\n//# sourceURL=webpack://HicStraw/./node_modules/ieee754/index.js?");/***/},/***/"./node_modules/inherits/inherits_browser.js":/*!***************************************************!*\
  !*** ./node_modules/inherits/inherits_browser.js ***!
  \***************************************************/ /*! no static exports found */ /***/function node_modulesInheritsInherits_browserJs(module,exports){eval("if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    ctor.prototype = Object.create(superCtor.prototype, {\n      constructor: {\n        value: ctor,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    var TempCtor = function () {}\n    TempCtor.prototype = superCtor.prototype\n    ctor.prototype = new TempCtor()\n    ctor.prototype.constructor = ctor\n  }\n}\n\n\n//# sourceURL=webpack://HicStraw/./node_modules/inherits/inherits_browser.js?");/***/},/***/"./node_modules/isarray/index.js":/*!***************************************!*\
  !*** ./node_modules/isarray/index.js ***!
  \***************************************/ /*! no static exports found */ /***/function node_modulesIsarrayIndexJs(module,exports){eval("var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n\n\n//# sourceURL=webpack://HicStraw/./node_modules/isarray/index.js?");/***/},/***/"./node_modules/pako/lib/utils/common.js":/*!***********************************************!*\
  !*** ./node_modules/pako/lib/utils/common.js ***!
  \***********************************************/ /*! no static exports found */ /***/function node_modulesPakoLibUtilsCommonJs(module,exports,__webpack_require__){"use strict";eval("\n\n\nvar TYPED_OK =  (typeof Uint8Array !== 'undefined') &&\n                (typeof Uint16Array !== 'undefined') &&\n                (typeof Int32Array !== 'undefined');\n\nfunction _has(obj, key) {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n}\n\nexports.assign = function (obj /*from1, from2, from3, ...*/) {\n  var sources = Array.prototype.slice.call(arguments, 1);\n  while (sources.length) {\n    var source = sources.shift();\n    if (!source) { continue; }\n\n    if (typeof source !== 'object') {\n      throw new TypeError(source + 'must be non-object');\n    }\n\n    for (var p in source) {\n      if (_has(source, p)) {\n        obj[p] = source[p];\n      }\n    }\n  }\n\n  return obj;\n};\n\n\n// reduce buffer size, avoiding mem copy\nexports.shrinkBuf = function (buf, size) {\n  if (buf.length === size) { return buf; }\n  if (buf.subarray) { return buf.subarray(0, size); }\n  buf.length = size;\n  return buf;\n};\n\n\nvar fnTyped = {\n  arraySet: function (dest, src, src_offs, len, dest_offs) {\n    if (src.subarray && dest.subarray) {\n      dest.set(src.subarray(src_offs, src_offs + len), dest_offs);\n      return;\n    }\n    // Fallback to ordinary array\n    for (var i = 0; i < len; i++) {\n      dest[dest_offs + i] = src[src_offs + i];\n    }\n  },\n  // Join array of chunks to single array.\n  flattenChunks: function (chunks) {\n    var i, l, len, pos, chunk, result;\n\n    // calculate data length\n    len = 0;\n    for (i = 0, l = chunks.length; i < l; i++) {\n      len += chunks[i].length;\n    }\n\n    // join chunks\n    result = new Uint8Array(len);\n    pos = 0;\n    for (i = 0, l = chunks.length; i < l; i++) {\n      chunk = chunks[i];\n      result.set(chunk, pos);\n      pos += chunk.length;\n    }\n\n    return result;\n  }\n};\n\nvar fnUntyped = {\n  arraySet: function (dest, src, src_offs, len, dest_offs) {\n    for (var i = 0; i < len; i++) {\n      dest[dest_offs + i] = src[src_offs + i];\n    }\n  },\n  // Join array of chunks to single array.\n  flattenChunks: function (chunks) {\n    return [].concat.apply([], chunks);\n  }\n};\n\n\n// Enable/Disable typed arrays use, for testing\n//\nexports.setTyped = function (on) {\n  if (on) {\n    exports.Buf8  = Uint8Array;\n    exports.Buf16 = Uint16Array;\n    exports.Buf32 = Int32Array;\n    exports.assign(exports, fnTyped);\n  } else {\n    exports.Buf8  = Array;\n    exports.Buf16 = Array;\n    exports.Buf32 = Array;\n    exports.assign(exports, fnUntyped);\n  }\n};\n\nexports.setTyped(TYPED_OK);\n\n\n//# sourceURL=webpack://HicStraw/./node_modules/pako/lib/utils/common.js?");/***/},/***/"./node_modules/pako/lib/zlib/adler32.js":/*!***********************************************!*\
  !*** ./node_modules/pako/lib/zlib/adler32.js ***!
  \***********************************************/ /*! no static exports found */ /***/function node_modulesPakoLibZlibAdler32Js(module,exports,__webpack_require__){"use strict";eval("\n\n// Note: adler32 takes 12% for level 0 and 2% for level 6.\n// It isn't worth it to make additional optimizations as in original.\n// Small size is preferable.\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nfunction adler32(adler, buf, len, pos) {\n  var s1 = (adler & 0xffff) |0,\n      s2 = ((adler >>> 16) & 0xffff) |0,\n      n = 0;\n\n  while (len !== 0) {\n    // Set limit ~ twice less than 5552, to keep\n    // s2 in 31-bits, because we force signed ints.\n    // in other case %= will fail.\n    n = len > 2000 ? 2000 : len;\n    len -= n;\n\n    do {\n      s1 = (s1 + buf[pos++]) |0;\n      s2 = (s2 + s1) |0;\n    } while (--n);\n\n    s1 %= 65521;\n    s2 %= 65521;\n  }\n\n  return (s1 | (s2 << 16)) |0;\n}\n\n\nmodule.exports = adler32;\n\n\n//# sourceURL=webpack://HicStraw/./node_modules/pako/lib/zlib/adler32.js?");/***/},/***/"./node_modules/pako/lib/zlib/constants.js":/*!*************************************************!*\
  !*** ./node_modules/pako/lib/zlib/constants.js ***!
  \*************************************************/ /*! no static exports found */ /***/function node_modulesPakoLibZlibConstantsJs(module,exports,__webpack_require__){"use strict";eval("\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nmodule.exports = {\n\n  /* Allowed flush values; see deflate() and inflate() below for details */\n  Z_NO_FLUSH:         0,\n  Z_PARTIAL_FLUSH:    1,\n  Z_SYNC_FLUSH:       2,\n  Z_FULL_FLUSH:       3,\n  Z_FINISH:           4,\n  Z_BLOCK:            5,\n  Z_TREES:            6,\n\n  /* Return codes for the compression/decompression functions. Negative values\n  * are errors, positive values are used for special but normal events.\n  */\n  Z_OK:               0,\n  Z_STREAM_END:       1,\n  Z_NEED_DICT:        2,\n  Z_ERRNO:           -1,\n  Z_STREAM_ERROR:    -2,\n  Z_DATA_ERROR:      -3,\n  //Z_MEM_ERROR:     -4,\n  Z_BUF_ERROR:       -5,\n  //Z_VERSION_ERROR: -6,\n\n  /* compression levels */\n  Z_NO_COMPRESSION:         0,\n  Z_BEST_SPEED:             1,\n  Z_BEST_COMPRESSION:       9,\n  Z_DEFAULT_COMPRESSION:   -1,\n\n\n  Z_FILTERED:               1,\n  Z_HUFFMAN_ONLY:           2,\n  Z_RLE:                    3,\n  Z_FIXED:                  4,\n  Z_DEFAULT_STRATEGY:       0,\n\n  /* Possible values of the data_type field (though see inflate()) */\n  Z_BINARY:                 0,\n  Z_TEXT:                   1,\n  //Z_ASCII:                1, // = Z_TEXT (deprecated)\n  Z_UNKNOWN:                2,\n\n  /* The deflate compression method */\n  Z_DEFLATED:               8\n  //Z_NULL:                 null // Use -1 or null inline, depending on var type\n};\n\n\n//# sourceURL=webpack://HicStraw/./node_modules/pako/lib/zlib/constants.js?");/***/},/***/"./node_modules/pako/lib/zlib/crc32.js":/*!*********************************************!*\
  !*** ./node_modules/pako/lib/zlib/crc32.js ***!
  \*********************************************/ /*! no static exports found */ /***/function node_modulesPakoLibZlibCrc32Js(module,exports,__webpack_require__){"use strict";eval("\n\n// Note: we can't get significant speed boost here.\n// So write code to minimize size - no pregenerated tables\n// and array tools dependencies.\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n// Use ordinary array, since untyped makes no boost here\nfunction makeTable() {\n  var c, table = [];\n\n  for (var n = 0; n < 256; n++) {\n    c = n;\n    for (var k = 0; k < 8; k++) {\n      c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));\n    }\n    table[n] = c;\n  }\n\n  return table;\n}\n\n// Create table on load. Just 255 signed longs. Not a problem.\nvar crcTable = makeTable();\n\n\nfunction crc32(crc, buf, len, pos) {\n  var t = crcTable,\n      end = pos + len;\n\n  crc ^= -1;\n\n  for (var i = pos; i < end; i++) {\n    crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];\n  }\n\n  return (crc ^ (-1)); // >>> 0;\n}\n\n\nmodule.exports = crc32;\n\n\n//# sourceURL=webpack://HicStraw/./node_modules/pako/lib/zlib/crc32.js?");/***/},/***/"./node_modules/pako/lib/zlib/deflate.js":/*!***********************************************!*\
  !*** ./node_modules/pako/lib/zlib/deflate.js ***!
  \***********************************************/ /*! no static exports found */ /***/function node_modulesPakoLibZlibDeflateJs(module,exports,__webpack_require__){"use strict";eval("\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nvar utils   = __webpack_require__(/*! ../utils/common */ \"./node_modules/pako/lib/utils/common.js\");\nvar trees   = __webpack_require__(/*! ./trees */ \"./node_modules/pako/lib/zlib/trees.js\");\nvar adler32 = __webpack_require__(/*! ./adler32 */ \"./node_modules/pako/lib/zlib/adler32.js\");\nvar crc32   = __webpack_require__(/*! ./crc32 */ \"./node_modules/pako/lib/zlib/crc32.js\");\nvar msg     = __webpack_require__(/*! ./messages */ \"./node_modules/pako/lib/zlib/messages.js\");\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\n\n/* Allowed flush values; see deflate() and inflate() below for details */\nvar Z_NO_FLUSH      = 0;\nvar Z_PARTIAL_FLUSH = 1;\n//var Z_SYNC_FLUSH    = 2;\nvar Z_FULL_FLUSH    = 3;\nvar Z_FINISH        = 4;\nvar Z_BLOCK         = 5;\n//var Z_TREES         = 6;\n\n\n/* Return codes for the compression/decompression functions. Negative values\n * are errors, positive values are used for special but normal events.\n */\nvar Z_OK            = 0;\nvar Z_STREAM_END    = 1;\n//var Z_NEED_DICT     = 2;\n//var Z_ERRNO         = -1;\nvar Z_STREAM_ERROR  = -2;\nvar Z_DATA_ERROR    = -3;\n//var Z_MEM_ERROR     = -4;\nvar Z_BUF_ERROR     = -5;\n//var Z_VERSION_ERROR = -6;\n\n\n/* compression levels */\n//var Z_NO_COMPRESSION      = 0;\n//var Z_BEST_SPEED          = 1;\n//var Z_BEST_COMPRESSION    = 9;\nvar Z_DEFAULT_COMPRESSION = -1;\n\n\nvar Z_FILTERED            = 1;\nvar Z_HUFFMAN_ONLY        = 2;\nvar Z_RLE                 = 3;\nvar Z_FIXED               = 4;\nvar Z_DEFAULT_STRATEGY    = 0;\n\n/* Possible values of the data_type field (though see inflate()) */\n//var Z_BINARY              = 0;\n//var Z_TEXT                = 1;\n//var Z_ASCII               = 1; // = Z_TEXT\nvar Z_UNKNOWN             = 2;\n\n\n/* The deflate compression method */\nvar Z_DEFLATED  = 8;\n\n/*============================================================================*/\n\n\nvar MAX_MEM_LEVEL = 9;\n/* Maximum value for memLevel in deflateInit2 */\nvar MAX_WBITS = 15;\n/* 32K LZ77 window */\nvar DEF_MEM_LEVEL = 8;\n\n\nvar LENGTH_CODES  = 29;\n/* number of length codes, not counting the special END_BLOCK code */\nvar LITERALS      = 256;\n/* number of literal bytes 0..255 */\nvar L_CODES       = LITERALS + 1 + LENGTH_CODES;\n/* number of Literal or Length codes, including the END_BLOCK code */\nvar D_CODES       = 30;\n/* number of distance codes */\nvar BL_CODES      = 19;\n/* number of codes used to transfer the bit lengths */\nvar HEAP_SIZE     = 2 * L_CODES + 1;\n/* maximum heap size */\nvar MAX_BITS  = 15;\n/* All codes must not exceed MAX_BITS bits */\n\nvar MIN_MATCH = 3;\nvar MAX_MATCH = 258;\nvar MIN_LOOKAHEAD = (MAX_MATCH + MIN_MATCH + 1);\n\nvar PRESET_DICT = 0x20;\n\nvar INIT_STATE = 42;\nvar EXTRA_STATE = 69;\nvar NAME_STATE = 73;\nvar COMMENT_STATE = 91;\nvar HCRC_STATE = 103;\nvar BUSY_STATE = 113;\nvar FINISH_STATE = 666;\n\nvar BS_NEED_MORE      = 1; /* block not completed, need more input or more output */\nvar BS_BLOCK_DONE     = 2; /* block flush performed */\nvar BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */\nvar BS_FINISH_DONE    = 4; /* finish done, accept no more input or output */\n\nvar OS_CODE = 0x03; // Unix :) . Don't detect, use this default.\n\nfunction err(strm, errorCode) {\n  strm.msg = msg[errorCode];\n  return errorCode;\n}\n\nfunction rank(f) {\n  return ((f) << 1) - ((f) > 4 ? 9 : 0);\n}\n\nfunction zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }\n\n\n/* =========================================================================\n * Flush as much pending output as possible. All deflate() output goes\n * through this function so some applications may wish to modify it\n * to avoid allocating a large strm->output buffer and copying into it.\n * (See also read_buf()).\n */\nfunction flush_pending(strm) {\n  var s = strm.state;\n\n  //_tr_flush_bits(s);\n  var len = s.pending;\n  if (len > strm.avail_out) {\n    len = strm.avail_out;\n  }\n  if (len === 0) { return; }\n\n  utils.arraySet(strm.output, s.pending_buf, s.pending_out, len, strm.next_out);\n  strm.next_out += len;\n  s.pending_out += len;\n  strm.total_out += len;\n  strm.avail_out -= len;\n  s.pending -= len;\n  if (s.pending === 0) {\n    s.pending_out = 0;\n  }\n}\n\n\nfunction flush_block_only(s, last) {\n  trees._tr_flush_block(s, (s.block_start >= 0 ? s.block_start : -1), s.strstart - s.block_start, last);\n  s.block_start = s.strstart;\n  flush_pending(s.strm);\n}\n\n\nfunction put_byte(s, b) {\n  s.pending_buf[s.pending++] = b;\n}\n\n\n/* =========================================================================\n * Put a short in the pending buffer. The 16-bit value is put in MSB order.\n * IN assertion: the stream state is correct and there is enough room in\n * pending_buf.\n */\nfunction putShortMSB(s, b) {\n//  put_byte(s, (Byte)(b >> 8));\n//  put_byte(s, (Byte)(b & 0xff));\n  s.pending_buf[s.pending++] = (b >>> 8) & 0xff;\n  s.pending_buf[s.pending++] = b & 0xff;\n}\n\n\n/* ===========================================================================\n * Read a new buffer from the current input stream, update the adler32\n * and total number of bytes read.  All deflate() input goes through\n * this function so some applications may wish to modify it to avoid\n * allocating a large strm->input buffer and copying from it.\n * (See also flush_pending()).\n */\nfunction read_buf(strm, buf, start, size) {\n  var len = strm.avail_in;\n\n  if (len > size) { len = size; }\n  if (len === 0) { return 0; }\n\n  strm.avail_in -= len;\n\n  // zmemcpy(buf, strm->next_in, len);\n  utils.arraySet(buf, strm.input, strm.next_in, len, start);\n  if (strm.state.wrap === 1) {\n    strm.adler = adler32(strm.adler, buf, len, start);\n  }\n\n  else if (strm.state.wrap === 2) {\n    strm.adler = crc32(strm.adler, buf, len, start);\n  }\n\n  strm.next_in += len;\n  strm.total_in += len;\n\n  return len;\n}\n\n\n/* ===========================================================================\n * Set match_start to the longest match starting at the given string and\n * return its length. Matches shorter or equal to prev_length are discarded,\n * in which case the result is equal to prev_length and match_start is\n * garbage.\n * IN assertions: cur_match is the head of the hash chain for the current\n *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1\n * OUT assertion: the match length is not greater than s->lookahead.\n */\nfunction longest_match(s, cur_match) {\n  var chain_length = s.max_chain_length;      /* max hash chain length */\n  var scan = s.strstart; /* current string */\n  var match;                       /* matched string */\n  var len;                           /* length of current match */\n  var best_len = s.prev_length;              /* best match length so far */\n  var nice_match = s.nice_match;             /* stop if match long enough */\n  var limit = (s.strstart > (s.w_size - MIN_LOOKAHEAD)) ?\n      s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0/*NIL*/;\n\n  var _win = s.window; // shortcut\n\n  var wmask = s.w_mask;\n  var prev  = s.prev;\n\n  /* Stop when cur_match becomes <= limit. To simplify the code,\n   * we prevent matches with the string of window index 0.\n   */\n\n  var strend = s.strstart + MAX_MATCH;\n  var scan_end1  = _win[scan + best_len - 1];\n  var scan_end   = _win[scan + best_len];\n\n  /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.\n   * It is easy to get rid of this optimization if necessary.\n   */\n  // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, \"Code too clever\");\n\n  /* Do not waste too much time if we already have a good match: */\n  if (s.prev_length >= s.good_match) {\n    chain_length >>= 2;\n  }\n  /* Do not look for matches beyond the end of the input. This is necessary\n   * to make deflate deterministic.\n   */\n  if (nice_match > s.lookahead) { nice_match = s.lookahead; }\n\n  // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, \"need lookahead\");\n\n  do {\n    // Assert(cur_match < s->strstart, \"no future\");\n    match = cur_match;\n\n    /* Skip to next match if the match length cannot increase\n     * or if the match length is less than 2.  Note that the checks below\n     * for insufficient lookahead only occur occasionally for performance\n     * reasons.  Therefore uninitialized memory will be accessed, and\n     * conditional jumps will be made that depend on those values.\n     * However the length of the match is limited to the lookahead, so\n     * the output of deflate is not affected by the uninitialized values.\n     */\n\n    if (_win[match + best_len]     !== scan_end  ||\n        _win[match + best_len - 1] !== scan_end1 ||\n        _win[match]                !== _win[scan] ||\n        _win[++match]              !== _win[scan + 1]) {\n      continue;\n    }\n\n    /* The check at best_len-1 can be removed because it will be made\n     * again later. (This heuristic is not always a win.)\n     * It is not necessary to compare scan[2] and match[2] since they\n     * are always equal when the other bytes match, given that\n     * the hash keys are equal and that HASH_BITS >= 8.\n     */\n    scan += 2;\n    match++;\n    // Assert(*scan == *match, \"match[2]?\");\n\n    /* We check for insufficient lookahead only every 8th comparison;\n     * the 256th check will be made at strstart+258.\n     */\n    do {\n      /*jshint noempty:false*/\n    } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             scan < strend);\n\n    // Assert(scan <= s->window+(unsigned)(s->window_size-1), \"wild scan\");\n\n    len = MAX_MATCH - (strend - scan);\n    scan = strend - MAX_MATCH;\n\n    if (len > best_len) {\n      s.match_start = cur_match;\n      best_len = len;\n      if (len >= nice_match) {\n        break;\n      }\n      scan_end1  = _win[scan + best_len - 1];\n      scan_end   = _win[scan + best_len];\n    }\n  } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);\n\n  if (best_len <= s.lookahead) {\n    return best_len;\n  }\n  return s.lookahead;\n}\n\n\n/* ===========================================================================\n * Fill the window when the lookahead becomes insufficient.\n * Updates strstart and lookahead.\n *\n * IN assertion: lookahead < MIN_LOOKAHEAD\n * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD\n *    At least one byte has been read, or avail_in == 0; reads are\n *    performed for at least two bytes (required for the zip translate_eol\n *    option -- not supported here).\n */\nfunction fill_window(s) {\n  var _w_size = s.w_size;\n  var p, n, m, more, str;\n\n  //Assert(s->lookahead < MIN_LOOKAHEAD, \"already enough lookahead\");\n\n  do {\n    more = s.window_size - s.lookahead - s.strstart;\n\n    // JS ints have 32 bit, block below not needed\n    /* Deal with !@#$% 64K limit: */\n    //if (sizeof(int) <= 2) {\n    //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {\n    //        more = wsize;\n    //\n    //  } else if (more == (unsigned)(-1)) {\n    //        /* Very unlikely, but possible on 16 bit machine if\n    //         * strstart == 0 && lookahead == 1 (input done a byte at time)\n    //         */\n    //        more--;\n    //    }\n    //}\n\n\n    /* If the window is almost full and there is insufficient lookahead,\n     * move the upper half to the lower one to make room in the upper half.\n     */\n    if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {\n\n      utils.arraySet(s.window, s.window, _w_size, _w_size, 0);\n      s.match_start -= _w_size;\n      s.strstart -= _w_size;\n      /* we now have strstart >= MAX_DIST */\n      s.block_start -= _w_size;\n\n      /* Slide the hash table (could be avoided with 32 bit values\n       at the expense of memory usage). We slide even when level == 0\n       to keep the hash table consistent if we switch back to level > 0\n       later. (Using level 0 permanently is not an optimal usage of\n       zlib, so we don't care about this pathological case.)\n       */\n\n      n = s.hash_size;\n      p = n;\n      do {\n        m = s.head[--p];\n        s.head[p] = (m >= _w_size ? m - _w_size : 0);\n      } while (--n);\n\n      n = _w_size;\n      p = n;\n      do {\n        m = s.prev[--p];\n        s.prev[p] = (m >= _w_size ? m - _w_size : 0);\n        /* If n is not on any hash chain, prev[n] is garbage but\n         * its value will never be used.\n         */\n      } while (--n);\n\n      more += _w_size;\n    }\n    if (s.strm.avail_in === 0) {\n      break;\n    }\n\n    /* If there was no sliding:\n     *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&\n     *    more == window_size - lookahead - strstart\n     * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)\n     * => more >= window_size - 2*WSIZE + 2\n     * In the BIG_MEM or MMAP case (not yet supported),\n     *   window_size == input_size + MIN_LOOKAHEAD  &&\n     *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.\n     * Otherwise, window_size == 2*WSIZE so more >= 2.\n     * If there was sliding, more >= WSIZE. So in all cases, more >= 2.\n     */\n    //Assert(more >= 2, \"more < 2\");\n    n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);\n    s.lookahead += n;\n\n    /* Initialize the hash value now that we have some input: */\n    if (s.lookahead + s.insert >= MIN_MATCH) {\n      str = s.strstart - s.insert;\n      s.ins_h = s.window[str];\n\n      /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */\n      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + 1]) & s.hash_mask;\n//#if MIN_MATCH != 3\n//        Call update_hash() MIN_MATCH-3 more times\n//#endif\n      while (s.insert) {\n        /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */\n        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;\n\n        s.prev[str & s.w_mask] = s.head[s.ins_h];\n        s.head[s.ins_h] = str;\n        str++;\n        s.insert--;\n        if (s.lookahead + s.insert < MIN_MATCH) {\n          break;\n        }\n      }\n    }\n    /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,\n     * but this is not important since only literal bytes will be emitted.\n     */\n\n  } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);\n\n  /* If the WIN_INIT bytes after the end of the current data have never been\n   * written, then zero those bytes in order to avoid memory check reports of\n   * the use of uninitialized (or uninitialised as Julian writes) bytes by\n   * the longest match routines.  Update the high water mark for the next\n   * time through here.  WIN_INIT is set to MAX_MATCH since the longest match\n   * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.\n   */\n//  if (s.high_water < s.window_size) {\n//    var curr = s.strstart + s.lookahead;\n//    var init = 0;\n//\n//    if (s.high_water < curr) {\n//      /* Previous high water mark below current data -- zero WIN_INIT\n//       * bytes or up to end of window, whichever is less.\n//       */\n//      init = s.window_size - curr;\n//      if (init > WIN_INIT)\n//        init = WIN_INIT;\n//      zmemzero(s->window + curr, (unsigned)init);\n//      s->high_water = curr + init;\n//    }\n//    else if (s->high_water < (ulg)curr + WIN_INIT) {\n//      /* High water mark at or above current data, but below current data\n//       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up\n//       * to end of window, whichever is less.\n//       */\n//      init = (ulg)curr + WIN_INIT - s->high_water;\n//      if (init > s->window_size - s->high_water)\n//        init = s->window_size - s->high_water;\n//      zmemzero(s->window + s->high_water, (unsigned)init);\n//      s->high_water += init;\n//    }\n//  }\n//\n//  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,\n//    \"not enough room for search\");\n}\n\n/* ===========================================================================\n * Copy without compression as much as possible from the input stream, return\n * the current block state.\n * This function does not insert new strings in the dictionary since\n * uncompressible data is probably not useful. This function is used\n * only for the level=0 compression option.\n * NOTE: this function should be optimized to avoid extra copying from\n * window to pending_buf.\n */\nfunction deflate_stored(s, flush) {\n  /* Stored blocks are limited to 0xffff bytes, pending_buf is limited\n   * to pending_buf_size, and each stored block has a 5 byte header:\n   */\n  var max_block_size = 0xffff;\n\n  if (max_block_size > s.pending_buf_size - 5) {\n    max_block_size = s.pending_buf_size - 5;\n  }\n\n  /* Copy as much as possible from input to output: */\n  for (;;) {\n    /* Fill the window as much as possible: */\n    if (s.lookahead <= 1) {\n\n      //Assert(s->strstart < s->w_size+MAX_DIST(s) ||\n      //  s->block_start >= (long)s->w_size, \"slide too late\");\n//      if (!(s.strstart < s.w_size + (s.w_size - MIN_LOOKAHEAD) ||\n//        s.block_start >= s.w_size)) {\n//        throw  new Error(\"slide too late\");\n//      }\n\n      fill_window(s);\n      if (s.lookahead === 0 && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n\n      if (s.lookahead === 0) {\n        break;\n      }\n      /* flush the current block */\n    }\n    //Assert(s->block_start >= 0L, \"block gone\");\n//    if (s.block_start < 0) throw new Error(\"block gone\");\n\n    s.strstart += s.lookahead;\n    s.lookahead = 0;\n\n    /* Emit a stored block if pending_buf will be full: */\n    var max_start = s.block_start + max_block_size;\n\n    if (s.strstart === 0 || s.strstart >= max_start) {\n      /* strstart == 0 is possible when wraparound on 16-bit machine */\n      s.lookahead = s.strstart - max_start;\n      s.strstart = max_start;\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n\n\n    }\n    /* Flush if we may have to slide, otherwise block_start may become\n     * negative and the data will be gone:\n     */\n    if (s.strstart - s.block_start >= (s.w_size - MIN_LOOKAHEAD)) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n\n  s.insert = 0;\n\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n\n  if (s.strstart > s.block_start) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n\n  return BS_NEED_MORE;\n}\n\n/* ===========================================================================\n * Compress as much as possible from the input stream, return the current\n * block state.\n * This function does not perform lazy evaluation of matches and inserts\n * new strings in the dictionary only for unmatched strings or for short\n * matches. It is used only for the fast compression options.\n */\nfunction deflate_fast(s, flush) {\n  var hash_head;        /* head of the hash chain */\n  var bflush;           /* set if current block must be flushed */\n\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the next match, plus MIN_MATCH bytes to insert the\n     * string following the next match.\n     */\n    if (s.lookahead < MIN_LOOKAHEAD) {\n      fill_window(s);\n      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) {\n        break; /* flush the current block */\n      }\n    }\n\n    /* Insert the string window[strstart .. strstart+2] in the\n     * dictionary, and set hash_head to the head of the hash chain:\n     */\n    hash_head = 0/*NIL*/;\n    if (s.lookahead >= MIN_MATCH) {\n      /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;\n      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n      s.head[s.ins_h] = s.strstart;\n      /***/\n    }\n\n    /* Find the longest match, discarding those <= prev_length.\n     * At this point we have always match_length < MIN_MATCH\n     */\n    if (hash_head !== 0/*NIL*/ && ((s.strstart - hash_head) <= (s.w_size - MIN_LOOKAHEAD))) {\n      /* To simplify the code, we prevent matches with the string\n       * of window index 0 (in particular we have to avoid a match\n       * of the string with itself at the start of the input file).\n       */\n      s.match_length = longest_match(s, hash_head);\n      /* longest_match() sets match_start */\n    }\n    if (s.match_length >= MIN_MATCH) {\n      // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only\n\n      /*** _tr_tally_dist(s, s.strstart - s.match_start,\n                     s.match_length - MIN_MATCH, bflush); ***/\n      bflush = trees._tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);\n\n      s.lookahead -= s.match_length;\n\n      /* Insert new strings in the hash table only if the match length\n       * is not too large. This saves time but degrades compression.\n       */\n      if (s.match_length <= s.max_lazy_match/*max_insert_length*/ && s.lookahead >= MIN_MATCH) {\n        s.match_length--; /* string at strstart already in table */\n        do {\n          s.strstart++;\n          /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;\n          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n          s.head[s.ins_h] = s.strstart;\n          /***/\n          /* strstart never exceeds WSIZE-MAX_MATCH, so there are\n           * always MIN_MATCH bytes ahead.\n           */\n        } while (--s.match_length !== 0);\n        s.strstart++;\n      } else\n      {\n        s.strstart += s.match_length;\n        s.match_length = 0;\n        s.ins_h = s.window[s.strstart];\n        /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */\n        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + 1]) & s.hash_mask;\n\n//#if MIN_MATCH != 3\n//                Call UPDATE_HASH() MIN_MATCH-3 more times\n//#endif\n        /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not\n         * matter since it will be recomputed at next deflate call.\n         */\n      }\n    } else {\n      /* No match, output a literal byte */\n      //Tracevv((stderr,\"%c\", s.window[s.strstart]));\n      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);\n\n      s.lookahead--;\n      s.strstart++;\n    }\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = ((s.strstart < (MIN_MATCH - 1)) ? s.strstart : MIN_MATCH - 1);\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.last_lit) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n}\n\n/* ===========================================================================\n * Same as above, but achieves better compression. We use a lazy\n * evaluation for matches: a match is finally adopted only if there is\n * no better match at the next window position.\n */\nfunction deflate_slow(s, flush) {\n  var hash_head;          /* head of hash chain */\n  var bflush;              /* set if current block must be flushed */\n\n  var max_insert;\n\n  /* Process the input block. */\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the next match, plus MIN_MATCH bytes to insert the\n     * string following the next match.\n     */\n    if (s.lookahead < MIN_LOOKAHEAD) {\n      fill_window(s);\n      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) { break; } /* flush the current block */\n    }\n\n    /* Insert the string window[strstart .. strstart+2] in the\n     * dictionary, and set hash_head to the head of the hash chain:\n     */\n    hash_head = 0/*NIL*/;\n    if (s.lookahead >= MIN_MATCH) {\n      /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;\n      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n      s.head[s.ins_h] = s.strstart;\n      /***/\n    }\n\n    /* Find the longest match, discarding those <= prev_length.\n     */\n    s.prev_length = s.match_length;\n    s.prev_match = s.match_start;\n    s.match_length = MIN_MATCH - 1;\n\n    if (hash_head !== 0/*NIL*/ && s.prev_length < s.max_lazy_match &&\n        s.strstart - hash_head <= (s.w_size - MIN_LOOKAHEAD)/*MAX_DIST(s)*/) {\n      /* To simplify the code, we prevent matches with the string\n       * of window index 0 (in particular we have to avoid a match\n       * of the string with itself at the start of the input file).\n       */\n      s.match_length = longest_match(s, hash_head);\n      /* longest_match() sets match_start */\n\n      if (s.match_length <= 5 &&\n         (s.strategy === Z_FILTERED || (s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096/*TOO_FAR*/))) {\n\n        /* If prev_match is also MIN_MATCH, match_start is garbage\n         * but we will ignore the current match anyway.\n         */\n        s.match_length = MIN_MATCH - 1;\n      }\n    }\n    /* If there was a match at the previous step and the current\n     * match is not better, output the previous match:\n     */\n    if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {\n      max_insert = s.strstart + s.lookahead - MIN_MATCH;\n      /* Do not insert strings in hash table beyond this. */\n\n      //check_match(s, s.strstart-1, s.prev_match, s.prev_length);\n\n      /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,\n                     s.prev_length - MIN_MATCH, bflush);***/\n      bflush = trees._tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH);\n      /* Insert in hash table all strings up to the end of the match.\n       * strstart-1 and strstart are already inserted. If there is not\n       * enough lookahead, the last two strings are not inserted in\n       * the hash table.\n       */\n      s.lookahead -= s.prev_length - 1;\n      s.prev_length -= 2;\n      do {\n        if (++s.strstart <= max_insert) {\n          /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;\n          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n          s.head[s.ins_h] = s.strstart;\n          /***/\n        }\n      } while (--s.prev_length !== 0);\n      s.match_available = 0;\n      s.match_length = MIN_MATCH - 1;\n      s.strstart++;\n\n      if (bflush) {\n        /*** FLUSH_BLOCK(s, 0); ***/\n        flush_block_only(s, false);\n        if (s.strm.avail_out === 0) {\n          return BS_NEED_MORE;\n        }\n        /***/\n      }\n\n    } else if (s.match_available) {\n      /* If there was no match at the previous position, output a\n       * single literal. If there was a match but the current match\n       * is longer, truncate the previous match to a single literal.\n       */\n      //Tracevv((stderr,\"%c\", s->window[s->strstart-1]));\n      /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/\n      bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);\n\n      if (bflush) {\n        /*** FLUSH_BLOCK_ONLY(s, 0) ***/\n        flush_block_only(s, false);\n        /***/\n      }\n      s.strstart++;\n      s.lookahead--;\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n    } else {\n      /* There is no previous match to compare with, wait for\n       * the next step to decide.\n       */\n      s.match_available = 1;\n      s.strstart++;\n      s.lookahead--;\n    }\n  }\n  //Assert (flush != Z_NO_FLUSH, \"no flush?\");\n  if (s.match_available) {\n    //Tracevv((stderr,\"%c\", s->window[s->strstart-1]));\n    /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/\n    bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);\n\n    s.match_available = 0;\n  }\n  s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.last_lit) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n\n  return BS_BLOCK_DONE;\n}\n\n\n/* ===========================================================================\n * For Z_RLE, simply look for runs of bytes, generate matches only of distance\n * one.  Do not maintain a hash table.  (It will be regenerated if this run of\n * deflate switches away from Z_RLE.)\n */\nfunction deflate_rle(s, flush) {\n  var bflush;            /* set if current block must be flushed */\n  var prev;              /* byte at distance one to match */\n  var scan, strend;      /* scan goes up to strend for length of run */\n\n  var _win = s.window;\n\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the longest run, plus one for the unrolled loop.\n     */\n    if (s.lookahead <= MAX_MATCH) {\n      fill_window(s);\n      if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) { break; } /* flush the current block */\n    }\n\n    /* See how many times the previous byte repeats */\n    s.match_length = 0;\n    if (s.lookahead >= MIN_MATCH && s.strstart > 0) {\n      scan = s.strstart - 1;\n      prev = _win[scan];\n      if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {\n        strend = s.strstart + MAX_MATCH;\n        do {\n          /*jshint noempty:false*/\n        } while (prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 scan < strend);\n        s.match_length = MAX_MATCH - (strend - scan);\n        if (s.match_length > s.lookahead) {\n          s.match_length = s.lookahead;\n        }\n      }\n      //Assert(scan <= s->window+(uInt)(s->window_size-1), \"wild scan\");\n    }\n\n    /* Emit match if have run of MIN_MATCH or longer, else emit literal */\n    if (s.match_length >= MIN_MATCH) {\n      //check_match(s, s.strstart, s.strstart - 1, s.match_length);\n\n      /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/\n      bflush = trees._tr_tally(s, 1, s.match_length - MIN_MATCH);\n\n      s.lookahead -= s.match_length;\n      s.strstart += s.match_length;\n      s.match_length = 0;\n    } else {\n      /* No match, output a literal byte */\n      //Tracevv((stderr,\"%c\", s->window[s->strstart]));\n      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);\n\n      s.lookahead--;\n      s.strstart++;\n    }\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = 0;\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.last_lit) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n}\n\n/* ===========================================================================\n * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.\n * (It will be regenerated if this run of deflate switches away from Huffman.)\n */\nfunction deflate_huff(s, flush) {\n  var bflush;             /* set if current block must be flushed */\n\n  for (;;) {\n    /* Make sure that we have a literal to write. */\n    if (s.lookahead === 0) {\n      fill_window(s);\n      if (s.lookahead === 0) {\n        if (flush === Z_NO_FLUSH) {\n          return BS_NEED_MORE;\n        }\n        break;      /* flush the current block */\n      }\n    }\n\n    /* Output a literal byte */\n    s.match_length = 0;\n    //Tracevv((stderr,\"%c\", s->window[s->strstart]));\n    /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n    bflush = trees._tr_tally(s, 0, s.window[s.strstart]);\n    s.lookahead--;\n    s.strstart++;\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = 0;\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.last_lit) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n}\n\n/* Values for max_lazy_match, good_match and max_chain_length, depending on\n * the desired pack level (0..9). The values given below have been tuned to\n * exclude worst case performance for pathological files. Better values may be\n * found for specific files.\n */\nfunction Config(good_length, max_lazy, nice_length, max_chain, func) {\n  this.good_length = good_length;\n  this.max_lazy = max_lazy;\n  this.nice_length = nice_length;\n  this.max_chain = max_chain;\n  this.func = func;\n}\n\nvar configuration_table;\n\nconfiguration_table = [\n  /*      good lazy nice chain */\n  new Config(0, 0, 0, 0, deflate_stored),          /* 0 store only */\n  new Config(4, 4, 8, 4, deflate_fast),            /* 1 max speed, no lazy matches */\n  new Config(4, 5, 16, 8, deflate_fast),           /* 2 */\n  new Config(4, 6, 32, 32, deflate_fast),          /* 3 */\n\n  new Config(4, 4, 16, 16, deflate_slow),          /* 4 lazy matches */\n  new Config(8, 16, 32, 32, deflate_slow),         /* 5 */\n  new Config(8, 16, 128, 128, deflate_slow),       /* 6 */\n  new Config(8, 32, 128, 256, deflate_slow),       /* 7 */\n  new Config(32, 128, 258, 1024, deflate_slow),    /* 8 */\n  new Config(32, 258, 258, 4096, deflate_slow)     /* 9 max compression */\n];\n\n\n/* ===========================================================================\n * Initialize the \"longest match\" routines for a new zlib stream\n */\nfunction lm_init(s) {\n  s.window_size = 2 * s.w_size;\n\n  /*** CLEAR_HASH(s); ***/\n  zero(s.head); // Fill with NIL (= 0);\n\n  /* Set the default configuration parameters:\n   */\n  s.max_lazy_match = configuration_table[s.level].max_lazy;\n  s.good_match = configuration_table[s.level].good_length;\n  s.nice_match = configuration_table[s.level].nice_length;\n  s.max_chain_length = configuration_table[s.level].max_chain;\n\n  s.strstart = 0;\n  s.block_start = 0;\n  s.lookahead = 0;\n  s.insert = 0;\n  s.match_length = s.prev_length = MIN_MATCH - 1;\n  s.match_available = 0;\n  s.ins_h = 0;\n}\n\n\nfunction DeflateState() {\n  this.strm = null;            /* pointer back to this zlib stream */\n  this.status = 0;            /* as the name implies */\n  this.pending_buf = null;      /* output still pending */\n  this.pending_buf_size = 0;  /* size of pending_buf */\n  this.pending_out = 0;       /* next pending byte to output to the stream */\n  this.pending = 0;           /* nb of bytes in the pending buffer */\n  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */\n  this.gzhead = null;         /* gzip header information to write */\n  this.gzindex = 0;           /* where in extra, name, or comment */\n  this.method = Z_DEFLATED; /* can only be DEFLATED */\n  this.last_flush = -1;   /* value of flush param for previous deflate call */\n\n  this.w_size = 0;  /* LZ77 window size (32K by default) */\n  this.w_bits = 0;  /* log2(w_size)  (8..16) */\n  this.w_mask = 0;  /* w_size - 1 */\n\n  this.window = null;\n  /* Sliding window. Input bytes are read into the second half of the window,\n   * and move to the first half later to keep a dictionary of at least wSize\n   * bytes. With this organization, matches are limited to a distance of\n   * wSize-MAX_MATCH bytes, but this ensures that IO is always\n   * performed with a length multiple of the block size.\n   */\n\n  this.window_size = 0;\n  /* Actual size of window: 2*wSize, except when the user input buffer\n   * is directly used as sliding window.\n   */\n\n  this.prev = null;\n  /* Link to older string with same hash index. To limit the size of this\n   * array to 64K, this link is maintained only for the last 32K strings.\n   * An index in this array is thus a window index modulo 32K.\n   */\n\n  this.head = null;   /* Heads of the hash chains or NIL. */\n\n  this.ins_h = 0;       /* hash index of string to be inserted */\n  this.hash_size = 0;   /* number of elements in hash table */\n  this.hash_bits = 0;   /* log2(hash_size) */\n  this.hash_mask = 0;   /* hash_size-1 */\n\n  this.hash_shift = 0;\n  /* Number of bits by which ins_h must be shifted at each input\n   * step. It must be such that after MIN_MATCH steps, the oldest\n   * byte no longer takes part in the hash key, that is:\n   *   hash_shift * MIN_MATCH >= hash_bits\n   */\n\n  this.block_start = 0;\n  /* Window position at the beginning of the current output block. Gets\n   * negative when the window is moved backwards.\n   */\n\n  this.match_length = 0;      /* length of best match */\n  this.prev_match = 0;        /* previous match */\n  this.match_available = 0;   /* set if previous match exists */\n  this.strstart = 0;          /* start of string to insert */\n  this.match_start = 0;       /* start of matching string */\n  this.lookahead = 0;         /* number of valid bytes ahead in window */\n\n  this.prev_length = 0;\n  /* Length of the best match at previous step. Matches not greater than this\n   * are discarded. This is used in the lazy match evaluation.\n   */\n\n  this.max_chain_length = 0;\n  /* To speed up deflation, hash chains are never searched beyond this\n   * length.  A higher limit improves compression ratio but degrades the\n   * speed.\n   */\n\n  this.max_lazy_match = 0;\n  /* Attempt to find a better match only when the current match is strictly\n   * smaller than this value. This mechanism is used only for compression\n   * levels >= 4.\n   */\n  // That's alias to max_lazy_match, don't use directly\n  //this.max_insert_length = 0;\n  /* Insert new strings in the hash table only if the match length is not\n   * greater than this length. This saves time but degrades compression.\n   * max_insert_length is used only for compression levels <= 3.\n   */\n\n  this.level = 0;     /* compression level (1..9) */\n  this.strategy = 0;  /* favor or force Huffman coding*/\n\n  this.good_match = 0;\n  /* Use a faster search when the previous match is longer than this */\n\n  this.nice_match = 0; /* Stop searching when current match exceeds this */\n\n              /* used by trees.c: */\n\n  /* Didn't use ct_data typedef below to suppress compiler warning */\n\n  // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */\n  // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */\n  // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */\n\n  // Use flat array of DOUBLE size, with interleaved fata,\n  // because JS does not support effective\n  this.dyn_ltree  = new utils.Buf16(HEAP_SIZE * 2);\n  this.dyn_dtree  = new utils.Buf16((2 * D_CODES + 1) * 2);\n  this.bl_tree    = new utils.Buf16((2 * BL_CODES + 1) * 2);\n  zero(this.dyn_ltree);\n  zero(this.dyn_dtree);\n  zero(this.bl_tree);\n\n  this.l_desc   = null;         /* desc. for literal tree */\n  this.d_desc   = null;         /* desc. for distance tree */\n  this.bl_desc  = null;         /* desc. for bit length tree */\n\n  //ush bl_count[MAX_BITS+1];\n  this.bl_count = new utils.Buf16(MAX_BITS + 1);\n  /* number of codes at each bit length for an optimal tree */\n\n  //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */\n  this.heap = new utils.Buf16(2 * L_CODES + 1);  /* heap used to build the Huffman trees */\n  zero(this.heap);\n\n  this.heap_len = 0;               /* number of elements in the heap */\n  this.heap_max = 0;               /* element of largest frequency */\n  /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.\n   * The same heap array is used to build all trees.\n   */\n\n  this.depth = new utils.Buf16(2 * L_CODES + 1); //uch depth[2*L_CODES+1];\n  zero(this.depth);\n  /* Depth of each subtree used as tie breaker for trees of equal frequency\n   */\n\n  this.l_buf = 0;          /* buffer index for literals or lengths */\n\n  this.lit_bufsize = 0;\n  /* Size of match buffer for literals/lengths.  There are 4 reasons for\n   * limiting lit_bufsize to 64K:\n   *   - frequencies can be kept in 16 bit counters\n   *   - if compression is not successful for the first block, all input\n   *     data is still in the window so we can still emit a stored block even\n   *     when input comes from standard input.  (This can also be done for\n   *     all blocks if lit_bufsize is not greater than 32K.)\n   *   - if compression is not successful for a file smaller than 64K, we can\n   *     even emit a stored file instead of a stored block (saving 5 bytes).\n   *     This is applicable only for zip (not gzip or zlib).\n   *   - creating new Huffman trees less frequently may not provide fast\n   *     adaptation to changes in the input data statistics. (Take for\n   *     example a binary file with poorly compressible code followed by\n   *     a highly compressible string table.) Smaller buffer sizes give\n   *     fast adaptation but have of course the overhead of transmitting\n   *     trees more frequently.\n   *   - I can't count above 4\n   */\n\n  this.last_lit = 0;      /* running index in l_buf */\n\n  this.d_buf = 0;\n  /* Buffer index for distances. To simplify the code, d_buf and l_buf have\n   * the same number of elements. To use different lengths, an extra flag\n   * array would be necessary.\n   */\n\n  this.opt_len = 0;       /* bit length of current block with optimal trees */\n  this.static_len = 0;    /* bit length of current block with static trees */\n  this.matches = 0;       /* number of string matches in current block */\n  this.insert = 0;        /* bytes at end of window left to insert */\n\n\n  this.bi_buf = 0;\n  /* Output buffer. bits are inserted starting at the bottom (least\n   * significant bits).\n   */\n  this.bi_valid = 0;\n  /* Number of valid bits in bi_buf.  All bits above the last valid bit\n   * are always zero.\n   */\n\n  // Used for window memory init. We safely ignore it for JS. That makes\n  // sense only for pointers and memory check tools.\n  //this.high_water = 0;\n  /* High water mark offset in window for initialized bytes -- bytes above\n   * this are set to zero in order to avoid memory check warnings when\n   * longest match routines access bytes past the input.  This is then\n   * updated to the new high water mark.\n   */\n}\n\n\nfunction deflateResetKeep(strm) {\n  var s;\n\n  if (!strm || !strm.state) {\n    return err(strm, Z_STREAM_ERROR);\n  }\n\n  strm.total_in = strm.total_out = 0;\n  strm.data_type = Z_UNKNOWN;\n\n  s = strm.state;\n  s.pending = 0;\n  s.pending_out = 0;\n\n  if (s.wrap < 0) {\n    s.wrap = -s.wrap;\n    /* was made negative by deflate(..., Z_FINISH); */\n  }\n  s.status = (s.wrap ? INIT_STATE : BUSY_STATE);\n  strm.adler = (s.wrap === 2) ?\n    0  // crc32(0, Z_NULL, 0)\n  :\n    1; // adler32(0, Z_NULL, 0)\n  s.last_flush = Z_NO_FLUSH;\n  trees._tr_init(s);\n  return Z_OK;\n}\n\n\nfunction deflateReset(strm) {\n  var ret = deflateResetKeep(strm);\n  if (ret === Z_OK) {\n    lm_init(strm.state);\n  }\n  return ret;\n}\n\n\nfunction deflateSetHeader(strm, head) {\n  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n  if (strm.state.wrap !== 2) { return Z_STREAM_ERROR; }\n  strm.state.gzhead = head;\n  return Z_OK;\n}\n\n\nfunction deflateInit2(strm, level, method, windowBits, memLevel, strategy) {\n  if (!strm) { // === Z_NULL\n    return Z_STREAM_ERROR;\n  }\n  var wrap = 1;\n\n  if (level === Z_DEFAULT_COMPRESSION) {\n    level = 6;\n  }\n\n  if (windowBits < 0) { /* suppress zlib wrapper */\n    wrap = 0;\n    windowBits = -windowBits;\n  }\n\n  else if (windowBits > 15) {\n    wrap = 2;           /* write gzip wrapper instead */\n    windowBits -= 16;\n  }\n\n\n  if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED ||\n    windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||\n    strategy < 0 || strategy > Z_FIXED) {\n    return err(strm, Z_STREAM_ERROR);\n  }\n\n\n  if (windowBits === 8) {\n    windowBits = 9;\n  }\n  /* until 256-byte window bug fixed */\n\n  var s = new DeflateState();\n\n  strm.state = s;\n  s.strm = strm;\n\n  s.wrap = wrap;\n  s.gzhead = null;\n  s.w_bits = windowBits;\n  s.w_size = 1 << s.w_bits;\n  s.w_mask = s.w_size - 1;\n\n  s.hash_bits = memLevel + 7;\n  s.hash_size = 1 << s.hash_bits;\n  s.hash_mask = s.hash_size - 1;\n  s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);\n\n  s.window = new utils.Buf8(s.w_size * 2);\n  s.head = new utils.Buf16(s.hash_size);\n  s.prev = new utils.Buf16(s.w_size);\n\n  // Don't need mem init magic for JS.\n  //s.high_water = 0;  /* nothing written to s->window yet */\n\n  s.lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */\n\n  s.pending_buf_size = s.lit_bufsize * 4;\n\n  //overlay = (ushf *) ZALLOC(strm, s->lit_bufsize, sizeof(ush)+2);\n  //s->pending_buf = (uchf *) overlay;\n  s.pending_buf = new utils.Buf8(s.pending_buf_size);\n\n  // It is offset from `s.pending_buf` (size is `s.lit_bufsize * 2`)\n  //s->d_buf = overlay + s->lit_bufsize/sizeof(ush);\n  s.d_buf = 1 * s.lit_bufsize;\n\n  //s->l_buf = s->pending_buf + (1+sizeof(ush))*s->lit_bufsize;\n  s.l_buf = (1 + 2) * s.lit_bufsize;\n\n  s.level = level;\n  s.strategy = strategy;\n  s.method = method;\n\n  return deflateReset(strm);\n}\n\nfunction deflateInit(strm, level) {\n  return deflateInit2(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY);\n}\n\n\nfunction deflate(strm, flush) {\n  var old_flush, s;\n  var beg, val; // for gzip header write only\n\n  if (!strm || !strm.state ||\n    flush > Z_BLOCK || flush < 0) {\n    return strm ? err(strm, Z_STREAM_ERROR) : Z_STREAM_ERROR;\n  }\n\n  s = strm.state;\n\n  if (!strm.output ||\n      (!strm.input && strm.avail_in !== 0) ||\n      (s.status === FINISH_STATE && flush !== Z_FINISH)) {\n    return err(strm, (strm.avail_out === 0) ? Z_BUF_ERROR : Z_STREAM_ERROR);\n  }\n\n  s.strm = strm; /* just in case */\n  old_flush = s.last_flush;\n  s.last_flush = flush;\n\n  /* Write the header */\n  if (s.status === INIT_STATE) {\n\n    if (s.wrap === 2) { // GZIP header\n      strm.adler = 0;  //crc32(0L, Z_NULL, 0);\n      put_byte(s, 31);\n      put_byte(s, 139);\n      put_byte(s, 8);\n      if (!s.gzhead) { // s->gzhead == Z_NULL\n        put_byte(s, 0);\n        put_byte(s, 0);\n        put_byte(s, 0);\n        put_byte(s, 0);\n        put_byte(s, 0);\n        put_byte(s, s.level === 9 ? 2 :\n                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?\n                     4 : 0));\n        put_byte(s, OS_CODE);\n        s.status = BUSY_STATE;\n      }\n      else {\n        put_byte(s, (s.gzhead.text ? 1 : 0) +\n                    (s.gzhead.hcrc ? 2 : 0) +\n                    (!s.gzhead.extra ? 0 : 4) +\n                    (!s.gzhead.name ? 0 : 8) +\n                    (!s.gzhead.comment ? 0 : 16)\n                );\n        put_byte(s, s.gzhead.time & 0xff);\n        put_byte(s, (s.gzhead.time >> 8) & 0xff);\n        put_byte(s, (s.gzhead.time >> 16) & 0xff);\n        put_byte(s, (s.gzhead.time >> 24) & 0xff);\n        put_byte(s, s.level === 9 ? 2 :\n                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?\n                     4 : 0));\n        put_byte(s, s.gzhead.os & 0xff);\n        if (s.gzhead.extra && s.gzhead.extra.length) {\n          put_byte(s, s.gzhead.extra.length & 0xff);\n          put_byte(s, (s.gzhead.extra.length >> 8) & 0xff);\n        }\n        if (s.gzhead.hcrc) {\n          strm.adler = crc32(strm.adler, s.pending_buf, s.pending, 0);\n        }\n        s.gzindex = 0;\n        s.status = EXTRA_STATE;\n      }\n    }\n    else // DEFLATE header\n    {\n      var header = (Z_DEFLATED + ((s.w_bits - 8) << 4)) << 8;\n      var level_flags = -1;\n\n      if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {\n        level_flags = 0;\n      } else if (s.level < 6) {\n        level_flags = 1;\n      } else if (s.level === 6) {\n        level_flags = 2;\n      } else {\n        level_flags = 3;\n      }\n      header |= (level_flags << 6);\n      if (s.strstart !== 0) { header |= PRESET_DICT; }\n      header += 31 - (header % 31);\n\n      s.status = BUSY_STATE;\n      putShortMSB(s, header);\n\n      /* Save the adler32 of the preset dictionary: */\n      if (s.strstart !== 0) {\n        putShortMSB(s, strm.adler >>> 16);\n        putShortMSB(s, strm.adler & 0xffff);\n      }\n      strm.adler = 1; // adler32(0L, Z_NULL, 0);\n    }\n  }\n\n//#ifdef GZIP\n  if (s.status === EXTRA_STATE) {\n    if (s.gzhead.extra/* != Z_NULL*/) {\n      beg = s.pending;  /* start of bytes to update crc */\n\n      while (s.gzindex < (s.gzhead.extra.length & 0xffff)) {\n        if (s.pending === s.pending_buf_size) {\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          flush_pending(strm);\n          beg = s.pending;\n          if (s.pending === s.pending_buf_size) {\n            break;\n          }\n        }\n        put_byte(s, s.gzhead.extra[s.gzindex] & 0xff);\n        s.gzindex++;\n      }\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      if (s.gzindex === s.gzhead.extra.length) {\n        s.gzindex = 0;\n        s.status = NAME_STATE;\n      }\n    }\n    else {\n      s.status = NAME_STATE;\n    }\n  }\n  if (s.status === NAME_STATE) {\n    if (s.gzhead.name/* != Z_NULL*/) {\n      beg = s.pending;  /* start of bytes to update crc */\n      //int val;\n\n      do {\n        if (s.pending === s.pending_buf_size) {\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          flush_pending(strm);\n          beg = s.pending;\n          if (s.pending === s.pending_buf_size) {\n            val = 1;\n            break;\n          }\n        }\n        // JS specific: little magic to add zero terminator to end of string\n        if (s.gzindex < s.gzhead.name.length) {\n          val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;\n        } else {\n          val = 0;\n        }\n        put_byte(s, val);\n      } while (val !== 0);\n\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      if (val === 0) {\n        s.gzindex = 0;\n        s.status = COMMENT_STATE;\n      }\n    }\n    else {\n      s.status = COMMENT_STATE;\n    }\n  }\n  if (s.status === COMMENT_STATE) {\n    if (s.gzhead.comment/* != Z_NULL*/) {\n      beg = s.pending;  /* start of bytes to update crc */\n      //int val;\n\n      do {\n        if (s.pending === s.pending_buf_size) {\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          flush_pending(strm);\n          beg = s.pending;\n          if (s.pending === s.pending_buf_size) {\n            val = 1;\n            break;\n          }\n        }\n        // JS specific: little magic to add zero terminator to end of string\n        if (s.gzindex < s.gzhead.comment.length) {\n          val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;\n        } else {\n          val = 0;\n        }\n        put_byte(s, val);\n      } while (val !== 0);\n\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      if (val === 0) {\n        s.status = HCRC_STATE;\n      }\n    }\n    else {\n      s.status = HCRC_STATE;\n    }\n  }\n  if (s.status === HCRC_STATE) {\n    if (s.gzhead.hcrc) {\n      if (s.pending + 2 > s.pending_buf_size) {\n        flush_pending(strm);\n      }\n      if (s.pending + 2 <= s.pending_buf_size) {\n        put_byte(s, strm.adler & 0xff);\n        put_byte(s, (strm.adler >> 8) & 0xff);\n        strm.adler = 0; //crc32(0L, Z_NULL, 0);\n        s.status = BUSY_STATE;\n      }\n    }\n    else {\n      s.status = BUSY_STATE;\n    }\n  }\n//#endif\n\n  /* Flush as much pending output as possible */\n  if (s.pending !== 0) {\n    flush_pending(strm);\n    if (strm.avail_out === 0) {\n      /* Since avail_out is 0, deflate will be called again with\n       * more output space, but possibly with both pending and\n       * avail_in equal to zero. There won't be anything to do,\n       * but this is not an error situation so make sure we\n       * return OK instead of BUF_ERROR at next call of deflate:\n       */\n      s.last_flush = -1;\n      return Z_OK;\n    }\n\n    /* Make sure there is something to do and avoid duplicate consecutive\n     * flushes. For repeated and useless calls with Z_FINISH, we keep\n     * returning Z_STREAM_END instead of Z_BUF_ERROR.\n     */\n  } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) &&\n    flush !== Z_FINISH) {\n    return err(strm, Z_BUF_ERROR);\n  }\n\n  /* User must not provide more input after the first FINISH: */\n  if (s.status === FINISH_STATE && strm.avail_in !== 0) {\n    return err(strm, Z_BUF_ERROR);\n  }\n\n  /* Start a new block or continue the current one.\n   */\n  if (strm.avail_in !== 0 || s.lookahead !== 0 ||\n    (flush !== Z_NO_FLUSH && s.status !== FINISH_STATE)) {\n    var bstate = (s.strategy === Z_HUFFMAN_ONLY) ? deflate_huff(s, flush) :\n      (s.strategy === Z_RLE ? deflate_rle(s, flush) :\n        configuration_table[s.level].func(s, flush));\n\n    if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {\n      s.status = FINISH_STATE;\n    }\n    if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {\n      if (strm.avail_out === 0) {\n        s.last_flush = -1;\n        /* avoid BUF_ERROR next call, see above */\n      }\n      return Z_OK;\n      /* If flush != Z_NO_FLUSH && avail_out == 0, the next call\n       * of deflate should use the same flush parameter to make sure\n       * that the flush is complete. So we don't have to output an\n       * empty block here, this will be done at next call. This also\n       * ensures that for a very small output buffer, we emit at most\n       * one empty block.\n       */\n    }\n    if (bstate === BS_BLOCK_DONE) {\n      if (flush === Z_PARTIAL_FLUSH) {\n        trees._tr_align(s);\n      }\n      else if (flush !== Z_BLOCK) { /* FULL_FLUSH or SYNC_FLUSH */\n\n        trees._tr_stored_block(s, 0, 0, false);\n        /* For a full flush, this empty block will be recognized\n         * as a special marker by inflate_sync().\n         */\n        if (flush === Z_FULL_FLUSH) {\n          /*** CLEAR_HASH(s); ***/             /* forget history */\n          zero(s.head); // Fill with NIL (= 0);\n\n          if (s.lookahead === 0) {\n            s.strstart = 0;\n            s.block_start = 0;\n            s.insert = 0;\n          }\n        }\n      }\n      flush_pending(strm);\n      if (strm.avail_out === 0) {\n        s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */\n        return Z_OK;\n      }\n    }\n  }\n  //Assert(strm->avail_out > 0, \"bug2\");\n  //if (strm.avail_out <= 0) { throw new Error(\"bug2\");}\n\n  if (flush !== Z_FINISH) { return Z_OK; }\n  if (s.wrap <= 0) { return Z_STREAM_END; }\n\n  /* Write the trailer */\n  if (s.wrap === 2) {\n    put_byte(s, strm.adler & 0xff);\n    put_byte(s, (strm.adler >> 8) & 0xff);\n    put_byte(s, (strm.adler >> 16) & 0xff);\n    put_byte(s, (strm.adler >> 24) & 0xff);\n    put_byte(s, strm.total_in & 0xff);\n    put_byte(s, (strm.total_in >> 8) & 0xff);\n    put_byte(s, (strm.total_in >> 16) & 0xff);\n    put_byte(s, (strm.total_in >> 24) & 0xff);\n  }\n  else\n  {\n    putShortMSB(s, strm.adler >>> 16);\n    putShortMSB(s, strm.adler & 0xffff);\n  }\n\n  flush_pending(strm);\n  /* If avail_out is zero, the application will call deflate again\n   * to flush the rest.\n   */\n  if (s.wrap > 0) { s.wrap = -s.wrap; }\n  /* write the trailer only once! */\n  return s.pending !== 0 ? Z_OK : Z_STREAM_END;\n}\n\nfunction deflateEnd(strm) {\n  var status;\n\n  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {\n    return Z_STREAM_ERROR;\n  }\n\n  status = strm.state.status;\n  if (status !== INIT_STATE &&\n    status !== EXTRA_STATE &&\n    status !== NAME_STATE &&\n    status !== COMMENT_STATE &&\n    status !== HCRC_STATE &&\n    status !== BUSY_STATE &&\n    status !== FINISH_STATE\n  ) {\n    return err(strm, Z_STREAM_ERROR);\n  }\n\n  strm.state = null;\n\n  return status === BUSY_STATE ? err(strm, Z_DATA_ERROR) : Z_OK;\n}\n\n\n/* =========================================================================\n * Initializes the compression dictionary from the given byte\n * sequence without producing any compressed output.\n */\nfunction deflateSetDictionary(strm, dictionary) {\n  var dictLength = dictionary.length;\n\n  var s;\n  var str, n;\n  var wrap;\n  var avail;\n  var next;\n  var input;\n  var tmpDict;\n\n  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {\n    return Z_STREAM_ERROR;\n  }\n\n  s = strm.state;\n  wrap = s.wrap;\n\n  if (wrap === 2 || (wrap === 1 && s.status !== INIT_STATE) || s.lookahead) {\n    return Z_STREAM_ERROR;\n  }\n\n  /* when using zlib wrappers, compute Adler-32 for provided dictionary */\n  if (wrap === 1) {\n    /* adler32(strm->adler, dictionary, dictLength); */\n    strm.adler = adler32(strm.adler, dictionary, dictLength, 0);\n  }\n\n  s.wrap = 0;   /* avoid computing Adler-32 in read_buf */\n\n  /* if dictionary would fill window, just replace the history */\n  if (dictLength >= s.w_size) {\n    if (wrap === 0) {            /* already empty otherwise */\n      /*** CLEAR_HASH(s); ***/\n      zero(s.head); // Fill with NIL (= 0);\n      s.strstart = 0;\n      s.block_start = 0;\n      s.insert = 0;\n    }\n    /* use the tail */\n    // dictionary = dictionary.slice(dictLength - s.w_size);\n    tmpDict = new utils.Buf8(s.w_size);\n    utils.arraySet(tmpDict, dictionary, dictLength - s.w_size, s.w_size, 0);\n    dictionary = tmpDict;\n    dictLength = s.w_size;\n  }\n  /* insert dictionary into window and hash */\n  avail = strm.avail_in;\n  next = strm.next_in;\n  input = strm.input;\n  strm.avail_in = dictLength;\n  strm.next_in = 0;\n  strm.input = dictionary;\n  fill_window(s);\n  while (s.lookahead >= MIN_MATCH) {\n    str = s.strstart;\n    n = s.lookahead - (MIN_MATCH - 1);\n    do {\n      /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */\n      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;\n\n      s.prev[str & s.w_mask] = s.head[s.ins_h];\n\n      s.head[s.ins_h] = str;\n      str++;\n    } while (--n);\n    s.strstart = str;\n    s.lookahead = MIN_MATCH - 1;\n    fill_window(s);\n  }\n  s.strstart += s.lookahead;\n  s.block_start = s.strstart;\n  s.insert = s.lookahead;\n  s.lookahead = 0;\n  s.match_length = s.prev_length = MIN_MATCH - 1;\n  s.match_available = 0;\n  strm.next_in = next;\n  strm.input = input;\n  strm.avail_in = avail;\n  s.wrap = wrap;\n  return Z_OK;\n}\n\n\nexports.deflateInit = deflateInit;\nexports.deflateInit2 = deflateInit2;\nexports.deflateReset = deflateReset;\nexports.deflateResetKeep = deflateResetKeep;\nexports.deflateSetHeader = deflateSetHeader;\nexports.deflate = deflate;\nexports.deflateEnd = deflateEnd;\nexports.deflateSetDictionary = deflateSetDictionary;\nexports.deflateInfo = 'pako deflate (from Nodeca project)';\n\n/* Not implemented\nexports.deflateBound = deflateBound;\nexports.deflateCopy = deflateCopy;\nexports.deflateParams = deflateParams;\nexports.deflatePending = deflatePending;\nexports.deflatePrime = deflatePrime;\nexports.deflateTune = deflateTune;\n*/\n\n\n//# sourceURL=webpack://HicStraw/./node_modules/pako/lib/zlib/deflate.js?");/***/},/***/"./node_modules/pako/lib/zlib/inffast.js":/*!***********************************************!*\
  !*** ./node_modules/pako/lib/zlib/inffast.js ***!
  \***********************************************/ /*! no static exports found */ /***/function node_modulesPakoLibZlibInffastJs(module,exports,__webpack_require__){"use strict";eval("\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n// See state defs from inflate.js\nvar BAD = 30;       /* got a data error -- remain here until reset */\nvar TYPE = 12;      /* i: waiting for type bits, including last-flag bit */\n\n/*\n   Decode literal, length, and distance codes and write out the resulting\n   literal and match bytes until either not enough input or output is\n   available, an end-of-block is encountered, or a data error is encountered.\n   When large enough input and output buffers are supplied to inflate(), for\n   example, a 16K input buffer and a 64K output buffer, more than 95% of the\n   inflate execution time is spent in this routine.\n\n   Entry assumptions:\n\n        state.mode === LEN\n        strm.avail_in >= 6\n        strm.avail_out >= 258\n        start >= strm.avail_out\n        state.bits < 8\n\n   On return, state.mode is one of:\n\n        LEN -- ran out of enough output space or enough available input\n        TYPE -- reached end of block code, inflate() to interpret next block\n        BAD -- error in block data\n\n   Notes:\n\n    - The maximum input bits used by a length/distance pair is 15 bits for the\n      length code, 5 bits for the length extra, 15 bits for the distance code,\n      and 13 bits for the distance extra.  This totals 48 bits, or six bytes.\n      Therefore if strm.avail_in >= 6, then there is enough input to avoid\n      checking for available input while decoding.\n\n    - The maximum bytes that a single length/distance pair can output is 258\n      bytes, which is the maximum length that can be coded.  inflate_fast()\n      requires strm.avail_out >= 258 for each loop to avoid checking for\n      output space.\n */\nmodule.exports = function inflate_fast(strm, start) {\n  var state;\n  var _in;                    /* local strm.input */\n  var last;                   /* have enough input while in < last */\n  var _out;                   /* local strm.output */\n  var beg;                    /* inflate()'s initial strm.output */\n  var end;                    /* while out < end, enough space available */\n//#ifdef INFLATE_STRICT\n  var dmax;                   /* maximum distance from zlib header */\n//#endif\n  var wsize;                  /* window size or zero if not using window */\n  var whave;                  /* valid bytes in the window */\n  var wnext;                  /* window write index */\n  // Use `s_window` instead `window`, avoid conflict with instrumentation tools\n  var s_window;               /* allocated sliding window, if wsize != 0 */\n  var hold;                   /* local strm.hold */\n  var bits;                   /* local strm.bits */\n  var lcode;                  /* local strm.lencode */\n  var dcode;                  /* local strm.distcode */\n  var lmask;                  /* mask for first level of length codes */\n  var dmask;                  /* mask for first level of distance codes */\n  var here;                   /* retrieved table entry */\n  var op;                     /* code bits, operation, extra bits, or */\n                              /*  window position, window bytes to copy */\n  var len;                    /* match length, unused bytes */\n  var dist;                   /* match distance */\n  var from;                   /* where to copy match from */\n  var from_source;\n\n\n  var input, output; // JS specific, because we have no pointers\n\n  /* copy state to local variables */\n  state = strm.state;\n  //here = state.here;\n  _in = strm.next_in;\n  input = strm.input;\n  last = _in + (strm.avail_in - 5);\n  _out = strm.next_out;\n  output = strm.output;\n  beg = _out - (start - strm.avail_out);\n  end = _out + (strm.avail_out - 257);\n//#ifdef INFLATE_STRICT\n  dmax = state.dmax;\n//#endif\n  wsize = state.wsize;\n  whave = state.whave;\n  wnext = state.wnext;\n  s_window = state.window;\n  hold = state.hold;\n  bits = state.bits;\n  lcode = state.lencode;\n  dcode = state.distcode;\n  lmask = (1 << state.lenbits) - 1;\n  dmask = (1 << state.distbits) - 1;\n\n\n  /* decode literals and length/distances until end-of-block or not enough\n     input data or output space */\n\n  top:\n  do {\n    if (bits < 15) {\n      hold += input[_in++] << bits;\n      bits += 8;\n      hold += input[_in++] << bits;\n      bits += 8;\n    }\n\n    here = lcode[hold & lmask];\n\n    dolen:\n    for (;;) { // Goto emulation\n      op = here >>> 24/*here.bits*/;\n      hold >>>= op;\n      bits -= op;\n      op = (here >>> 16) & 0xff/*here.op*/;\n      if (op === 0) {                          /* literal */\n        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?\n        //        \"inflate:         literal '%c'\\n\" :\n        //        \"inflate:         literal 0x%02x\\n\", here.val));\n        output[_out++] = here & 0xffff/*here.val*/;\n      }\n      else if (op & 16) {                     /* length base */\n        len = here & 0xffff/*here.val*/;\n        op &= 15;                           /* number of extra bits */\n        if (op) {\n          if (bits < op) {\n            hold += input[_in++] << bits;\n            bits += 8;\n          }\n          len += hold & ((1 << op) - 1);\n          hold >>>= op;\n          bits -= op;\n        }\n        //Tracevv((stderr, \"inflate:         length %u\\n\", len));\n        if (bits < 15) {\n          hold += input[_in++] << bits;\n          bits += 8;\n          hold += input[_in++] << bits;\n          bits += 8;\n        }\n        here = dcode[hold & dmask];\n\n        dodist:\n        for (;;) { // goto emulation\n          op = here >>> 24/*here.bits*/;\n          hold >>>= op;\n          bits -= op;\n          op = (here >>> 16) & 0xff/*here.op*/;\n\n          if (op & 16) {                      /* distance base */\n            dist = here & 0xffff/*here.val*/;\n            op &= 15;                       /* number of extra bits */\n            if (bits < op) {\n              hold += input[_in++] << bits;\n              bits += 8;\n              if (bits < op) {\n                hold += input[_in++] << bits;\n                bits += 8;\n              }\n            }\n            dist += hold & ((1 << op) - 1);\n//#ifdef INFLATE_STRICT\n            if (dist > dmax) {\n              strm.msg = 'invalid distance too far back';\n              state.mode = BAD;\n              break top;\n            }\n//#endif\n            hold >>>= op;\n            bits -= op;\n            //Tracevv((stderr, \"inflate:         distance %u\\n\", dist));\n            op = _out - beg;                /* max distance in output */\n            if (dist > op) {                /* see if copy from window */\n              op = dist - op;               /* distance back in window */\n              if (op > whave) {\n                if (state.sane) {\n                  strm.msg = 'invalid distance too far back';\n                  state.mode = BAD;\n                  break top;\n                }\n\n// (!) This block is disabled in zlib defaults,\n// don't enable it for binary compatibility\n//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR\n//                if (len <= op - whave) {\n//                  do {\n//                    output[_out++] = 0;\n//                  } while (--len);\n//                  continue top;\n//                }\n//                len -= op - whave;\n//                do {\n//                  output[_out++] = 0;\n//                } while (--op > whave);\n//                if (op === 0) {\n//                  from = _out - dist;\n//                  do {\n//                    output[_out++] = output[from++];\n//                  } while (--len);\n//                  continue top;\n//                }\n//#endif\n              }\n              from = 0; // window index\n              from_source = s_window;\n              if (wnext === 0) {           /* very common case */\n                from += wsize - op;\n                if (op < len) {         /* some from window */\n                  len -= op;\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n                  from = _out - dist;  /* rest from output */\n                  from_source = output;\n                }\n              }\n              else if (wnext < op) {      /* wrap around window */\n                from += wsize + wnext - op;\n                op -= wnext;\n                if (op < len) {         /* some from end of window */\n                  len -= op;\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n                  from = 0;\n                  if (wnext < len) {  /* some from start of window */\n                    op = wnext;\n                    len -= op;\n                    do {\n                      output[_out++] = s_window[from++];\n                    } while (--op);\n                    from = _out - dist;      /* rest from output */\n                    from_source = output;\n                  }\n                }\n              }\n              else {                      /* contiguous in window */\n                from += wnext - op;\n                if (op < len) {         /* some from window */\n                  len -= op;\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n                  from = _out - dist;  /* rest from output */\n                  from_source = output;\n                }\n              }\n              while (len > 2) {\n                output[_out++] = from_source[from++];\n                output[_out++] = from_source[from++];\n                output[_out++] = from_source[from++];\n                len -= 3;\n              }\n              if (len) {\n                output[_out++] = from_source[from++];\n                if (len > 1) {\n                  output[_out++] = from_source[from++];\n                }\n              }\n            }\n            else {\n              from = _out - dist;          /* copy direct from output */\n              do {                        /* minimum length is three */\n                output[_out++] = output[from++];\n                output[_out++] = output[from++];\n                output[_out++] = output[from++];\n                len -= 3;\n              } while (len > 2);\n              if (len) {\n                output[_out++] = output[from++];\n                if (len > 1) {\n                  output[_out++] = output[from++];\n                }\n              }\n            }\n          }\n          else if ((op & 64) === 0) {          /* 2nd level distance code */\n            here = dcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];\n            continue dodist;\n          }\n          else {\n            strm.msg = 'invalid distance code';\n            state.mode = BAD;\n            break top;\n          }\n\n          break; // need to emulate goto via \"continue\"\n        }\n      }\n      else if ((op & 64) === 0) {              /* 2nd level length code */\n        here = lcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];\n        continue dolen;\n      }\n      else if (op & 32) {                     /* end-of-block */\n        //Tracevv((stderr, \"inflate:         end of block\\n\"));\n        state.mode = TYPE;\n        break top;\n      }\n      else {\n        strm.msg = 'invalid literal/length code';\n        state.mode = BAD;\n        break top;\n      }\n\n      break; // need to emulate goto via \"continue\"\n    }\n  } while (_in < last && _out < end);\n\n  /* return unused bytes (on entry, bits < 8, so in won't go too far back) */\n  len = bits >> 3;\n  _in -= len;\n  bits -= len << 3;\n  hold &= (1 << bits) - 1;\n\n  /* update state and return */\n  strm.next_in = _in;\n  strm.next_out = _out;\n  strm.avail_in = (_in < last ? 5 + (last - _in) : 5 - (_in - last));\n  strm.avail_out = (_out < end ? 257 + (end - _out) : 257 - (_out - end));\n  state.hold = hold;\n  state.bits = bits;\n  return;\n};\n\n\n//# sourceURL=webpack://HicStraw/./node_modules/pako/lib/zlib/inffast.js?");/***/},/***/"./node_modules/pako/lib/zlib/inflate.js":/*!***********************************************!*\
  !*** ./node_modules/pako/lib/zlib/inflate.js ***!
  \***********************************************/ /*! no static exports found */ /***/function node_modulesPakoLibZlibInflateJs(module,exports,__webpack_require__){"use strict";eval("\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nvar utils         = __webpack_require__(/*! ../utils/common */ \"./node_modules/pako/lib/utils/common.js\");\nvar adler32       = __webpack_require__(/*! ./adler32 */ \"./node_modules/pako/lib/zlib/adler32.js\");\nvar crc32         = __webpack_require__(/*! ./crc32 */ \"./node_modules/pako/lib/zlib/crc32.js\");\nvar inflate_fast  = __webpack_require__(/*! ./inffast */ \"./node_modules/pako/lib/zlib/inffast.js\");\nvar inflate_table = __webpack_require__(/*! ./inftrees */ \"./node_modules/pako/lib/zlib/inftrees.js\");\n\nvar CODES = 0;\nvar LENS = 1;\nvar DISTS = 2;\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\n\n/* Allowed flush values; see deflate() and inflate() below for details */\n//var Z_NO_FLUSH      = 0;\n//var Z_PARTIAL_FLUSH = 1;\n//var Z_SYNC_FLUSH    = 2;\n//var Z_FULL_FLUSH    = 3;\nvar Z_FINISH        = 4;\nvar Z_BLOCK         = 5;\nvar Z_TREES         = 6;\n\n\n/* Return codes for the compression/decompression functions. Negative values\n * are errors, positive values are used for special but normal events.\n */\nvar Z_OK            = 0;\nvar Z_STREAM_END    = 1;\nvar Z_NEED_DICT     = 2;\n//var Z_ERRNO         = -1;\nvar Z_STREAM_ERROR  = -2;\nvar Z_DATA_ERROR    = -3;\nvar Z_MEM_ERROR     = -4;\nvar Z_BUF_ERROR     = -5;\n//var Z_VERSION_ERROR = -6;\n\n/* The deflate compression method */\nvar Z_DEFLATED  = 8;\n\n\n/* STATES ====================================================================*/\n/* ===========================================================================*/\n\n\nvar    HEAD = 1;       /* i: waiting for magic header */\nvar    FLAGS = 2;      /* i: waiting for method and flags (gzip) */\nvar    TIME = 3;       /* i: waiting for modification time (gzip) */\nvar    OS = 4;         /* i: waiting for extra flags and operating system (gzip) */\nvar    EXLEN = 5;      /* i: waiting for extra length (gzip) */\nvar    EXTRA = 6;      /* i: waiting for extra bytes (gzip) */\nvar    NAME = 7;       /* i: waiting for end of file name (gzip) */\nvar    COMMENT = 8;    /* i: waiting for end of comment (gzip) */\nvar    HCRC = 9;       /* i: waiting for header crc (gzip) */\nvar    DICTID = 10;    /* i: waiting for dictionary check value */\nvar    DICT = 11;      /* waiting for inflateSetDictionary() call */\nvar        TYPE = 12;      /* i: waiting for type bits, including last-flag bit */\nvar        TYPEDO = 13;    /* i: same, but skip check to exit inflate on new block */\nvar        STORED = 14;    /* i: waiting for stored size (length and complement) */\nvar        COPY_ = 15;     /* i/o: same as COPY below, but only first time in */\nvar        COPY = 16;      /* i/o: waiting for input or output to copy stored block */\nvar        TABLE = 17;     /* i: waiting for dynamic block table lengths */\nvar        LENLENS = 18;   /* i: waiting for code length code lengths */\nvar        CODELENS = 19;  /* i: waiting for length/lit and distance code lengths */\nvar            LEN_ = 20;      /* i: same as LEN below, but only first time in */\nvar            LEN = 21;       /* i: waiting for length/lit/eob code */\nvar            LENEXT = 22;    /* i: waiting for length extra bits */\nvar            DIST = 23;      /* i: waiting for distance code */\nvar            DISTEXT = 24;   /* i: waiting for distance extra bits */\nvar            MATCH = 25;     /* o: waiting for output space to copy string */\nvar            LIT = 26;       /* o: waiting for output space to write literal */\nvar    CHECK = 27;     /* i: waiting for 32-bit check value */\nvar    LENGTH = 28;    /* i: waiting for 32-bit length (gzip) */\nvar    DONE = 29;      /* finished check, done -- remain here until reset */\nvar    BAD = 30;       /* got a data error -- remain here until reset */\nvar    MEM = 31;       /* got an inflate() memory error -- remain here until reset */\nvar    SYNC = 32;      /* looking for synchronization bytes to restart inflate() */\n\n/* ===========================================================================*/\n\n\n\nvar ENOUGH_LENS = 852;\nvar ENOUGH_DISTS = 592;\n//var ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);\n\nvar MAX_WBITS = 15;\n/* 32K LZ77 window */\nvar DEF_WBITS = MAX_WBITS;\n\n\nfunction zswap32(q) {\n  return  (((q >>> 24) & 0xff) +\n          ((q >>> 8) & 0xff00) +\n          ((q & 0xff00) << 8) +\n          ((q & 0xff) << 24));\n}\n\n\nfunction InflateState() {\n  this.mode = 0;             /* current inflate mode */\n  this.last = false;          /* true if processing last block */\n  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */\n  this.havedict = false;      /* true if dictionary provided */\n  this.flags = 0;             /* gzip header method and flags (0 if zlib) */\n  this.dmax = 0;              /* zlib header max distance (INFLATE_STRICT) */\n  this.check = 0;             /* protected copy of check value */\n  this.total = 0;             /* protected copy of output count */\n  // TODO: may be {}\n  this.head = null;           /* where to save gzip header information */\n\n  /* sliding window */\n  this.wbits = 0;             /* log base 2 of requested window size */\n  this.wsize = 0;             /* window size or zero if not using window */\n  this.whave = 0;             /* valid bytes in the window */\n  this.wnext = 0;             /* window write index */\n  this.window = null;         /* allocated sliding window, if needed */\n\n  /* bit accumulator */\n  this.hold = 0;              /* input bit accumulator */\n  this.bits = 0;              /* number of bits in \"in\" */\n\n  /* for string and stored block copying */\n  this.length = 0;            /* literal or length of data to copy */\n  this.offset = 0;            /* distance back to copy string from */\n\n  /* for table and code decoding */\n  this.extra = 0;             /* extra bits needed */\n\n  /* fixed and dynamic code tables */\n  this.lencode = null;          /* starting table for length/literal codes */\n  this.distcode = null;         /* starting table for distance codes */\n  this.lenbits = 0;           /* index bits for lencode */\n  this.distbits = 0;          /* index bits for distcode */\n\n  /* dynamic table building */\n  this.ncode = 0;             /* number of code length code lengths */\n  this.nlen = 0;              /* number of length code lengths */\n  this.ndist = 0;             /* number of distance code lengths */\n  this.have = 0;              /* number of code lengths in lens[] */\n  this.next = null;              /* next available space in codes[] */\n\n  this.lens = new utils.Buf16(320); /* temporary storage for code lengths */\n  this.work = new utils.Buf16(288); /* work area for code table building */\n\n  /*\n   because we don't have pointers in js, we use lencode and distcode directly\n   as buffers so we don't need codes\n  */\n  //this.codes = new utils.Buf32(ENOUGH);       /* space for code tables */\n  this.lendyn = null;              /* dynamic table for length/literal codes (JS specific) */\n  this.distdyn = null;             /* dynamic table for distance codes (JS specific) */\n  this.sane = 0;                   /* if false, allow invalid distance too far */\n  this.back = 0;                   /* bits back of last unprocessed length/lit */\n  this.was = 0;                    /* initial length of match */\n}\n\nfunction inflateResetKeep(strm) {\n  var state;\n\n  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n  state = strm.state;\n  strm.total_in = strm.total_out = state.total = 0;\n  strm.msg = ''; /*Z_NULL*/\n  if (state.wrap) {       /* to support ill-conceived Java test suite */\n    strm.adler = state.wrap & 1;\n  }\n  state.mode = HEAD;\n  state.last = 0;\n  state.havedict = 0;\n  state.dmax = 32768;\n  state.head = null/*Z_NULL*/;\n  state.hold = 0;\n  state.bits = 0;\n  //state.lencode = state.distcode = state.next = state.codes;\n  state.lencode = state.lendyn = new utils.Buf32(ENOUGH_LENS);\n  state.distcode = state.distdyn = new utils.Buf32(ENOUGH_DISTS);\n\n  state.sane = 1;\n  state.back = -1;\n  //Tracev((stderr, \"inflate: reset\\n\"));\n  return Z_OK;\n}\n\nfunction inflateReset(strm) {\n  var state;\n\n  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n  state = strm.state;\n  state.wsize = 0;\n  state.whave = 0;\n  state.wnext = 0;\n  return inflateResetKeep(strm);\n\n}\n\nfunction inflateReset2(strm, windowBits) {\n  var wrap;\n  var state;\n\n  /* get the state */\n  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n  state = strm.state;\n\n  /* extract wrap request from windowBits parameter */\n  if (windowBits < 0) {\n    wrap = 0;\n    windowBits = -windowBits;\n  }\n  else {\n    wrap = (windowBits >> 4) + 1;\n    if (windowBits < 48) {\n      windowBits &= 15;\n    }\n  }\n\n  /* set number of window bits, free window if different */\n  if (windowBits && (windowBits < 8 || windowBits > 15)) {\n    return Z_STREAM_ERROR;\n  }\n  if (state.window !== null && state.wbits !== windowBits) {\n    state.window = null;\n  }\n\n  /* update state and reset the rest of it */\n  state.wrap = wrap;\n  state.wbits = windowBits;\n  return inflateReset(strm);\n}\n\nfunction inflateInit2(strm, windowBits) {\n  var ret;\n  var state;\n\n  if (!strm) { return Z_STREAM_ERROR; }\n  //strm.msg = Z_NULL;                 /* in case we return an error */\n\n  state = new InflateState();\n\n  //if (state === Z_NULL) return Z_MEM_ERROR;\n  //Tracev((stderr, \"inflate: allocated\\n\"));\n  strm.state = state;\n  state.window = null/*Z_NULL*/;\n  ret = inflateReset2(strm, windowBits);\n  if (ret !== Z_OK) {\n    strm.state = null/*Z_NULL*/;\n  }\n  return ret;\n}\n\nfunction inflateInit(strm) {\n  return inflateInit2(strm, DEF_WBITS);\n}\n\n\n/*\n Return state with length and distance decoding tables and index sizes set to\n fixed code decoding.  Normally this returns fixed tables from inffixed.h.\n If BUILDFIXED is defined, then instead this routine builds the tables the\n first time it's called, and returns those tables the first time and\n thereafter.  This reduces the size of the code by about 2K bytes, in\n exchange for a little execution time.  However, BUILDFIXED should not be\n used for threaded applications, since the rewriting of the tables and virgin\n may not be thread-safe.\n */\nvar virgin = true;\n\nvar lenfix, distfix; // We have no pointers in JS, so keep tables separate\n\nfunction fixedtables(state) {\n  /* build fixed huffman tables if first call (may not be thread safe) */\n  if (virgin) {\n    var sym;\n\n    lenfix = new utils.Buf32(512);\n    distfix = new utils.Buf32(32);\n\n    /* literal/length table */\n    sym = 0;\n    while (sym < 144) { state.lens[sym++] = 8; }\n    while (sym < 256) { state.lens[sym++] = 9; }\n    while (sym < 280) { state.lens[sym++] = 7; }\n    while (sym < 288) { state.lens[sym++] = 8; }\n\n    inflate_table(LENS,  state.lens, 0, 288, lenfix,   0, state.work, { bits: 9 });\n\n    /* distance table */\n    sym = 0;\n    while (sym < 32) { state.lens[sym++] = 5; }\n\n    inflate_table(DISTS, state.lens, 0, 32,   distfix, 0, state.work, { bits: 5 });\n\n    /* do this just once */\n    virgin = false;\n  }\n\n  state.lencode = lenfix;\n  state.lenbits = 9;\n  state.distcode = distfix;\n  state.distbits = 5;\n}\n\n\n/*\n Update the window with the last wsize (normally 32K) bytes written before\n returning.  If window does not exist yet, create it.  This is only called\n when a window is already in use, or when output has been written during this\n inflate call, but the end of the deflate stream has not been reached yet.\n It is also called to create a window for dictionary data when a dictionary\n is loaded.\n\n Providing output buffers larger than 32K to inflate() should provide a speed\n advantage, since only the last 32K of output is copied to the sliding window\n upon return from inflate(), and since all distances after the first 32K of\n output will fall in the output data, making match copies simpler and faster.\n The advantage may be dependent on the size of the processor's data caches.\n */\nfunction updatewindow(strm, src, end, copy) {\n  var dist;\n  var state = strm.state;\n\n  /* if it hasn't been done already, allocate space for the window */\n  if (state.window === null) {\n    state.wsize = 1 << state.wbits;\n    state.wnext = 0;\n    state.whave = 0;\n\n    state.window = new utils.Buf8(state.wsize);\n  }\n\n  /* copy state->wsize or less output bytes into the circular window */\n  if (copy >= state.wsize) {\n    utils.arraySet(state.window, src, end - state.wsize, state.wsize, 0);\n    state.wnext = 0;\n    state.whave = state.wsize;\n  }\n  else {\n    dist = state.wsize - state.wnext;\n    if (dist > copy) {\n      dist = copy;\n    }\n    //zmemcpy(state->window + state->wnext, end - copy, dist);\n    utils.arraySet(state.window, src, end - copy, dist, state.wnext);\n    copy -= dist;\n    if (copy) {\n      //zmemcpy(state->window, end - copy, copy);\n      utils.arraySet(state.window, src, end - copy, copy, 0);\n      state.wnext = copy;\n      state.whave = state.wsize;\n    }\n    else {\n      state.wnext += dist;\n      if (state.wnext === state.wsize) { state.wnext = 0; }\n      if (state.whave < state.wsize) { state.whave += dist; }\n    }\n  }\n  return 0;\n}\n\nfunction inflate(strm, flush) {\n  var state;\n  var input, output;          // input/output buffers\n  var next;                   /* next input INDEX */\n  var put;                    /* next output INDEX */\n  var have, left;             /* available input and output */\n  var hold;                   /* bit buffer */\n  var bits;                   /* bits in bit buffer */\n  var _in, _out;              /* save starting available input and output */\n  var copy;                   /* number of stored or match bytes to copy */\n  var from;                   /* where to copy match bytes from */\n  var from_source;\n  var here = 0;               /* current decoding table entry */\n  var here_bits, here_op, here_val; // paked \"here\" denormalized (JS specific)\n  //var last;                   /* parent table entry */\n  var last_bits, last_op, last_val; // paked \"last\" denormalized (JS specific)\n  var len;                    /* length to copy for repeats, bits to drop */\n  var ret;                    /* return code */\n  var hbuf = new utils.Buf8(4);    /* buffer for gzip header crc calculation */\n  var opts;\n\n  var n; // temporary var for NEED_BITS\n\n  var order = /* permutation of code lengths */\n    [ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ];\n\n\n  if (!strm || !strm.state || !strm.output ||\n      (!strm.input && strm.avail_in !== 0)) {\n    return Z_STREAM_ERROR;\n  }\n\n  state = strm.state;\n  if (state.mode === TYPE) { state.mode = TYPEDO; }    /* skip check */\n\n\n  //--- LOAD() ---\n  put = strm.next_out;\n  output = strm.output;\n  left = strm.avail_out;\n  next = strm.next_in;\n  input = strm.input;\n  have = strm.avail_in;\n  hold = state.hold;\n  bits = state.bits;\n  //---\n\n  _in = have;\n  _out = left;\n  ret = Z_OK;\n\n  inf_leave: // goto emulation\n  for (;;) {\n    switch (state.mode) {\n      case HEAD:\n        if (state.wrap === 0) {\n          state.mode = TYPEDO;\n          break;\n        }\n        //=== NEEDBITS(16);\n        while (bits < 16) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if ((state.wrap & 2) && hold === 0x8b1f) {  /* gzip header */\n          state.check = 0/*crc32(0L, Z_NULL, 0)*/;\n          //=== CRC2(state.check, hold);\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          state.check = crc32(state.check, hbuf, 2, 0);\n          //===//\n\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n          state.mode = FLAGS;\n          break;\n        }\n        state.flags = 0;           /* expect zlib header */\n        if (state.head) {\n          state.head.done = false;\n        }\n        if (!(state.wrap & 1) ||   /* check if zlib header allowed */\n          (((hold & 0xff)/*BITS(8)*/ << 8) + (hold >> 8)) % 31) {\n          strm.msg = 'incorrect header check';\n          state.mode = BAD;\n          break;\n        }\n        if ((hold & 0x0f)/*BITS(4)*/ !== Z_DEFLATED) {\n          strm.msg = 'unknown compression method';\n          state.mode = BAD;\n          break;\n        }\n        //--- DROPBITS(4) ---//\n        hold >>>= 4;\n        bits -= 4;\n        //---//\n        len = (hold & 0x0f)/*BITS(4)*/ + 8;\n        if (state.wbits === 0) {\n          state.wbits = len;\n        }\n        else if (len > state.wbits) {\n          strm.msg = 'invalid window size';\n          state.mode = BAD;\n          break;\n        }\n        state.dmax = 1 << len;\n        //Tracev((stderr, \"inflate:   zlib header ok\\n\"));\n        strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;\n        state.mode = hold & 0x200 ? DICTID : TYPE;\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        break;\n      case FLAGS:\n        //=== NEEDBITS(16); */\n        while (bits < 16) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.flags = hold;\n        if ((state.flags & 0xff) !== Z_DEFLATED) {\n          strm.msg = 'unknown compression method';\n          state.mode = BAD;\n          break;\n        }\n        if (state.flags & 0xe000) {\n          strm.msg = 'unknown header flags set';\n          state.mode = BAD;\n          break;\n        }\n        if (state.head) {\n          state.head.text = ((hold >> 8) & 1);\n        }\n        if (state.flags & 0x0200) {\n          //=== CRC2(state.check, hold);\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          state.check = crc32(state.check, hbuf, 2, 0);\n          //===//\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = TIME;\n        /* falls through */\n      case TIME:\n        //=== NEEDBITS(32); */\n        while (bits < 32) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if (state.head) {\n          state.head.time = hold;\n        }\n        if (state.flags & 0x0200) {\n          //=== CRC4(state.check, hold)\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          hbuf[2] = (hold >>> 16) & 0xff;\n          hbuf[3] = (hold >>> 24) & 0xff;\n          state.check = crc32(state.check, hbuf, 4, 0);\n          //===\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = OS;\n        /* falls through */\n      case OS:\n        //=== NEEDBITS(16); */\n        while (bits < 16) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if (state.head) {\n          state.head.xflags = (hold & 0xff);\n          state.head.os = (hold >> 8);\n        }\n        if (state.flags & 0x0200) {\n          //=== CRC2(state.check, hold);\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          state.check = crc32(state.check, hbuf, 2, 0);\n          //===//\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = EXLEN;\n        /* falls through */\n      case EXLEN:\n        if (state.flags & 0x0400) {\n          //=== NEEDBITS(16); */\n          while (bits < 16) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.length = hold;\n          if (state.head) {\n            state.head.extra_len = hold;\n          }\n          if (state.flags & 0x0200) {\n            //=== CRC2(state.check, hold);\n            hbuf[0] = hold & 0xff;\n            hbuf[1] = (hold >>> 8) & 0xff;\n            state.check = crc32(state.check, hbuf, 2, 0);\n            //===//\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n        }\n        else if (state.head) {\n          state.head.extra = null/*Z_NULL*/;\n        }\n        state.mode = EXTRA;\n        /* falls through */\n      case EXTRA:\n        if (state.flags & 0x0400) {\n          copy = state.length;\n          if (copy > have) { copy = have; }\n          if (copy) {\n            if (state.head) {\n              len = state.head.extra_len - state.length;\n              if (!state.head.extra) {\n                // Use untyped array for more convenient processing later\n                state.head.extra = new Array(state.head.extra_len);\n              }\n              utils.arraySet(\n                state.head.extra,\n                input,\n                next,\n                // extra field is limited to 65536 bytes\n                // - no need for additional size check\n                copy,\n                /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/\n                len\n              );\n              //zmemcpy(state.head.extra + len, next,\n              //        len + copy > state.head.extra_max ?\n              //        state.head.extra_max - len : copy);\n            }\n            if (state.flags & 0x0200) {\n              state.check = crc32(state.check, input, copy, next);\n            }\n            have -= copy;\n            next += copy;\n            state.length -= copy;\n          }\n          if (state.length) { break inf_leave; }\n        }\n        state.length = 0;\n        state.mode = NAME;\n        /* falls through */\n      case NAME:\n        if (state.flags & 0x0800) {\n          if (have === 0) { break inf_leave; }\n          copy = 0;\n          do {\n            // TODO: 2 or 1 bytes?\n            len = input[next + copy++];\n            /* use constant limit because in js we should not preallocate memory */\n            if (state.head && len &&\n                (state.length < 65536 /*state.head.name_max*/)) {\n              state.head.name += String.fromCharCode(len);\n            }\n          } while (len && copy < have);\n\n          if (state.flags & 0x0200) {\n            state.check = crc32(state.check, input, copy, next);\n          }\n          have -= copy;\n          next += copy;\n          if (len) { break inf_leave; }\n        }\n        else if (state.head) {\n          state.head.name = null;\n        }\n        state.length = 0;\n        state.mode = COMMENT;\n        /* falls through */\n      case COMMENT:\n        if (state.flags & 0x1000) {\n          if (have === 0) { break inf_leave; }\n          copy = 0;\n          do {\n            len = input[next + copy++];\n            /* use constant limit because in js we should not preallocate memory */\n            if (state.head && len &&\n                (state.length < 65536 /*state.head.comm_max*/)) {\n              state.head.comment += String.fromCharCode(len);\n            }\n          } while (len && copy < have);\n          if (state.flags & 0x0200) {\n            state.check = crc32(state.check, input, copy, next);\n          }\n          have -= copy;\n          next += copy;\n          if (len) { break inf_leave; }\n        }\n        else if (state.head) {\n          state.head.comment = null;\n        }\n        state.mode = HCRC;\n        /* falls through */\n      case HCRC:\n        if (state.flags & 0x0200) {\n          //=== NEEDBITS(16); */\n          while (bits < 16) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          if (hold !== (state.check & 0xffff)) {\n            strm.msg = 'header crc mismatch';\n            state.mode = BAD;\n            break;\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n        }\n        if (state.head) {\n          state.head.hcrc = ((state.flags >> 9) & 1);\n          state.head.done = true;\n        }\n        strm.adler = state.check = 0;\n        state.mode = TYPE;\n        break;\n      case DICTID:\n        //=== NEEDBITS(32); */\n        while (bits < 32) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        strm.adler = state.check = zswap32(hold);\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = DICT;\n        /* falls through */\n      case DICT:\n        if (state.havedict === 0) {\n          //--- RESTORE() ---\n          strm.next_out = put;\n          strm.avail_out = left;\n          strm.next_in = next;\n          strm.avail_in = have;\n          state.hold = hold;\n          state.bits = bits;\n          //---\n          return Z_NEED_DICT;\n        }\n        strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;\n        state.mode = TYPE;\n        /* falls through */\n      case TYPE:\n        if (flush === Z_BLOCK || flush === Z_TREES) { break inf_leave; }\n        /* falls through */\n      case TYPEDO:\n        if (state.last) {\n          //--- BYTEBITS() ---//\n          hold >>>= bits & 7;\n          bits -= bits & 7;\n          //---//\n          state.mode = CHECK;\n          break;\n        }\n        //=== NEEDBITS(3); */\n        while (bits < 3) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.last = (hold & 0x01)/*BITS(1)*/;\n        //--- DROPBITS(1) ---//\n        hold >>>= 1;\n        bits -= 1;\n        //---//\n\n        switch ((hold & 0x03)/*BITS(2)*/) {\n          case 0:                             /* stored block */\n            //Tracev((stderr, \"inflate:     stored block%s\\n\",\n            //        state.last ? \" (last)\" : \"\"));\n            state.mode = STORED;\n            break;\n          case 1:                             /* fixed block */\n            fixedtables(state);\n            //Tracev((stderr, \"inflate:     fixed codes block%s\\n\",\n            //        state.last ? \" (last)\" : \"\"));\n            state.mode = LEN_;             /* decode codes */\n            if (flush === Z_TREES) {\n              //--- DROPBITS(2) ---//\n              hold >>>= 2;\n              bits -= 2;\n              //---//\n              break inf_leave;\n            }\n            break;\n          case 2:                             /* dynamic block */\n            //Tracev((stderr, \"inflate:     dynamic codes block%s\\n\",\n            //        state.last ? \" (last)\" : \"\"));\n            state.mode = TABLE;\n            break;\n          case 3:\n            strm.msg = 'invalid block type';\n            state.mode = BAD;\n        }\n        //--- DROPBITS(2) ---//\n        hold >>>= 2;\n        bits -= 2;\n        //---//\n        break;\n      case STORED:\n        //--- BYTEBITS() ---// /* go to byte boundary */\n        hold >>>= bits & 7;\n        bits -= bits & 7;\n        //---//\n        //=== NEEDBITS(32); */\n        while (bits < 32) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if ((hold & 0xffff) !== ((hold >>> 16) ^ 0xffff)) {\n          strm.msg = 'invalid stored block lengths';\n          state.mode = BAD;\n          break;\n        }\n        state.length = hold & 0xffff;\n        //Tracev((stderr, \"inflate:       stored length %u\\n\",\n        //        state.length));\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = COPY_;\n        if (flush === Z_TREES) { break inf_leave; }\n        /* falls through */\n      case COPY_:\n        state.mode = COPY;\n        /* falls through */\n      case COPY:\n        copy = state.length;\n        if (copy) {\n          if (copy > have) { copy = have; }\n          if (copy > left) { copy = left; }\n          if (copy === 0) { break inf_leave; }\n          //--- zmemcpy(put, next, copy); ---\n          utils.arraySet(output, input, next, copy, put);\n          //---//\n          have -= copy;\n          next += copy;\n          left -= copy;\n          put += copy;\n          state.length -= copy;\n          break;\n        }\n        //Tracev((stderr, \"inflate:       stored end\\n\"));\n        state.mode = TYPE;\n        break;\n      case TABLE:\n        //=== NEEDBITS(14); */\n        while (bits < 14) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.nlen = (hold & 0x1f)/*BITS(5)*/ + 257;\n        //--- DROPBITS(5) ---//\n        hold >>>= 5;\n        bits -= 5;\n        //---//\n        state.ndist = (hold & 0x1f)/*BITS(5)*/ + 1;\n        //--- DROPBITS(5) ---//\n        hold >>>= 5;\n        bits -= 5;\n        //---//\n        state.ncode = (hold & 0x0f)/*BITS(4)*/ + 4;\n        //--- DROPBITS(4) ---//\n        hold >>>= 4;\n        bits -= 4;\n        //---//\n//#ifndef PKZIP_BUG_WORKAROUND\n        if (state.nlen > 286 || state.ndist > 30) {\n          strm.msg = 'too many length or distance symbols';\n          state.mode = BAD;\n          break;\n        }\n//#endif\n        //Tracev((stderr, \"inflate:       table sizes ok\\n\"));\n        state.have = 0;\n        state.mode = LENLENS;\n        /* falls through */\n      case LENLENS:\n        while (state.have < state.ncode) {\n          //=== NEEDBITS(3);\n          while (bits < 3) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.lens[order[state.have++]] = (hold & 0x07);//BITS(3);\n          //--- DROPBITS(3) ---//\n          hold >>>= 3;\n          bits -= 3;\n          //---//\n        }\n        while (state.have < 19) {\n          state.lens[order[state.have++]] = 0;\n        }\n        // We have separate tables & no pointers. 2 commented lines below not needed.\n        //state.next = state.codes;\n        //state.lencode = state.next;\n        // Switch to use dynamic table\n        state.lencode = state.lendyn;\n        state.lenbits = 7;\n\n        opts = { bits: state.lenbits };\n        ret = inflate_table(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);\n        state.lenbits = opts.bits;\n\n        if (ret) {\n          strm.msg = 'invalid code lengths set';\n          state.mode = BAD;\n          break;\n        }\n        //Tracev((stderr, \"inflate:       code lengths ok\\n\"));\n        state.have = 0;\n        state.mode = CODELENS;\n        /* falls through */\n      case CODELENS:\n        while (state.have < state.nlen + state.ndist) {\n          for (;;) {\n            here = state.lencode[hold & ((1 << state.lenbits) - 1)];/*BITS(state.lenbits)*/\n            here_bits = here >>> 24;\n            here_op = (here >>> 16) & 0xff;\n            here_val = here & 0xffff;\n\n            if ((here_bits) <= bits) { break; }\n            //--- PULLBYTE() ---//\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n            //---//\n          }\n          if (here_val < 16) {\n            //--- DROPBITS(here.bits) ---//\n            hold >>>= here_bits;\n            bits -= here_bits;\n            //---//\n            state.lens[state.have++] = here_val;\n          }\n          else {\n            if (here_val === 16) {\n              //=== NEEDBITS(here.bits + 2);\n              n = here_bits + 2;\n              while (bits < n) {\n                if (have === 0) { break inf_leave; }\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n              }\n              //===//\n              //--- DROPBITS(here.bits) ---//\n              hold >>>= here_bits;\n              bits -= here_bits;\n              //---//\n              if (state.have === 0) {\n                strm.msg = 'invalid bit length repeat';\n                state.mode = BAD;\n                break;\n              }\n              len = state.lens[state.have - 1];\n              copy = 3 + (hold & 0x03);//BITS(2);\n              //--- DROPBITS(2) ---//\n              hold >>>= 2;\n              bits -= 2;\n              //---//\n            }\n            else if (here_val === 17) {\n              //=== NEEDBITS(here.bits + 3);\n              n = here_bits + 3;\n              while (bits < n) {\n                if (have === 0) { break inf_leave; }\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n              }\n              //===//\n              //--- DROPBITS(here.bits) ---//\n              hold >>>= here_bits;\n              bits -= here_bits;\n              //---//\n              len = 0;\n              copy = 3 + (hold & 0x07);//BITS(3);\n              //--- DROPBITS(3) ---//\n              hold >>>= 3;\n              bits -= 3;\n              //---//\n            }\n            else {\n              //=== NEEDBITS(here.bits + 7);\n              n = here_bits + 7;\n              while (bits < n) {\n                if (have === 0) { break inf_leave; }\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n              }\n              //===//\n              //--- DROPBITS(here.bits) ---//\n              hold >>>= here_bits;\n              bits -= here_bits;\n              //---//\n              len = 0;\n              copy = 11 + (hold & 0x7f);//BITS(7);\n              //--- DROPBITS(7) ---//\n              hold >>>= 7;\n              bits -= 7;\n              //---//\n            }\n            if (state.have + copy > state.nlen + state.ndist) {\n              strm.msg = 'invalid bit length repeat';\n              state.mode = BAD;\n              break;\n            }\n            while (copy--) {\n              state.lens[state.have++] = len;\n            }\n          }\n        }\n\n        /* handle error breaks in while */\n        if (state.mode === BAD) { break; }\n\n        /* check for end-of-block code (better have one) */\n        if (state.lens[256] === 0) {\n          strm.msg = 'invalid code -- missing end-of-block';\n          state.mode = BAD;\n          break;\n        }\n\n        /* build code tables -- note: do not change the lenbits or distbits\n           values here (9 and 6) without reading the comments in inftrees.h\n           concerning the ENOUGH constants, which depend on those values */\n        state.lenbits = 9;\n\n        opts = { bits: state.lenbits };\n        ret = inflate_table(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);\n        // We have separate tables & no pointers. 2 commented lines below not needed.\n        // state.next_index = opts.table_index;\n        state.lenbits = opts.bits;\n        // state.lencode = state.next;\n\n        if (ret) {\n          strm.msg = 'invalid literal/lengths set';\n          state.mode = BAD;\n          break;\n        }\n\n        state.distbits = 6;\n        //state.distcode.copy(state.codes);\n        // Switch to use dynamic table\n        state.distcode = state.distdyn;\n        opts = { bits: state.distbits };\n        ret = inflate_table(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);\n        // We have separate tables & no pointers. 2 commented lines below not needed.\n        // state.next_index = opts.table_index;\n        state.distbits = opts.bits;\n        // state.distcode = state.next;\n\n        if (ret) {\n          strm.msg = 'invalid distances set';\n          state.mode = BAD;\n          break;\n        }\n        //Tracev((stderr, 'inflate:       codes ok\\n'));\n        state.mode = LEN_;\n        if (flush === Z_TREES) { break inf_leave; }\n        /* falls through */\n      case LEN_:\n        state.mode = LEN;\n        /* falls through */\n      case LEN:\n        if (have >= 6 && left >= 258) {\n          //--- RESTORE() ---\n          strm.next_out = put;\n          strm.avail_out = left;\n          strm.next_in = next;\n          strm.avail_in = have;\n          state.hold = hold;\n          state.bits = bits;\n          //---\n          inflate_fast(strm, _out);\n          //--- LOAD() ---\n          put = strm.next_out;\n          output = strm.output;\n          left = strm.avail_out;\n          next = strm.next_in;\n          input = strm.input;\n          have = strm.avail_in;\n          hold = state.hold;\n          bits = state.bits;\n          //---\n\n          if (state.mode === TYPE) {\n            state.back = -1;\n          }\n          break;\n        }\n        state.back = 0;\n        for (;;) {\n          here = state.lencode[hold & ((1 << state.lenbits) - 1)];  /*BITS(state.lenbits)*/\n          here_bits = here >>> 24;\n          here_op = (here >>> 16) & 0xff;\n          here_val = here & 0xffff;\n\n          if (here_bits <= bits) { break; }\n          //--- PULLBYTE() ---//\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n          //---//\n        }\n        if (here_op && (here_op & 0xf0) === 0) {\n          last_bits = here_bits;\n          last_op = here_op;\n          last_val = here_val;\n          for (;;) {\n            here = state.lencode[last_val +\n                    ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];\n            here_bits = here >>> 24;\n            here_op = (here >>> 16) & 0xff;\n            here_val = here & 0xffff;\n\n            if ((last_bits + here_bits) <= bits) { break; }\n            //--- PULLBYTE() ---//\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n            //---//\n          }\n          //--- DROPBITS(last.bits) ---//\n          hold >>>= last_bits;\n          bits -= last_bits;\n          //---//\n          state.back += last_bits;\n        }\n        //--- DROPBITS(here.bits) ---//\n        hold >>>= here_bits;\n        bits -= here_bits;\n        //---//\n        state.back += here_bits;\n        state.length = here_val;\n        if (here_op === 0) {\n          //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?\n          //        \"inflate:         literal '%c'\\n\" :\n          //        \"inflate:         literal 0x%02x\\n\", here.val));\n          state.mode = LIT;\n          break;\n        }\n        if (here_op & 32) {\n          //Tracevv((stderr, \"inflate:         end of block\\n\"));\n          state.back = -1;\n          state.mode = TYPE;\n          break;\n        }\n        if (here_op & 64) {\n          strm.msg = 'invalid literal/length code';\n          state.mode = BAD;\n          break;\n        }\n        state.extra = here_op & 15;\n        state.mode = LENEXT;\n        /* falls through */\n      case LENEXT:\n        if (state.extra) {\n          //=== NEEDBITS(state.extra);\n          n = state.extra;\n          while (bits < n) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.length += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;\n          //--- DROPBITS(state.extra) ---//\n          hold >>>= state.extra;\n          bits -= state.extra;\n          //---//\n          state.back += state.extra;\n        }\n        //Tracevv((stderr, \"inflate:         length %u\\n\", state.length));\n        state.was = state.length;\n        state.mode = DIST;\n        /* falls through */\n      case DIST:\n        for (;;) {\n          here = state.distcode[hold & ((1 << state.distbits) - 1)];/*BITS(state.distbits)*/\n          here_bits = here >>> 24;\n          here_op = (here >>> 16) & 0xff;\n          here_val = here & 0xffff;\n\n          if ((here_bits) <= bits) { break; }\n          //--- PULLBYTE() ---//\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n          //---//\n        }\n        if ((here_op & 0xf0) === 0) {\n          last_bits = here_bits;\n          last_op = here_op;\n          last_val = here_val;\n          for (;;) {\n            here = state.distcode[last_val +\n                    ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];\n            here_bits = here >>> 24;\n            here_op = (here >>> 16) & 0xff;\n            here_val = here & 0xffff;\n\n            if ((last_bits + here_bits) <= bits) { break; }\n            //--- PULLBYTE() ---//\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n            //---//\n          }\n          //--- DROPBITS(last.bits) ---//\n          hold >>>= last_bits;\n          bits -= last_bits;\n          //---//\n          state.back += last_bits;\n        }\n        //--- DROPBITS(here.bits) ---//\n        hold >>>= here_bits;\n        bits -= here_bits;\n        //---//\n        state.back += here_bits;\n        if (here_op & 64) {\n          strm.msg = 'invalid distance code';\n          state.mode = BAD;\n          break;\n        }\n        state.offset = here_val;\n        state.extra = (here_op) & 15;\n        state.mode = DISTEXT;\n        /* falls through */\n      case DISTEXT:\n        if (state.extra) {\n          //=== NEEDBITS(state.extra);\n          n = state.extra;\n          while (bits < n) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.offset += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;\n          //--- DROPBITS(state.extra) ---//\n          hold >>>= state.extra;\n          bits -= state.extra;\n          //---//\n          state.back += state.extra;\n        }\n//#ifdef INFLATE_STRICT\n        if (state.offset > state.dmax) {\n          strm.msg = 'invalid distance too far back';\n          state.mode = BAD;\n          break;\n        }\n//#endif\n        //Tracevv((stderr, \"inflate:         distance %u\\n\", state.offset));\n        state.mode = MATCH;\n        /* falls through */\n      case MATCH:\n        if (left === 0) { break inf_leave; }\n        copy = _out - left;\n        if (state.offset > copy) {         /* copy from window */\n          copy = state.offset - copy;\n          if (copy > state.whave) {\n            if (state.sane) {\n              strm.msg = 'invalid distance too far back';\n              state.mode = BAD;\n              break;\n            }\n// (!) This block is disabled in zlib defaults,\n// don't enable it for binary compatibility\n//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR\n//          Trace((stderr, \"inflate.c too far\\n\"));\n//          copy -= state.whave;\n//          if (copy > state.length) { copy = state.length; }\n//          if (copy > left) { copy = left; }\n//          left -= copy;\n//          state.length -= copy;\n//          do {\n//            output[put++] = 0;\n//          } while (--copy);\n//          if (state.length === 0) { state.mode = LEN; }\n//          break;\n//#endif\n          }\n          if (copy > state.wnext) {\n            copy -= state.wnext;\n            from = state.wsize - copy;\n          }\n          else {\n            from = state.wnext - copy;\n          }\n          if (copy > state.length) { copy = state.length; }\n          from_source = state.window;\n        }\n        else {                              /* copy from output */\n          from_source = output;\n          from = put - state.offset;\n          copy = state.length;\n        }\n        if (copy > left) { copy = left; }\n        left -= copy;\n        state.length -= copy;\n        do {\n          output[put++] = from_source[from++];\n        } while (--copy);\n        if (state.length === 0) { state.mode = LEN; }\n        break;\n      case LIT:\n        if (left === 0) { break inf_leave; }\n        output[put++] = state.length;\n        left--;\n        state.mode = LEN;\n        break;\n      case CHECK:\n        if (state.wrap) {\n          //=== NEEDBITS(32);\n          while (bits < 32) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            // Use '|' instead of '+' to make sure that result is signed\n            hold |= input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          _out -= left;\n          strm.total_out += _out;\n          state.total += _out;\n          if (_out) {\n            strm.adler = state.check =\n                /*UPDATE(state.check, put - _out, _out);*/\n                (state.flags ? crc32(state.check, output, _out, put - _out) : adler32(state.check, output, _out, put - _out));\n\n          }\n          _out = left;\n          // NB: crc32 stored as signed 32-bit int, zswap32 returns signed too\n          if ((state.flags ? hold : zswap32(hold)) !== state.check) {\n            strm.msg = 'incorrect data check';\n            state.mode = BAD;\n            break;\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n          //Tracev((stderr, \"inflate:   check matches trailer\\n\"));\n        }\n        state.mode = LENGTH;\n        /* falls through */\n      case LENGTH:\n        if (state.wrap && state.flags) {\n          //=== NEEDBITS(32);\n          while (bits < 32) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          if (hold !== (state.total & 0xffffffff)) {\n            strm.msg = 'incorrect length check';\n            state.mode = BAD;\n            break;\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n          //Tracev((stderr, \"inflate:   length matches trailer\\n\"));\n        }\n        state.mode = DONE;\n        /* falls through */\n      case DONE:\n        ret = Z_STREAM_END;\n        break inf_leave;\n      case BAD:\n        ret = Z_DATA_ERROR;\n        break inf_leave;\n      case MEM:\n        return Z_MEM_ERROR;\n      case SYNC:\n        /* falls through */\n      default:\n        return Z_STREAM_ERROR;\n    }\n  }\n\n  // inf_leave <- here is real place for \"goto inf_leave\", emulated via \"break inf_leave\"\n\n  /*\n     Return from inflate(), updating the total counts and the check value.\n     If there was no progress during the inflate() call, return a buffer\n     error.  Call updatewindow() to create and/or update the window state.\n     Note: a memory error from inflate() is non-recoverable.\n   */\n\n  //--- RESTORE() ---\n  strm.next_out = put;\n  strm.avail_out = left;\n  strm.next_in = next;\n  strm.avail_in = have;\n  state.hold = hold;\n  state.bits = bits;\n  //---\n\n  if (state.wsize || (_out !== strm.avail_out && state.mode < BAD &&\n                      (state.mode < CHECK || flush !== Z_FINISH))) {\n    if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) {\n      state.mode = MEM;\n      return Z_MEM_ERROR;\n    }\n  }\n  _in -= strm.avail_in;\n  _out -= strm.avail_out;\n  strm.total_in += _in;\n  strm.total_out += _out;\n  state.total += _out;\n  if (state.wrap && _out) {\n    strm.adler = state.check = /*UPDATE(state.check, strm.next_out - _out, _out);*/\n      (state.flags ? crc32(state.check, output, _out, strm.next_out - _out) : adler32(state.check, output, _out, strm.next_out - _out));\n  }\n  strm.data_type = state.bits + (state.last ? 64 : 0) +\n                    (state.mode === TYPE ? 128 : 0) +\n                    (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);\n  if (((_in === 0 && _out === 0) || flush === Z_FINISH) && ret === Z_OK) {\n    ret = Z_BUF_ERROR;\n  }\n  return ret;\n}\n\nfunction inflateEnd(strm) {\n\n  if (!strm || !strm.state /*|| strm->zfree == (free_func)0*/) {\n    return Z_STREAM_ERROR;\n  }\n\n  var state = strm.state;\n  if (state.window) {\n    state.window = null;\n  }\n  strm.state = null;\n  return Z_OK;\n}\n\nfunction inflateGetHeader(strm, head) {\n  var state;\n\n  /* check state */\n  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n  state = strm.state;\n  if ((state.wrap & 2) === 0) { return Z_STREAM_ERROR; }\n\n  /* save header structure */\n  state.head = head;\n  head.done = false;\n  return Z_OK;\n}\n\nfunction inflateSetDictionary(strm, dictionary) {\n  var dictLength = dictionary.length;\n\n  var state;\n  var dictid;\n  var ret;\n\n  /* check state */\n  if (!strm /* == Z_NULL */ || !strm.state /* == Z_NULL */) { return Z_STREAM_ERROR; }\n  state = strm.state;\n\n  if (state.wrap !== 0 && state.mode !== DICT) {\n    return Z_STREAM_ERROR;\n  }\n\n  /* check for correct dictionary identifier */\n  if (state.mode === DICT) {\n    dictid = 1; /* adler32(0, null, 0)*/\n    /* dictid = adler32(dictid, dictionary, dictLength); */\n    dictid = adler32(dictid, dictionary, dictLength, 0);\n    if (dictid !== state.check) {\n      return Z_DATA_ERROR;\n    }\n  }\n  /* copy dictionary to window using updatewindow(), which will amend the\n   existing dictionary if appropriate */\n  ret = updatewindow(strm, dictionary, dictLength, dictLength);\n  if (ret) {\n    state.mode = MEM;\n    return Z_MEM_ERROR;\n  }\n  state.havedict = 1;\n  // Tracev((stderr, \"inflate:   dictionary set\\n\"));\n  return Z_OK;\n}\n\nexports.inflateReset = inflateReset;\nexports.inflateReset2 = inflateReset2;\nexports.inflateResetKeep = inflateResetKeep;\nexports.inflateInit = inflateInit;\nexports.inflateInit2 = inflateInit2;\nexports.inflate = inflate;\nexports.inflateEnd = inflateEnd;\nexports.inflateGetHeader = inflateGetHeader;\nexports.inflateSetDictionary = inflateSetDictionary;\nexports.inflateInfo = 'pako inflate (from Nodeca project)';\n\n/* Not implemented\nexports.inflateCopy = inflateCopy;\nexports.inflateGetDictionary = inflateGetDictionary;\nexports.inflateMark = inflateMark;\nexports.inflatePrime = inflatePrime;\nexports.inflateSync = inflateSync;\nexports.inflateSyncPoint = inflateSyncPoint;\nexports.inflateUndermine = inflateUndermine;\n*/\n\n\n//# sourceURL=webpack://HicStraw/./node_modules/pako/lib/zlib/inflate.js?");/***/},/***/"./node_modules/pako/lib/zlib/inftrees.js":/*!************************************************!*\
  !*** ./node_modules/pako/lib/zlib/inftrees.js ***!
  \************************************************/ /*! no static exports found */ /***/function node_modulesPakoLibZlibInftreesJs(module,exports,__webpack_require__){"use strict";eval("\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nvar utils = __webpack_require__(/*! ../utils/common */ \"./node_modules/pako/lib/utils/common.js\");\n\nvar MAXBITS = 15;\nvar ENOUGH_LENS = 852;\nvar ENOUGH_DISTS = 592;\n//var ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);\n\nvar CODES = 0;\nvar LENS = 1;\nvar DISTS = 2;\n\nvar lbase = [ /* Length codes 257..285 base */\n  3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,\n  35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0\n];\n\nvar lext = [ /* Length codes 257..285 extra */\n  16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,\n  19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78\n];\n\nvar dbase = [ /* Distance codes 0..29 base */\n  1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,\n  257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,\n  8193, 12289, 16385, 24577, 0, 0\n];\n\nvar dext = [ /* Distance codes 0..29 extra */\n  16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,\n  23, 23, 24, 24, 25, 25, 26, 26, 27, 27,\n  28, 28, 29, 29, 64, 64\n];\n\nmodule.exports = function inflate_table(type, lens, lens_index, codes, table, table_index, work, opts)\n{\n  var bits = opts.bits;\n      //here = opts.here; /* table entry for duplication */\n\n  var len = 0;               /* a code's length in bits */\n  var sym = 0;               /* index of code symbols */\n  var min = 0, max = 0;          /* minimum and maximum code lengths */\n  var root = 0;              /* number of index bits for root table */\n  var curr = 0;              /* number of index bits for current table */\n  var drop = 0;              /* code bits to drop for sub-table */\n  var left = 0;                   /* number of prefix codes available */\n  var used = 0;              /* code entries in table used */\n  var huff = 0;              /* Huffman code */\n  var incr;              /* for incrementing code, index */\n  var fill;              /* index for replicating entries */\n  var low;               /* low bits for current root entry */\n  var mask;              /* mask for low root bits */\n  var next;             /* next available space in table */\n  var base = null;     /* base value table to use */\n  var base_index = 0;\n//  var shoextra;    /* extra bits table to use */\n  var end;                    /* use base and extra for symbol > end */\n  var count = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];    /* number of codes of each length */\n  var offs = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];     /* offsets in table for each length */\n  var extra = null;\n  var extra_index = 0;\n\n  var here_bits, here_op, here_val;\n\n  /*\n   Process a set of code lengths to create a canonical Huffman code.  The\n   code lengths are lens[0..codes-1].  Each length corresponds to the\n   symbols 0..codes-1.  The Huffman code is generated by first sorting the\n   symbols by length from short to long, and retaining the symbol order\n   for codes with equal lengths.  Then the code starts with all zero bits\n   for the first code of the shortest length, and the codes are integer\n   increments for the same length, and zeros are appended as the length\n   increases.  For the deflate format, these bits are stored backwards\n   from their more natural integer increment ordering, and so when the\n   decoding tables are built in the large loop below, the integer codes\n   are incremented backwards.\n\n   This routine assumes, but does not check, that all of the entries in\n   lens[] are in the range 0..MAXBITS.  The caller must assure this.\n   1..MAXBITS is interpreted as that code length.  zero means that that\n   symbol does not occur in this code.\n\n   The codes are sorted by computing a count of codes for each length,\n   creating from that a table of starting indices for each length in the\n   sorted table, and then entering the symbols in order in the sorted\n   table.  The sorted table is work[], with that space being provided by\n   the caller.\n\n   The length counts are used for other purposes as well, i.e. finding\n   the minimum and maximum length codes, determining if there are any\n   codes at all, checking for a valid set of lengths, and looking ahead\n   at length counts to determine sub-table sizes when building the\n   decoding tables.\n   */\n\n  /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */\n  for (len = 0; len <= MAXBITS; len++) {\n    count[len] = 0;\n  }\n  for (sym = 0; sym < codes; sym++) {\n    count[lens[lens_index + sym]]++;\n  }\n\n  /* bound code lengths, force root to be within code lengths */\n  root = bits;\n  for (max = MAXBITS; max >= 1; max--) {\n    if (count[max] !== 0) { break; }\n  }\n  if (root > max) {\n    root = max;\n  }\n  if (max === 0) {                     /* no symbols to code at all */\n    //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */\n    //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;\n    //table.val[opts.table_index++] = 0;   //here.val = (var short)0;\n    table[table_index++] = (1 << 24) | (64 << 16) | 0;\n\n\n    //table.op[opts.table_index] = 64;\n    //table.bits[opts.table_index] = 1;\n    //table.val[opts.table_index++] = 0;\n    table[table_index++] = (1 << 24) | (64 << 16) | 0;\n\n    opts.bits = 1;\n    return 0;     /* no symbols, but wait for decoding to report error */\n  }\n  for (min = 1; min < max; min++) {\n    if (count[min] !== 0) { break; }\n  }\n  if (root < min) {\n    root = min;\n  }\n\n  /* check for an over-subscribed or incomplete set of lengths */\n  left = 1;\n  for (len = 1; len <= MAXBITS; len++) {\n    left <<= 1;\n    left -= count[len];\n    if (left < 0) {\n      return -1;\n    }        /* over-subscribed */\n  }\n  if (left > 0 && (type === CODES || max !== 1)) {\n    return -1;                      /* incomplete set */\n  }\n\n  /* generate offsets into symbol table for each length for sorting */\n  offs[1] = 0;\n  for (len = 1; len < MAXBITS; len++) {\n    offs[len + 1] = offs[len] + count[len];\n  }\n\n  /* sort symbols by length, by symbol order within each length */\n  for (sym = 0; sym < codes; sym++) {\n    if (lens[lens_index + sym] !== 0) {\n      work[offs[lens[lens_index + sym]]++] = sym;\n    }\n  }\n\n  /*\n   Create and fill in decoding tables.  In this loop, the table being\n   filled is at next and has curr index bits.  The code being used is huff\n   with length len.  That code is converted to an index by dropping drop\n   bits off of the bottom.  For codes where len is less than drop + curr,\n   those top drop + curr - len bits are incremented through all values to\n   fill the table with replicated entries.\n\n   root is the number of index bits for the root table.  When len exceeds\n   root, sub-tables are created pointed to by the root entry with an index\n   of the low root bits of huff.  This is saved in low to check for when a\n   new sub-table should be started.  drop is zero when the root table is\n   being filled, and drop is root when sub-tables are being filled.\n\n   When a new sub-table is needed, it is necessary to look ahead in the\n   code lengths to determine what size sub-table is needed.  The length\n   counts are used for this, and so count[] is decremented as codes are\n   entered in the tables.\n\n   used keeps track of how many table entries have been allocated from the\n   provided *table space.  It is checked for LENS and DIST tables against\n   the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in\n   the initial root table size constants.  See the comments in inftrees.h\n   for more information.\n\n   sym increments through all symbols, and the loop terminates when\n   all codes of length max, i.e. all codes, have been processed.  This\n   routine permits incomplete codes, so another loop after this one fills\n   in the rest of the decoding tables with invalid code markers.\n   */\n\n  /* set up for code type */\n  // poor man optimization - use if-else instead of switch,\n  // to avoid deopts in old v8\n  if (type === CODES) {\n    base = extra = work;    /* dummy value--not used */\n    end = 19;\n\n  } else if (type === LENS) {\n    base = lbase;\n    base_index -= 257;\n    extra = lext;\n    extra_index -= 257;\n    end = 256;\n\n  } else {                    /* DISTS */\n    base = dbase;\n    extra = dext;\n    end = -1;\n  }\n\n  /* initialize opts for loop */\n  huff = 0;                   /* starting code */\n  sym = 0;                    /* starting code symbol */\n  len = min;                  /* starting code length */\n  next = table_index;              /* current table to fill in */\n  curr = root;                /* current table index bits */\n  drop = 0;                   /* current bits to drop from code for index */\n  low = -1;                   /* trigger new sub-table when len > root */\n  used = 1 << root;          /* use root table entries */\n  mask = used - 1;            /* mask for comparing low */\n\n  /* check available table space */\n  if ((type === LENS && used > ENOUGH_LENS) ||\n    (type === DISTS && used > ENOUGH_DISTS)) {\n    return 1;\n  }\n\n  /* process all codes and make table entries */\n  for (;;) {\n    /* create table entry */\n    here_bits = len - drop;\n    if (work[sym] < end) {\n      here_op = 0;\n      here_val = work[sym];\n    }\n    else if (work[sym] > end) {\n      here_op = extra[extra_index + work[sym]];\n      here_val = base[base_index + work[sym]];\n    }\n    else {\n      here_op = 32 + 64;         /* end of block */\n      here_val = 0;\n    }\n\n    /* replicate for those indices with low len bits equal to huff */\n    incr = 1 << (len - drop);\n    fill = 1 << curr;\n    min = fill;                 /* save offset to next table */\n    do {\n      fill -= incr;\n      table[next + (huff >> drop) + fill] = (here_bits << 24) | (here_op << 16) | here_val |0;\n    } while (fill !== 0);\n\n    /* backwards increment the len-bit code huff */\n    incr = 1 << (len - 1);\n    while (huff & incr) {\n      incr >>= 1;\n    }\n    if (incr !== 0) {\n      huff &= incr - 1;\n      huff += incr;\n    } else {\n      huff = 0;\n    }\n\n    /* go to next symbol, update count, len */\n    sym++;\n    if (--count[len] === 0) {\n      if (len === max) { break; }\n      len = lens[lens_index + work[sym]];\n    }\n\n    /* create new sub-table if needed */\n    if (len > root && (huff & mask) !== low) {\n      /* if first time, transition to sub-tables */\n      if (drop === 0) {\n        drop = root;\n      }\n\n      /* increment past last table */\n      next += min;            /* here min is 1 << curr */\n\n      /* determine length of next table */\n      curr = len - drop;\n      left = 1 << curr;\n      while (curr + drop < max) {\n        left -= count[curr + drop];\n        if (left <= 0) { break; }\n        curr++;\n        left <<= 1;\n      }\n\n      /* check for enough space */\n      used += 1 << curr;\n      if ((type === LENS && used > ENOUGH_LENS) ||\n        (type === DISTS && used > ENOUGH_DISTS)) {\n        return 1;\n      }\n\n      /* point entry in root table to sub-table */\n      low = huff & mask;\n      /*table.op[low] = curr;\n      table.bits[low] = root;\n      table.val[low] = next - opts.table_index;*/\n      table[low] = (root << 24) | (curr << 16) | (next - table_index) |0;\n    }\n  }\n\n  /* fill in remaining table entry if code is incomplete (guaranteed to have\n   at most one remaining entry, since if the code is incomplete, the\n   maximum code length that was allowed to get this far is one bit) */\n  if (huff !== 0) {\n    //table.op[next + huff] = 64;            /* invalid code marker */\n    //table.bits[next + huff] = len - drop;\n    //table.val[next + huff] = 0;\n    table[next + huff] = ((len - drop) << 24) | (64 << 16) |0;\n  }\n\n  /* set return parameters */\n  //opts.table_index += used;\n  opts.bits = root;\n  return 0;\n};\n\n\n//# sourceURL=webpack://HicStraw/./node_modules/pako/lib/zlib/inftrees.js?");/***/},/***/"./node_modules/pako/lib/zlib/messages.js":/*!************************************************!*\
  !*** ./node_modules/pako/lib/zlib/messages.js ***!
  \************************************************/ /*! no static exports found */ /***/function node_modulesPakoLibZlibMessagesJs(module,exports,__webpack_require__){"use strict";eval("\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nmodule.exports = {\n  2:      'need dictionary',     /* Z_NEED_DICT       2  */\n  1:      'stream end',          /* Z_STREAM_END      1  */\n  0:      '',                    /* Z_OK              0  */\n  '-1':   'file error',          /* Z_ERRNO         (-1) */\n  '-2':   'stream error',        /* Z_STREAM_ERROR  (-2) */\n  '-3':   'data error',          /* Z_DATA_ERROR    (-3) */\n  '-4':   'insufficient memory', /* Z_MEM_ERROR     (-4) */\n  '-5':   'buffer error',        /* Z_BUF_ERROR     (-5) */\n  '-6':   'incompatible version' /* Z_VERSION_ERROR (-6) */\n};\n\n\n//# sourceURL=webpack://HicStraw/./node_modules/pako/lib/zlib/messages.js?");/***/},/***/"./node_modules/pako/lib/zlib/trees.js":/*!*********************************************!*\
  !*** ./node_modules/pako/lib/zlib/trees.js ***!
  \*********************************************/ /*! no static exports found */ /***/function node_modulesPakoLibZlibTreesJs(module,exports,__webpack_require__){"use strict";eval("\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nvar utils = __webpack_require__(/*! ../utils/common */ \"./node_modules/pako/lib/utils/common.js\");\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\n\n//var Z_FILTERED          = 1;\n//var Z_HUFFMAN_ONLY      = 2;\n//var Z_RLE               = 3;\nvar Z_FIXED               = 4;\n//var Z_DEFAULT_STRATEGY  = 0;\n\n/* Possible values of the data_type field (though see inflate()) */\nvar Z_BINARY              = 0;\nvar Z_TEXT                = 1;\n//var Z_ASCII             = 1; // = Z_TEXT\nvar Z_UNKNOWN             = 2;\n\n/*============================================================================*/\n\n\nfunction zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }\n\n// From zutil.h\n\nvar STORED_BLOCK = 0;\nvar STATIC_TREES = 1;\nvar DYN_TREES    = 2;\n/* The three kinds of block type */\n\nvar MIN_MATCH    = 3;\nvar MAX_MATCH    = 258;\n/* The minimum and maximum match lengths */\n\n// From deflate.h\n/* ===========================================================================\n * Internal compression state.\n */\n\nvar LENGTH_CODES  = 29;\n/* number of length codes, not counting the special END_BLOCK code */\n\nvar LITERALS      = 256;\n/* number of literal bytes 0..255 */\n\nvar L_CODES       = LITERALS + 1 + LENGTH_CODES;\n/* number of Literal or Length codes, including the END_BLOCK code */\n\nvar D_CODES       = 30;\n/* number of distance codes */\n\nvar BL_CODES      = 19;\n/* number of codes used to transfer the bit lengths */\n\nvar HEAP_SIZE     = 2 * L_CODES + 1;\n/* maximum heap size */\n\nvar MAX_BITS      = 15;\n/* All codes must not exceed MAX_BITS bits */\n\nvar Buf_size      = 16;\n/* size of bit buffer in bi_buf */\n\n\n/* ===========================================================================\n * Constants\n */\n\nvar MAX_BL_BITS = 7;\n/* Bit length codes must not exceed MAX_BL_BITS bits */\n\nvar END_BLOCK   = 256;\n/* end of block literal code */\n\nvar REP_3_6     = 16;\n/* repeat previous bit length 3-6 times (2 bits of repeat count) */\n\nvar REPZ_3_10   = 17;\n/* repeat a zero length 3-10 times  (3 bits of repeat count) */\n\nvar REPZ_11_138 = 18;\n/* repeat a zero length 11-138 times  (7 bits of repeat count) */\n\n/* eslint-disable comma-spacing,array-bracket-spacing */\nvar extra_lbits =   /* extra bits for each length code */\n  [0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0];\n\nvar extra_dbits =   /* extra bits for each distance code */\n  [0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13];\n\nvar extra_blbits =  /* extra bits for each bit length code */\n  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7];\n\nvar bl_order =\n  [16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];\n/* eslint-enable comma-spacing,array-bracket-spacing */\n\n/* The lengths of the bit length codes are sent in order of decreasing\n * probability, to avoid transmitting the lengths for unused bit length codes.\n */\n\n/* ===========================================================================\n * Local data. These are initialized only once.\n */\n\n// We pre-fill arrays with 0 to avoid uninitialized gaps\n\nvar DIST_CODE_LEN = 512; /* see definition of array dist_code below */\n\n// !!!! Use flat array instead of structure, Freq = i*2, Len = i*2+1\nvar static_ltree  = new Array((L_CODES + 2) * 2);\nzero(static_ltree);\n/* The static literal tree. Since the bit lengths are imposed, there is no\n * need for the L_CODES extra codes used during heap construction. However\n * The codes 286 and 287 are needed to build a canonical tree (see _tr_init\n * below).\n */\n\nvar static_dtree  = new Array(D_CODES * 2);\nzero(static_dtree);\n/* The static distance tree. (Actually a trivial tree since all codes use\n * 5 bits.)\n */\n\nvar _dist_code    = new Array(DIST_CODE_LEN);\nzero(_dist_code);\n/* Distance codes. The first 256 values correspond to the distances\n * 3 .. 258, the last 256 values correspond to the top 8 bits of\n * the 15 bit distances.\n */\n\nvar _length_code  = new Array(MAX_MATCH - MIN_MATCH + 1);\nzero(_length_code);\n/* length code for each normalized match length (0 == MIN_MATCH) */\n\nvar base_length   = new Array(LENGTH_CODES);\nzero(base_length);\n/* First normalized length for each code (0 = MIN_MATCH) */\n\nvar base_dist     = new Array(D_CODES);\nzero(base_dist);\n/* First normalized distance for each code (0 = distance of 1) */\n\n\nfunction StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {\n\n  this.static_tree  = static_tree;  /* static tree or NULL */\n  this.extra_bits   = extra_bits;   /* extra bits for each code or NULL */\n  this.extra_base   = extra_base;   /* base index for extra_bits */\n  this.elems        = elems;        /* max number of elements in the tree */\n  this.max_length   = max_length;   /* max bit length for the codes */\n\n  // show if `static_tree` has data or dummy - needed for monomorphic objects\n  this.has_stree    = static_tree && static_tree.length;\n}\n\n\nvar static_l_desc;\nvar static_d_desc;\nvar static_bl_desc;\n\n\nfunction TreeDesc(dyn_tree, stat_desc) {\n  this.dyn_tree = dyn_tree;     /* the dynamic tree */\n  this.max_code = 0;            /* largest code with non zero frequency */\n  this.stat_desc = stat_desc;   /* the corresponding static tree */\n}\n\n\n\nfunction d_code(dist) {\n  return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];\n}\n\n\n/* ===========================================================================\n * Output a short LSB first on the stream.\n * IN assertion: there is enough room in pendingBuf.\n */\nfunction put_short(s, w) {\n//    put_byte(s, (uch)((w) & 0xff));\n//    put_byte(s, (uch)((ush)(w) >> 8));\n  s.pending_buf[s.pending++] = (w) & 0xff;\n  s.pending_buf[s.pending++] = (w >>> 8) & 0xff;\n}\n\n\n/* ===========================================================================\n * Send a value on a given number of bits.\n * IN assertion: length <= 16 and value fits in length bits.\n */\nfunction send_bits(s, value, length) {\n  if (s.bi_valid > (Buf_size - length)) {\n    s.bi_buf |= (value << s.bi_valid) & 0xffff;\n    put_short(s, s.bi_buf);\n    s.bi_buf = value >> (Buf_size - s.bi_valid);\n    s.bi_valid += length - Buf_size;\n  } else {\n    s.bi_buf |= (value << s.bi_valid) & 0xffff;\n    s.bi_valid += length;\n  }\n}\n\n\nfunction send_code(s, c, tree) {\n  send_bits(s, tree[c * 2]/*.Code*/, tree[c * 2 + 1]/*.Len*/);\n}\n\n\n/* ===========================================================================\n * Reverse the first len bits of a code, using straightforward code (a faster\n * method would use a table)\n * IN assertion: 1 <= len <= 15\n */\nfunction bi_reverse(code, len) {\n  var res = 0;\n  do {\n    res |= code & 1;\n    code >>>= 1;\n    res <<= 1;\n  } while (--len > 0);\n  return res >>> 1;\n}\n\n\n/* ===========================================================================\n * Flush the bit buffer, keeping at most 7 bits in it.\n */\nfunction bi_flush(s) {\n  if (s.bi_valid === 16) {\n    put_short(s, s.bi_buf);\n    s.bi_buf = 0;\n    s.bi_valid = 0;\n\n  } else if (s.bi_valid >= 8) {\n    s.pending_buf[s.pending++] = s.bi_buf & 0xff;\n    s.bi_buf >>= 8;\n    s.bi_valid -= 8;\n  }\n}\n\n\n/* ===========================================================================\n * Compute the optimal bit lengths for a tree and update the total bit length\n * for the current block.\n * IN assertion: the fields freq and dad are set, heap[heap_max] and\n *    above are the tree nodes sorted by increasing frequency.\n * OUT assertions: the field len is set to the optimal bit length, the\n *     array bl_count contains the frequencies for each bit length.\n *     The length opt_len is updated; static_len is also updated if stree is\n *     not null.\n */\nfunction gen_bitlen(s, desc)\n//    deflate_state *s;\n//    tree_desc *desc;    /* the tree descriptor */\n{\n  var tree            = desc.dyn_tree;\n  var max_code        = desc.max_code;\n  var stree           = desc.stat_desc.static_tree;\n  var has_stree       = desc.stat_desc.has_stree;\n  var extra           = desc.stat_desc.extra_bits;\n  var base            = desc.stat_desc.extra_base;\n  var max_length      = desc.stat_desc.max_length;\n  var h;              /* heap index */\n  var n, m;           /* iterate over the tree elements */\n  var bits;           /* bit length */\n  var xbits;          /* extra bits */\n  var f;              /* frequency */\n  var overflow = 0;   /* number of elements with bit length too large */\n\n  for (bits = 0; bits <= MAX_BITS; bits++) {\n    s.bl_count[bits] = 0;\n  }\n\n  /* In a first pass, compute the optimal bit lengths (which may\n   * overflow in the case of the bit length tree).\n   */\n  tree[s.heap[s.heap_max] * 2 + 1]/*.Len*/ = 0; /* root of the heap */\n\n  for (h = s.heap_max + 1; h < HEAP_SIZE; h++) {\n    n = s.heap[h];\n    bits = tree[tree[n * 2 + 1]/*.Dad*/ * 2 + 1]/*.Len*/ + 1;\n    if (bits > max_length) {\n      bits = max_length;\n      overflow++;\n    }\n    tree[n * 2 + 1]/*.Len*/ = bits;\n    /* We overwrite tree[n].Dad which is no longer needed */\n\n    if (n > max_code) { continue; } /* not a leaf node */\n\n    s.bl_count[bits]++;\n    xbits = 0;\n    if (n >= base) {\n      xbits = extra[n - base];\n    }\n    f = tree[n * 2]/*.Freq*/;\n    s.opt_len += f * (bits + xbits);\n    if (has_stree) {\n      s.static_len += f * (stree[n * 2 + 1]/*.Len*/ + xbits);\n    }\n  }\n  if (overflow === 0) { return; }\n\n  // Trace((stderr,\"\\nbit length overflow\\n\"));\n  /* This happens for example on obj2 and pic of the Calgary corpus */\n\n  /* Find the first bit length which could increase: */\n  do {\n    bits = max_length - 1;\n    while (s.bl_count[bits] === 0) { bits--; }\n    s.bl_count[bits]--;      /* move one leaf down the tree */\n    s.bl_count[bits + 1] += 2; /* move one overflow item as its brother */\n    s.bl_count[max_length]--;\n    /* The brother of the overflow item also moves one step up,\n     * but this does not affect bl_count[max_length]\n     */\n    overflow -= 2;\n  } while (overflow > 0);\n\n  /* Now recompute all bit lengths, scanning in increasing frequency.\n   * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all\n   * lengths instead of fixing only the wrong ones. This idea is taken\n   * from 'ar' written by Haruhiko Okumura.)\n   */\n  for (bits = max_length; bits !== 0; bits--) {\n    n = s.bl_count[bits];\n    while (n !== 0) {\n      m = s.heap[--h];\n      if (m > max_code) { continue; }\n      if (tree[m * 2 + 1]/*.Len*/ !== bits) {\n        // Trace((stderr,\"code %d bits %d->%d\\n\", m, tree[m].Len, bits));\n        s.opt_len += (bits - tree[m * 2 + 1]/*.Len*/) * tree[m * 2]/*.Freq*/;\n        tree[m * 2 + 1]/*.Len*/ = bits;\n      }\n      n--;\n    }\n  }\n}\n\n\n/* ===========================================================================\n * Generate the codes for a given tree and bit counts (which need not be\n * optimal).\n * IN assertion: the array bl_count contains the bit length statistics for\n * the given tree and the field len is set for all tree elements.\n * OUT assertion: the field code is set for all tree elements of non\n *     zero code length.\n */\nfunction gen_codes(tree, max_code, bl_count)\n//    ct_data *tree;             /* the tree to decorate */\n//    int max_code;              /* largest code with non zero frequency */\n//    ushf *bl_count;            /* number of codes at each bit length */\n{\n  var next_code = new Array(MAX_BITS + 1); /* next code value for each bit length */\n  var code = 0;              /* running code value */\n  var bits;                  /* bit index */\n  var n;                     /* code index */\n\n  /* The distribution counts are first used to generate the code values\n   * without bit reversal.\n   */\n  for (bits = 1; bits <= MAX_BITS; bits++) {\n    next_code[bits] = code = (code + bl_count[bits - 1]) << 1;\n  }\n  /* Check that the bit counts in bl_count are consistent. The last code\n   * must be all ones.\n   */\n  //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,\n  //        \"inconsistent bit counts\");\n  //Tracev((stderr,\"\\ngen_codes: max_code %d \", max_code));\n\n  for (n = 0;  n <= max_code; n++) {\n    var len = tree[n * 2 + 1]/*.Len*/;\n    if (len === 0) { continue; }\n    /* Now reverse the bits */\n    tree[n * 2]/*.Code*/ = bi_reverse(next_code[len]++, len);\n\n    //Tracecv(tree != static_ltree, (stderr,\"\\nn %3d %c l %2d c %4x (%x) \",\n    //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));\n  }\n}\n\n\n/* ===========================================================================\n * Initialize the various 'constant' tables.\n */\nfunction tr_static_init() {\n  var n;        /* iterates over tree elements */\n  var bits;     /* bit counter */\n  var length;   /* length value */\n  var code;     /* code value */\n  var dist;     /* distance index */\n  var bl_count = new Array(MAX_BITS + 1);\n  /* number of codes at each bit length for an optimal tree */\n\n  // do check in _tr_init()\n  //if (static_init_done) return;\n\n  /* For some embedded targets, global variables are not initialized: */\n/*#ifdef NO_INIT_GLOBAL_POINTERS\n  static_l_desc.static_tree = static_ltree;\n  static_l_desc.extra_bits = extra_lbits;\n  static_d_desc.static_tree = static_dtree;\n  static_d_desc.extra_bits = extra_dbits;\n  static_bl_desc.extra_bits = extra_blbits;\n#endif*/\n\n  /* Initialize the mapping length (0..255) -> length code (0..28) */\n  length = 0;\n  for (code = 0; code < LENGTH_CODES - 1; code++) {\n    base_length[code] = length;\n    for (n = 0; n < (1 << extra_lbits[code]); n++) {\n      _length_code[length++] = code;\n    }\n  }\n  //Assert (length == 256, \"tr_static_init: length != 256\");\n  /* Note that the length 255 (match length 258) can be represented\n   * in two different ways: code 284 + 5 bits or code 285, so we\n   * overwrite length_code[255] to use the best encoding:\n   */\n  _length_code[length - 1] = code;\n\n  /* Initialize the mapping dist (0..32K) -> dist code (0..29) */\n  dist = 0;\n  for (code = 0; code < 16; code++) {\n    base_dist[code] = dist;\n    for (n = 0; n < (1 << extra_dbits[code]); n++) {\n      _dist_code[dist++] = code;\n    }\n  }\n  //Assert (dist == 256, \"tr_static_init: dist != 256\");\n  dist >>= 7; /* from now on, all distances are divided by 128 */\n  for (; code < D_CODES; code++) {\n    base_dist[code] = dist << 7;\n    for (n = 0; n < (1 << (extra_dbits[code] - 7)); n++) {\n      _dist_code[256 + dist++] = code;\n    }\n  }\n  //Assert (dist == 256, \"tr_static_init: 256+dist != 512\");\n\n  /* Construct the codes of the static literal tree */\n  for (bits = 0; bits <= MAX_BITS; bits++) {\n    bl_count[bits] = 0;\n  }\n\n  n = 0;\n  while (n <= 143) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 8;\n    n++;\n    bl_count[8]++;\n  }\n  while (n <= 255) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 9;\n    n++;\n    bl_count[9]++;\n  }\n  while (n <= 279) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 7;\n    n++;\n    bl_count[7]++;\n  }\n  while (n <= 287) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 8;\n    n++;\n    bl_count[8]++;\n  }\n  /* Codes 286 and 287 do not exist, but we must include them in the\n   * tree construction to get a canonical Huffman tree (longest code\n   * all ones)\n   */\n  gen_codes(static_ltree, L_CODES + 1, bl_count);\n\n  /* The static distance tree is trivial: */\n  for (n = 0; n < D_CODES; n++) {\n    static_dtree[n * 2 + 1]/*.Len*/ = 5;\n    static_dtree[n * 2]/*.Code*/ = bi_reverse(n, 5);\n  }\n\n  // Now data ready and we can init static trees\n  static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS + 1, L_CODES, MAX_BITS);\n  static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0,          D_CODES, MAX_BITS);\n  static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0,         BL_CODES, MAX_BL_BITS);\n\n  //static_init_done = true;\n}\n\n\n/* ===========================================================================\n * Initialize a new block.\n */\nfunction init_block(s) {\n  var n; /* iterates over tree elements */\n\n  /* Initialize the trees. */\n  for (n = 0; n < L_CODES;  n++) { s.dyn_ltree[n * 2]/*.Freq*/ = 0; }\n  for (n = 0; n < D_CODES;  n++) { s.dyn_dtree[n * 2]/*.Freq*/ = 0; }\n  for (n = 0; n < BL_CODES; n++) { s.bl_tree[n * 2]/*.Freq*/ = 0; }\n\n  s.dyn_ltree[END_BLOCK * 2]/*.Freq*/ = 1;\n  s.opt_len = s.static_len = 0;\n  s.last_lit = s.matches = 0;\n}\n\n\n/* ===========================================================================\n * Flush the bit buffer and align the output on a byte boundary\n */\nfunction bi_windup(s)\n{\n  if (s.bi_valid > 8) {\n    put_short(s, s.bi_buf);\n  } else if (s.bi_valid > 0) {\n    //put_byte(s, (Byte)s->bi_buf);\n    s.pending_buf[s.pending++] = s.bi_buf;\n  }\n  s.bi_buf = 0;\n  s.bi_valid = 0;\n}\n\n/* ===========================================================================\n * Copy a stored block, storing first the length and its\n * one's complement if requested.\n */\nfunction copy_block(s, buf, len, header)\n//DeflateState *s;\n//charf    *buf;    /* the input data */\n//unsigned len;     /* its length */\n//int      header;  /* true if block header must be written */\n{\n  bi_windup(s);        /* align on byte boundary */\n\n  if (header) {\n    put_short(s, len);\n    put_short(s, ~len);\n  }\n//  while (len--) {\n//    put_byte(s, *buf++);\n//  }\n  utils.arraySet(s.pending_buf, s.window, buf, len, s.pending);\n  s.pending += len;\n}\n\n/* ===========================================================================\n * Compares to subtrees, using the tree depth as tie breaker when\n * the subtrees have equal frequency. This minimizes the worst case length.\n */\nfunction smaller(tree, n, m, depth) {\n  var _n2 = n * 2;\n  var _m2 = m * 2;\n  return (tree[_n2]/*.Freq*/ < tree[_m2]/*.Freq*/ ||\n         (tree[_n2]/*.Freq*/ === tree[_m2]/*.Freq*/ && depth[n] <= depth[m]));\n}\n\n/* ===========================================================================\n * Restore the heap property by moving down the tree starting at node k,\n * exchanging a node with the smallest of its two sons if necessary, stopping\n * when the heap property is re-established (each father smaller than its\n * two sons).\n */\nfunction pqdownheap(s, tree, k)\n//    deflate_state *s;\n//    ct_data *tree;  /* the tree to restore */\n//    int k;               /* node to move down */\n{\n  var v = s.heap[k];\n  var j = k << 1;  /* left son of k */\n  while (j <= s.heap_len) {\n    /* Set j to the smallest of the two sons: */\n    if (j < s.heap_len &&\n      smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {\n      j++;\n    }\n    /* Exit if v is smaller than both sons */\n    if (smaller(tree, v, s.heap[j], s.depth)) { break; }\n\n    /* Exchange v with the smallest son */\n    s.heap[k] = s.heap[j];\n    k = j;\n\n    /* And continue down the tree, setting j to the left son of k */\n    j <<= 1;\n  }\n  s.heap[k] = v;\n}\n\n\n// inlined manually\n// var SMALLEST = 1;\n\n/* ===========================================================================\n * Send the block data compressed using the given Huffman trees\n */\nfunction compress_block(s, ltree, dtree)\n//    deflate_state *s;\n//    const ct_data *ltree; /* literal tree */\n//    const ct_data *dtree; /* distance tree */\n{\n  var dist;           /* distance of matched string */\n  var lc;             /* match length or unmatched char (if dist == 0) */\n  var lx = 0;         /* running index in l_buf */\n  var code;           /* the code to send */\n  var extra;          /* number of extra bits to send */\n\n  if (s.last_lit !== 0) {\n    do {\n      dist = (s.pending_buf[s.d_buf + lx * 2] << 8) | (s.pending_buf[s.d_buf + lx * 2 + 1]);\n      lc = s.pending_buf[s.l_buf + lx];\n      lx++;\n\n      if (dist === 0) {\n        send_code(s, lc, ltree); /* send a literal byte */\n        //Tracecv(isgraph(lc), (stderr,\" '%c' \", lc));\n      } else {\n        /* Here, lc is the match length - MIN_MATCH */\n        code = _length_code[lc];\n        send_code(s, code + LITERALS + 1, ltree); /* send the length code */\n        extra = extra_lbits[code];\n        if (extra !== 0) {\n          lc -= base_length[code];\n          send_bits(s, lc, extra);       /* send the extra length bits */\n        }\n        dist--; /* dist is now the match distance - 1 */\n        code = d_code(dist);\n        //Assert (code < D_CODES, \"bad d_code\");\n\n        send_code(s, code, dtree);       /* send the distance code */\n        extra = extra_dbits[code];\n        if (extra !== 0) {\n          dist -= base_dist[code];\n          send_bits(s, dist, extra);   /* send the extra distance bits */\n        }\n      } /* literal or match pair ? */\n\n      /* Check that the overlay between pending_buf and d_buf+l_buf is ok: */\n      //Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,\n      //       \"pendingBuf overflow\");\n\n    } while (lx < s.last_lit);\n  }\n\n  send_code(s, END_BLOCK, ltree);\n}\n\n\n/* ===========================================================================\n * Construct one Huffman tree and assigns the code bit strings and lengths.\n * Update the total bit length for the current block.\n * IN assertion: the field freq is set for all tree elements.\n * OUT assertions: the fields len and code are set to the optimal bit length\n *     and corresponding code. The length opt_len is updated; static_len is\n *     also updated if stree is not null. The field max_code is set.\n */\nfunction build_tree(s, desc)\n//    deflate_state *s;\n//    tree_desc *desc; /* the tree descriptor */\n{\n  var tree     = desc.dyn_tree;\n  var stree    = desc.stat_desc.static_tree;\n  var has_stree = desc.stat_desc.has_stree;\n  var elems    = desc.stat_desc.elems;\n  var n, m;          /* iterate over heap elements */\n  var max_code = -1; /* largest code with non zero frequency */\n  var node;          /* new node being created */\n\n  /* Construct the initial heap, with least frequent element in\n   * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].\n   * heap[0] is not used.\n   */\n  s.heap_len = 0;\n  s.heap_max = HEAP_SIZE;\n\n  for (n = 0; n < elems; n++) {\n    if (tree[n * 2]/*.Freq*/ !== 0) {\n      s.heap[++s.heap_len] = max_code = n;\n      s.depth[n] = 0;\n\n    } else {\n      tree[n * 2 + 1]/*.Len*/ = 0;\n    }\n  }\n\n  /* The pkzip format requires that at least one distance code exists,\n   * and that at least one bit should be sent even if there is only one\n   * possible code. So to avoid special checks later on we force at least\n   * two codes of non zero frequency.\n   */\n  while (s.heap_len < 2) {\n    node = s.heap[++s.heap_len] = (max_code < 2 ? ++max_code : 0);\n    tree[node * 2]/*.Freq*/ = 1;\n    s.depth[node] = 0;\n    s.opt_len--;\n\n    if (has_stree) {\n      s.static_len -= stree[node * 2 + 1]/*.Len*/;\n    }\n    /* node is 0 or 1 so it does not have extra bits */\n  }\n  desc.max_code = max_code;\n\n  /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,\n   * establish sub-heaps of increasing lengths:\n   */\n  for (n = (s.heap_len >> 1/*int /2*/); n >= 1; n--) { pqdownheap(s, tree, n); }\n\n  /* Construct the Huffman tree by repeatedly combining the least two\n   * frequent nodes.\n   */\n  node = elems;              /* next internal node of the tree */\n  do {\n    //pqremove(s, tree, n);  /* n = node of least frequency */\n    /*** pqremove ***/\n    n = s.heap[1/*SMALLEST*/];\n    s.heap[1/*SMALLEST*/] = s.heap[s.heap_len--];\n    pqdownheap(s, tree, 1/*SMALLEST*/);\n    /***/\n\n    m = s.heap[1/*SMALLEST*/]; /* m = node of next least frequency */\n\n    s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */\n    s.heap[--s.heap_max] = m;\n\n    /* Create a new node father of n and m */\n    tree[node * 2]/*.Freq*/ = tree[n * 2]/*.Freq*/ + tree[m * 2]/*.Freq*/;\n    s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;\n    tree[n * 2 + 1]/*.Dad*/ = tree[m * 2 + 1]/*.Dad*/ = node;\n\n    /* and insert the new node in the heap */\n    s.heap[1/*SMALLEST*/] = node++;\n    pqdownheap(s, tree, 1/*SMALLEST*/);\n\n  } while (s.heap_len >= 2);\n\n  s.heap[--s.heap_max] = s.heap[1/*SMALLEST*/];\n\n  /* At this point, the fields freq and dad are set. We can now\n   * generate the bit lengths.\n   */\n  gen_bitlen(s, desc);\n\n  /* The field len is now set, we can generate the bit codes */\n  gen_codes(tree, max_code, s.bl_count);\n}\n\n\n/* ===========================================================================\n * Scan a literal or distance tree to determine the frequencies of the codes\n * in the bit length tree.\n */\nfunction scan_tree(s, tree, max_code)\n//    deflate_state *s;\n//    ct_data *tree;   /* the tree to be scanned */\n//    int max_code;    /* and its largest code of non zero frequency */\n{\n  var n;                     /* iterates over all tree elements */\n  var prevlen = -1;          /* last emitted length */\n  var curlen;                /* length of current code */\n\n  var nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */\n\n  var count = 0;             /* repeat count of the current code */\n  var max_count = 7;         /* max repeat count */\n  var min_count = 4;         /* min repeat count */\n\n  if (nextlen === 0) {\n    max_count = 138;\n    min_count = 3;\n  }\n  tree[(max_code + 1) * 2 + 1]/*.Len*/ = 0xffff; /* guard */\n\n  for (n = 0; n <= max_code; n++) {\n    curlen = nextlen;\n    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;\n\n    if (++count < max_count && curlen === nextlen) {\n      continue;\n\n    } else if (count < min_count) {\n      s.bl_tree[curlen * 2]/*.Freq*/ += count;\n\n    } else if (curlen !== 0) {\n\n      if (curlen !== prevlen) { s.bl_tree[curlen * 2]/*.Freq*/++; }\n      s.bl_tree[REP_3_6 * 2]/*.Freq*/++;\n\n    } else if (count <= 10) {\n      s.bl_tree[REPZ_3_10 * 2]/*.Freq*/++;\n\n    } else {\n      s.bl_tree[REPZ_11_138 * 2]/*.Freq*/++;\n    }\n\n    count = 0;\n    prevlen = curlen;\n\n    if (nextlen === 0) {\n      max_count = 138;\n      min_count = 3;\n\n    } else if (curlen === nextlen) {\n      max_count = 6;\n      min_count = 3;\n\n    } else {\n      max_count = 7;\n      min_count = 4;\n    }\n  }\n}\n\n\n/* ===========================================================================\n * Send a literal or distance tree in compressed form, using the codes in\n * bl_tree.\n */\nfunction send_tree(s, tree, max_code)\n//    deflate_state *s;\n//    ct_data *tree; /* the tree to be scanned */\n//    int max_code;       /* and its largest code of non zero frequency */\n{\n  var n;                     /* iterates over all tree elements */\n  var prevlen = -1;          /* last emitted length */\n  var curlen;                /* length of current code */\n\n  var nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */\n\n  var count = 0;             /* repeat count of the current code */\n  var max_count = 7;         /* max repeat count */\n  var min_count = 4;         /* min repeat count */\n\n  /* tree[max_code+1].Len = -1; */  /* guard already set */\n  if (nextlen === 0) {\n    max_count = 138;\n    min_count = 3;\n  }\n\n  for (n = 0; n <= max_code; n++) {\n    curlen = nextlen;\n    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;\n\n    if (++count < max_count && curlen === nextlen) {\n      continue;\n\n    } else if (count < min_count) {\n      do { send_code(s, curlen, s.bl_tree); } while (--count !== 0);\n\n    } else if (curlen !== 0) {\n      if (curlen !== prevlen) {\n        send_code(s, curlen, s.bl_tree);\n        count--;\n      }\n      //Assert(count >= 3 && count <= 6, \" 3_6?\");\n      send_code(s, REP_3_6, s.bl_tree);\n      send_bits(s, count - 3, 2);\n\n    } else if (count <= 10) {\n      send_code(s, REPZ_3_10, s.bl_tree);\n      send_bits(s, count - 3, 3);\n\n    } else {\n      send_code(s, REPZ_11_138, s.bl_tree);\n      send_bits(s, count - 11, 7);\n    }\n\n    count = 0;\n    prevlen = curlen;\n    if (nextlen === 0) {\n      max_count = 138;\n      min_count = 3;\n\n    } else if (curlen === nextlen) {\n      max_count = 6;\n      min_count = 3;\n\n    } else {\n      max_count = 7;\n      min_count = 4;\n    }\n  }\n}\n\n\n/* ===========================================================================\n * Construct the Huffman tree for the bit lengths and return the index in\n * bl_order of the last bit length code to send.\n */\nfunction build_bl_tree(s) {\n  var max_blindex;  /* index of last bit length code of non zero freq */\n\n  /* Determine the bit length frequencies for literal and distance trees */\n  scan_tree(s, s.dyn_ltree, s.l_desc.max_code);\n  scan_tree(s, s.dyn_dtree, s.d_desc.max_code);\n\n  /* Build the bit length tree: */\n  build_tree(s, s.bl_desc);\n  /* opt_len now includes the length of the tree representations, except\n   * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.\n   */\n\n  /* Determine the number of bit length codes to send. The pkzip format\n   * requires that at least 4 bit length codes be sent. (appnote.txt says\n   * 3 but the actual value used is 4.)\n   */\n  for (max_blindex = BL_CODES - 1; max_blindex >= 3; max_blindex--) {\n    if (s.bl_tree[bl_order[max_blindex] * 2 + 1]/*.Len*/ !== 0) {\n      break;\n    }\n  }\n  /* Update opt_len to include the bit length tree and counts */\n  s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;\n  //Tracev((stderr, \"\\ndyn trees: dyn %ld, stat %ld\",\n  //        s->opt_len, s->static_len));\n\n  return max_blindex;\n}\n\n\n/* ===========================================================================\n * Send the header for a block using dynamic Huffman trees: the counts, the\n * lengths of the bit length codes, the literal tree and the distance tree.\n * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.\n */\nfunction send_all_trees(s, lcodes, dcodes, blcodes)\n//    deflate_state *s;\n//    int lcodes, dcodes, blcodes; /* number of codes for each tree */\n{\n  var rank;                    /* index in bl_order */\n\n  //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, \"not enough codes\");\n  //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,\n  //        \"too many codes\");\n  //Tracev((stderr, \"\\nbl counts: \"));\n  send_bits(s, lcodes - 257, 5); /* not +255 as stated in appnote.txt */\n  send_bits(s, dcodes - 1,   5);\n  send_bits(s, blcodes - 4,  4); /* not -3 as stated in appnote.txt */\n  for (rank = 0; rank < blcodes; rank++) {\n    //Tracev((stderr, \"\\nbl code %2d \", bl_order[rank]));\n    send_bits(s, s.bl_tree[bl_order[rank] * 2 + 1]/*.Len*/, 3);\n  }\n  //Tracev((stderr, \"\\nbl tree: sent %ld\", s->bits_sent));\n\n  send_tree(s, s.dyn_ltree, lcodes - 1); /* literal tree */\n  //Tracev((stderr, \"\\nlit tree: sent %ld\", s->bits_sent));\n\n  send_tree(s, s.dyn_dtree, dcodes - 1); /* distance tree */\n  //Tracev((stderr, \"\\ndist tree: sent %ld\", s->bits_sent));\n}\n\n\n/* ===========================================================================\n * Check if the data type is TEXT or BINARY, using the following algorithm:\n * - TEXT if the two conditions below are satisfied:\n *    a) There are no non-portable control characters belonging to the\n *       \"black list\" (0..6, 14..25, 28..31).\n *    b) There is at least one printable character belonging to the\n *       \"white list\" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).\n * - BINARY otherwise.\n * - The following partially-portable control characters form a\n *   \"gray list\" that is ignored in this detection algorithm:\n *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).\n * IN assertion: the fields Freq of dyn_ltree are set.\n */\nfunction detect_data_type(s) {\n  /* black_mask is the bit mask of black-listed bytes\n   * set bits 0..6, 14..25, and 28..31\n   * 0xf3ffc07f = binary 11110011111111111100000001111111\n   */\n  var black_mask = 0xf3ffc07f;\n  var n;\n\n  /* Check for non-textual (\"black-listed\") bytes. */\n  for (n = 0; n <= 31; n++, black_mask >>>= 1) {\n    if ((black_mask & 1) && (s.dyn_ltree[n * 2]/*.Freq*/ !== 0)) {\n      return Z_BINARY;\n    }\n  }\n\n  /* Check for textual (\"white-listed\") bytes. */\n  if (s.dyn_ltree[9 * 2]/*.Freq*/ !== 0 || s.dyn_ltree[10 * 2]/*.Freq*/ !== 0 ||\n      s.dyn_ltree[13 * 2]/*.Freq*/ !== 0) {\n    return Z_TEXT;\n  }\n  for (n = 32; n < LITERALS; n++) {\n    if (s.dyn_ltree[n * 2]/*.Freq*/ !== 0) {\n      return Z_TEXT;\n    }\n  }\n\n  /* There are no \"black-listed\" or \"white-listed\" bytes:\n   * this stream either is empty or has tolerated (\"gray-listed\") bytes only.\n   */\n  return Z_BINARY;\n}\n\n\nvar static_init_done = false;\n\n/* ===========================================================================\n * Initialize the tree data structures for a new zlib stream.\n */\nfunction _tr_init(s)\n{\n\n  if (!static_init_done) {\n    tr_static_init();\n    static_init_done = true;\n  }\n\n  s.l_desc  = new TreeDesc(s.dyn_ltree, static_l_desc);\n  s.d_desc  = new TreeDesc(s.dyn_dtree, static_d_desc);\n  s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);\n\n  s.bi_buf = 0;\n  s.bi_valid = 0;\n\n  /* Initialize the first block of the first file: */\n  init_block(s);\n}\n\n\n/* ===========================================================================\n * Send a stored block\n */\nfunction _tr_stored_block(s, buf, stored_len, last)\n//DeflateState *s;\n//charf *buf;       /* input block */\n//ulg stored_len;   /* length of input block */\n//int last;         /* one if this is the last block for a file */\n{\n  send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3);    /* send block type */\n  copy_block(s, buf, stored_len, true); /* with header */\n}\n\n\n/* ===========================================================================\n * Send one empty static block to give enough lookahead for inflate.\n * This takes 10 bits, of which 7 may remain in the bit buffer.\n */\nfunction _tr_align(s) {\n  send_bits(s, STATIC_TREES << 1, 3);\n  send_code(s, END_BLOCK, static_ltree);\n  bi_flush(s);\n}\n\n\n/* ===========================================================================\n * Determine the best encoding for the current block: dynamic trees, static\n * trees or store, and output the encoded block to the zip file.\n */\nfunction _tr_flush_block(s, buf, stored_len, last)\n//DeflateState *s;\n//charf *buf;       /* input block, or NULL if too old */\n//ulg stored_len;   /* length of input block */\n//int last;         /* one if this is the last block for a file */\n{\n  var opt_lenb, static_lenb;  /* opt_len and static_len in bytes */\n  var max_blindex = 0;        /* index of last bit length code of non zero freq */\n\n  /* Build the Huffman trees unless a stored block is forced */\n  if (s.level > 0) {\n\n    /* Check if the file is binary or text */\n    if (s.strm.data_type === Z_UNKNOWN) {\n      s.strm.data_type = detect_data_type(s);\n    }\n\n    /* Construct the literal and distance trees */\n    build_tree(s, s.l_desc);\n    // Tracev((stderr, \"\\nlit data: dyn %ld, stat %ld\", s->opt_len,\n    //        s->static_len));\n\n    build_tree(s, s.d_desc);\n    // Tracev((stderr, \"\\ndist data: dyn %ld, stat %ld\", s->opt_len,\n    //        s->static_len));\n    /* At this point, opt_len and static_len are the total bit lengths of\n     * the compressed block data, excluding the tree representations.\n     */\n\n    /* Build the bit length tree for the above two trees, and get the index\n     * in bl_order of the last bit length code to send.\n     */\n    max_blindex = build_bl_tree(s);\n\n    /* Determine the best encoding. Compute the block lengths in bytes. */\n    opt_lenb = (s.opt_len + 3 + 7) >>> 3;\n    static_lenb = (s.static_len + 3 + 7) >>> 3;\n\n    // Tracev((stderr, \"\\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u \",\n    //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,\n    //        s->last_lit));\n\n    if (static_lenb <= opt_lenb) { opt_lenb = static_lenb; }\n\n  } else {\n    // Assert(buf != (char*)0, \"lost buf\");\n    opt_lenb = static_lenb = stored_len + 5; /* force a stored block */\n  }\n\n  if ((stored_len + 4 <= opt_lenb) && (buf !== -1)) {\n    /* 4: two words for the lengths */\n\n    /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.\n     * Otherwise we can't have processed more than WSIZE input bytes since\n     * the last block flush, because compression would have been\n     * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to\n     * transform a block into a stored block.\n     */\n    _tr_stored_block(s, buf, stored_len, last);\n\n  } else if (s.strategy === Z_FIXED || static_lenb === opt_lenb) {\n\n    send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);\n    compress_block(s, static_ltree, static_dtree);\n\n  } else {\n    send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);\n    send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);\n    compress_block(s, s.dyn_ltree, s.dyn_dtree);\n  }\n  // Assert (s->compressed_len == s->bits_sent, \"bad compressed size\");\n  /* The above check is made mod 2^32, for files larger than 512 MB\n   * and uLong implemented on 32 bits.\n   */\n  init_block(s);\n\n  if (last) {\n    bi_windup(s);\n  }\n  // Tracev((stderr,\"\\ncomprlen %lu(%lu) \", s->compressed_len>>3,\n  //       s->compressed_len-7*last));\n}\n\n/* ===========================================================================\n * Save the match info and tally the frequency counts. Return true if\n * the current block must be flushed.\n */\nfunction _tr_tally(s, dist, lc)\n//    deflate_state *s;\n//    unsigned dist;  /* distance of matched string */\n//    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */\n{\n  //var out_length, in_length, dcode;\n\n  s.pending_buf[s.d_buf + s.last_lit * 2]     = (dist >>> 8) & 0xff;\n  s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist & 0xff;\n\n  s.pending_buf[s.l_buf + s.last_lit] = lc & 0xff;\n  s.last_lit++;\n\n  if (dist === 0) {\n    /* lc is the unmatched char */\n    s.dyn_ltree[lc * 2]/*.Freq*/++;\n  } else {\n    s.matches++;\n    /* Here, lc is the match length - MIN_MATCH */\n    dist--;             /* dist = match distance - 1 */\n    //Assert((ush)dist < (ush)MAX_DIST(s) &&\n    //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&\n    //       (ush)d_code(dist) < (ush)D_CODES,  \"_tr_tally: bad match\");\n\n    s.dyn_ltree[(_length_code[lc] + LITERALS + 1) * 2]/*.Freq*/++;\n    s.dyn_dtree[d_code(dist) * 2]/*.Freq*/++;\n  }\n\n// (!) This block is disabled in zlib defaults,\n// don't enable it for binary compatibility\n\n//#ifdef TRUNCATE_BLOCK\n//  /* Try to guess if it is profitable to stop the current block here */\n//  if ((s.last_lit & 0x1fff) === 0 && s.level > 2) {\n//    /* Compute an upper bound for the compressed length */\n//    out_length = s.last_lit*8;\n//    in_length = s.strstart - s.block_start;\n//\n//    for (dcode = 0; dcode < D_CODES; dcode++) {\n//      out_length += s.dyn_dtree[dcode*2]/*.Freq*/ * (5 + extra_dbits[dcode]);\n//    }\n//    out_length >>>= 3;\n//    //Tracev((stderr,\"\\nlast_lit %u, in %ld, out ~%ld(%ld%%) \",\n//    //       s->last_lit, in_length, out_length,\n//    //       100L - out_length*100L/in_length));\n//    if (s.matches < (s.last_lit>>1)/*int /2*/ && out_length < (in_length>>1)/*int /2*/) {\n//      return true;\n//    }\n//  }\n//#endif\n\n  return (s.last_lit === s.lit_bufsize - 1);\n  /* We avoid equality with lit_bufsize because of wraparound at 64K\n   * on 16 bit machines and because stored blocks are restricted to\n   * 64K-1 bytes.\n   */\n}\n\nexports._tr_init  = _tr_init;\nexports._tr_stored_block = _tr_stored_block;\nexports._tr_flush_block  = _tr_flush_block;\nexports._tr_tally = _tr_tally;\nexports._tr_align = _tr_align;\n\n\n//# sourceURL=webpack://HicStraw/./node_modules/pako/lib/zlib/trees.js?");/***/},/***/"./node_modules/pako/lib/zlib/zstream.js":/*!***********************************************!*\
  !*** ./node_modules/pako/lib/zlib/zstream.js ***!
  \***********************************************/ /*! no static exports found */ /***/function node_modulesPakoLibZlibZstreamJs(module,exports,__webpack_require__){"use strict";eval("\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nfunction ZStream() {\n  /* next input byte */\n  this.input = null; // JS specific, because we have no pointers\n  this.next_in = 0;\n  /* number of bytes available at input */\n  this.avail_in = 0;\n  /* total number of input bytes read so far */\n  this.total_in = 0;\n  /* next output byte should be put there */\n  this.output = null; // JS specific, because we have no pointers\n  this.next_out = 0;\n  /* remaining free space at output */\n  this.avail_out = 0;\n  /* total number of bytes output so far */\n  this.total_out = 0;\n  /* last error message, NULL if no error */\n  this.msg = ''/*Z_NULL*/;\n  /* not visible by applications */\n  this.state = null;\n  /* best guess about the data type: binary or text */\n  this.data_type = 2/*Z_UNKNOWN*/;\n  /* adler32 value of the uncompressed data */\n  this.adler = 0;\n}\n\nmodule.exports = ZStream;\n\n\n//# sourceURL=webpack://HicStraw/./node_modules/pako/lib/zlib/zstream.js?");/***/},/***/"./node_modules/process-nextick-args/index.js":/*!****************************************************!*\
  !*** ./node_modules/process-nextick-args/index.js ***!
  \****************************************************/ /*! no static exports found */ /***/function node_modulesProcessNextickArgsIndexJs(module,exports,__webpack_require__){"use strict";eval("/* WEBPACK VAR INJECTION */(function(process) {\n\nif (!process.version ||\n    process.version.indexOf('v0.') === 0 ||\n    process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {\n  module.exports = { nextTick: nextTick };\n} else {\n  module.exports = process\n}\n\nfunction nextTick(fn, arg1, arg2, arg3) {\n  if (typeof fn !== 'function') {\n    throw new TypeError('\"callback\" argument must be a function');\n  }\n  var len = arguments.length;\n  var args, i;\n  switch (len) {\n  case 0:\n  case 1:\n    return process.nextTick(fn);\n  case 2:\n    return process.nextTick(function afterTickOne() {\n      fn.call(null, arg1);\n    });\n  case 3:\n    return process.nextTick(function afterTickTwo() {\n      fn.call(null, arg1, arg2);\n    });\n  case 4:\n    return process.nextTick(function afterTickThree() {\n      fn.call(null, arg1, arg2, arg3);\n    });\n  default:\n    args = new Array(len - 1);\n    i = 0;\n    while (i < args.length) {\n      args[i++] = arguments[i];\n    }\n    return process.nextTick(function afterTick() {\n      fn.apply(null, args);\n    });\n  }\n}\n\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../process/browser.js */ \"./node_modules/process/browser.js\")))\n\n//# sourceURL=webpack://HicStraw/./node_modules/process-nextick-args/index.js?");/***/},/***/"./node_modules/process/browser.js":/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/ /*! no static exports found */ /***/function node_modulesProcessBrowserJs(module,exports){eval("// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n\n//# sourceURL=webpack://HicStraw/./node_modules/process/browser.js?");/***/},/***/"./node_modules/readable-stream/duplex-browser.js":/*!********************************************************!*\
  !*** ./node_modules/readable-stream/duplex-browser.js ***!
  \********************************************************/ /*! no static exports found */ /***/function node_modulesReadableStreamDuplexBrowserJs(module,exports,__webpack_require__){eval("module.exports = __webpack_require__(/*! ./lib/_stream_duplex.js */ \"./node_modules/readable-stream/lib/_stream_duplex.js\");\n\n\n//# sourceURL=webpack://HicStraw/./node_modules/readable-stream/duplex-browser.js?");/***/},/***/"./node_modules/readable-stream/lib/_stream_duplex.js":/*!************************************************************!*\
  !*** ./node_modules/readable-stream/lib/_stream_duplex.js ***!
  \************************************************************/ /*! no static exports found */ /***/function node_modulesReadableStreamLib_stream_duplexJs(module,exports,__webpack_require__){"use strict";eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// a duplex stream is just a stream that is both readable and writable.\n// Since JS doesn't have multiple prototypal inheritance, this class\n// prototypally inherits from Readable, and then parasitically from\n// Writable.\n\n\n\n/*<replacement>*/\n\nvar pna = __webpack_require__(/*! process-nextick-args */ \"./node_modules/process-nextick-args/index.js\");\n/*</replacement>*/\n\n/*<replacement>*/\nvar objectKeys = Object.keys || function (obj) {\n  var keys = [];\n  for (var key in obj) {\n    keys.push(key);\n  }return keys;\n};\n/*</replacement>*/\n\nmodule.exports = Duplex;\n\n/*<replacement>*/\nvar util = __webpack_require__(/*! core-util-is */ \"./node_modules/core-util-is/lib/util.js\");\nutil.inherits = __webpack_require__(/*! inherits */ \"./node_modules/inherits/inherits_browser.js\");\n/*</replacement>*/\n\nvar Readable = __webpack_require__(/*! ./_stream_readable */ \"./node_modules/readable-stream/lib/_stream_readable.js\");\nvar Writable = __webpack_require__(/*! ./_stream_writable */ \"./node_modules/readable-stream/lib/_stream_writable.js\");\n\nutil.inherits(Duplex, Readable);\n\n{\n  // avoid scope creep, the keys array can then be collected\n  var keys = objectKeys(Writable.prototype);\n  for (var v = 0; v < keys.length; v++) {\n    var method = keys[v];\n    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];\n  }\n}\n\nfunction Duplex(options) {\n  if (!(this instanceof Duplex)) return new Duplex(options);\n\n  Readable.call(this, options);\n  Writable.call(this, options);\n\n  if (options && options.readable === false) this.readable = false;\n\n  if (options && options.writable === false) this.writable = false;\n\n  this.allowHalfOpen = true;\n  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;\n\n  this.once('end', onend);\n}\n\nObject.defineProperty(Duplex.prototype, 'writableHighWaterMark', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function () {\n    return this._writableState.highWaterMark;\n  }\n});\n\n// the no-half-open enforcer\nfunction onend() {\n  // if we allow half-open state, or if the writable side ended,\n  // then we're ok.\n  if (this.allowHalfOpen || this._writableState.ended) return;\n\n  // no more data can be written.\n  // But allow more writes to happen in this tick.\n  pna.nextTick(onEndNT, this);\n}\n\nfunction onEndNT(self) {\n  self.end();\n}\n\nObject.defineProperty(Duplex.prototype, 'destroyed', {\n  get: function () {\n    if (this._readableState === undefined || this._writableState === undefined) {\n      return false;\n    }\n    return this._readableState.destroyed && this._writableState.destroyed;\n  },\n  set: function (value) {\n    // we ignore the value if the stream\n    // has not been initialized yet\n    if (this._readableState === undefined || this._writableState === undefined) {\n      return;\n    }\n\n    // backward compatibility, the user is explicitly\n    // managing destroyed\n    this._readableState.destroyed = value;\n    this._writableState.destroyed = value;\n  }\n});\n\nDuplex.prototype._destroy = function (err, cb) {\n  this.push(null);\n  this.end();\n\n  pna.nextTick(cb, err);\n};\n\n//# sourceURL=webpack://HicStraw/./node_modules/readable-stream/lib/_stream_duplex.js?");/***/},/***/"./node_modules/readable-stream/lib/_stream_passthrough.js":/*!*****************************************************************!*\
  !*** ./node_modules/readable-stream/lib/_stream_passthrough.js ***!
  \*****************************************************************/ /*! no static exports found */ /***/function node_modulesReadableStreamLib_stream_passthroughJs(module,exports,__webpack_require__){"use strict";eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// a passthrough stream.\n// basically just the most minimal sort of Transform stream.\n// Every written chunk gets output as-is.\n\n\n\nmodule.exports = PassThrough;\n\nvar Transform = __webpack_require__(/*! ./_stream_transform */ \"./node_modules/readable-stream/lib/_stream_transform.js\");\n\n/*<replacement>*/\nvar util = __webpack_require__(/*! core-util-is */ \"./node_modules/core-util-is/lib/util.js\");\nutil.inherits = __webpack_require__(/*! inherits */ \"./node_modules/inherits/inherits_browser.js\");\n/*</replacement>*/\n\nutil.inherits(PassThrough, Transform);\n\nfunction PassThrough(options) {\n  if (!(this instanceof PassThrough)) return new PassThrough(options);\n\n  Transform.call(this, options);\n}\n\nPassThrough.prototype._transform = function (chunk, encoding, cb) {\n  cb(null, chunk);\n};\n\n//# sourceURL=webpack://HicStraw/./node_modules/readable-stream/lib/_stream_passthrough.js?");/***/},/***/"./node_modules/readable-stream/lib/_stream_readable.js":/*!**************************************************************!*\
  !*** ./node_modules/readable-stream/lib/_stream_readable.js ***!
  \**************************************************************/ /*! no static exports found */ /***/function node_modulesReadableStreamLib_stream_readableJs(module,exports,__webpack_require__){"use strict";eval("/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\n/*<replacement>*/\n\nvar pna = __webpack_require__(/*! process-nextick-args */ \"./node_modules/process-nextick-args/index.js\");\n/*</replacement>*/\n\nmodule.exports = Readable;\n\n/*<replacement>*/\nvar isArray = __webpack_require__(/*! isarray */ \"./node_modules/isarray/index.js\");\n/*</replacement>*/\n\n/*<replacement>*/\nvar Duplex;\n/*</replacement>*/\n\nReadable.ReadableState = ReadableState;\n\n/*<replacement>*/\nvar EE = __webpack_require__(/*! events */ \"./node_modules/events/events.js\").EventEmitter;\n\nvar EElistenerCount = function (emitter, type) {\n  return emitter.listeners(type).length;\n};\n/*</replacement>*/\n\n/*<replacement>*/\nvar Stream = __webpack_require__(/*! ./internal/streams/stream */ \"./node_modules/readable-stream/lib/internal/streams/stream-browser.js\");\n/*</replacement>*/\n\n/*<replacement>*/\n\nvar Buffer = __webpack_require__(/*! safe-buffer */ \"./node_modules/safe-buffer/index.js\").Buffer;\nvar OurUint8Array = global.Uint8Array || function () {};\nfunction _uint8ArrayToBuffer(chunk) {\n  return Buffer.from(chunk);\n}\nfunction _isUint8Array(obj) {\n  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;\n}\n\n/*</replacement>*/\n\n/*<replacement>*/\nvar util = __webpack_require__(/*! core-util-is */ \"./node_modules/core-util-is/lib/util.js\");\nutil.inherits = __webpack_require__(/*! inherits */ \"./node_modules/inherits/inherits_browser.js\");\n/*</replacement>*/\n\n/*<replacement>*/\nvar debugUtil = __webpack_require__(/*! util */ 0);\nvar debug = void 0;\nif (debugUtil && debugUtil.debuglog) {\n  debug = debugUtil.debuglog('stream');\n} else {\n  debug = function () {};\n}\n/*</replacement>*/\n\nvar BufferList = __webpack_require__(/*! ./internal/streams/BufferList */ \"./node_modules/readable-stream/lib/internal/streams/BufferList.js\");\nvar destroyImpl = __webpack_require__(/*! ./internal/streams/destroy */ \"./node_modules/readable-stream/lib/internal/streams/destroy.js\");\nvar StringDecoder;\n\nutil.inherits(Readable, Stream);\n\nvar kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];\n\nfunction prependListener(emitter, event, fn) {\n  // Sadly this is not cacheable as some libraries bundle their own\n  // event emitter implementation with them.\n  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn);\n\n  // This is a hack to make sure that our error handler is attached before any\n  // userland ones.  NEVER DO THIS. This is here only because this code needs\n  // to continue to work with older versions of Node.js that do not include\n  // the prependListener() method. The goal is to eventually remove this hack.\n  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];\n}\n\nfunction ReadableState(options, stream) {\n  Duplex = Duplex || __webpack_require__(/*! ./_stream_duplex */ \"./node_modules/readable-stream/lib/_stream_duplex.js\");\n\n  options = options || {};\n\n  // Duplex streams are both readable and writable, but share\n  // the same options object.\n  // However, some cases require setting options to different\n  // values for the readable and the writable sides of the duplex stream.\n  // These options can be provided separately as readableXXX and writableXXX.\n  var isDuplex = stream instanceof Duplex;\n\n  // object stream flag. Used to make read(n) ignore n and to\n  // make all the buffer merging and length checks go away\n  this.objectMode = !!options.objectMode;\n\n  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode;\n\n  // the point at which it stops calling _read() to fill the buffer\n  // Note: 0 is a valid value, means \"don't call _read preemptively ever\"\n  var hwm = options.highWaterMark;\n  var readableHwm = options.readableHighWaterMark;\n  var defaultHwm = this.objectMode ? 16 : 16 * 1024;\n\n  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (readableHwm || readableHwm === 0)) this.highWaterMark = readableHwm;else this.highWaterMark = defaultHwm;\n\n  // cast to ints.\n  this.highWaterMark = Math.floor(this.highWaterMark);\n\n  // A linked list is used to store data chunks instead of an array because the\n  // linked list can remove elements from the beginning faster than\n  // array.shift()\n  this.buffer = new BufferList();\n  this.length = 0;\n  this.pipes = null;\n  this.pipesCount = 0;\n  this.flowing = null;\n  this.ended = false;\n  this.endEmitted = false;\n  this.reading = false;\n\n  // a flag to be able to tell if the event 'readable'/'data' is emitted\n  // immediately, or on a later tick.  We set this to true at first, because\n  // any actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first read call.\n  this.sync = true;\n\n  // whenever we return null, then we set a flag to say\n  // that we're awaiting a 'readable' event emission.\n  this.needReadable = false;\n  this.emittedReadable = false;\n  this.readableListening = false;\n  this.resumeScheduled = false;\n\n  // has it been destroyed\n  this.destroyed = false;\n\n  // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n  this.defaultEncoding = options.defaultEncoding || 'utf8';\n\n  // the number of writers that are awaiting a drain event in .pipe()s\n  this.awaitDrain = 0;\n\n  // if true, a maybeReadMore has been scheduled\n  this.readingMore = false;\n\n  this.decoder = null;\n  this.encoding = null;\n  if (options.encoding) {\n    if (!StringDecoder) StringDecoder = __webpack_require__(/*! string_decoder/ */ \"./node_modules/string_decoder/lib/string_decoder.js\").StringDecoder;\n    this.decoder = new StringDecoder(options.encoding);\n    this.encoding = options.encoding;\n  }\n}\n\nfunction Readable(options) {\n  Duplex = Duplex || __webpack_require__(/*! ./_stream_duplex */ \"./node_modules/readable-stream/lib/_stream_duplex.js\");\n\n  if (!(this instanceof Readable)) return new Readable(options);\n\n  this._readableState = new ReadableState(options, this);\n\n  // legacy\n  this.readable = true;\n\n  if (options) {\n    if (typeof options.read === 'function') this._read = options.read;\n\n    if (typeof options.destroy === 'function') this._destroy = options.destroy;\n  }\n\n  Stream.call(this);\n}\n\nObject.defineProperty(Readable.prototype, 'destroyed', {\n  get: function () {\n    if (this._readableState === undefined) {\n      return false;\n    }\n    return this._readableState.destroyed;\n  },\n  set: function (value) {\n    // we ignore the value if the stream\n    // has not been initialized yet\n    if (!this._readableState) {\n      return;\n    }\n\n    // backward compatibility, the user is explicitly\n    // managing destroyed\n    this._readableState.destroyed = value;\n  }\n});\n\nReadable.prototype.destroy = destroyImpl.destroy;\nReadable.prototype._undestroy = destroyImpl.undestroy;\nReadable.prototype._destroy = function (err, cb) {\n  this.push(null);\n  cb(err);\n};\n\n// Manually shove something into the read() buffer.\n// This returns true if the highWaterMark has not been hit yet,\n// similar to how Writable.write() returns true if you should\n// write() some more.\nReadable.prototype.push = function (chunk, encoding) {\n  var state = this._readableState;\n  var skipChunkCheck;\n\n  if (!state.objectMode) {\n    if (typeof chunk === 'string') {\n      encoding = encoding || state.defaultEncoding;\n      if (encoding !== state.encoding) {\n        chunk = Buffer.from(chunk, encoding);\n        encoding = '';\n      }\n      skipChunkCheck = true;\n    }\n  } else {\n    skipChunkCheck = true;\n  }\n\n  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);\n};\n\n// Unshift should *always* be something directly out of read()\nReadable.prototype.unshift = function (chunk) {\n  return readableAddChunk(this, chunk, null, true, false);\n};\n\nfunction readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {\n  var state = stream._readableState;\n  if (chunk === null) {\n    state.reading = false;\n    onEofChunk(stream, state);\n  } else {\n    var er;\n    if (!skipChunkCheck) er = chunkInvalid(state, chunk);\n    if (er) {\n      stream.emit('error', er);\n    } else if (state.objectMode || chunk && chunk.length > 0) {\n      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {\n        chunk = _uint8ArrayToBuffer(chunk);\n      }\n\n      if (addToFront) {\n        if (state.endEmitted) stream.emit('error', new Error('stream.unshift() after end event'));else addChunk(stream, state, chunk, true);\n      } else if (state.ended) {\n        stream.emit('error', new Error('stream.push() after EOF'));\n      } else {\n        state.reading = false;\n        if (state.decoder && !encoding) {\n          chunk = state.decoder.write(chunk);\n          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);\n        } else {\n          addChunk(stream, state, chunk, false);\n        }\n      }\n    } else if (!addToFront) {\n      state.reading = false;\n    }\n  }\n\n  return needMoreData(state);\n}\n\nfunction addChunk(stream, state, chunk, addToFront) {\n  if (state.flowing && state.length === 0 && !state.sync) {\n    stream.emit('data', chunk);\n    stream.read(0);\n  } else {\n    // update the buffer info.\n    state.length += state.objectMode ? 1 : chunk.length;\n    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);\n\n    if (state.needReadable) emitReadable(stream);\n  }\n  maybeReadMore(stream, state);\n}\n\nfunction chunkInvalid(state, chunk) {\n  var er;\n  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {\n    er = new TypeError('Invalid non-string/buffer chunk');\n  }\n  return er;\n}\n\n// if it's past the high water mark, we can push in some more.\n// Also, if we have no data yet, we can stand some\n// more bytes.  This is to work around cases where hwm=0,\n// such as the repl.  Also, if the push() triggered a\n// readable event, and the user called read(largeNumber) such that\n// needReadable was set, then we ought to push more, so that another\n// 'readable' event will be triggered.\nfunction needMoreData(state) {\n  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);\n}\n\nReadable.prototype.isPaused = function () {\n  return this._readableState.flowing === false;\n};\n\n// backwards compatibility.\nReadable.prototype.setEncoding = function (enc) {\n  if (!StringDecoder) StringDecoder = __webpack_require__(/*! string_decoder/ */ \"./node_modules/string_decoder/lib/string_decoder.js\").StringDecoder;\n  this._readableState.decoder = new StringDecoder(enc);\n  this._readableState.encoding = enc;\n  return this;\n};\n\n// Don't raise the hwm > 8MB\nvar MAX_HWM = 0x800000;\nfunction computeNewHighWaterMark(n) {\n  if (n >= MAX_HWM) {\n    n = MAX_HWM;\n  } else {\n    // Get the next highest power of 2 to prevent increasing hwm excessively in\n    // tiny amounts\n    n--;\n    n |= n >>> 1;\n    n |= n >>> 2;\n    n |= n >>> 4;\n    n |= n >>> 8;\n    n |= n >>> 16;\n    n++;\n  }\n  return n;\n}\n\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction howMuchToRead(n, state) {\n  if (n <= 0 || state.length === 0 && state.ended) return 0;\n  if (state.objectMode) return 1;\n  if (n !== n) {\n    // Only flow one buffer at a time\n    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;\n  }\n  // If we're asking for more than the current hwm, then raise the hwm.\n  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);\n  if (n <= state.length) return n;\n  // Don't have enough\n  if (!state.ended) {\n    state.needReadable = true;\n    return 0;\n  }\n  return state.length;\n}\n\n// you can override either this method, or the async _read(n) below.\nReadable.prototype.read = function (n) {\n  debug('read', n);\n  n = parseInt(n, 10);\n  var state = this._readableState;\n  var nOrig = n;\n\n  if (n !== 0) state.emittedReadable = false;\n\n  // if we're doing read(0) to trigger a readable event, but we\n  // already have a bunch of data in the buffer, then just trigger\n  // the 'readable' event and move on.\n  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {\n    debug('read: emitReadable', state.length, state.ended);\n    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);\n    return null;\n  }\n\n  n = howMuchToRead(n, state);\n\n  // if we've ended, and we're now clear, then finish it up.\n  if (n === 0 && state.ended) {\n    if (state.length === 0) endReadable(this);\n    return null;\n  }\n\n  // All the actual chunk generation logic needs to be\n  // *below* the call to _read.  The reason is that in certain\n  // synthetic stream cases, such as passthrough streams, _read\n  // may be a completely synchronous operation which may change\n  // the state of the read buffer, providing enough data when\n  // before there was *not* enough.\n  //\n  // So, the steps are:\n  // 1. Figure out what the state of things will be after we do\n  // a read from the buffer.\n  //\n  // 2. If that resulting state will trigger a _read, then call _read.\n  // Note that this may be asynchronous, or synchronous.  Yes, it is\n  // deeply ugly to write APIs this way, but that still doesn't mean\n  // that the Readable class should behave improperly, as streams are\n  // designed to be sync/async agnostic.\n  // Take note if the _read call is sync or async (ie, if the read call\n  // has returned yet), so that we know whether or not it's safe to emit\n  // 'readable' etc.\n  //\n  // 3. Actually pull the requested chunks out of the buffer and return.\n\n  // if we need a readable event, then we need to do some reading.\n  var doRead = state.needReadable;\n  debug('need readable', doRead);\n\n  // if we currently have less than the highWaterMark, then also read some\n  if (state.length === 0 || state.length - n < state.highWaterMark) {\n    doRead = true;\n    debug('length less than watermark', doRead);\n  }\n\n  // however, if we've ended, then there's no point, and if we're already\n  // reading, then it's unnecessary.\n  if (state.ended || state.reading) {\n    doRead = false;\n    debug('reading or ended', doRead);\n  } else if (doRead) {\n    debug('do read');\n    state.reading = true;\n    state.sync = true;\n    // if the length is currently zero, then we *need* a readable event.\n    if (state.length === 0) state.needReadable = true;\n    // call internal read method\n    this._read(state.highWaterMark);\n    state.sync = false;\n    // If _read pushed data synchronously, then `reading` will be false,\n    // and we need to re-evaluate how much data we can return to the user.\n    if (!state.reading) n = howMuchToRead(nOrig, state);\n  }\n\n  var ret;\n  if (n > 0) ret = fromList(n, state);else ret = null;\n\n  if (ret === null) {\n    state.needReadable = true;\n    n = 0;\n  } else {\n    state.length -= n;\n  }\n\n  if (state.length === 0) {\n    // If we have nothing in the buffer, then we want to know\n    // as soon as we *do* get something into the buffer.\n    if (!state.ended) state.needReadable = true;\n\n    // If we tried to read() past the EOF, then emit end on the next tick.\n    if (nOrig !== n && state.ended) endReadable(this);\n  }\n\n  if (ret !== null) this.emit('data', ret);\n\n  return ret;\n};\n\nfunction onEofChunk(stream, state) {\n  if (state.ended) return;\n  if (state.decoder) {\n    var chunk = state.decoder.end();\n    if (chunk && chunk.length) {\n      state.buffer.push(chunk);\n      state.length += state.objectMode ? 1 : chunk.length;\n    }\n  }\n  state.ended = true;\n\n  // emit 'readable' now to make sure it gets picked up.\n  emitReadable(stream);\n}\n\n// Don't emit readable right away in sync mode, because this can trigger\n// another read() call => stack overflow.  This way, it might trigger\n// a nextTick recursion warning, but that's not so bad.\nfunction emitReadable(stream) {\n  var state = stream._readableState;\n  state.needReadable = false;\n  if (!state.emittedReadable) {\n    debug('emitReadable', state.flowing);\n    state.emittedReadable = true;\n    if (state.sync) pna.nextTick(emitReadable_, stream);else emitReadable_(stream);\n  }\n}\n\nfunction emitReadable_(stream) {\n  debug('emit readable');\n  stream.emit('readable');\n  flow(stream);\n}\n\n// at this point, the user has presumably seen the 'readable' event,\n// and called read() to consume some data.  that may have triggered\n// in turn another _read(n) call, in which case reading = true if\n// it's in progress.\n// However, if we're not ended, or reading, and the length < hwm,\n// then go ahead and try to read some more preemptively.\nfunction maybeReadMore(stream, state) {\n  if (!state.readingMore) {\n    state.readingMore = true;\n    pna.nextTick(maybeReadMore_, stream, state);\n  }\n}\n\nfunction maybeReadMore_(stream, state) {\n  var len = state.length;\n  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {\n    debug('maybeReadMore read 0');\n    stream.read(0);\n    if (len === state.length)\n      // didn't get any data, stop spinning.\n      break;else len = state.length;\n  }\n  state.readingMore = false;\n}\n\n// abstract method.  to be overridden in specific implementation classes.\n// call cb(er, data) where data is <= n in length.\n// for virtual (non-string, non-buffer) streams, \"length\" is somewhat\n// arbitrary, and perhaps not very meaningful.\nReadable.prototype._read = function (n) {\n  this.emit('error', new Error('_read() is not implemented'));\n};\n\nReadable.prototype.pipe = function (dest, pipeOpts) {\n  var src = this;\n  var state = this._readableState;\n\n  switch (state.pipesCount) {\n    case 0:\n      state.pipes = dest;\n      break;\n    case 1:\n      state.pipes = [state.pipes, dest];\n      break;\n    default:\n      state.pipes.push(dest);\n      break;\n  }\n  state.pipesCount += 1;\n  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);\n\n  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;\n\n  var endFn = doEnd ? onend : unpipe;\n  if (state.endEmitted) pna.nextTick(endFn);else src.once('end', endFn);\n\n  dest.on('unpipe', onunpipe);\n  function onunpipe(readable, unpipeInfo) {\n    debug('onunpipe');\n    if (readable === src) {\n      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {\n        unpipeInfo.hasUnpiped = true;\n        cleanup();\n      }\n    }\n  }\n\n  function onend() {\n    debug('onend');\n    dest.end();\n  }\n\n  // when the dest drains, it reduces the awaitDrain counter\n  // on the source.  This would be more elegant with a .once()\n  // handler in flow(), but adding and removing repeatedly is\n  // too slow.\n  var ondrain = pipeOnDrain(src);\n  dest.on('drain', ondrain);\n\n  var cleanedUp = false;\n  function cleanup() {\n    debug('cleanup');\n    // cleanup event handlers once the pipe is broken\n    dest.removeListener('close', onclose);\n    dest.removeListener('finish', onfinish);\n    dest.removeListener('drain', ondrain);\n    dest.removeListener('error', onerror);\n    dest.removeListener('unpipe', onunpipe);\n    src.removeListener('end', onend);\n    src.removeListener('end', unpipe);\n    src.removeListener('data', ondata);\n\n    cleanedUp = true;\n\n    // if the reader is waiting for a drain event from this\n    // specific writer, then it would cause it to never start\n    // flowing again.\n    // So, if this is awaiting a drain, then we just call it now.\n    // If we don't know, then assume that we are waiting for one.\n    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();\n  }\n\n  // If the user pushes more data while we're writing to dest then we'll end up\n  // in ondata again. However, we only want to increase awaitDrain once because\n  // dest will only emit one 'drain' event for the multiple writes.\n  // => Introduce a guard on increasing awaitDrain.\n  var increasedAwaitDrain = false;\n  src.on('data', ondata);\n  function ondata(chunk) {\n    debug('ondata');\n    increasedAwaitDrain = false;\n    var ret = dest.write(chunk);\n    if (false === ret && !increasedAwaitDrain) {\n      // If the user unpiped during `dest.write()`, it is possible\n      // to get stuck in a permanently paused state if that write\n      // also returned false.\n      // => Check whether `dest` is still a piping destination.\n      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {\n        debug('false write response, pause', src._readableState.awaitDrain);\n        src._readableState.awaitDrain++;\n        increasedAwaitDrain = true;\n      }\n      src.pause();\n    }\n  }\n\n  // if the dest has an error, then stop piping into it.\n  // however, don't suppress the throwing behavior for this.\n  function onerror(er) {\n    debug('onerror', er);\n    unpipe();\n    dest.removeListener('error', onerror);\n    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);\n  }\n\n  // Make sure our error handler is attached before userland ones.\n  prependListener(dest, 'error', onerror);\n\n  // Both close and finish should trigger unpipe, but only once.\n  function onclose() {\n    dest.removeListener('finish', onfinish);\n    unpipe();\n  }\n  dest.once('close', onclose);\n  function onfinish() {\n    debug('onfinish');\n    dest.removeListener('close', onclose);\n    unpipe();\n  }\n  dest.once('finish', onfinish);\n\n  function unpipe() {\n    debug('unpipe');\n    src.unpipe(dest);\n  }\n\n  // tell the dest that it's being piped to\n  dest.emit('pipe', src);\n\n  // start the flow if it hasn't been started already.\n  if (!state.flowing) {\n    debug('pipe resume');\n    src.resume();\n  }\n\n  return dest;\n};\n\nfunction pipeOnDrain(src) {\n  return function () {\n    var state = src._readableState;\n    debug('pipeOnDrain', state.awaitDrain);\n    if (state.awaitDrain) state.awaitDrain--;\n    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {\n      state.flowing = true;\n      flow(src);\n    }\n  };\n}\n\nReadable.prototype.unpipe = function (dest) {\n  var state = this._readableState;\n  var unpipeInfo = { hasUnpiped: false };\n\n  // if we're not piping anywhere, then do nothing.\n  if (state.pipesCount === 0) return this;\n\n  // just one destination.  most common case.\n  if (state.pipesCount === 1) {\n    // passed in one, but it's not the right one.\n    if (dest && dest !== state.pipes) return this;\n\n    if (!dest) dest = state.pipes;\n\n    // got a match.\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n    if (dest) dest.emit('unpipe', this, unpipeInfo);\n    return this;\n  }\n\n  // slow case. multiple pipe destinations.\n\n  if (!dest) {\n    // remove all.\n    var dests = state.pipes;\n    var len = state.pipesCount;\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n\n    for (var i = 0; i < len; i++) {\n      dests[i].emit('unpipe', this, unpipeInfo);\n    }return this;\n  }\n\n  // try to find the right one.\n  var index = indexOf(state.pipes, dest);\n  if (index === -1) return this;\n\n  state.pipes.splice(index, 1);\n  state.pipesCount -= 1;\n  if (state.pipesCount === 1) state.pipes = state.pipes[0];\n\n  dest.emit('unpipe', this, unpipeInfo);\n\n  return this;\n};\n\n// set up data events if they are asked for\n// Ensure readable listeners eventually get something\nReadable.prototype.on = function (ev, fn) {\n  var res = Stream.prototype.on.call(this, ev, fn);\n\n  if (ev === 'data') {\n    // Start flowing on next tick if stream isn't explicitly paused\n    if (this._readableState.flowing !== false) this.resume();\n  } else if (ev === 'readable') {\n    var state = this._readableState;\n    if (!state.endEmitted && !state.readableListening) {\n      state.readableListening = state.needReadable = true;\n      state.emittedReadable = false;\n      if (!state.reading) {\n        pna.nextTick(nReadingNextTick, this);\n      } else if (state.length) {\n        emitReadable(this);\n      }\n    }\n  }\n\n  return res;\n};\nReadable.prototype.addListener = Readable.prototype.on;\n\nfunction nReadingNextTick(self) {\n  debug('readable nexttick read 0');\n  self.read(0);\n}\n\n// pause() and resume() are remnants of the legacy readable stream API\n// If the user uses them, then switch into old mode.\nReadable.prototype.resume = function () {\n  var state = this._readableState;\n  if (!state.flowing) {\n    debug('resume');\n    state.flowing = true;\n    resume(this, state);\n  }\n  return this;\n};\n\nfunction resume(stream, state) {\n  if (!state.resumeScheduled) {\n    state.resumeScheduled = true;\n    pna.nextTick(resume_, stream, state);\n  }\n}\n\nfunction resume_(stream, state) {\n  if (!state.reading) {\n    debug('resume read 0');\n    stream.read(0);\n  }\n\n  state.resumeScheduled = false;\n  state.awaitDrain = 0;\n  stream.emit('resume');\n  flow(stream);\n  if (state.flowing && !state.reading) stream.read(0);\n}\n\nReadable.prototype.pause = function () {\n  debug('call pause flowing=%j', this._readableState.flowing);\n  if (false !== this._readableState.flowing) {\n    debug('pause');\n    this._readableState.flowing = false;\n    this.emit('pause');\n  }\n  return this;\n};\n\nfunction flow(stream) {\n  var state = stream._readableState;\n  debug('flow', state.flowing);\n  while (state.flowing && stream.read() !== null) {}\n}\n\n// wrap an old-style stream as the async data source.\n// This is *not* part of the readable stream interface.\n// It is an ugly unfortunate mess of history.\nReadable.prototype.wrap = function (stream) {\n  var _this = this;\n\n  var state = this._readableState;\n  var paused = false;\n\n  stream.on('end', function () {\n    debug('wrapped end');\n    if (state.decoder && !state.ended) {\n      var chunk = state.decoder.end();\n      if (chunk && chunk.length) _this.push(chunk);\n    }\n\n    _this.push(null);\n  });\n\n  stream.on('data', function (chunk) {\n    debug('wrapped data');\n    if (state.decoder) chunk = state.decoder.write(chunk);\n\n    // don't skip over falsy values in objectMode\n    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;\n\n    var ret = _this.push(chunk);\n    if (!ret) {\n      paused = true;\n      stream.pause();\n    }\n  });\n\n  // proxy all the other methods.\n  // important when wrapping filters and duplexes.\n  for (var i in stream) {\n    if (this[i] === undefined && typeof stream[i] === 'function') {\n      this[i] = function (method) {\n        return function () {\n          return stream[method].apply(stream, arguments);\n        };\n      }(i);\n    }\n  }\n\n  // proxy certain important events.\n  for (var n = 0; n < kProxyEvents.length; n++) {\n    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));\n  }\n\n  // when we try to consume some more bytes, simply unpause the\n  // underlying stream.\n  this._read = function (n) {\n    debug('wrapped _read', n);\n    if (paused) {\n      paused = false;\n      stream.resume();\n    }\n  };\n\n  return this;\n};\n\nObject.defineProperty(Readable.prototype, 'readableHighWaterMark', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function () {\n    return this._readableState.highWaterMark;\n  }\n});\n\n// exposed for testing purposes only.\nReadable._fromList = fromList;\n\n// Pluck off n bytes from an array of buffers.\n// Length is the combined lengths of all the buffers in the list.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction fromList(n, state) {\n  // nothing buffered\n  if (state.length === 0) return null;\n\n  var ret;\n  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {\n    // read it all, truncate the list\n    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);\n    state.buffer.clear();\n  } else {\n    // read part of list\n    ret = fromListPartial(n, state.buffer, state.decoder);\n  }\n\n  return ret;\n}\n\n// Extracts only enough buffered data to satisfy the amount requested.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction fromListPartial(n, list, hasStrings) {\n  var ret;\n  if (n < list.head.data.length) {\n    // slice is the same for buffers and strings\n    ret = list.head.data.slice(0, n);\n    list.head.data = list.head.data.slice(n);\n  } else if (n === list.head.data.length) {\n    // first chunk is a perfect match\n    ret = list.shift();\n  } else {\n    // result spans more than one buffer\n    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);\n  }\n  return ret;\n}\n\n// Copies a specified amount of characters from the list of buffered data\n// chunks.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction copyFromBufferString(n, list) {\n  var p = list.head;\n  var c = 1;\n  var ret = p.data;\n  n -= ret.length;\n  while (p = p.next) {\n    var str = p.data;\n    var nb = n > str.length ? str.length : n;\n    if (nb === str.length) ret += str;else ret += str.slice(0, n);\n    n -= nb;\n    if (n === 0) {\n      if (nb === str.length) {\n        ++c;\n        if (p.next) list.head = p.next;else list.head = list.tail = null;\n      } else {\n        list.head = p;\n        p.data = str.slice(nb);\n      }\n      break;\n    }\n    ++c;\n  }\n  list.length -= c;\n  return ret;\n}\n\n// Copies a specified amount of bytes from the list of buffered data chunks.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction copyFromBuffer(n, list) {\n  var ret = Buffer.allocUnsafe(n);\n  var p = list.head;\n  var c = 1;\n  p.data.copy(ret);\n  n -= p.data.length;\n  while (p = p.next) {\n    var buf = p.data;\n    var nb = n > buf.length ? buf.length : n;\n    buf.copy(ret, ret.length - n, 0, nb);\n    n -= nb;\n    if (n === 0) {\n      if (nb === buf.length) {\n        ++c;\n        if (p.next) list.head = p.next;else list.head = list.tail = null;\n      } else {\n        list.head = p;\n        p.data = buf.slice(nb);\n      }\n      break;\n    }\n    ++c;\n  }\n  list.length -= c;\n  return ret;\n}\n\nfunction endReadable(stream) {\n  var state = stream._readableState;\n\n  // If we get here before consuming all the bytes, then that is a\n  // bug in node.  Should never happen.\n  if (state.length > 0) throw new Error('\"endReadable()\" called on non-empty stream');\n\n  if (!state.endEmitted) {\n    state.ended = true;\n    pna.nextTick(endReadableNT, state, stream);\n  }\n}\n\nfunction endReadableNT(state, stream) {\n  // Check that we didn't get one last unshift.\n  if (!state.endEmitted && state.length === 0) {\n    state.endEmitted = true;\n    stream.readable = false;\n    stream.emit('end');\n  }\n}\n\nfunction indexOf(xs, x) {\n  for (var i = 0, l = xs.length; i < l; i++) {\n    if (xs[i] === x) return i;\n  }\n  return -1;\n}\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\"), __webpack_require__(/*! ./../../process/browser.js */ \"./node_modules/process/browser.js\")))\n\n//# sourceURL=webpack://HicStraw/./node_modules/readable-stream/lib/_stream_readable.js?");/***/},/***/"./node_modules/readable-stream/lib/_stream_transform.js":/*!***************************************************************!*\
  !*** ./node_modules/readable-stream/lib/_stream_transform.js ***!
  \***************************************************************/ /*! no static exports found */ /***/function node_modulesReadableStreamLib_stream_transformJs(module,exports,__webpack_require__){"use strict";eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// a transform stream is a readable/writable stream where you do\n// something with the data.  Sometimes it's called a \"filter\",\n// but that's not a great name for it, since that implies a thing where\n// some bits pass through, and others are simply ignored.  (That would\n// be a valid example of a transform, of course.)\n//\n// While the output is causally related to the input, it's not a\n// necessarily symmetric or synchronous transformation.  For example,\n// a zlib stream might take multiple plain-text writes(), and then\n// emit a single compressed chunk some time in the future.\n//\n// Here's how this works:\n//\n// The Transform stream has all the aspects of the readable and writable\n// stream classes.  When you write(chunk), that calls _write(chunk,cb)\n// internally, and returns false if there's a lot of pending writes\n// buffered up.  When you call read(), that calls _read(n) until\n// there's enough pending readable data buffered up.\n//\n// In a transform stream, the written data is placed in a buffer.  When\n// _read(n) is called, it transforms the queued up data, calling the\n// buffered _write cb's as it consumes chunks.  If consuming a single\n// written chunk would result in multiple output chunks, then the first\n// outputted bit calls the readcb, and subsequent chunks just go into\n// the read buffer, and will cause it to emit 'readable' if necessary.\n//\n// This way, back-pressure is actually determined by the reading side,\n// since _read has to be called to start processing a new chunk.  However,\n// a pathological inflate type of transform can cause excessive buffering\n// here.  For example, imagine a stream where every byte of input is\n// interpreted as an integer from 0-255, and then results in that many\n// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in\n// 1kb of data being output.  In this case, you could write a very small\n// amount of input, and end up with a very large amount of output.  In\n// such a pathological inflating mechanism, there'd be no way to tell\n// the system to stop doing the transform.  A single 4MB write could\n// cause the system to run out of memory.\n//\n// However, even in such a pathological case, only a single written chunk\n// would be consumed, and then the rest would wait (un-transformed) until\n// the results of the previous transformed chunk were consumed.\n\n\n\nmodule.exports = Transform;\n\nvar Duplex = __webpack_require__(/*! ./_stream_duplex */ \"./node_modules/readable-stream/lib/_stream_duplex.js\");\n\n/*<replacement>*/\nvar util = __webpack_require__(/*! core-util-is */ \"./node_modules/core-util-is/lib/util.js\");\nutil.inherits = __webpack_require__(/*! inherits */ \"./node_modules/inherits/inherits_browser.js\");\n/*</replacement>*/\n\nutil.inherits(Transform, Duplex);\n\nfunction afterTransform(er, data) {\n  var ts = this._transformState;\n  ts.transforming = false;\n\n  var cb = ts.writecb;\n\n  if (!cb) {\n    return this.emit('error', new Error('write callback called multiple times'));\n  }\n\n  ts.writechunk = null;\n  ts.writecb = null;\n\n  if (data != null) // single equals check for both `null` and `undefined`\n    this.push(data);\n\n  cb(er);\n\n  var rs = this._readableState;\n  rs.reading = false;\n  if (rs.needReadable || rs.length < rs.highWaterMark) {\n    this._read(rs.highWaterMark);\n  }\n}\n\nfunction Transform(options) {\n  if (!(this instanceof Transform)) return new Transform(options);\n\n  Duplex.call(this, options);\n\n  this._transformState = {\n    afterTransform: afterTransform.bind(this),\n    needTransform: false,\n    transforming: false,\n    writecb: null,\n    writechunk: null,\n    writeencoding: null\n  };\n\n  // start out asking for a readable event once data is transformed.\n  this._readableState.needReadable = true;\n\n  // we have implemented the _read method, and done the other things\n  // that Readable wants before the first _read call, so unset the\n  // sync guard flag.\n  this._readableState.sync = false;\n\n  if (options) {\n    if (typeof options.transform === 'function') this._transform = options.transform;\n\n    if (typeof options.flush === 'function') this._flush = options.flush;\n  }\n\n  // When the writable side finishes, then flush out anything remaining.\n  this.on('prefinish', prefinish);\n}\n\nfunction prefinish() {\n  var _this = this;\n\n  if (typeof this._flush === 'function') {\n    this._flush(function (er, data) {\n      done(_this, er, data);\n    });\n  } else {\n    done(this, null, null);\n  }\n}\n\nTransform.prototype.push = function (chunk, encoding) {\n  this._transformState.needTransform = false;\n  return Duplex.prototype.push.call(this, chunk, encoding);\n};\n\n// This is the part where you do stuff!\n// override this function in implementation classes.\n// 'chunk' is an input chunk.\n//\n// Call `push(newChunk)` to pass along transformed output\n// to the readable side.  You may call 'push' zero or more times.\n//\n// Call `cb(err)` when you are done with this chunk.  If you pass\n// an error, then that'll put the hurt on the whole operation.  If you\n// never call cb(), then you'll never get another chunk.\nTransform.prototype._transform = function (chunk, encoding, cb) {\n  throw new Error('_transform() is not implemented');\n};\n\nTransform.prototype._write = function (chunk, encoding, cb) {\n  var ts = this._transformState;\n  ts.writecb = cb;\n  ts.writechunk = chunk;\n  ts.writeencoding = encoding;\n  if (!ts.transforming) {\n    var rs = this._readableState;\n    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);\n  }\n};\n\n// Doesn't matter what the args are here.\n// _transform does all the work.\n// That we got here means that the readable side wants more data.\nTransform.prototype._read = function (n) {\n  var ts = this._transformState;\n\n  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {\n    ts.transforming = true;\n    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);\n  } else {\n    // mark that we need a transform, so that any data that comes in\n    // will get processed, now that we've asked for it.\n    ts.needTransform = true;\n  }\n};\n\nTransform.prototype._destroy = function (err, cb) {\n  var _this2 = this;\n\n  Duplex.prototype._destroy.call(this, err, function (err2) {\n    cb(err2);\n    _this2.emit('close');\n  });\n};\n\nfunction done(stream, er, data) {\n  if (er) return stream.emit('error', er);\n\n  if (data != null) // single equals check for both `null` and `undefined`\n    stream.push(data);\n\n  // if there's nothing in the write buffer, then that means\n  // that nothing more will ever be provided\n  if (stream._writableState.length) throw new Error('Calling transform done when ws.length != 0');\n\n  if (stream._transformState.transforming) throw new Error('Calling transform done when still transforming');\n\n  return stream.push(null);\n}\n\n//# sourceURL=webpack://HicStraw/./node_modules/readable-stream/lib/_stream_transform.js?");/***/},/***/"./node_modules/readable-stream/lib/_stream_writable.js":/*!**************************************************************!*\
  !*** ./node_modules/readable-stream/lib/_stream_writable.js ***!
  \**************************************************************/ /*! no static exports found */ /***/function node_modulesReadableStreamLib_stream_writableJs(module,exports,__webpack_require__){"use strict";eval("/* WEBPACK VAR INJECTION */(function(process, setImmediate, global) {// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// A bit simpler than readable streams.\n// Implement an async ._write(chunk, encoding, cb), and it'll handle all\n// the drain event emission and buffering.\n\n\n\n/*<replacement>*/\n\nvar pna = __webpack_require__(/*! process-nextick-args */ \"./node_modules/process-nextick-args/index.js\");\n/*</replacement>*/\n\nmodule.exports = Writable;\n\n/* <replacement> */\nfunction WriteReq(chunk, encoding, cb) {\n  this.chunk = chunk;\n  this.encoding = encoding;\n  this.callback = cb;\n  this.next = null;\n}\n\n// It seems a linked list but it is not\n// there will be only 2 of these for each stream\nfunction CorkedRequest(state) {\n  var _this = this;\n\n  this.next = null;\n  this.entry = null;\n  this.finish = function () {\n    onCorkedFinish(_this, state);\n  };\n}\n/* </replacement> */\n\n/*<replacement>*/\nvar asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : pna.nextTick;\n/*</replacement>*/\n\n/*<replacement>*/\nvar Duplex;\n/*</replacement>*/\n\nWritable.WritableState = WritableState;\n\n/*<replacement>*/\nvar util = __webpack_require__(/*! core-util-is */ \"./node_modules/core-util-is/lib/util.js\");\nutil.inherits = __webpack_require__(/*! inherits */ \"./node_modules/inherits/inherits_browser.js\");\n/*</replacement>*/\n\n/*<replacement>*/\nvar internalUtil = {\n  deprecate: __webpack_require__(/*! util-deprecate */ \"./node_modules/util-deprecate/browser.js\")\n};\n/*</replacement>*/\n\n/*<replacement>*/\nvar Stream = __webpack_require__(/*! ./internal/streams/stream */ \"./node_modules/readable-stream/lib/internal/streams/stream-browser.js\");\n/*</replacement>*/\n\n/*<replacement>*/\n\nvar Buffer = __webpack_require__(/*! safe-buffer */ \"./node_modules/safe-buffer/index.js\").Buffer;\nvar OurUint8Array = global.Uint8Array || function () {};\nfunction _uint8ArrayToBuffer(chunk) {\n  return Buffer.from(chunk);\n}\nfunction _isUint8Array(obj) {\n  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;\n}\n\n/*</replacement>*/\n\nvar destroyImpl = __webpack_require__(/*! ./internal/streams/destroy */ \"./node_modules/readable-stream/lib/internal/streams/destroy.js\");\n\nutil.inherits(Writable, Stream);\n\nfunction nop() {}\n\nfunction WritableState(options, stream) {\n  Duplex = Duplex || __webpack_require__(/*! ./_stream_duplex */ \"./node_modules/readable-stream/lib/_stream_duplex.js\");\n\n  options = options || {};\n\n  // Duplex streams are both readable and writable, but share\n  // the same options object.\n  // However, some cases require setting options to different\n  // values for the readable and the writable sides of the duplex stream.\n  // These options can be provided separately as readableXXX and writableXXX.\n  var isDuplex = stream instanceof Duplex;\n\n  // object stream flag to indicate whether or not this stream\n  // contains buffers or objects.\n  this.objectMode = !!options.objectMode;\n\n  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;\n\n  // the point at which write() starts returning false\n  // Note: 0 is a valid value, means that we always return false if\n  // the entire buffer is not flushed immediately on write()\n  var hwm = options.highWaterMark;\n  var writableHwm = options.writableHighWaterMark;\n  var defaultHwm = this.objectMode ? 16 : 16 * 1024;\n\n  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (writableHwm || writableHwm === 0)) this.highWaterMark = writableHwm;else this.highWaterMark = defaultHwm;\n\n  // cast to ints.\n  this.highWaterMark = Math.floor(this.highWaterMark);\n\n  // if _final has been called\n  this.finalCalled = false;\n\n  // drain event flag.\n  this.needDrain = false;\n  // at the start of calling end()\n  this.ending = false;\n  // when end() has been called, and returned\n  this.ended = false;\n  // when 'finish' is emitted\n  this.finished = false;\n\n  // has it been destroyed\n  this.destroyed = false;\n\n  // should we decode strings into buffers before passing to _write?\n  // this is here so that some node-core streams can optimize string\n  // handling at a lower level.\n  var noDecode = options.decodeStrings === false;\n  this.decodeStrings = !noDecode;\n\n  // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n  this.defaultEncoding = options.defaultEncoding || 'utf8';\n\n  // not an actual buffer we keep track of, but a measurement\n  // of how much we're waiting to get pushed to some underlying\n  // socket or file.\n  this.length = 0;\n\n  // a flag to see when we're in the middle of a write.\n  this.writing = false;\n\n  // when true all writes will be buffered until .uncork() call\n  this.corked = 0;\n\n  // a flag to be able to tell if the onwrite cb is called immediately,\n  // or on a later tick.  We set this to true at first, because any\n  // actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first write call.\n  this.sync = true;\n\n  // a flag to know if we're processing previously buffered items, which\n  // may call the _write() callback in the same tick, so that we don't\n  // end up in an overlapped onwrite situation.\n  this.bufferProcessing = false;\n\n  // the callback that's passed to _write(chunk,cb)\n  this.onwrite = function (er) {\n    onwrite(stream, er);\n  };\n\n  // the callback that the user supplies to write(chunk,encoding,cb)\n  this.writecb = null;\n\n  // the amount that is being written when _write is called.\n  this.writelen = 0;\n\n  this.bufferedRequest = null;\n  this.lastBufferedRequest = null;\n\n  // number of pending user-supplied write callbacks\n  // this must be 0 before 'finish' can be emitted\n  this.pendingcb = 0;\n\n  // emit prefinish if the only thing we're waiting for is _write cbs\n  // This is relevant for synchronous Transform streams\n  this.prefinished = false;\n\n  // True if the error was already emitted and should not be thrown again\n  this.errorEmitted = false;\n\n  // count buffered requests\n  this.bufferedRequestCount = 0;\n\n  // allocate the first CorkedRequest, there is always\n  // one allocated and free to use, and we maintain at most two\n  this.corkedRequestsFree = new CorkedRequest(this);\n}\n\nWritableState.prototype.getBuffer = function getBuffer() {\n  var current = this.bufferedRequest;\n  var out = [];\n  while (current) {\n    out.push(current);\n    current = current.next;\n  }\n  return out;\n};\n\n(function () {\n  try {\n    Object.defineProperty(WritableState.prototype, 'buffer', {\n      get: internalUtil.deprecate(function () {\n        return this.getBuffer();\n      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')\n    });\n  } catch (_) {}\n})();\n\n// Test _writableState for inheritance to account for Duplex streams,\n// whose prototype chain only points to Readable.\nvar realHasInstance;\nif (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {\n  realHasInstance = Function.prototype[Symbol.hasInstance];\n  Object.defineProperty(Writable, Symbol.hasInstance, {\n    value: function (object) {\n      if (realHasInstance.call(this, object)) return true;\n      if (this !== Writable) return false;\n\n      return object && object._writableState instanceof WritableState;\n    }\n  });\n} else {\n  realHasInstance = function (object) {\n    return object instanceof this;\n  };\n}\n\nfunction Writable(options) {\n  Duplex = Duplex || __webpack_require__(/*! ./_stream_duplex */ \"./node_modules/readable-stream/lib/_stream_duplex.js\");\n\n  // Writable ctor is applied to Duplexes, too.\n  // `realHasInstance` is necessary because using plain `instanceof`\n  // would return false, as no `_writableState` property is attached.\n\n  // Trying to use the custom `instanceof` for Writable here will also break the\n  // Node.js LazyTransform implementation, which has a non-trivial getter for\n  // `_writableState` that would lead to infinite recursion.\n  if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {\n    return new Writable(options);\n  }\n\n  this._writableState = new WritableState(options, this);\n\n  // legacy.\n  this.writable = true;\n\n  if (options) {\n    if (typeof options.write === 'function') this._write = options.write;\n\n    if (typeof options.writev === 'function') this._writev = options.writev;\n\n    if (typeof options.destroy === 'function') this._destroy = options.destroy;\n\n    if (typeof options.final === 'function') this._final = options.final;\n  }\n\n  Stream.call(this);\n}\n\n// Otherwise people can pipe Writable streams, which is just wrong.\nWritable.prototype.pipe = function () {\n  this.emit('error', new Error('Cannot pipe, not readable'));\n};\n\nfunction writeAfterEnd(stream, cb) {\n  var er = new Error('write after end');\n  // TODO: defer error events consistently everywhere, not just the cb\n  stream.emit('error', er);\n  pna.nextTick(cb, er);\n}\n\n// Checks that a user-supplied chunk is valid, especially for the particular\n// mode the stream is in. Currently this means that `null` is never accepted\n// and undefined/non-string values are only allowed in object mode.\nfunction validChunk(stream, state, chunk, cb) {\n  var valid = true;\n  var er = false;\n\n  if (chunk === null) {\n    er = new TypeError('May not write null values to stream');\n  } else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {\n    er = new TypeError('Invalid non-string/buffer chunk');\n  }\n  if (er) {\n    stream.emit('error', er);\n    pna.nextTick(cb, er);\n    valid = false;\n  }\n  return valid;\n}\n\nWritable.prototype.write = function (chunk, encoding, cb) {\n  var state = this._writableState;\n  var ret = false;\n  var isBuf = !state.objectMode && _isUint8Array(chunk);\n\n  if (isBuf && !Buffer.isBuffer(chunk)) {\n    chunk = _uint8ArrayToBuffer(chunk);\n  }\n\n  if (typeof encoding === 'function') {\n    cb = encoding;\n    encoding = null;\n  }\n\n  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;\n\n  if (typeof cb !== 'function') cb = nop;\n\n  if (state.ended) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {\n    state.pendingcb++;\n    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);\n  }\n\n  return ret;\n};\n\nWritable.prototype.cork = function () {\n  var state = this._writableState;\n\n  state.corked++;\n};\n\nWritable.prototype.uncork = function () {\n  var state = this._writableState;\n\n  if (state.corked) {\n    state.corked--;\n\n    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);\n  }\n};\n\nWritable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {\n  // node::ParseEncoding() requires lower case.\n  if (typeof encoding === 'string') encoding = encoding.toLowerCase();\n  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);\n  this._writableState.defaultEncoding = encoding;\n  return this;\n};\n\nfunction decodeChunk(state, chunk, encoding) {\n  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {\n    chunk = Buffer.from(chunk, encoding);\n  }\n  return chunk;\n}\n\nObject.defineProperty(Writable.prototype, 'writableHighWaterMark', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function () {\n    return this._writableState.highWaterMark;\n  }\n});\n\n// if we're already writing something, then just put this\n// in the queue, and wait our turn.  Otherwise, call _write\n// If we return false, then we need a drain event, so set that flag.\nfunction writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {\n  if (!isBuf) {\n    var newChunk = decodeChunk(state, chunk, encoding);\n    if (chunk !== newChunk) {\n      isBuf = true;\n      encoding = 'buffer';\n      chunk = newChunk;\n    }\n  }\n  var len = state.objectMode ? 1 : chunk.length;\n\n  state.length += len;\n\n  var ret = state.length < state.highWaterMark;\n  // we must ensure that previous needDrain will not be reset to false.\n  if (!ret) state.needDrain = true;\n\n  if (state.writing || state.corked) {\n    var last = state.lastBufferedRequest;\n    state.lastBufferedRequest = {\n      chunk: chunk,\n      encoding: encoding,\n      isBuf: isBuf,\n      callback: cb,\n      next: null\n    };\n    if (last) {\n      last.next = state.lastBufferedRequest;\n    } else {\n      state.bufferedRequest = state.lastBufferedRequest;\n    }\n    state.bufferedRequestCount += 1;\n  } else {\n    doWrite(stream, state, false, len, chunk, encoding, cb);\n  }\n\n  return ret;\n}\n\nfunction doWrite(stream, state, writev, len, chunk, encoding, cb) {\n  state.writelen = len;\n  state.writecb = cb;\n  state.writing = true;\n  state.sync = true;\n  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);\n  state.sync = false;\n}\n\nfunction onwriteError(stream, state, sync, er, cb) {\n  --state.pendingcb;\n\n  if (sync) {\n    // defer the callback if we are being called synchronously\n    // to avoid piling up things on the stack\n    pna.nextTick(cb, er);\n    // this can emit finish, and it will always happen\n    // after error\n    pna.nextTick(finishMaybe, stream, state);\n    stream._writableState.errorEmitted = true;\n    stream.emit('error', er);\n  } else {\n    // the caller expect this to happen before if\n    // it is async\n    cb(er);\n    stream._writableState.errorEmitted = true;\n    stream.emit('error', er);\n    // this can emit finish, but finish must\n    // always follow error\n    finishMaybe(stream, state);\n  }\n}\n\nfunction onwriteStateUpdate(state) {\n  state.writing = false;\n  state.writecb = null;\n  state.length -= state.writelen;\n  state.writelen = 0;\n}\n\nfunction onwrite(stream, er) {\n  var state = stream._writableState;\n  var sync = state.sync;\n  var cb = state.writecb;\n\n  onwriteStateUpdate(state);\n\n  if (er) onwriteError(stream, state, sync, er, cb);else {\n    // Check if we're actually ready to finish, but don't emit yet\n    var finished = needFinish(state);\n\n    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {\n      clearBuffer(stream, state);\n    }\n\n    if (sync) {\n      /*<replacement>*/\n      asyncWrite(afterWrite, stream, state, finished, cb);\n      /*</replacement>*/\n    } else {\n      afterWrite(stream, state, finished, cb);\n    }\n  }\n}\n\nfunction afterWrite(stream, state, finished, cb) {\n  if (!finished) onwriteDrain(stream, state);\n  state.pendingcb--;\n  cb();\n  finishMaybe(stream, state);\n}\n\n// Must force callback to be called on nextTick, so that we don't\n// emit 'drain' before the write() consumer gets the 'false' return\n// value, and has a chance to attach a 'drain' listener.\nfunction onwriteDrain(stream, state) {\n  if (state.length === 0 && state.needDrain) {\n    state.needDrain = false;\n    stream.emit('drain');\n  }\n}\n\n// if there's something in the buffer waiting, then process it\nfunction clearBuffer(stream, state) {\n  state.bufferProcessing = true;\n  var entry = state.bufferedRequest;\n\n  if (stream._writev && entry && entry.next) {\n    // Fast case, write everything using _writev()\n    var l = state.bufferedRequestCount;\n    var buffer = new Array(l);\n    var holder = state.corkedRequestsFree;\n    holder.entry = entry;\n\n    var count = 0;\n    var allBuffers = true;\n    while (entry) {\n      buffer[count] = entry;\n      if (!entry.isBuf) allBuffers = false;\n      entry = entry.next;\n      count += 1;\n    }\n    buffer.allBuffers = allBuffers;\n\n    doWrite(stream, state, true, state.length, buffer, '', holder.finish);\n\n    // doWrite is almost always async, defer these to save a bit of time\n    // as the hot path ends with doWrite\n    state.pendingcb++;\n    state.lastBufferedRequest = null;\n    if (holder.next) {\n      state.corkedRequestsFree = holder.next;\n      holder.next = null;\n    } else {\n      state.corkedRequestsFree = new CorkedRequest(state);\n    }\n    state.bufferedRequestCount = 0;\n  } else {\n    // Slow case, write chunks one-by-one\n    while (entry) {\n      var chunk = entry.chunk;\n      var encoding = entry.encoding;\n      var cb = entry.callback;\n      var len = state.objectMode ? 1 : chunk.length;\n\n      doWrite(stream, state, false, len, chunk, encoding, cb);\n      entry = entry.next;\n      state.bufferedRequestCount--;\n      // if we didn't call the onwrite immediately, then\n      // it means that we need to wait until it does.\n      // also, that means that the chunk and cb are currently\n      // being processed, so move the buffer counter past them.\n      if (state.writing) {\n        break;\n      }\n    }\n\n    if (entry === null) state.lastBufferedRequest = null;\n  }\n\n  state.bufferedRequest = entry;\n  state.bufferProcessing = false;\n}\n\nWritable.prototype._write = function (chunk, encoding, cb) {\n  cb(new Error('_write() is not implemented'));\n};\n\nWritable.prototype._writev = null;\n\nWritable.prototype.end = function (chunk, encoding, cb) {\n  var state = this._writableState;\n\n  if (typeof chunk === 'function') {\n    cb = chunk;\n    chunk = null;\n    encoding = null;\n  } else if (typeof encoding === 'function') {\n    cb = encoding;\n    encoding = null;\n  }\n\n  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);\n\n  // .end() fully uncorks\n  if (state.corked) {\n    state.corked = 1;\n    this.uncork();\n  }\n\n  // ignore unnecessary end() calls.\n  if (!state.ending && !state.finished) endWritable(this, state, cb);\n};\n\nfunction needFinish(state) {\n  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;\n}\nfunction callFinal(stream, state) {\n  stream._final(function (err) {\n    state.pendingcb--;\n    if (err) {\n      stream.emit('error', err);\n    }\n    state.prefinished = true;\n    stream.emit('prefinish');\n    finishMaybe(stream, state);\n  });\n}\nfunction prefinish(stream, state) {\n  if (!state.prefinished && !state.finalCalled) {\n    if (typeof stream._final === 'function') {\n      state.pendingcb++;\n      state.finalCalled = true;\n      pna.nextTick(callFinal, stream, state);\n    } else {\n      state.prefinished = true;\n      stream.emit('prefinish');\n    }\n  }\n}\n\nfunction finishMaybe(stream, state) {\n  var need = needFinish(state);\n  if (need) {\n    prefinish(stream, state);\n    if (state.pendingcb === 0) {\n      state.finished = true;\n      stream.emit('finish');\n    }\n  }\n  return need;\n}\n\nfunction endWritable(stream, state, cb) {\n  state.ending = true;\n  finishMaybe(stream, state);\n  if (cb) {\n    if (state.finished) pna.nextTick(cb);else stream.once('finish', cb);\n  }\n  state.ended = true;\n  stream.writable = false;\n}\n\nfunction onCorkedFinish(corkReq, state, err) {\n  var entry = corkReq.entry;\n  corkReq.entry = null;\n  while (entry) {\n    var cb = entry.callback;\n    state.pendingcb--;\n    cb(err);\n    entry = entry.next;\n  }\n  if (state.corkedRequestsFree) {\n    state.corkedRequestsFree.next = corkReq;\n  } else {\n    state.corkedRequestsFree = corkReq;\n  }\n}\n\nObject.defineProperty(Writable.prototype, 'destroyed', {\n  get: function () {\n    if (this._writableState === undefined) {\n      return false;\n    }\n    return this._writableState.destroyed;\n  },\n  set: function (value) {\n    // we ignore the value if the stream\n    // has not been initialized yet\n    if (!this._writableState) {\n      return;\n    }\n\n    // backward compatibility, the user is explicitly\n    // managing destroyed\n    this._writableState.destroyed = value;\n  }\n});\n\nWritable.prototype.destroy = destroyImpl.destroy;\nWritable.prototype._undestroy = destroyImpl.undestroy;\nWritable.prototype._destroy = function (err, cb) {\n  this.end();\n  cb(err);\n};\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../process/browser.js */ \"./node_modules/process/browser.js\"), __webpack_require__(/*! ./../../timers-browserify/main.js */ \"./node_modules/timers-browserify/main.js\").setImmediate, __webpack_require__(/*! ./../../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))\n\n//# sourceURL=webpack://HicStraw/./node_modules/readable-stream/lib/_stream_writable.js?");/***/},/***/"./node_modules/readable-stream/lib/internal/streams/BufferList.js":/*!*************************************************************************!*\
  !*** ./node_modules/readable-stream/lib/internal/streams/BufferList.js ***!
  \*************************************************************************/ /*! no static exports found */ /***/function node_modulesReadableStreamLibInternalStreamsBufferListJs(module,exports,__webpack_require__){"use strict";eval("\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Buffer = __webpack_require__(/*! safe-buffer */ \"./node_modules/safe-buffer/index.js\").Buffer;\nvar util = __webpack_require__(/*! util */ 1);\n\nfunction copyBuffer(src, target, offset) {\n  src.copy(target, offset);\n}\n\nmodule.exports = function () {\n  function BufferList() {\n    _classCallCheck(this, BufferList);\n\n    this.head = null;\n    this.tail = null;\n    this.length = 0;\n  }\n\n  BufferList.prototype.push = function push(v) {\n    var entry = { data: v, next: null };\n    if (this.length > 0) this.tail.next = entry;else this.head = entry;\n    this.tail = entry;\n    ++this.length;\n  };\n\n  BufferList.prototype.unshift = function unshift(v) {\n    var entry = { data: v, next: this.head };\n    if (this.length === 0) this.tail = entry;\n    this.head = entry;\n    ++this.length;\n  };\n\n  BufferList.prototype.shift = function shift() {\n    if (this.length === 0) return;\n    var ret = this.head.data;\n    if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;\n    --this.length;\n    return ret;\n  };\n\n  BufferList.prototype.clear = function clear() {\n    this.head = this.tail = null;\n    this.length = 0;\n  };\n\n  BufferList.prototype.join = function join(s) {\n    if (this.length === 0) return '';\n    var p = this.head;\n    var ret = '' + p.data;\n    while (p = p.next) {\n      ret += s + p.data;\n    }return ret;\n  };\n\n  BufferList.prototype.concat = function concat(n) {\n    if (this.length === 0) return Buffer.alloc(0);\n    if (this.length === 1) return this.head.data;\n    var ret = Buffer.allocUnsafe(n >>> 0);\n    var p = this.head;\n    var i = 0;\n    while (p) {\n      copyBuffer(p.data, ret, i);\n      i += p.data.length;\n      p = p.next;\n    }\n    return ret;\n  };\n\n  return BufferList;\n}();\n\nif (util && util.inspect && util.inspect.custom) {\n  module.exports.prototype[util.inspect.custom] = function () {\n    var obj = util.inspect({ length: this.length });\n    return this.constructor.name + ' ' + obj;\n  };\n}\n\n//# sourceURL=webpack://HicStraw/./node_modules/readable-stream/lib/internal/streams/BufferList.js?");/***/},/***/"./node_modules/readable-stream/lib/internal/streams/destroy.js":/*!**********************************************************************!*\
  !*** ./node_modules/readable-stream/lib/internal/streams/destroy.js ***!
  \**********************************************************************/ /*! no static exports found */ /***/function node_modulesReadableStreamLibInternalStreamsDestroyJs(module,exports,__webpack_require__){"use strict";eval("\n\n/*<replacement>*/\n\nvar pna = __webpack_require__(/*! process-nextick-args */ \"./node_modules/process-nextick-args/index.js\");\n/*</replacement>*/\n\n// undocumented cb() API, needed for core, not for public API\nfunction destroy(err, cb) {\n  var _this = this;\n\n  var readableDestroyed = this._readableState && this._readableState.destroyed;\n  var writableDestroyed = this._writableState && this._writableState.destroyed;\n\n  if (readableDestroyed || writableDestroyed) {\n    if (cb) {\n      cb(err);\n    } else if (err && (!this._writableState || !this._writableState.errorEmitted)) {\n      pna.nextTick(emitErrorNT, this, err);\n    }\n    return this;\n  }\n\n  // we set destroyed to true before firing error callbacks in order\n  // to make it re-entrance safe in case destroy() is called within callbacks\n\n  if (this._readableState) {\n    this._readableState.destroyed = true;\n  }\n\n  // if this is a duplex stream mark the writable part as destroyed as well\n  if (this._writableState) {\n    this._writableState.destroyed = true;\n  }\n\n  this._destroy(err || null, function (err) {\n    if (!cb && err) {\n      pna.nextTick(emitErrorNT, _this, err);\n      if (_this._writableState) {\n        _this._writableState.errorEmitted = true;\n      }\n    } else if (cb) {\n      cb(err);\n    }\n  });\n\n  return this;\n}\n\nfunction undestroy() {\n  if (this._readableState) {\n    this._readableState.destroyed = false;\n    this._readableState.reading = false;\n    this._readableState.ended = false;\n    this._readableState.endEmitted = false;\n  }\n\n  if (this._writableState) {\n    this._writableState.destroyed = false;\n    this._writableState.ended = false;\n    this._writableState.ending = false;\n    this._writableState.finished = false;\n    this._writableState.errorEmitted = false;\n  }\n}\n\nfunction emitErrorNT(self, err) {\n  self.emit('error', err);\n}\n\nmodule.exports = {\n  destroy: destroy,\n  undestroy: undestroy\n};\n\n//# sourceURL=webpack://HicStraw/./node_modules/readable-stream/lib/internal/streams/destroy.js?");/***/},/***/"./node_modules/readable-stream/lib/internal/streams/stream-browser.js":/*!*****************************************************************************!*\
  !*** ./node_modules/readable-stream/lib/internal/streams/stream-browser.js ***!
  \*****************************************************************************/ /*! no static exports found */ /***/function node_modulesReadableStreamLibInternalStreamsStreamBrowserJs(module,exports,__webpack_require__){eval("module.exports = __webpack_require__(/*! events */ \"./node_modules/events/events.js\").EventEmitter;\n\n\n//# sourceURL=webpack://HicStraw/./node_modules/readable-stream/lib/internal/streams/stream-browser.js?");/***/},/***/"./node_modules/readable-stream/passthrough.js":/*!*****************************************************!*\
  !*** ./node_modules/readable-stream/passthrough.js ***!
  \*****************************************************/ /*! no static exports found */ /***/function node_modulesReadableStreamPassthroughJs(module,exports,__webpack_require__){eval("module.exports = __webpack_require__(/*! ./readable */ \"./node_modules/readable-stream/readable-browser.js\").PassThrough\n\n\n//# sourceURL=webpack://HicStraw/./node_modules/readable-stream/passthrough.js?");/***/},/***/"./node_modules/readable-stream/readable-browser.js":/*!**********************************************************!*\
  !*** ./node_modules/readable-stream/readable-browser.js ***!
  \**********************************************************/ /*! no static exports found */ /***/function node_modulesReadableStreamReadableBrowserJs(module,exports,__webpack_require__){eval("exports = module.exports = __webpack_require__(/*! ./lib/_stream_readable.js */ \"./node_modules/readable-stream/lib/_stream_readable.js\");\nexports.Stream = exports;\nexports.Readable = exports;\nexports.Writable = __webpack_require__(/*! ./lib/_stream_writable.js */ \"./node_modules/readable-stream/lib/_stream_writable.js\");\nexports.Duplex = __webpack_require__(/*! ./lib/_stream_duplex.js */ \"./node_modules/readable-stream/lib/_stream_duplex.js\");\nexports.Transform = __webpack_require__(/*! ./lib/_stream_transform.js */ \"./node_modules/readable-stream/lib/_stream_transform.js\");\nexports.PassThrough = __webpack_require__(/*! ./lib/_stream_passthrough.js */ \"./node_modules/readable-stream/lib/_stream_passthrough.js\");\n\n\n//# sourceURL=webpack://HicStraw/./node_modules/readable-stream/readable-browser.js?");/***/},/***/"./node_modules/readable-stream/transform.js":/*!***************************************************!*\
  !*** ./node_modules/readable-stream/transform.js ***!
  \***************************************************/ /*! no static exports found */ /***/function node_modulesReadableStreamTransformJs(module,exports,__webpack_require__){eval("module.exports = __webpack_require__(/*! ./readable */ \"./node_modules/readable-stream/readable-browser.js\").Transform\n\n\n//# sourceURL=webpack://HicStraw/./node_modules/readable-stream/transform.js?");/***/},/***/"./node_modules/readable-stream/writable-browser.js":/*!**********************************************************!*\
  !*** ./node_modules/readable-stream/writable-browser.js ***!
  \**********************************************************/ /*! no static exports found */ /***/function node_modulesReadableStreamWritableBrowserJs(module,exports,__webpack_require__){eval("module.exports = __webpack_require__(/*! ./lib/_stream_writable.js */ \"./node_modules/readable-stream/lib/_stream_writable.js\");\n\n\n//# sourceURL=webpack://HicStraw/./node_modules/readable-stream/writable-browser.js?");/***/},/***/"./node_modules/safe-buffer/index.js":/*!*******************************************!*\
  !*** ./node_modules/safe-buffer/index.js ***!
  \*******************************************/ /*! no static exports found */ /***/function node_modulesSafeBufferIndexJs(module,exports,__webpack_require__){eval("/* eslint-disable node/no-deprecated-api */\nvar buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")\nvar Buffer = buffer.Buffer\n\n// alternative to using Object.keys for old browsers\nfunction copyProps (src, dst) {\n  for (var key in src) {\n    dst[key] = src[key]\n  }\n}\nif (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {\n  module.exports = buffer\n} else {\n  // Copy properties from require('buffer')\n  copyProps(buffer, exports)\n  exports.Buffer = SafeBuffer\n}\n\nfunction SafeBuffer (arg, encodingOrOffset, length) {\n  return Buffer(arg, encodingOrOffset, length)\n}\n\n// Copy static methods from Buffer\ncopyProps(Buffer, SafeBuffer)\n\nSafeBuffer.from = function (arg, encodingOrOffset, length) {\n  if (typeof arg === 'number') {\n    throw new TypeError('Argument must not be a number')\n  }\n  return Buffer(arg, encodingOrOffset, length)\n}\n\nSafeBuffer.alloc = function (size, fill, encoding) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  var buf = Buffer(size)\n  if (fill !== undefined) {\n    if (typeof encoding === 'string') {\n      buf.fill(fill, encoding)\n    } else {\n      buf.fill(fill)\n    }\n  } else {\n    buf.fill(0)\n  }\n  return buf\n}\n\nSafeBuffer.allocUnsafe = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return Buffer(size)\n}\n\nSafeBuffer.allocUnsafeSlow = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return buffer.SlowBuffer(size)\n}\n\n\n//# sourceURL=webpack://HicStraw/./node_modules/safe-buffer/index.js?");/***/},/***/"./node_modules/setimmediate/setImmediate.js":/*!***************************************************!*\
  !*** ./node_modules/setimmediate/setImmediate.js ***!
  \***************************************************/ /*! no static exports found */ /***/function node_modulesSetimmediateSetImmediateJs(module,exports,__webpack_require__){eval("/* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined) {\n    \"use strict\";\n\n    if (global.setImmediate) {\n        return;\n    }\n\n    var nextHandle = 1; // Spec says greater than zero\n    var tasksByHandle = {};\n    var currentlyRunningATask = false;\n    var doc = global.document;\n    var registerImmediate;\n\n    function setImmediate(callback) {\n      // Callback can either be a function or a string\n      if (typeof callback !== \"function\") {\n        callback = new Function(\"\" + callback);\n      }\n      // Copy function arguments\n      var args = new Array(arguments.length - 1);\n      for (var i = 0; i < args.length; i++) {\n          args[i] = arguments[i + 1];\n      }\n      // Store and register the task\n      var task = { callback: callback, args: args };\n      tasksByHandle[nextHandle] = task;\n      registerImmediate(nextHandle);\n      return nextHandle++;\n    }\n\n    function clearImmediate(handle) {\n        delete tasksByHandle[handle];\n    }\n\n    function run(task) {\n        var callback = task.callback;\n        var args = task.args;\n        switch (args.length) {\n        case 0:\n            callback();\n            break;\n        case 1:\n            callback(args[0]);\n            break;\n        case 2:\n            callback(args[0], args[1]);\n            break;\n        case 3:\n            callback(args[0], args[1], args[2]);\n            break;\n        default:\n            callback.apply(undefined, args);\n            break;\n        }\n    }\n\n    function runIfPresent(handle) {\n        // From the spec: \"Wait until any invocations of this algorithm started before this one have completed.\"\n        // So if we're currently running a task, we'll need to delay this invocation.\n        if (currentlyRunningATask) {\n            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n            // \"too much recursion\" error.\n            setTimeout(runIfPresent, 0, handle);\n        } else {\n            var task = tasksByHandle[handle];\n            if (task) {\n                currentlyRunningATask = true;\n                try {\n                    run(task);\n                } finally {\n                    clearImmediate(handle);\n                    currentlyRunningATask = false;\n                }\n            }\n        }\n    }\n\n    function installNextTickImplementation() {\n        registerImmediate = function(handle) {\n            process.nextTick(function () { runIfPresent(handle); });\n        };\n    }\n\n    function canUsePostMessage() {\n        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n        // where `global.postMessage` means something completely different and can't be used for this purpose.\n        if (global.postMessage && !global.importScripts) {\n            var postMessageIsAsynchronous = true;\n            var oldOnMessage = global.onmessage;\n            global.onmessage = function() {\n                postMessageIsAsynchronous = false;\n            };\n            global.postMessage(\"\", \"*\");\n            global.onmessage = oldOnMessage;\n            return postMessageIsAsynchronous;\n        }\n    }\n\n    function installPostMessageImplementation() {\n        // Installs an event handler on `global` for the `message` event: see\n        // * https://developer.mozilla.org/en/DOM/window.postMessage\n        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n\n        var messagePrefix = \"setImmediate$\" + Math.random() + \"$\";\n        var onGlobalMessage = function(event) {\n            if (event.source === global &&\n                typeof event.data === \"string\" &&\n                event.data.indexOf(messagePrefix) === 0) {\n                runIfPresent(+event.data.slice(messagePrefix.length));\n            }\n        };\n\n        if (global.addEventListener) {\n            global.addEventListener(\"message\", onGlobalMessage, false);\n        } else {\n            global.attachEvent(\"onmessage\", onGlobalMessage);\n        }\n\n        registerImmediate = function(handle) {\n            global.postMessage(messagePrefix + handle, \"*\");\n        };\n    }\n\n    function installMessageChannelImplementation() {\n        var channel = new MessageChannel();\n        channel.port1.onmessage = function(event) {\n            var handle = event.data;\n            runIfPresent(handle);\n        };\n\n        registerImmediate = function(handle) {\n            channel.port2.postMessage(handle);\n        };\n    }\n\n    function installReadyStateChangeImplementation() {\n        var html = doc.documentElement;\n        registerImmediate = function(handle) {\n            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n            var script = doc.createElement(\"script\");\n            script.onreadystatechange = function () {\n                runIfPresent(handle);\n                script.onreadystatechange = null;\n                html.removeChild(script);\n                script = null;\n            };\n            html.appendChild(script);\n        };\n    }\n\n    function installSetTimeoutImplementation() {\n        registerImmediate = function(handle) {\n            setTimeout(runIfPresent, 0, handle);\n        };\n    }\n\n    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.\n    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);\n    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;\n\n    // Don't get fooled by e.g. browserify environments.\n    if ({}.toString.call(global.process) === \"[object process]\") {\n        // For Node.js before 0.9\n        installNextTickImplementation();\n\n    } else if (canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        installPostMessageImplementation();\n\n    } else if (global.MessageChannel) {\n        // For web workers, where supported\n        installMessageChannelImplementation();\n\n    } else if (doc && \"onreadystatechange\" in doc.createElement(\"script\")) {\n        // For IE 6–8\n        installReadyStateChangeImplementation();\n\n    } else {\n        // For older browsers\n        installSetTimeoutImplementation();\n    }\n\n    attachTo.setImmediate = setImmediate;\n    attachTo.clearImmediate = clearImmediate;\n}(typeof self === \"undefined\" ? typeof global === \"undefined\" ? this : global : self));\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\"), __webpack_require__(/*! ./../process/browser.js */ \"./node_modules/process/browser.js\")))\n\n//# sourceURL=webpack://HicStraw/./node_modules/setimmediate/setImmediate.js?");/***/},/***/"./node_modules/stream-browserify/index.js":/*!*************************************************!*\
  !*** ./node_modules/stream-browserify/index.js ***!
  \*************************************************/ /*! no static exports found */ /***/function node_modulesStreamBrowserifyIndexJs(module,exports,__webpack_require__){eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nmodule.exports = Stream;\n\nvar EE = __webpack_require__(/*! events */ \"./node_modules/events/events.js\").EventEmitter;\nvar inherits = __webpack_require__(/*! inherits */ \"./node_modules/inherits/inherits_browser.js\");\n\ninherits(Stream, EE);\nStream.Readable = __webpack_require__(/*! readable-stream/readable.js */ \"./node_modules/readable-stream/readable-browser.js\");\nStream.Writable = __webpack_require__(/*! readable-stream/writable.js */ \"./node_modules/readable-stream/writable-browser.js\");\nStream.Duplex = __webpack_require__(/*! readable-stream/duplex.js */ \"./node_modules/readable-stream/duplex-browser.js\");\nStream.Transform = __webpack_require__(/*! readable-stream/transform.js */ \"./node_modules/readable-stream/transform.js\");\nStream.PassThrough = __webpack_require__(/*! readable-stream/passthrough.js */ \"./node_modules/readable-stream/passthrough.js\");\n\n// Backwards-compat with node 0.4.x\nStream.Stream = Stream;\n\n\n\n// old-style streams.  Note that the pipe method (the only relevant\n// part of this class) is overridden in the Readable class.\n\nfunction Stream() {\n  EE.call(this);\n}\n\nStream.prototype.pipe = function(dest, options) {\n  var source = this;\n\n  function ondata(chunk) {\n    if (dest.writable) {\n      if (false === dest.write(chunk) && source.pause) {\n        source.pause();\n      }\n    }\n  }\n\n  source.on('data', ondata);\n\n  function ondrain() {\n    if (source.readable && source.resume) {\n      source.resume();\n    }\n  }\n\n  dest.on('drain', ondrain);\n\n  // If the 'end' option is not supplied, dest.end() will be called when\n  // source gets the 'end' or 'close' events.  Only dest.end() once.\n  if (!dest._isStdio && (!options || options.end !== false)) {\n    source.on('end', onend);\n    source.on('close', onclose);\n  }\n\n  var didOnEnd = false;\n  function onend() {\n    if (didOnEnd) return;\n    didOnEnd = true;\n\n    dest.end();\n  }\n\n\n  function onclose() {\n    if (didOnEnd) return;\n    didOnEnd = true;\n\n    if (typeof dest.destroy === 'function') dest.destroy();\n  }\n\n  // don't leave dangling pipes when there are errors.\n  function onerror(er) {\n    cleanup();\n    if (EE.listenerCount(this, 'error') === 0) {\n      throw er; // Unhandled stream error in pipe.\n    }\n  }\n\n  source.on('error', onerror);\n  dest.on('error', onerror);\n\n  // remove all the event listeners that were added.\n  function cleanup() {\n    source.removeListener('data', ondata);\n    dest.removeListener('drain', ondrain);\n\n    source.removeListener('end', onend);\n    source.removeListener('close', onclose);\n\n    source.removeListener('error', onerror);\n    dest.removeListener('error', onerror);\n\n    source.removeListener('end', cleanup);\n    source.removeListener('close', cleanup);\n\n    dest.removeListener('close', cleanup);\n  }\n\n  source.on('end', cleanup);\n  source.on('close', cleanup);\n\n  dest.on('close', cleanup);\n\n  dest.emit('pipe', source);\n\n  // Allow for unix-like usage: A.pipe(B).pipe(C)\n  return dest;\n};\n\n\n//# sourceURL=webpack://HicStraw/./node_modules/stream-browserify/index.js?");/***/},/***/"./node_modules/string_decoder/lib/string_decoder.js":/*!***********************************************************!*\
  !*** ./node_modules/string_decoder/lib/string_decoder.js ***!
  \***********************************************************/ /*! no static exports found */ /***/function node_modulesString_decoderLibString_decoderJs(module,exports,__webpack_require__){"use strict";eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\n/*<replacement>*/\n\nvar Buffer = __webpack_require__(/*! safe-buffer */ \"./node_modules/safe-buffer/index.js\").Buffer;\n/*</replacement>*/\n\nvar isEncoding = Buffer.isEncoding || function (encoding) {\n  encoding = '' + encoding;\n  switch (encoding && encoding.toLowerCase()) {\n    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':\n      return true;\n    default:\n      return false;\n  }\n};\n\nfunction _normalizeEncoding(enc) {\n  if (!enc) return 'utf8';\n  var retried;\n  while (true) {\n    switch (enc) {\n      case 'utf8':\n      case 'utf-8':\n        return 'utf8';\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return 'utf16le';\n      case 'latin1':\n      case 'binary':\n        return 'latin1';\n      case 'base64':\n      case 'ascii':\n      case 'hex':\n        return enc;\n      default:\n        if (retried) return; // undefined\n        enc = ('' + enc).toLowerCase();\n        retried = true;\n    }\n  }\n};\n\n// Do not cache `Buffer.isEncoding` when checking encoding names as some\n// modules monkey-patch it to support additional encodings\nfunction normalizeEncoding(enc) {\n  var nenc = _normalizeEncoding(enc);\n  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);\n  return nenc || enc;\n}\n\n// StringDecoder provides an interface for efficiently splitting a series of\n// buffers into a series of JS strings without breaking apart multi-byte\n// characters.\nexports.StringDecoder = StringDecoder;\nfunction StringDecoder(encoding) {\n  this.encoding = normalizeEncoding(encoding);\n  var nb;\n  switch (this.encoding) {\n    case 'utf16le':\n      this.text = utf16Text;\n      this.end = utf16End;\n      nb = 4;\n      break;\n    case 'utf8':\n      this.fillLast = utf8FillLast;\n      nb = 4;\n      break;\n    case 'base64':\n      this.text = base64Text;\n      this.end = base64End;\n      nb = 3;\n      break;\n    default:\n      this.write = simpleWrite;\n      this.end = simpleEnd;\n      return;\n  }\n  this.lastNeed = 0;\n  this.lastTotal = 0;\n  this.lastChar = Buffer.allocUnsafe(nb);\n}\n\nStringDecoder.prototype.write = function (buf) {\n  if (buf.length === 0) return '';\n  var r;\n  var i;\n  if (this.lastNeed) {\n    r = this.fillLast(buf);\n    if (r === undefined) return '';\n    i = this.lastNeed;\n    this.lastNeed = 0;\n  } else {\n    i = 0;\n  }\n  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);\n  return r || '';\n};\n\nStringDecoder.prototype.end = utf8End;\n\n// Returns only complete characters in a Buffer\nStringDecoder.prototype.text = utf8Text;\n\n// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer\nStringDecoder.prototype.fillLast = function (buf) {\n  if (this.lastNeed <= buf.length) {\n    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);\n    return this.lastChar.toString(this.encoding, 0, this.lastTotal);\n  }\n  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);\n  this.lastNeed -= buf.length;\n};\n\n// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a\n// continuation byte. If an invalid byte is detected, -2 is returned.\nfunction utf8CheckByte(byte) {\n  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;\n  return byte >> 6 === 0x02 ? -1 : -2;\n}\n\n// Checks at most 3 bytes at the end of a Buffer in order to detect an\n// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)\n// needed to complete the UTF-8 character (if applicable) are returned.\nfunction utf8CheckIncomplete(self, buf, i) {\n  var j = buf.length - 1;\n  if (j < i) return 0;\n  var nb = utf8CheckByte(buf[j]);\n  if (nb >= 0) {\n    if (nb > 0) self.lastNeed = nb - 1;\n    return nb;\n  }\n  if (--j < i || nb === -2) return 0;\n  nb = utf8CheckByte(buf[j]);\n  if (nb >= 0) {\n    if (nb > 0) self.lastNeed = nb - 2;\n    return nb;\n  }\n  if (--j < i || nb === -2) return 0;\n  nb = utf8CheckByte(buf[j]);\n  if (nb >= 0) {\n    if (nb > 0) {\n      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;\n    }\n    return nb;\n  }\n  return 0;\n}\n\n// Validates as many continuation bytes for a multi-byte UTF-8 character as\n// needed or are available. If we see a non-continuation byte where we expect\n// one, we \"replace\" the validated continuation bytes we've seen so far with\n// a single UTF-8 replacement character ('\\ufffd'), to match v8's UTF-8 decoding\n// behavior. The continuation byte check is included three times in the case\n// where all of the continuation bytes for a character exist in the same buffer.\n// It is also done this way as a slight performance increase instead of using a\n// loop.\nfunction utf8CheckExtraBytes(self, buf, p) {\n  if ((buf[0] & 0xC0) !== 0x80) {\n    self.lastNeed = 0;\n    return '\\ufffd';\n  }\n  if (self.lastNeed > 1 && buf.length > 1) {\n    if ((buf[1] & 0xC0) !== 0x80) {\n      self.lastNeed = 1;\n      return '\\ufffd';\n    }\n    if (self.lastNeed > 2 && buf.length > 2) {\n      if ((buf[2] & 0xC0) !== 0x80) {\n        self.lastNeed = 2;\n        return '\\ufffd';\n      }\n    }\n  }\n}\n\n// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.\nfunction utf8FillLast(buf) {\n  var p = this.lastTotal - this.lastNeed;\n  var r = utf8CheckExtraBytes(this, buf, p);\n  if (r !== undefined) return r;\n  if (this.lastNeed <= buf.length) {\n    buf.copy(this.lastChar, p, 0, this.lastNeed);\n    return this.lastChar.toString(this.encoding, 0, this.lastTotal);\n  }\n  buf.copy(this.lastChar, p, 0, buf.length);\n  this.lastNeed -= buf.length;\n}\n\n// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a\n// partial character, the character's bytes are buffered until the required\n// number of bytes are available.\nfunction utf8Text(buf, i) {\n  var total = utf8CheckIncomplete(this, buf, i);\n  if (!this.lastNeed) return buf.toString('utf8', i);\n  this.lastTotal = total;\n  var end = buf.length - (total - this.lastNeed);\n  buf.copy(this.lastChar, 0, end);\n  return buf.toString('utf8', i, end);\n}\n\n// For UTF-8, a replacement character is added when ending on a partial\n// character.\nfunction utf8End(buf) {\n  var r = buf && buf.length ? this.write(buf) : '';\n  if (this.lastNeed) return r + '\\ufffd';\n  return r;\n}\n\n// UTF-16LE typically needs two bytes per character, but even if we have an even\n// number of bytes available, we need to check if we end on a leading/high\n// surrogate. In that case, we need to wait for the next two bytes in order to\n// decode the last character properly.\nfunction utf16Text(buf, i) {\n  if ((buf.length - i) % 2 === 0) {\n    var r = buf.toString('utf16le', i);\n    if (r) {\n      var c = r.charCodeAt(r.length - 1);\n      if (c >= 0xD800 && c <= 0xDBFF) {\n        this.lastNeed = 2;\n        this.lastTotal = 4;\n        this.lastChar[0] = buf[buf.length - 2];\n        this.lastChar[1] = buf[buf.length - 1];\n        return r.slice(0, -1);\n      }\n    }\n    return r;\n  }\n  this.lastNeed = 1;\n  this.lastTotal = 2;\n  this.lastChar[0] = buf[buf.length - 1];\n  return buf.toString('utf16le', i, buf.length - 1);\n}\n\n// For UTF-16LE we do not explicitly append special replacement characters if we\n// end on a partial character, we simply let v8 handle that.\nfunction utf16End(buf) {\n  var r = buf && buf.length ? this.write(buf) : '';\n  if (this.lastNeed) {\n    var end = this.lastTotal - this.lastNeed;\n    return r + this.lastChar.toString('utf16le', 0, end);\n  }\n  return r;\n}\n\nfunction base64Text(buf, i) {\n  var n = (buf.length - i) % 3;\n  if (n === 0) return buf.toString('base64', i);\n  this.lastNeed = 3 - n;\n  this.lastTotal = 3;\n  if (n === 1) {\n    this.lastChar[0] = buf[buf.length - 1];\n  } else {\n    this.lastChar[0] = buf[buf.length - 2];\n    this.lastChar[1] = buf[buf.length - 1];\n  }\n  return buf.toString('base64', i, buf.length - n);\n}\n\nfunction base64End(buf) {\n  var r = buf && buf.length ? this.write(buf) : '';\n  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);\n  return r;\n}\n\n// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)\nfunction simpleWrite(buf) {\n  return buf.toString(this.encoding);\n}\n\nfunction simpleEnd(buf) {\n  return buf && buf.length ? this.write(buf) : '';\n}\n\n//# sourceURL=webpack://HicStraw/./node_modules/string_decoder/lib/string_decoder.js?");/***/},/***/"./node_modules/timers-browserify/main.js":/*!************************************************!*\
  !*** ./node_modules/timers-browserify/main.js ***!
  \************************************************/ /*! no static exports found */ /***/function node_modulesTimersBrowserifyMainJs(module,exports,__webpack_require__){eval("/* WEBPACK VAR INJECTION */(function(global) {var scope = (typeof global !== \"undefined\" && global) ||\n            (typeof self !== \"undefined\" && self) ||\n            window;\nvar apply = Function.prototype.apply;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) {\n  if (timeout) {\n    timeout.close();\n  }\n};\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(scope, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// setimmediate attaches itself to the global object\n__webpack_require__(/*! setimmediate */ \"./node_modules/setimmediate/setImmediate.js\");\n// On some exotic environments, it's not clear which object `setimmediate` was\n// able to install onto.  Search each possibility in the same order as the\n// `setimmediate` library.\nexports.setImmediate = (typeof self !== \"undefined\" && self.setImmediate) ||\n                       (typeof global !== \"undefined\" && global.setImmediate) ||\n                       (this && this.setImmediate);\nexports.clearImmediate = (typeof self !== \"undefined\" && self.clearImmediate) ||\n                         (typeof global !== \"undefined\" && global.clearImmediate) ||\n                         (this && this.clearImmediate);\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))\n\n//# sourceURL=webpack://HicStraw/./node_modules/timers-browserify/main.js?");/***/},/***/"./node_modules/util-deprecate/browser.js":/*!************************************************!*\
  !*** ./node_modules/util-deprecate/browser.js ***!
  \************************************************/ /*! no static exports found */ /***/function node_modulesUtilDeprecateBrowserJs(module,exports,__webpack_require__){eval("/* WEBPACK VAR INJECTION */(function(global) {\n/**\n * Module exports.\n */\n\nmodule.exports = deprecate;\n\n/**\n * Mark that a method should not be used.\n * Returns a modified function which warns once by default.\n *\n * If `localStorage.noDeprecation = true` is set, then it is a no-op.\n *\n * If `localStorage.throwDeprecation = true` is set, then deprecated functions\n * will throw an Error when invoked.\n *\n * If `localStorage.traceDeprecation = true` is set, then deprecated functions\n * will invoke `console.trace()` instead of `console.error()`.\n *\n * @param {Function} fn - the function to deprecate\n * @param {String} msg - the string to print to the console when `fn` is invoked\n * @returns {Function} a new \"deprecated\" version of `fn`\n * @api public\n */\n\nfunction deprecate (fn, msg) {\n  if (config('noDeprecation')) {\n    return fn;\n  }\n\n  var warned = false;\n  function deprecated() {\n    if (!warned) {\n      if (config('throwDeprecation')) {\n        throw new Error(msg);\n      } else if (config('traceDeprecation')) {\n        console.trace(msg);\n      } else {\n        console.warn(msg);\n      }\n      warned = true;\n    }\n    return fn.apply(this, arguments);\n  }\n\n  return deprecated;\n}\n\n/**\n * Checks `localStorage` for boolean values for the given `name`.\n *\n * @param {String} name\n * @returns {Boolean}\n * @api private\n */\n\nfunction config (name) {\n  // accessing global.localStorage can trigger a DOMException in sandboxed iframes\n  try {\n    if (!global.localStorage) return false;\n  } catch (_) {\n    return false;\n  }\n  var val = global.localStorage[name];\n  if (null == val) return false;\n  return String(val).toLowerCase() === 'true';\n}\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))\n\n//# sourceURL=webpack://HicStraw/./node_modules/util-deprecate/browser.js?");/***/},/***/"./node_modules/util/support/isBufferBrowser.js":/*!******************************************************!*\
  !*** ./node_modules/util/support/isBufferBrowser.js ***!
  \******************************************************/ /*! no static exports found */ /***/function node_modulesUtilSupportIsBufferBrowserJs(module,exports){eval("module.exports = function isBuffer(arg) {\n  return arg && typeof arg === 'object'\n    && typeof arg.copy === 'function'\n    && typeof arg.fill === 'function'\n    && typeof arg.readUInt8 === 'function';\n}\n\n//# sourceURL=webpack://HicStraw/./node_modules/util/support/isBufferBrowser.js?");/***/},/***/"./node_modules/util/util.js":/*!***********************************!*\
  !*** ./node_modules/util/util.js ***!
  \***********************************/ /*! no static exports found */ /***/function node_modulesUtilUtilJs(module,exports,__webpack_require__){eval("/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar formatRegExp = /%[sdj%]/g;\nexports.format = function(f) {\n  if (!isString(f)) {\n    var objects = [];\n    for (var i = 0; i < arguments.length; i++) {\n      objects.push(inspect(arguments[i]));\n    }\n    return objects.join(' ');\n  }\n\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  var str = String(f).replace(formatRegExp, function(x) {\n    if (x === '%%') return '%';\n    if (i >= len) return x;\n    switch (x) {\n      case '%s': return String(args[i++]);\n      case '%d': return Number(args[i++]);\n      case '%j':\n        try {\n          return JSON.stringify(args[i++]);\n        } catch (_) {\n          return '[Circular]';\n        }\n      default:\n        return x;\n    }\n  });\n  for (var x = args[i]; i < len; x = args[++i]) {\n    if (isNull(x) || !isObject(x)) {\n      str += ' ' + x;\n    } else {\n      str += ' ' + inspect(x);\n    }\n  }\n  return str;\n};\n\n\n// Mark that a method should not be used.\n// Returns a modified function which warns once by default.\n// If --no-deprecation is set, then it is a no-op.\nexports.deprecate = function(fn, msg) {\n  // Allow for deprecating things in the process of starting up.\n  if (isUndefined(global.process)) {\n    return function() {\n      return exports.deprecate(fn, msg).apply(this, arguments);\n    };\n  }\n\n  if (process.noDeprecation === true) {\n    return fn;\n  }\n\n  var warned = false;\n  function deprecated() {\n    if (!warned) {\n      if (process.throwDeprecation) {\n        throw new Error(msg);\n      } else if (process.traceDeprecation) {\n        console.trace(msg);\n      } else {\n        console.error(msg);\n      }\n      warned = true;\n    }\n    return fn.apply(this, arguments);\n  }\n\n  return deprecated;\n};\n\n\nvar debugs = {};\nvar debugEnviron;\nexports.debuglog = function(set) {\n  if (isUndefined(debugEnviron))\n    debugEnviron = process.env.NODE_DEBUG || '';\n  set = set.toUpperCase();\n  if (!debugs[set]) {\n    if (new RegExp('\\\\b' + set + '\\\\b', 'i').test(debugEnviron)) {\n      var pid = process.pid;\n      debugs[set] = function() {\n        var msg = exports.format.apply(exports, arguments);\n        console.error('%s %d: %s', set, pid, msg);\n      };\n    } else {\n      debugs[set] = function() {};\n    }\n  }\n  return debugs[set];\n};\n\n\n/**\n * Echos the value of a value. Trys to print the value out\n * in the best way possible given the different types.\n *\n * @param {Object} obj The object to print out.\n * @param {Object} opts Optional options object that alters the output.\n */\n/* legacy: obj, showHidden, depth, colors*/\nfunction inspect(obj, opts) {\n  // default options\n  var ctx = {\n    seen: [],\n    stylize: stylizeNoColor\n  };\n  // legacy...\n  if (arguments.length >= 3) ctx.depth = arguments[2];\n  if (arguments.length >= 4) ctx.colors = arguments[3];\n  if (isBoolean(opts)) {\n    // legacy...\n    ctx.showHidden = opts;\n  } else if (opts) {\n    // got an \"options\" object\n    exports._extend(ctx, opts);\n  }\n  // set default options\n  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;\n  if (isUndefined(ctx.depth)) ctx.depth = 2;\n  if (isUndefined(ctx.colors)) ctx.colors = false;\n  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;\n  if (ctx.colors) ctx.stylize = stylizeWithColor;\n  return formatValue(ctx, obj, ctx.depth);\n}\nexports.inspect = inspect;\n\n\n// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics\ninspect.colors = {\n  'bold' : [1, 22],\n  'italic' : [3, 23],\n  'underline' : [4, 24],\n  'inverse' : [7, 27],\n  'white' : [37, 39],\n  'grey' : [90, 39],\n  'black' : [30, 39],\n  'blue' : [34, 39],\n  'cyan' : [36, 39],\n  'green' : [32, 39],\n  'magenta' : [35, 39],\n  'red' : [31, 39],\n  'yellow' : [33, 39]\n};\n\n// Don't use 'blue' not visible on cmd.exe\ninspect.styles = {\n  'special': 'cyan',\n  'number': 'yellow',\n  'boolean': 'yellow',\n  'undefined': 'grey',\n  'null': 'bold',\n  'string': 'green',\n  'date': 'magenta',\n  // \"name\": intentionally not styling\n  'regexp': 'red'\n};\n\n\nfunction stylizeWithColor(str, styleType) {\n  var style = inspect.styles[styleType];\n\n  if (style) {\n    return '\\u001b[' + inspect.colors[style][0] + 'm' + str +\n           '\\u001b[' + inspect.colors[style][1] + 'm';\n  } else {\n    return str;\n  }\n}\n\n\nfunction stylizeNoColor(str, styleType) {\n  return str;\n}\n\n\nfunction arrayToHash(array) {\n  var hash = {};\n\n  array.forEach(function(val, idx) {\n    hash[val] = true;\n  });\n\n  return hash;\n}\n\n\nfunction formatValue(ctx, value, recurseTimes) {\n  // Provide a hook for user-specified inspect functions.\n  // Check that value is an object with an inspect function on it\n  if (ctx.customInspect &&\n      value &&\n      isFunction(value.inspect) &&\n      // Filter out the util module, it's inspect function is special\n      value.inspect !== exports.inspect &&\n      // Also filter out any prototype objects using the circular check.\n      !(value.constructor && value.constructor.prototype === value)) {\n    var ret = value.inspect(recurseTimes, ctx);\n    if (!isString(ret)) {\n      ret = formatValue(ctx, ret, recurseTimes);\n    }\n    return ret;\n  }\n\n  // Primitive types cannot have properties\n  var primitive = formatPrimitive(ctx, value);\n  if (primitive) {\n    return primitive;\n  }\n\n  // Look up the keys of the object.\n  var keys = Object.keys(value);\n  var visibleKeys = arrayToHash(keys);\n\n  if (ctx.showHidden) {\n    keys = Object.getOwnPropertyNames(value);\n  }\n\n  // IE doesn't make error fields non-enumerable\n  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx\n  if (isError(value)\n      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {\n    return formatError(value);\n  }\n\n  // Some type of object without properties can be shortcutted.\n  if (keys.length === 0) {\n    if (isFunction(value)) {\n      var name = value.name ? ': ' + value.name : '';\n      return ctx.stylize('[Function' + name + ']', 'special');\n    }\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    }\n    if (isDate(value)) {\n      return ctx.stylize(Date.prototype.toString.call(value), 'date');\n    }\n    if (isError(value)) {\n      return formatError(value);\n    }\n  }\n\n  var base = '', array = false, braces = ['{', '}'];\n\n  // Make Array say that they are Array\n  if (isArray(value)) {\n    array = true;\n    braces = ['[', ']'];\n  }\n\n  // Make functions say that they are functions\n  if (isFunction(value)) {\n    var n = value.name ? ': ' + value.name : '';\n    base = ' [Function' + n + ']';\n  }\n\n  // Make RegExps say that they are RegExps\n  if (isRegExp(value)) {\n    base = ' ' + RegExp.prototype.toString.call(value);\n  }\n\n  // Make dates with properties first say the date\n  if (isDate(value)) {\n    base = ' ' + Date.prototype.toUTCString.call(value);\n  }\n\n  // Make error with message first say the error\n  if (isError(value)) {\n    base = ' ' + formatError(value);\n  }\n\n  if (keys.length === 0 && (!array || value.length == 0)) {\n    return braces[0] + base + braces[1];\n  }\n\n  if (recurseTimes < 0) {\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    } else {\n      return ctx.stylize('[Object]', 'special');\n    }\n  }\n\n  ctx.seen.push(value);\n\n  var output;\n  if (array) {\n    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n  } else {\n    output = keys.map(function(key) {\n      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n    });\n  }\n\n  ctx.seen.pop();\n\n  return reduceToSingleString(output, base, braces);\n}\n\n\nfunction formatPrimitive(ctx, value) {\n  if (isUndefined(value))\n    return ctx.stylize('undefined', 'undefined');\n  if (isString(value)) {\n    var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '')\n                                             .replace(/'/g, \"\\\\'\")\n                                             .replace(/\\\\\"/g, '\"') + '\\'';\n    return ctx.stylize(simple, 'string');\n  }\n  if (isNumber(value))\n    return ctx.stylize('' + value, 'number');\n  if (isBoolean(value))\n    return ctx.stylize('' + value, 'boolean');\n  // For some reason typeof null is \"object\", so special case here.\n  if (isNull(value))\n    return ctx.stylize('null', 'null');\n}\n\n\nfunction formatError(value) {\n  return '[' + Error.prototype.toString.call(value) + ']';\n}\n\n\nfunction formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n  var output = [];\n  for (var i = 0, l = value.length; i < l; ++i) {\n    if (hasOwnProperty(value, String(i))) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          String(i), true));\n    } else {\n      output.push('');\n    }\n  }\n  keys.forEach(function(key) {\n    if (!key.match(/^\\d+$/)) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          key, true));\n    }\n  });\n  return output;\n}\n\n\nfunction formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n  var name, str, desc;\n  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };\n  if (desc.get) {\n    if (desc.set) {\n      str = ctx.stylize('[Getter/Setter]', 'special');\n    } else {\n      str = ctx.stylize('[Getter]', 'special');\n    }\n  } else {\n    if (desc.set) {\n      str = ctx.stylize('[Setter]', 'special');\n    }\n  }\n  if (!hasOwnProperty(visibleKeys, key)) {\n    name = '[' + key + ']';\n  }\n  if (!str) {\n    if (ctx.seen.indexOf(desc.value) < 0) {\n      if (isNull(recurseTimes)) {\n        str = formatValue(ctx, desc.value, null);\n      } else {\n        str = formatValue(ctx, desc.value, recurseTimes - 1);\n      }\n      if (str.indexOf('\\n') > -1) {\n        if (array) {\n          str = str.split('\\n').map(function(line) {\n            return '  ' + line;\n          }).join('\\n').substr(2);\n        } else {\n          str = '\\n' + str.split('\\n').map(function(line) {\n            return '   ' + line;\n          }).join('\\n');\n        }\n      }\n    } else {\n      str = ctx.stylize('[Circular]', 'special');\n    }\n  }\n  if (isUndefined(name)) {\n    if (array && key.match(/^\\d+$/)) {\n      return str;\n    }\n    name = JSON.stringify('' + key);\n    if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n      name = name.substr(1, name.length - 2);\n      name = ctx.stylize(name, 'name');\n    } else {\n      name = name.replace(/'/g, \"\\\\'\")\n                 .replace(/\\\\\"/g, '\"')\n                 .replace(/(^\"|\"$)/g, \"'\");\n      name = ctx.stylize(name, 'string');\n    }\n  }\n\n  return name + ': ' + str;\n}\n\n\nfunction reduceToSingleString(output, base, braces) {\n  var numLinesEst = 0;\n  var length = output.reduce(function(prev, cur) {\n    numLinesEst++;\n    if (cur.indexOf('\\n') >= 0) numLinesEst++;\n    return prev + cur.replace(/\\u001b\\[\\d\\d?m/g, '').length + 1;\n  }, 0);\n\n  if (length > 60) {\n    return braces[0] +\n           (base === '' ? '' : base + '\\n ') +\n           ' ' +\n           output.join(',\\n  ') +\n           ' ' +\n           braces[1];\n  }\n\n  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];\n}\n\n\n// NOTE: These type checking functions intentionally don't use `instanceof`\n// because it is fragile and can be easily faked with `Object.create()`.\nfunction isArray(ar) {\n  return Array.isArray(ar);\n}\nexports.isArray = isArray;\n\nfunction isBoolean(arg) {\n  return typeof arg === 'boolean';\n}\nexports.isBoolean = isBoolean;\n\nfunction isNull(arg) {\n  return arg === null;\n}\nexports.isNull = isNull;\n\nfunction isNullOrUndefined(arg) {\n  return arg == null;\n}\nexports.isNullOrUndefined = isNullOrUndefined;\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\nexports.isNumber = isNumber;\n\nfunction isString(arg) {\n  return typeof arg === 'string';\n}\nexports.isString = isString;\n\nfunction isSymbol(arg) {\n  return typeof arg === 'symbol';\n}\nexports.isSymbol = isSymbol;\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\nexports.isUndefined = isUndefined;\n\nfunction isRegExp(re) {\n  return isObject(re) && objectToString(re) === '[object RegExp]';\n}\nexports.isRegExp = isRegExp;\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\nexports.isObject = isObject;\n\nfunction isDate(d) {\n  return isObject(d) && objectToString(d) === '[object Date]';\n}\nexports.isDate = isDate;\n\nfunction isError(e) {\n  return isObject(e) &&\n      (objectToString(e) === '[object Error]' || e instanceof Error);\n}\nexports.isError = isError;\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\nexports.isFunction = isFunction;\n\nfunction isPrimitive(arg) {\n  return arg === null ||\n         typeof arg === 'boolean' ||\n         typeof arg === 'number' ||\n         typeof arg === 'string' ||\n         typeof arg === 'symbol' ||  // ES6 symbol\n         typeof arg === 'undefined';\n}\nexports.isPrimitive = isPrimitive;\n\nexports.isBuffer = __webpack_require__(/*! ./support/isBuffer */ \"./node_modules/util/support/isBufferBrowser.js\");\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n\n\nfunction pad(n) {\n  return n < 10 ? '0' + n.toString(10) : n.toString(10);\n}\n\n\nvar months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',\n              'Oct', 'Nov', 'Dec'];\n\n// 26 Feb 16:19:34\nfunction timestamp() {\n  var d = new Date();\n  var time = [pad(d.getHours()),\n              pad(d.getMinutes()),\n              pad(d.getSeconds())].join(':');\n  return [d.getDate(), months[d.getMonth()], time].join(' ');\n}\n\n\n// log is just a thin wrapper to console.log that prepends a timestamp\nexports.log = function() {\n  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));\n};\n\n\n/**\n * Inherit the prototype methods from one constructor into another.\n *\n * The Function.prototype.inherits from lang.js rewritten as a standalone\n * function (not on Function.prototype). NOTE: If this file is to be loaded\n * during bootstrapping this function needs to be rewritten using some native\n * functions as prototype setup using normal JavaScript does not work as\n * expected during bootstrapping (see mirror.js in r114903).\n *\n * @param {function} ctor Constructor function which needs to inherit the\n *     prototype.\n * @param {function} superCtor Constructor function to inherit prototype from.\n */\nexports.inherits = __webpack_require__(/*! inherits */ \"./node_modules/inherits/inherits_browser.js\");\n\nexports._extend = function(origin, add) {\n  // Don't do anything if add isn't an object\n  if (!add || !isObject(add)) return origin;\n\n  var keys = Object.keys(add);\n  var i = keys.length;\n  while (i--) {\n    origin[keys[i]] = add[keys[i]];\n  }\n  return origin;\n};\n\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\"), __webpack_require__(/*! ./../process/browser.js */ \"./node_modules/process/browser.js\")))\n\n//# sourceURL=webpack://HicStraw/./node_modules/util/util.js?");/***/},/***/"./node_modules/webpack/buildin/global.js":/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/ /*! no static exports found */ /***/function node_modulesWebpackBuildinGlobalJs(module,exports){eval("var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n\n\n//# sourceURL=webpack://HicStraw/(webpack)/buildin/global.js?");/***/},/***/"./src/binary.js":/*!***********************!*\
  !*** ./src/binary.js ***!
  \***********************/ /*! no static exports found */ /***/function srcBinaryJs(module,exports){eval("// TODO -- big endian\n\nconst BinaryParser = function (dataView, littleEndian) {\n\n    this.littleEndian = littleEndian !== undefined ? littleEndian : true\n    this.position = 0;\n    this.view = dataView;\n    this.length = dataView.byteLength;\n}\n\nBinaryParser.prototype.available = function () {\n    return this.length - this.position;\n}\n\nBinaryParser.prototype.remLength = function () {\n    return this.length - this.position;\n}\n\nBinaryParser.prototype.hasNext = function () {\n    return this.position < this.length - 1;\n}\n\nBinaryParser.prototype.getByte = function () {\n    var retValue = this.view.getUint8(this.position, this.littleEndian);\n    this.position++;\n    return retValue;\n}\n\nBinaryParser.prototype.getShort = function () {\n\n    var retValue = this.view.getInt16(this.position, this.littleEndian);\n    this.position += 2\n    return retValue;\n}\n\nBinaryParser.prototype.getUShort = function () {\n\n    // var byte1 = this.getByte(),\n    //     byte2 = this.getByte(),\n    //     retValue = ((byte2 << 24 >>> 16) + (byte1 << 24 >>> 24));\n    //     return retValue;\n\n    //\n    var retValue = this.view.getUint16(this.position, this.littleEndian);\n    this.position += 2\n    return retValue;\n}\n\n\nBinaryParser.prototype.getInt = function () {\n\n    var retValue = this.view.getInt32(this.position, this.littleEndian);\n    this.position += 4;\n    return retValue;\n}\n\n\nBinaryParser.prototype.getUInt = function () {\n    var retValue = this.view.getUint32(this.position, this.littleEndian);\n    this.position += 4;\n    return retValue;\n}\n\nBinaryParser.prototype.getLong = function () {\n\n    // DataView doesn't support long. So we'll try manually\n\n    var b = [];\n    b[0] = this.view.getUint8(this.position);\n    b[1] = this.view.getUint8(this.position + 1);\n    b[2] = this.view.getUint8(this.position + 2);\n    b[3] = this.view.getUint8(this.position + 3);\n    b[4] = this.view.getUint8(this.position + 4);\n    b[5] = this.view.getUint8(this.position + 5);\n    b[6] = this.view.getUint8(this.position + 6);\n    b[7] = this.view.getUint8(this.position + 7);\n\n    var value = 0;\n    if (this.littleEndian) {\n        for (var i = b.length - 1; i >= 0; i--) {\n            value = (value * 256) + b[i];\n        }\n    } else {\n        for (var i = 0; i < b.length; i++) {\n            value = (value * 256) + b[i];\n        }\n    }\n\n\n    this.position += 8;\n    return value;\n}\n\nBinaryParser.prototype.getString = function (len) {\n\n    var s = \"\";\n    var c;\n    while ((c = this.view.getUint8(this.position++)) != 0) {\n        s += String.fromCharCode(c);\n        if (len && s.length == len) break;\n    }\n    return s;\n}\n\nBinaryParser.prototype.getFixedLengthString = function (len) {\n\n    var s = \"\";\n    var i;\n    var c;\n    for (i = 0; i < len; i++) {\n        c = this.view.getUint8(this.position++);\n        if (c > 0) {\n            s += String.fromCharCode(c);\n        }\n    }\n    return s;\n}\n\nBinaryParser.prototype.getFixedLengthTrimmedString = function (len) {\n\n    var s = \"\";\n    var i;\n    var c;\n    for (i = 0; i < len; i++) {\n        c = this.view.getUint8(this.position++);\n        if (c > 32) {\n            s += String.fromCharCode(c);\n        }\n    }\n    return s;\n}\n\nBinaryParser.prototype.getFloat = function () {\n\n    var retValue = this.view.getFloat32(this.position, this.littleEndian);\n    this.position += 4;\n    return retValue;\n\n\n}\n\nBinaryParser.prototype.getDouble = function () {\n\n    var retValue = this.view.getFloat64(this.position, this.littleEndian);\n    this.position += 8;\n    return retValue;\n}\n\nBinaryParser.prototype.skip = function (n) {\n\n    this.position += n;\n    return this.position;\n}\n\n\n/**\n * Return a bgzip (bam and tabix) virtual pointer\n * TODO -- why isn't 8th byte used ?\n * @returns {*}\n */\nBinaryParser.prototype.getVPointer = function () {\n\n    var position = this.position,\n        offset = (this.view.getUint8(position + 1) << 8) | (this.view.getUint8(position)),\n        byte6 = ((this.view.getUint8(position + 6) & 0xff) * 0x100000000),\n        byte5 = ((this.view.getUint8(position + 5) & 0xff) * 0x1000000),\n        byte4 = ((this.view.getUint8(position + 4) & 0xff) * 0x10000),\n        byte3 = ((this.view.getUint8(position + 3) & 0xff) * 0x100),\n        byte2 = ((this.view.getUint8(position + 2) & 0xff)),\n        block = byte6 + byte5 + byte4 + byte3 + byte2;\n    this.position += 8;\n\n    //       if (block == 0 && offset == 0) {\n    //           return null;\n    //       } else {\n    return new VPointer(block, offset);\n    //       }\n}\n\n\nfunction VPointer(block, offset) {\n    this.block = block;\n    this.offset = offset;\n}\n\nVPointer.prototype.isLessThan = function (vp) {\n    return this.block < vp.block ||\n        (this.block === vp.block && this.offset < vp.offset);\n}\n\nVPointer.prototype.isGreaterThan = function (vp) {\n    return this.block > vp.block ||\n        (this.block === vp.block && this.offset > vp.offset);\n}\n\nVPointer.prototype.print = function () {\n    return \"\" + this.block + \":\" + this.offset;\n}\n\n\nmodule.exports = BinaryParser\n\n//# sourceURL=webpack://HicStraw/./src/binary.js?");/***/},/***/"./src/contactRecord.js":/*!******************************!*\
  !*** ./src/contactRecord.js ***!
  \******************************/ /*! no static exports found */ /***/function srcContactRecordJs(module,exports){eval("\nclass ContactRecord {\n\n    constructor(bin1, bin2, counts) {\n        this.bin1 = bin1;\n        this.bin2 = bin2;\n        this.counts = counts;\n    };\n\n    getKey() {\n        return \"\" + this.bin1 + \"_\" + this.bin2;\n    }\n}\n\nmodule.exports = ContactRecord\n\n//# sourceURL=webpack://HicStraw/./src/contactRecord.js?");/***/},/***/"./src/hicFile.js":/*!************************!*\
  !*** ./src/hicFile.js ***!
  \************************/ /*! no static exports found */ /***/function srcHicFileJs(module,exports,__webpack_require__){eval("/* WEBPACK VAR INJECTION */(function(Buffer) {const zlib = __webpack_require__(/*! zlib */ \"./node_modules/browserify-zlib/lib/index.js\")\nconst fetch = __webpack_require__(/*! cross-fetch */ \"./node_modules/cross-fetch/dist/browser-ponyfill.js\")\n\nconst BrowserLocalFile = __webpack_require__(/*! ./io/browserLocalFile */ \"./src/io/browserLocalFile.js\")\nconst RemoteFile = __webpack_require__(/*! ./io/remoteFile */ \"./src/io/remoteFile.js\")\nconst ThrottledFile = __webpack_require__(/*! ./io/throttledFile */ \"./src/io/throttledFile.js\")\nconst RateLimiter = __webpack_require__(/*! ./io/rateLimiter */ \"./src/io/rateLimiter.js\")\nconst BufferedFile = __webpack_require__(/*! ./io/bufferedFile */ \"./src/io/bufferedFile.js\")\nconst BinaryParser = __webpack_require__(/*! ./binary */ \"./src/binary.js\")\nconst Matrix = __webpack_require__(/*! ./matrix */ \"./src/matrix.js\")\nconst MatrixZoomData = __webpack_require__(/*! ./matrixZoomData */ \"./src/matrixZoomData.js\")\nconst NormalizationVector = __webpack_require__(/*! ./normalizationVector */ \"./src/normalizationVector.js\")\nconst ContactRecord = __webpack_require__(/*! ./contactRecord */ \"./src/contactRecord.js\")\n\nconst Short_MIN_VALUE = -32768;\n\nconst googleRateLimiter = new RateLimiter(100)\n\nclass Block {\n    constructor(blockNumber, zoomData, records, idx) {\n        this.blockNumber = blockNumber;\n        this.zoomData = zoomData;\n        this.records = records;\n        this.idx = idx\n    }\n}\n\nclass HicFile {\n\n    constructor(args) {\n\n        this.config = args\n\n        this.loadFragData = args.loadFragData\n\n        this.fragmentSitesCache = {}\n        this.normVectorCache = {}\n        this.normalizationTypes = ['NONE'];\n\n        // args may specify an io.File object, a local path (Node only), or a url\n        if (args.file) {\n            this.file = args.file\n        } else if (args.blob) {\n            this.file = new BrowserLocalFile(args.blob)\n        }  else {\n            this.url = args.path || args.url\n\n            if (this.url.startsWith(\"http://\") || this.url.startsWith(\"https://\")) {\n                this.remote = true\n\n                // Google drive must be rate limited.  Perhaps all\n                const remoteFile = new RemoteFile(args)\n                if(isGoogle(this.url)) {\n                    this.file = new ThrottledFile(remoteFile, googleRateLimiter)\n                } else {\n                    this.file = remoteFile\n                }\n\n            } else {\n                throw Error(\"Arguments must include file, blob, or url\")\n            }\n        }\n    };\n\n    async init() {\n\n        if (this.initialized) {\n            return;\n        } else {\n            await this.readHeader()\n            await this.readFooter()\n            this.initialized = true\n        }\n    }\n\n    async getMetaData() {\n        await this.init()\n        return this.meta\n    }\n\n    async readHeader() {\n\n        const data = await this.file.read(0, 64000)\n\n        if (!data) {\n            return undefined;\n        }\n\n        const binaryParser = new BinaryParser(new DataView(data));\n\n        this.magic = binaryParser.getString();\n        this.version = binaryParser.getInt();\n        this.masterIndexPos = binaryParser.getLong();\n        this.genomeId = binaryParser.getString();\n\n        this.attributes = {};\n        let nAttributes = binaryParser.getInt();\n        while (nAttributes-- > 0) {\n            this.attributes[binaryParser.getString()] = binaryParser.getString();\n        }\n\n        this.chromosomes = [];\n        this.chromosomeIndexMap = {}\n        let nChrs = binaryParser.getInt();\n        let i = 0\n        while (nChrs-- > 0) {\n            const chr = {\n                index: i,\n                name: binaryParser.getString(),\n                size: binaryParser.getInt()\n            };\n            if (chr.name.toLowerCase() === \"all\") {\n                this.wholeGenomeChromosome = chr;\n                this.wholeGenomeResolution = Math.round(chr.size * (1000 / 500));    // Hardcoded in juicer\n            }\n            this.chromosomes.push(chr);\n            this.chromosomeIndexMap[chr.name] = chr.index\n            i++;\n        }\n\n        this.bpResolutions = [];\n        let nBpResolutions = binaryParser.getInt();\n        while (nBpResolutions-- > 0) {\n            this.bpResolutions.push(binaryParser.getInt());\n        }\n\n        if (this.loadFragData) {\n            this.fragResolutions = [];\n            let nFragResolutions = binaryParser.getInt();\n            while (nFragResolutions-- > 0) {\n                this.fragResolutions.push(binaryParser.getInt());\n            }\n\n            if (nFragResolutions > 0) {\n                this.sites = [];\n                let nSites = binaryParser.getInt();\n                while (nSites-- > 0) {\n                    this.sites.push(binaryParser.getInt());\n                }\n            }\n        }\n\n        // Build lookup table for well-known chr aliases\n        this.chrAliasTable = {}\n        for (let chrName of Object.keys(this.chromosomeIndexMap)) {\n\n            if (chrName.startsWith(\"chr\")) {\n                this.chrAliasTable[chrName.substr(3)] = chrName\n            } else if (chrName === \"MT\") {\n                this.chrAliasTable[\"chrM\"] = chrName\n            } else {\n                this.chrAliasTable[\"chr\" + chrName] = chrName\n            }\n        }\n\n\n        // Meta data for the API\n        this.meta = {\n            \"version\": this.version,\n            \"genome\": this.genomeId,\n            \"chromosomes\": this.chromosomes,\n            \"resolutions\": this.bpResolutions,\n        }\n\n\n    }\n\n    async readFooter() {\n\n\n        let data = await this.file.read(this.masterIndexPos, 8)\n        if (!data) {\n            return null;\n        }\n\n        let binaryParser = new BinaryParser(new DataView(data))\n        const nBytes = binaryParser.getInt()   // Total size, master index + expected values\n        let nEntries = binaryParser.getInt()\n\n        // Estimate the size of the master index. String length of key is unknown, be conservative (100 bytes)\n        const miSize = nEntries * (100 + 64 + 32)\n        let range = {start: this.masterIndexPos + 8, size: Math.min(miSize, nBytes - 4)}\n        data = await this.file.read(this.masterIndexPos + 8, Math.min(miSize, nBytes - 4))\n        binaryParser = new BinaryParser(new DataView(data));\n\n        this.masterIndex = {}\n        while (nEntries-- > 0) {\n            const key = binaryParser.getString()\n            const pos = binaryParser.getLong()\n            const size = binaryParser.getInt()\n            this.masterIndex[key] = {start: pos, size: size}\n        }\n\n        this.expectedValueVectors = {}\n\n        nEntries = binaryParser.getInt()\n\n        // Expected values\n        // while (nEntries-- > 0) {\n        //     type = \"NONE\";\n        //     unit = binaryParser.getString();\n        //     binSize = binaryParser.getInt();\n        //     nValues = binaryParser.getInt();\n        //     values = [];\n        //     while (nValues-- > 0) {\n        //         values.push(binaryParser.getDouble());\n        //     }\n        //\n        //     nChrScaleFactors = binaryParser.getInt();\n        //     normFactors = {};\n        //     while (nChrScaleFactors-- > 0) {\n        //         normFactors[binaryParser.getInt()] = binaryParser.getDouble();\n        //     }\n        //\n        //     // key = unit + \"_\" + binSize + \"_\" + type;\n        //     //  NOT USED YET SO DON'T STORE\n        //     //  dataset.expectedValueVectors[key] =\n        //     //      new ExpectedValueFunction(type, unit, binSize, values, normFactors);\n        // }\n\n        this.normExpectedValueVectorsPosition = this.masterIndexPos + 4 + nBytes;\n\n        return this;\n    };\n\n    async readMatrix(chrIdx1, chrIdx2) {\n\n        await this.init()\n\n        if (chrIdx1 > chrIdx2) {\n            const tmp = chrIdx1\n            chrIdx1 = chrIdx2\n            chrIdx2 = tmp\n        }\n\n        const key = \"\" + chrIdx1 + \"_\" + chrIdx2\n\n        const idx = this.masterIndex[key]\n        if (!idx) {\n            return undefined\n        }\n\n        const data = await this.file.read(idx.start, idx.size)\n        if (!data) {\n            return undefined\n        }\n\n        const dis = new BinaryParser(new DataView(data));\n        const c1 = dis.getInt();     // Should equal chrIdx1\n        const c2 = dis.getInt();     // Should equal chrIdx2\n\n        // TODO validate this\n        const chr1 = this.chromosomes[c1];\n        const chr2 = this.chromosomes[c2];\n\n        // # of resolution levels (bp and frags)\n        let nResolutions = dis.getInt();\n        const zdList = [];\n\n        const sites1 = await this.getSites.call(this, chr1.name)\n        const sites2 = await this.getSites.call(this, chr2.name)\n\n        let bytesAvailable = dis.available()\n        let z = 0\n        let filePosition = idx.start\n        while (nResolutions-- > 0) {\n\n            const zd = parseMatixZoomData(chr1, chr2, sites1, sites2, dis);\n            const bytesUsed = bytesAvailable - dis.available()\n            zd.idx = {\n                start: filePosition,\n                size: bytesUsed\n            }\n            bytesAvailable = dis.available()\n            zdList.push(zd);\n            //console.log(`zd${z++}: ${bytesUsed}`)\n        }\n        return new Matrix(chrIdx1, chrIdx2, zdList);\n\n    }\n\n    /***\n     * Return the raw data for the block.  Function provided for testing and development\n     * @param blockNumber\n     * @param zd\n     * @returns {Promise<void>}\n     */\n    async readBlockData(blockNumber, zd) {\n\n        var self = this,\n            idx = null,\n            i, j;\n\n        var blockIndex = zd.blockIndexMap;\n        if (blockIndex) {\n            var idx = blockIndex[blockNumber];\n        }\n        if (!idx) {\n            return undefined\n        }\n        else {\n\n            return this.file.read(idx.filePosition, idx.size)\n        }\n    }\n\n    async readBlock(blockNumber, zd) {\n\n        var self = this,\n            idx = null,\n            i, j;\n\n        var blockIndex = zd.blockIndexMap;\n        if (blockIndex) {\n            var idx = blockIndex[blockNumber];\n        }\n        if (!idx) {\n            return undefined\n        }\n        else {\n\n            let data = await this.file.read(idx.filePosition, idx.size)\n\n            if (!data) {\n                return undefined;\n            }\n\n            //var inflate = new Zlib.Inflate(new Uint8Array(data));\n            var plain = zlib.inflateSync(Buffer.from(data))   //.decompress();\n            data = plain.buffer;\n\n\n            var parser = new BinaryParser(new DataView(data));\n            var nRecords = parser.getInt();\n            var records = [];\n\n            if (self.version < 7) {\n                for (i = 0; i < nRecords; i++) {\n                    var binX = parser.getInt();\n                    var binY = parser.getInt();\n                    var counts = parser.getFloat();\n                    records.push(new ContactRecord(binX, binY, counts));\n                }\n            } else {\n\n                var binXOffset = parser.getInt();\n                var binYOffset = parser.getInt();\n\n                var useShort = parser.getByte() == 0;\n                var type = parser.getByte();\n\n                if (type === 1) {\n                    // List-of-rows representation\n                    var rowCount = parser.getShort();\n\n                    for (i = 0; i < rowCount; i++) {\n\n                        binY = binYOffset + parser.getShort();\n                        var colCount = parser.getShort();\n\n                        for (j = 0; j < colCount; j++) {\n\n                            binX = binXOffset + parser.getShort();\n                            counts = useShort ? parser.getShort() : parser.getFloat();\n                            records.push(new ContactRecord(binX, binY, counts));\n                        }\n                    }\n                } else if (type == 2) {\n\n                    var nPts = parser.getInt();\n                    var w = parser.getShort();\n\n                    for (i = 0; i < nPts; i++) {\n                        //int idx = (p.y - binOffset2) * w + (p.x - binOffset1);\n                        var row = Math.floor(i / w);\n                        var col = i - row * w;\n                        var bin1 = binXOffset + col;\n                        var bin2 = binYOffset + row;\n\n                        if (useShort) {\n                            counts = parser.getShort();\n                            if (counts != Short_MIN_VALUE) {\n                                records.push(new ContactRecord(bin1, bin2, counts));\n                            }\n                        } else {\n                            counts = parser.getFloat();\n                            if (!isNaN(counts)) {\n                                records.push(new ContactRecord(bin1, bin2, counts));\n                            }\n                        }\n\n                    }\n\n                } else {\n                    throw new Error(\"Unknown block type: \" + type);\n                }\n\n            }\n\n            return new Block(blockNumber, zd, records, idx);\n\n\n        }\n    };\n\n    async getSites(chrName) {\n\n        return undefined\n\n        // var self = this;\n        // var sites, entry;\n        //\n        // sites = self.fragmentSitesCache[chrName];\n        //\n        // if (sites) {\n        //     return Promise.resolve(sites);\n        //\n        // } else if (self.fragmentSitesIndex) {\n        //\n        //     entry = self.fragmentSitesIndex[chrName];\n        //\n        //     if (entry !== undefined && entry.nSites > 0) {\n        //\n        //         return readSites(entry.position, entry.nSites)\n        //             .then(function (sites) {\n        //                 self.fragmentSitesCache[chrName] = sites;\n        //                 return sites;\n        //\n        //             })\n        //     }\n        // }\n        // else {\n        //     return Promise.resolve(undefined);\n        // }\n\n    }\n\n    async getNormalizationVector(type, chr, unit, binSize) {\n\n        await this.init()\n\n        let chrIdx\n        if (Number.isInteger(chr)) {\n            chrIdx = chr\n        } else {\n            const canonicalName = this.getFileChrName(chr)\n            chrIdx = this.chromosomeIndexMap[canonicalName]\n        }\n\n\n        const key = getNormalizationVectorKey(type, chrIdx, unit.toString(), binSize);\n\n        if (this.normVectorCache.hasOwnProperty(key)) {\n            return Promise.resolve(this.normVectorCache[key]);\n        }\n\n        const normVectorIndex = await this.getNormVectorIndex()\n\n        if (!normVectorIndex) {\n            console.log(\"Normalization vectors not present in this file\")\n            return undefined\n        }\n\n        const idx = normVectorIndex[key];\n        if (!idx) {\n            // TODO -- alert in browsers\n            console.log(\"Normalization option \" + type + \" not available at this resolution\");\n            return undefined;\n        }\n\n        const data = await this.file.read(idx.filePosition, idx.size)\n\n        if (!data) {\n            return undefined;\n        }\n\n        const parser = new BinaryParser(new DataView(data));\n        const nValues = parser.getInt();\n        const values = [];\n        let allNaN = true;\n        for (let i = 0; i < nValues; i++) {\n            values[i] = parser.getDouble();\n            if (!isNaN(values[i])) {\n                allNaN = false;\n            }\n        }\n        if (allNaN) {\n            return undefined;\n        } else {\n            return new NormalizationVector(type, chrIdx, unit, binSize, values);\n        }\n\n    }\n\n    async getNormVectorIndex() {\n\n        if (!this.normVectorIndex) {\n\n            // If nvi is not supplied, try reading from remote lambda service\n            if (!this.config.nvi && this.remote && this.url) {\n                const url = new URL(this.url)\n                const key = encodeURIComponent(url.hostname + url.pathname)\n                const nviResponse = await fetch('https://t5dvc6kn3f.execute-api.us-east-1.amazonaws.com/dev/nvi/' + key)\n                if (nviResponse.status === 200) {\n                    const nvi = await nviResponse.text()\n                    if (nvi) {\n                        this.config.nvi = nvi\n                    }\n                }\n            }\n\n            if (this.config.nvi) {\n                const nviArray = decodeURIComponent(this.config.nvi).split(\",\")\n                const range = {start: parseInt(nviArray[0]), size: parseInt(nviArray[1])};\n                return this.readNormVectorIndex(range)\n            }\n            else {\n                try {\n                    await this.readNormExpectedValuesAndNormVectorIndex()\n                    return this.normVectorIndex\n                } catch (e) {\n                    if (e.code === \"416\" || e.code === 416) {\n                        // This is expected if file does not contain norm vectors\n                        this.normExpectedValueVectorsPosition = undefined\n                    } else {\n                        console.error(e)\n                    }\n                }\n            }\n        }\n\n        return this.normVectorIndex\n    }\n\n    async getNormalizationOptions() {\n        // Normalization options are computed as a side effect of loading the index.  A bit\n        // ugly but alternatives are worse.\n        await this.getNormVectorIndex()\n        return this.normalizationTypes;\n    }\n\n    /**\n     * Return a promise to load the normalization vector index\n     *\n     * @param dataset\n     * @param range  -- file range {position, size}\n     * @returns Promise for the normalization vector index\n     */\n    async readNormVectorIndex(range) {\n\n        await this.init()\n\n        this.normalizationVectorIndexRange = range;\n\n        const data = await this.file.read(range.start, range.size)\n\n        const binaryParser = new BinaryParser(new DataView(data));\n\n        this.normVectorIndex = {};\n\n        let nEntries = binaryParser.getInt();\n        while (nEntries-- > 0) {\n            this.parseNormVectorEntry(binaryParser)\n        }\n\n        return this.normVectorIndex;\n\n    }\n\n    /**\n     * This function is used when the position of the norm vector index is unknown.  We must read through the expected\n     * values to find the index\n     *\n     * @param dataset\n     * @returns {Promise}\n     */\n    async readNormExpectedValuesAndNormVectorIndex() {\n\n        await this.init()\n\n        if (this.normExpectedValueVectorsPosition === undefined) {\n            return;\n        }\n\n        const nviStart = await this.skipExpectedValues(this.normExpectedValueVectorsPosition)\n        let byteCount = 4;\n\n        let data = await this.file.read(nviStart, 4)\n        const binaryParser = new BinaryParser(new DataView(data));\n        const nEntries = binaryParser.getInt();\n        const sizeEstimate = nEntries * 30;\n        const range = {start: nviStart + byteCount, size: sizeEstimate}\n\n        data = await this.file.read(range.start, range.size)\n        this.normalizedExpectedValueVectors = {};\n        this.normVectorIndex = {};\n\n        // Recursively process entries\n        await processEntries.call(this, nEntries, data)\n\n        this.config.nvi = nviStart.toString() + \",\" + byteCount\n\n        async function processEntries(nEntries, data) {\n\n            const binaryParser = new BinaryParser(new DataView(data));\n\n            while (nEntries-- > 0) {\n\n                if (binaryParser.available() < 100) {\n\n                    nEntries++;   // Reset counter as entry is not processed\n\n                    byteCount += binaryParser.position;\n                    const sizeEstimate = Math.max(1000, nEntries * 30);\n                    const range = {start: nviStart + byteCount, size: sizeEstimate}\n                    const data = await this.file.read(range.start, range.size)\n                    return processEntries.call(this, nEntries, data);\n                }\n\n                this.parseNormVectorEntry(binaryParser)\n\n            }\n            byteCount += binaryParser.position;\n        }\n    }\n\n    /**\n     * This function is used when the position of the norm vector index is unknown.  We must read through the expected\n     * values to find the index\n     *\n     * @param dataset\n     * @returns {Promise}\n     */\n    async skipExpectedValues(start) {\n\n        const file = new BufferedFile({file: this.file, size: 256000})\n        const range = {start: start, size: 4};\n        const data = await file.read(range.start, range.size)\n        const binaryParser = new BinaryParser(new DataView(data));\n        const nEntries = binaryParser.getInt();   // Total # of expected value chunks\n        if (nEntries === 0) {\n            return range.start + range.size;\n        }\n        else {\n            return parseNext(start + 4, nEntries);\n        }     // Skip 4 bytes for int\n\n\n        async function parseNext(start, nEntries) {\n\n            let range = {start: start, size: 500}\n            let chunkSize = 0\n            let p0 = start;\n\n            let data = await file.read(range.start, range.size)\n            let binaryParser = new BinaryParser(new DataView(data));\n            binaryParser.getString(); // type\n            binaryParser.getString(); // unit\n            binaryParser.getInt(); // binSize\n            const nValues = binaryParser.getInt();\n            chunkSize += binaryParser.position + nValues * 8;\n\n            range = {start: start + chunkSize, size: 4};\n            data = await file.read(range.start, range.size)\n            binaryParser = new BinaryParser(new DataView(data));\n            const nChrScaleFactors = binaryParser.getInt();\n            chunkSize += (4 + nChrScaleFactors * (4 + 8));\n\n            nEntries--;\n            if (nEntries === 0) {\n                return Promise.resolve(p0 + chunkSize);\n            }\n            else {\n                return parseNext(p0 + chunkSize, nEntries);\n            }\n        }\n    }\n\n    getZoomIndexForBinSize(binSize, unit) {\n\n        unit = unit || \"BP\";\n\n        let resolutionArray\n        if (unit === \"BP\") {\n            resolutionArray = this.bpResolutions;\n        }\n        else if (unit === \"FRAG\") {\n            resolutionArray = this.fragResolutions;\n        } else {\n            throw new Error(\"Invalid unit: \" + unit);\n        }\n\n        for (let i = 0; i < resolutionArray.length; i++) {\n            if (resolutionArray[i] === binSize) return i;\n        }\n\n        return -1;\n    }\n\n    parseNormVectorEntry(binaryParser) {\n        const type = binaryParser.getString();      //15\n        const chrIdx = binaryParser.getInt();       //4\n        const unit = binaryParser.getString();      //3\n        const binSize = binaryParser.getInt();      //4\n        const filePosition = binaryParser.getLong();  //8\n        const sizeInBytes = binaryParser.getInt();     //4\n        const key = type + \"_\" + chrIdx + \"_\" + unit + \"_\" + binSize;\n        // TODO -- why does this not work?  NormalizationVector.getNormalizationVectorKey(type, chrIdx, unit, binSize);\n\n        if (!this.normalizationTypes.includes(type)) {\n            this.normalizationTypes.push(type);\n        }\n        this.normVectorIndex[key] = {filePosition: filePosition, size: sizeInBytes};\n    }\n\n    getFileChrName(chrAlias) {\n        if (this.chrAliasTable.hasOwnProperty(chrAlias)) {\n            return this.chrAliasTable[chrAlias]\n        }\n        else {\n            return chrAlias\n        }\n    }\n}\n\n\nfunction parseMatixZoomData(chr1, chr2, chr1Sites, chr2Sites, dis) {\n\n    var unit, sumCounts, occupiedCellCount, stdDev, percent95, binSize, zoom, blockBinCount,\n        blockColumnCount, zd, nBlocks, blockIndex, nBins1, nBins2, avgCount, blockNumber,\n        filePosition, blockSizeInBytes;\n\n    unit = dis.getString();\n\n    dis.getInt();                // Old \"zoom\" index -- not used, must be read\n\n    // Stats.  Not used yet, but we need to read them anyway\n    sumCounts = dis.getFloat();\n    occupiedCellCount = dis.getFloat();\n    stdDev = dis.getFloat();\n    percent95 = dis.getFloat();\n\n    binSize = dis.getInt();\n    zoom = {unit: unit, binSize: binSize};\n\n    blockBinCount = dis.getInt();\n    blockColumnCount = dis.getInt();\n\n    zd = new MatrixZoomData(chr1, chr2, zoom, blockBinCount, blockColumnCount, chr1Sites, chr2Sites);\n\n    nBlocks = dis.getInt();\n    blockIndex = {};\n\n    while (nBlocks-- > 0) {\n        blockNumber = dis.getInt();\n        filePosition = dis.getLong();\n        blockSizeInBytes = dis.getInt();\n        blockIndex[blockNumber] = {filePosition: filePosition, size: blockSizeInBytes};\n    }\n    zd.blockIndexMap = blockIndex;\n\n    nBins1 = (chr1.size / binSize);\n    nBins2 = (chr2.size / binSize);\n    avgCount = (sumCounts / nBins1) / nBins2;   // <= trying to avoid overflows\n\n    zd.averageCount = avgCount;\n    zd.sumCounts = sumCounts;\n    zd.stdDev = stdDev;\n    zd.occupiedCellCount = occupiedCellCount;\n    zd.percent95 = percent95;\n\n    return zd;\n}\n\nfunction getNormalizationVectorKey(type, chrIdx, unit, resolution) {\n    return type + \"_\" + chrIdx + \"_\" + unit + \"_\" + resolution;\n}\n\nfunction isGoogle(url) {\n    return url.indexOf(\"drive.google.com\") >= 0 || url.indexOf(\"www.googleapis.com\") > 0\n}\n\n\nmodule.exports = HicFile\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../node_modules/buffer/index.js */ \"./node_modules/buffer/index.js\").Buffer))\n\n//# sourceURL=webpack://HicStraw/./src/hicFile.js?");/***/},/***/"./src/index.js":/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/ /*! no static exports found */ /***/function srcIndexJs(module,exports,__webpack_require__){eval("// Entry point for webpack.\n\nconst Straw = __webpack_require__(/*! ./straw */ \"./src/straw.js\")\nconst HicFile = __webpack_require__(/*! ./hicFile */ \"./src/hicFile.js\")\n\nmodule.exports = Straw\n\n//# sourceURL=webpack://HicStraw/./src/index.js?");/***/},/***/"./src/io/browserLocalFile.js":/*!************************************!*\
  !*** ./src/io/browserLocalFile.js ***!
  \************************************/ /*! no static exports found */ /***/function srcIoBrowserLocalFileJs(module,exports){eval("class BrowserLocalFile {\n\n    constructor(blob) {\n        this.file = blob\n    }\n\n    async read(position, length) {\n\n        const file = this.file;\n\n        return new Promise(function (fullfill, reject) {\n\n            const fileReader = new FileReader();\n\n            fileReader.onload = function (e) {\n                fullfill(fileReader.result);\n            };\n\n            fileReader.onerror = function (e) {\n                console.err(\"Error reading local file \" + file.name);\n                reject(null, fileReader);\n            };\n\n            if (position !== undefined) {\n                const blob = file.slice(position, position + length);\n                fileReader.readAsArrayBuffer(blob);\n\n            } else {\n                fileReader.readAsArrayBuffer(file);\n\n            }\n\n        });\n    }\n}\n\nmodule.exports = BrowserLocalFile\n\n\n//# sourceURL=webpack://HicStraw/./src/io/browserLocalFile.js?");/***/},/***/"./src/io/bufferedFile.js":/*!********************************!*\
  !*** ./src/io/bufferedFile.js ***!
  \********************************/ /*! no static exports found */ /***/function srcIoBufferedFileJs(module,exports){eval("class BufferedFile {\n\n    constructor(args) {\n        this.file = args.file\n        this.size = args.size || 64000\n        this.position = 0\n        this.bufferStart = 0\n        this.bufferLength = 0\n        this.buffer = undefined\n    }\n\n\n    async read(position, length) {\n\n        const start = position\n        const end = position + length\n        const bufferStart = this.bufferStart\n        const bufferEnd = this.bufferStart + this.bufferLength\n\n\n        if (length > this.size) {\n            // Request larger than max buffer size,  pass through to underlying file\n            //console.log(\"0\")\n            this.buffer = undefined\n            this.bufferStart = 0\n            this.bufferLength = 0\n            return this.file.read(position, length)\n        }\n\n        if (start >= bufferStart && end <= bufferEnd) {\n            // Request within buffer bounds\n            //console.log(\"1\")\n            const sliceStart = start - bufferStart\n            const sliceEnd = sliceStart + length\n            return this.buffer.slice(sliceStart, sliceEnd)\n        }\n\n        else if (start < bufferStart && end > bufferStart) {\n            // Overlap left, here for completness but this is an unexpected case in straw.  We don't adjust the buffer.\n            //console.log(\"2\")\n            const l1 = bufferStart - start\n            const a1 = await this.file.read(position, l1)\n            const l2 = length - l1\n            if (l2 > 0) {\n                //this.buffer = await this.file.read(bufferStart, this.size)\n                const a2 = this.buffer.slice(0, l2)\n                return concatBuffers(a1, a2)\n            } else {\n                return a1\n            }\n\n        }\n\n        else if (start < bufferEnd && end > bufferEnd) {\n            // Overlap right\n            // console.log(\"3\")\n            const l1 = bufferEnd - start\n            const sliceStart = this.bufferLength - l1\n            const a1 = this.buffer.slice(sliceStart, this.bufferLength)\n\n            const l2 = length - l1\n            if (l2 > 0) {\n                try {\n                    this.buffer = await this.file.read(bufferEnd, this.size)\n                    this.bufferStart = bufferEnd\n                    this.bufferLength = this.buffer.byteLength\n                    const a2 = this.buffer.slice(0, l2)\n                    return concatBuffers(a1, a2)\n                } catch (e) {\n                    // A \"unsatisfiable range\" error is expected here if we overlap past the end of file\n                    if (e.code && e.code === 416) {\n                        return a1\n                    }\n                    else {\n                        throw e\n                    }\n                }\n\n            } else {\n                return a1\n            }\n\n        }\n\n        else {\n            // No overlap with buffer\n            // console.log(\"4\")\n            this.buffer = await this.file.read(position, this.size)\n            this.bufferStart = position\n            this.bufferLength = this.buffer.byteLength\n            return this.buffer.slice(0, length)\n        }\n\n    }\n\n}\n\n/**\n * concatenates 2 array buffers.\n * Credit: https://gist.github.com/72lions/4528834\n *\n * @private\n * @param {ArrayBuffers} buffer1 The first buffer.\n * @param {ArrayBuffers} buffer2 The second buffer.\n * @return {ArrayBuffers} The new ArrayBuffer created out of the two.\n */\nvar concatBuffers = function (buffer1, buffer2) {\n    var tmp = new Uint8Array(buffer1.byteLength + buffer2.byteLength);\n    tmp.set(new Uint8Array(buffer1), 0);\n    tmp.set(new Uint8Array(buffer2), buffer1.byteLength);\n    return tmp.buffer;\n};\n\n\nmodule.exports = BufferedFile\n\n//# sourceURL=webpack://HicStraw/./src/io/bufferedFile.js?");/***/},/***/"./src/io/rateLimiter.js":/*!*******************************!*\
  !*** ./src/io/rateLimiter.js ***!
  \*******************************/ /*! no static exports found */ /***/function srcIoRateLimiterJs(module,exports){eval("class RateLimiter {\n\n    constructor(wait) {\n        this.wait = wait === undefined ? 100 : wait\n\n        this.isCalled = false\n        this.calls = [];\n    }\n\n\n    limiter(fn) {\n\n        const self = this\n\n        let caller = function () {\n\n            if (self.calls.length && !self.isCalled) {\n                self.isCalled = true;\n                self.calls.shift().call();\n                setTimeout(function () {\n                    self.isCalled = false;\n                    caller();\n                }, self.wait);\n            }\n        };\n\n        return function () {\n            self.calls.push(fn.bind(this, ...arguments));\n            caller();\n        };\n    }\n\n}\n\nmodule.exports = RateLimiter\n\n//# sourceURL=webpack://HicStraw/./src/io/rateLimiter.js?");/***/},/***/"./src/io/remoteFile.js":/*!******************************!*\
  !*** ./src/io/remoteFile.js ***!
  \******************************/ /*! no static exports found */ /***/function srcIoRemoteFileJs(module,exports,__webpack_require__){eval("const fetch = __webpack_require__(/*! cross-fetch */ \"./node_modules/cross-fetch/dist/browser-ponyfill.js\")\nconst jsEnv = __webpack_require__(/*! browser-or-node */ \"./node_modules/browser-or-node/lib/index.js\")\n\nclass RemoteFile {\n\n    constructor(args) {\n        this.config = args\n        this.url = mapUrl(args.path || args.url)\n    }\n\n\n    async read(position, length) {\n\n        const headers = this.config.headers || {}\n\n        const rangeString = \"bytes=\" + position + \"-\" + (position + length - 1)\n        headers['Range'] = rangeString\n\n        let url = this.url.slice()    // slice => copy\n        if(jsEnv.isNode) {\n            headers['User-Agent'] = 'straw'\n        } else {\n            if(this.config.oauthToken) {\n                const token = resolveToken(this.config.oauthToken)\n                headers['Authorization'] = `Bearer ${token}`\n            }\n            const isSafari = navigator.vendor.indexOf(\"Apple\") == 0 && /\\sSafari\\//.test(navigator.userAgent);\n            const isChrome = navigator.userAgent.indexOf('Chrome') > -1\n            const isAmazonV4Signed = this.url.indexOf(\"X-Amz-Signature\") > -1\n\n            if (isChrome && !isAmazonV4Signed) {\n                url = addParameter(url, \"randomSeed\", Math.random().toString(36))\n            }\n        }\n\n        if(this.config.apiKey) {\n            url = addParameter(url, \"key\", this.config.apiKey)\n        }\n\n        const response = await fetch(url, {\n            method: 'GET',\n            headers: headers,\n            redirect: 'follow',\n            mode: 'cors',\n\n        })\n\n        const status = response.status;\n\n        if (status >= 400) {\n            const err = Error(response.statusText)\n            err.code = status\n            throw err\n        }\n        else {\n            return response.arrayBuffer();\n        }\n\n        /**\n         * token can be a string, a function that returns a string, or a function that returns a Promise for a string\n         * @param token\n         * @returns {Promise<*>}\n         */\n        async function resolveToken(token) {\n            if(typeof token === 'function') {\n                return await Promise.resolve(token())    // Normalize the result to a promise, since we don't know what the function returns\n            } else {\n                return token\n            }\n        }\n\n    }\n}\n\n\nfunction mapUrl(url) {\n\n    if (url.includes(\"//www.dropbox.com\")) {\n        return url.replace(\"//www.dropbox.com\", \"//dl.dropboxusercontent.com\");\n    } else {\n        return url\n    }\n}\n\n\nfunction addParameter(url, name, value) {\n    const  paramSeparator = url.includes(\"?\") ? \"&\" : \"?\";\n    return url + paramSeparator + name + \"=\" + value;\n}\n\n\nmodule.exports = RemoteFile\n\n//# sourceURL=webpack://HicStraw/./src/io/remoteFile.js?");/***/},/***/"./src/io/throttledFile.js":/*!*********************************!*\
  !*** ./src/io/throttledFile.js ***!
  \*********************************/ /*! no static exports found */ /***/function srcIoThrottledFileJs(module,exports){eval("class ThrottledFile {\n\n    constructor(file, rateLimiter) {\n        this.file = file\n        this.rateLimiter = rateLimiter\n    }\n\n\n    async read(position, length) {\n\n        const file = this.file\n        const rateLimiter = this.rateLimiter\n\n        return new Promise(function (fulfill, reject) {\n            rateLimiter.limiter(async function (f) {\n                try {\n                    const result = await f.read(position, length)\n                    fulfill(result)\n                } catch (e) {\n                    reject(e)\n                }\n            })(file)\n        })\n    }\n}\n\n\nmodule.exports = ThrottledFile\n\n//# sourceURL=webpack://HicStraw/./src/io/throttledFile.js?");/***/},/***/"./src/matrix.js":/*!***********************!*\
  !*** ./src/matrix.js ***!
  \***********************/ /*! no static exports found */ /***/function srcMatrixJs(module,exports){eval("\nclass Matrix {\n  \n    constructor(chr1, chr2, zoomDataList) {\n\n        const self = this\n\n        this.chr1 = chr1\n        this.chr2 = chr2\n        this.bpZoomData = []\n        this.fragZoomData = []\n        \n        zoomDataList.forEach(function (zd) {\n            if (zd.zoom.unit === \"BP\") {\n                self.bpZoomData.push(zd)\n            } else {\n                self.fragZoomData.push(zd)\n            }\n        })\n    }\n\n    getZoomDataByIndex(index, unit) {\n        const zdArray = \"FRAG\" === unit ? this.fragZoomData : this.bpZoomData\n        return zdArray[index]\n    }\n\n\n    findZoomForResolution(binSize, unit) {\n\n        const  zdArray = \"FRAG\" === unit ? this.fragZoomData : this.bpZoomData\n\n        for (let i = 1; i < zdArray.length; i++) {\n            var zd = zdArray[i]\n            if (zd.zoom.binSize < binSize) {\n                return i - 1\n            }\n        }\n        return zdArray.length - 1\n\n    }\n\n\n    // Legacy implementation, used only in tests.\n    getZoomData(zoom) {\n\n        const zdArray = zoom.unit === \"BP\" ? this.bpZoomData : this.fragZoomData\n\n        for (let i = 0; i < zdArray.length; i++) {\n            var zd = zdArray[i]\n            if (zoom.binSize === zd.zoom.binSize) {\n                return zd\n            }\n        }\n\n        return undefined\n    }\n}\n\nmodule.exports = Matrix\n\n//# sourceURL=webpack://HicStraw/./src/matrix.js?");/***/},/***/"./src/matrixZoomData.js":/*!*******************************!*\
  !*** ./src/matrixZoomData.js ***!
  \*******************************/ /*! no static exports found */ /***/function srcMatrixZoomDataJs(module,exports){eval("\n\nclass MatrixZoomData {\n\n    constructor(chr1, chr2, zoom, blockBinCount, blockColumnCount, chr1Sites, chr2Sites) {\n\n        this.chr1 = chr1;    // chromosome index\n        this.chr2 = chr2;\n        this.zoom = zoom;\n        this.blockBinCount = blockBinCount;\n        this.blockColumnCount = blockColumnCount;\n        this.chr1Sites = chr1Sites;\n        this.chr2Sites = chr2Sites;\n    }\n\n    getKey () {\n        return this.chr1.name + \"_\" + this.chr2.name + \"_\" + this.zoom.unit + \"_\" + this.zoom.binSize;\n    }\n}\n\nmodule.exports = MatrixZoomData\n\n//# sourceURL=webpack://HicStraw/./src/matrixZoomData.js?");/***/},/***/"./src/normalizationVector.js":/*!************************************!*\
  !*** ./src/normalizationVector.js ***!
  \************************************/ /*! no static exports found */ /***/function srcNormalizationVectorJs(module,exports){eval("/*\n *  The MIT License (MIT)\n *\n * Copyright (c) 2016-2017 The Regents of the University of California\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and\n * associated documentation files (the \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the\n * following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all copies or substantial\n * portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING\n * BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,  FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\n * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n *\n */\n\n\n/**\n * @author Jim Robinson\n */\n\nclass NormalizationVector {\n\n    constructor(type, chrIdx, unit, resolution, values) {\n\n        var avg = mean(values), i;\n        if (avg > 0) {\n            for (i = 0; i < values.length; i++) {\n                values[i] /= avg;\n            }\n        }\n\n        this.type = type;\n        this.chrIdx = chrIdx;\n        this.unit = unit;\n        this.resolution = resolution;\n        this.data = values;\n    }\n\n    getKey() {\n        return NormalizationVector.getKey(this.type, this.chrIdx, this.unit, this.resolution);\n    }\n\n\n    static getNormalizationVectorKey(type, chrIdx, unit, resolution) {\n        return type + \"_\" + chrIdx + \"_\" + unit + \"_\" + resolution;\n    }\n\n}\n\nfunction mean (array) {\n\n    var t = 0, n = 0,\n        i;\n    for (i = 0; i < array.length; i++) {\n        if (!isNaN(array[i])) {\n            t += array[i];\n            n++;\n        }\n    }\n    return n > 0 ? t / n : 0;\n}\n\nmodule.exports = NormalizationVector\n\n\n//# sourceURL=webpack://HicStraw/./src/normalizationVector.js?");/***/},/***/"./src/straw.js":/*!**********************!*\
  !*** ./src/straw.js ***!
  \**********************/ /*! no static exports found */ /***/function srcStrawJs(module,exports,__webpack_require__){eval("const HicFile = __webpack_require__(/*! ./hicFile */ \"./src/hicFile.js\")\nconst ContactRecord = __webpack_require__(/*! ./contactRecord */ \"./src/contactRecord.js\")\n\nclass Straw {\n\n    constructor(config) {\n\n        this.config = config;\n        this.hicFile = new HicFile(config)\n\n    }\n\n    async getMetaData() {\n        return await this.hicFile.getMetaData()\n    }\n\n    async getBlocks(region1, region2, units, binsize) {\n\n        await this.hicFile.init()\n\n        const chr1 = this.hicFile.getFileChrName(region1.chr)\n        const chr2 = this.hicFile.getFileChrName(region2.chr)\n        const idx1 = this.hicFile.chromosomeIndexMap[chr1]\n        const idx2 = this.hicFile.chromosomeIndexMap[chr2]\n        const x1 = (region1.start === undefined) ? undefined : region1.start / binsize\n        const x2 = (region1.end === undefined) ? undefined : region1.end / binsize\n        const y1 = (region2.start === undefined) ? undefined : region2.start / binsize\n        const y2 = (region2.end === undefined) ? undefined : region2.end / binsize\n\n        const matrix = await this.hicFile.readMatrix(idx1, idx2)\n\n        // Find the requested resolution\n        const z = undefined === binsize ? 0 : this.hicFile.getZoomIndexForBinSize(binsize, units);\n        if (z === -1) {\n            throw new Error(\"Invalid bin size\");\n        }\n\n        const zd = matrix.bpZoomData[z]\n        const blockBinCount = zd.blockBinCount   // Dimension in bins of a block (width = height = blockBinCount)\n        const col1 = x1 === undefined ? 0 : Math.floor(x1 / blockBinCount)\n        const col2 = x1 === undefined ? zd.blockColumnCount : Math.floor(x2 / blockBinCount)\n        const row1 = y1 === undefined ? 0 : Math.floor(y1 / blockBinCount)\n        const row2 = y2 === undefined ? zd.blockColumnCount : Math.floor(y2 / blockBinCount)\n\n        const promises = [];\n        const sameChr = idx1 === idx2;\n        for (let row = row1; row <= row2; row++) {\n            for (let column = col1; column <= col2; column++) {\n                let blockNumber\n                if (sameChr && row < column) {\n                    blockNumber = column * zd.blockColumnCount + row;\n                }\n                else {\n                    blockNumber = row * zd.blockColumnCount + column;\n                }\n                promises.push(this.hicFile.readBlock(blockNumber, zd))\n            }\n        }\n\n        return Promise.all(promises)\n    }\n\n    //straw <NONE/VC/VC_SQRT/KR> <ile> <chr1>[:x1:x2] <chr2>[:y1:y2] <BP/FRAG> <binsize>\n    async getContactRecords(normalization, region1, region2, units, binsize) {\n\n        const blocks = await this.getBlocks(region1, region2, units, binsize)\n\n        const chr1 = this.hicFile.getFileChrName(region1.chr)\n        const chr2 = this.hicFile.getFileChrName(region2.chr)\n        const x1 = (region1.start === undefined) ? undefined : region1.start / binsize\n        const x2 = (region1.end === undefined) ? undefined : region1.end / binsize\n        const y1 = (region2.start === undefined) ? undefined : region2.start / binsize\n        const y2 = (region2.end === undefined) ? undefined : region2.end / binsize\n\n        let normVector1\n        let normVector2\n        const isNorm = normalization && normalization !== \"NONE\"\n        if (isNorm) {\n            normVector1 = await this.hicFile.getNormalizationVector(normalization, chr1, units, binsize)\n            if (chr1 === chr2) {\n                normVector2 = normVector1\n            } else {\n                normVector2 = await this.hicFile.getNormalizationVector(normalization, chr2, units, binsize)\n            }\n        }\n\n\n        const contactRecords = [];\n        for (let block of blocks) {\n\n            if (block) { // This is most likely caused by a base pair range outside the chromosome\n                for (let rec of block.records) {\n\n                    // transpose?\n                    if (x1 === undefined || (rec.bin1 >= x1 && rec.bin1 <= x2 && rec.bin2 >= y1 && rec.bin2 <= y2)) {\n                        if (isNorm) {\n                            const x = rec.bin1\n                            const y = rec.bin2\n                            const nvnv = normVector1.data[x] * normVector2.data[y];\n                            if (nvnv[x] !== 0 && !isNaN(nvnv)) {\n                                const counts = rec.counts / nvnv;\n                                contactRecords.push(new ContactRecord(x, y, counts));\n                            }\n\n                        } else {\n                            contactRecords.push(rec);\n                        }\n                    }\n                }\n            }\n        }\n\n        return contactRecords;\n    }\n\n    async getNormalizationOptions() {\n        return this.hicFile.getNormalizationOptions()\n    }\n\n    async getNVI() {\n        await\n            this.hicFile.getNormVectorIndex()\n        return this.hicFile.config.nvi;\n    }\n\n    getFileChrName(chrAlias) {\n        if (this.hicFile.chrAliasTable.hasOwnProperty(chrAlias)) {\n            return this.hicFile.chrAliasTable[chrAlias]\n        }\n        else {\n            return chrAlias\n        }\n    }\n}\n\n\nmodule.exports = Straw\n\n\n//# sourceURL=webpack://HicStraw/./src/straw.js?");/***/},/***/0:/*!**********************!*\
  !*** util (ignored) ***!
  \**********************/ /*! no static exports found */ /***/function _(module,exports){eval("/* (ignored) */\n\n//# sourceURL=webpack://HicStraw/util_(ignored)?");/***/},/***/1:/*!**********************!*\
  !*** util (ignored) ***!
  \**********************/ /*! no static exports found */ /***/function _(module,exports){eval("/* (ignored) */\n\n//# sourceURL=webpack://HicStraw/util_(ignored)?");/***/}/******/});/* harmony default export */ __webpack_exports__["default"] = (HicStraw);

/***/ }),

/***/ "./vendor/jquery-1.12.4.js":
/*!*********************************!*\
  !*** ./vendor/jquery-1.12.4.js ***!
  \*********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/*!
 * jQuery JavaScript Library v1.12.4
 * http://jquery.com/
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2016-05-20T17:17Z
 */
// Modified for encapsulation in igv module -- ES6 export
var $, _jQuery; // Support: Firefox 18+
// Can't be in strict mode, several libs including ASP.NET trace
// the stack via arguments.caller.callee and Firefox dies if
// you try to trace through "use strict" call chains. (#13335)
//"use strict";


var deletedIds = [];
var document = window.document;
var _slice = deletedIds.slice;
var concat = deletedIds.concat;
var push = deletedIds.push;
var indexOf = deletedIds.indexOf;
var class2type = {};
var toString = class2type.toString;
var hasOwn = class2type.hasOwnProperty;
var support = {};

var version = "1.12.4",
    // Define a local copy of jQuery
_jQuery = function jQuery(selector, context) {
  // The jQuery object is actually just the init constructor 'enhanced'
  // Need init if jQuery is called (just allow error to be thrown if not included)
  return new _jQuery.fn.init(selector, context);
},
    // Support: Android<4.1, IE<9
// Make sure we trim BOM and NBSP
rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,
    // Matches dashed string for camelizing
rmsPrefix = /^-ms-/,
    rdashAlpha = /-([\da-z])/gi,
    // Used by jQuery.camelCase as callback to replace()
fcamelCase = function fcamelCase(all, letter) {
  return letter.toUpperCase();
};

_jQuery.fn = _jQuery.prototype = {
  // The current version of jQuery being used
  jquery: version,
  constructor: _jQuery,
  // Start with an empty selector
  selector: "",
  // The default length of a jQuery object is 0
  length: 0,
  toArray: function toArray() {
    return _slice.call(this);
  },
  // Get the Nth element in the matched element set OR
  // Get the whole matched element set as a clean array
  get: function get(num) {
    return num != null ? // Return just the one element from the set
    num < 0 ? this[num + this.length] : this[num] : // Return all the elements in a clean array
    _slice.call(this);
  },
  // Take an array of elements and push it onto the stack
  // (returning the new matched element set)
  pushStack: function pushStack(elems) {
    // Build a new jQuery matched element set
    var ret = _jQuery.merge(this.constructor(), elems); // Add the old object onto the stack (as a reference)


    ret.prevObject = this;
    ret.context = this.context; // Return the newly-formed element set

    return ret;
  },
  // Execute a callback for every element in the matched set.
  each: function each(callback) {
    return _jQuery.each(this, callback);
  },
  map: function map(callback) {
    return this.pushStack(_jQuery.map(this, function (elem, i) {
      return callback.call(elem, i, elem);
    }));
  },
  slice: function slice() {
    return this.pushStack(_slice.apply(this, arguments));
  },
  first: function first() {
    return this.eq(0);
  },
  last: function last() {
    return this.eq(-1);
  },
  eq: function eq(i) {
    var len = this.length,
        j = +i + (i < 0 ? len : 0);
    return this.pushStack(j >= 0 && j < len ? [this[j]] : []);
  },
  end: function end() {
    return this.prevObject || this.constructor();
  },
  // For internal use only.
  // Behaves like an Array's method, not like a jQuery method.
  push: push,
  sort: deletedIds.sort,
  splice: deletedIds.splice
};

_jQuery.extend = _jQuery.fn.extend = function () {
  var src,
      copyIsArray,
      copy,
      name,
      options,
      clone,
      target = arguments[0] || {},
      i = 1,
      length = arguments.length,
      deep = false; // Handle a deep copy situation

  if (typeof target === "boolean") {
    deep = target; // skip the boolean and the target

    target = arguments[i] || {};
    i++;
  } // Handle case when target is a string or something (possible in deep copy)


  if (_typeof(target) !== "object" && !_jQuery.isFunction(target)) {
    target = {};
  } // extend jQuery itself if only one argument is passed


  if (i === length) {
    target = this;
    i--;
  }

  for (; i < length; i++) {
    // Only deal with non-null/undefined values
    if ((options = arguments[i]) != null) {
      // Extend the base object
      for (name in options) {
        src = target[name];
        copy = options[name]; // Prevent never-ending loop

        if (target === copy) {
          continue;
        } // Recurse if we're merging plain objects or arrays


        if (deep && copy && (_jQuery.isPlainObject(copy) || (copyIsArray = _jQuery.isArray(copy)))) {
          if (copyIsArray) {
            copyIsArray = false;
            clone = src && _jQuery.isArray(src) ? src : [];
          } else {
            clone = src && _jQuery.isPlainObject(src) ? src : {};
          } // Never move original objects, clone them


          target[name] = _jQuery.extend(deep, clone, copy); // Don't bring in undefined values
        } else if (copy !== undefined) {
          target[name] = copy;
        }
      }
    }
  } // Return the modified object


  return target;
};

_jQuery.extend({
  // Unique for each copy of jQuery on the page
  expando: "jQuery" + (version + Math.random()).replace(/\D/g, ""),
  // Assume jQuery is ready without the ready module
  isReady: true,
  error: function error(msg) {
    throw new Error(msg);
  },
  noop: function noop() {},
  // See test/unit/core.js for details concerning isFunction.
  // Since version 1.3, DOM methods and functions like alert
  // aren't supported. They return false on IE (#2968).
  isFunction: function isFunction(obj) {
    return _jQuery.type(obj) === "function";
  },
  isArray: Array.isArray || function (obj) {
    return _jQuery.type(obj) === "array";
  },
  isWindow: function isWindow(obj) {
    /* jshint eqeqeq: false */
    return obj != null && obj == obj.window;
  },
  isNumeric: function isNumeric(obj) {
    // parseFloat NaNs numeric-cast false positives (null|true|false|"")
    // ...but misinterprets leading-number strings, particularly hex literals ("0x...")
    // subtraction forces infinities to NaN
    // adding 1 corrects loss of precision from parseFloat (#15100)
    var realStringObj = obj && obj.toString();
    return !_jQuery.isArray(obj) && realStringObj - parseFloat(realStringObj) + 1 >= 0;
  },
  isEmptyObject: function isEmptyObject(obj) {
    var name;

    for (name in obj) {
      return false;
    }

    return true;
  },
  isPlainObject: function isPlainObject(obj) {
    var key; // Must be an Object.
    // Because of IE, we also have to check the presence of the constructor property.
    // Make sure that DOM nodes and window objects don't pass through, as well

    if (!obj || _jQuery.type(obj) !== "object" || obj.nodeType || _jQuery.isWindow(obj)) {
      return false;
    }

    try {
      // Not own constructor property must be Object
      if (obj.constructor && !hasOwn.call(obj, "constructor") && !hasOwn.call(obj.constructor.prototype, "isPrototypeOf")) {
        return false;
      }
    } catch (e) {
      // IE8,9 Will throw exceptions on certain host objects #9897
      return false;
    } // Support: IE<9
    // Handle iteration over inherited properties before own properties.


    if (!support.ownFirst) {
      for (key in obj) {
        return hasOwn.call(obj, key);
      }
    } // Own properties are enumerated firstly, so to speed up,
    // if last one is own, then all properties are own.


    for (key in obj) {}

    return key === undefined || hasOwn.call(obj, key);
  },
  type: function type(obj) {
    if (obj == null) {
      return obj + "";
    }

    return _typeof(obj) === "object" || typeof obj === "function" ? class2type[toString.call(obj)] || "object" : _typeof(obj);
  },
  // Workarounds based on findings by Jim Driscoll
  // http://weblogs.java.net/blog/driscoll/archive/2009/09/08/eval-javascript-global-context
  globalEval: function globalEval(data) {
    if (data && _jQuery.trim(data)) {
      // We use execScript on Internet Explorer
      // We use an anonymous function so that context is window
      // rather than jQuery in Firefox
      (window.execScript || function (data) {
        window["eval"].call(window, data); // jscs:ignore requireDotNotation
      })(data);
    }
  },
  // Convert dashed to camelCase; used by the css and data modules
  // Microsoft forgot to hump their vendor prefix (#9572)
  camelCase: function camelCase(string) {
    return string.replace(rmsPrefix, "ms-").replace(rdashAlpha, fcamelCase);
  },
  nodeName: function nodeName(elem, name) {
    return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
  },
  each: function each(obj, callback) {
    var length,
        i = 0;

    if (isArrayLike(obj)) {
      length = obj.length;

      for (; i < length; i++) {
        if (callback.call(obj[i], i, obj[i]) === false) {
          break;
        }
      }
    } else {
      for (i in obj) {
        if (callback.call(obj[i], i, obj[i]) === false) {
          break;
        }
      }
    }

    return obj;
  },
  // Support: Android<4.1, IE<9
  trim: function trim(text) {
    return text == null ? "" : (text + "").replace(rtrim, "");
  },
  // results is for internal usage only
  makeArray: function makeArray(arr, results) {
    var ret = results || [];

    if (arr != null) {
      if (isArrayLike(Object(arr))) {
        _jQuery.merge(ret, typeof arr === "string" ? [arr] : arr);
      } else {
        push.call(ret, arr);
      }
    }

    return ret;
  },
  inArray: function inArray(elem, arr, i) {
    var len;

    if (arr) {
      if (indexOf) {
        return indexOf.call(arr, elem, i);
      }

      len = arr.length;
      i = i ? i < 0 ? Math.max(0, len + i) : i : 0;

      for (; i < len; i++) {
        // Skip accessing in sparse arrays
        if (i in arr && arr[i] === elem) {
          return i;
        }
      }
    }

    return -1;
  },
  merge: function merge(first, second) {
    var len = +second.length,
        j = 0,
        i = first.length;

    while (j < len) {
      first[i++] = second[j++];
    } // Support: IE<9
    // Workaround casting of .length to NaN on otherwise arraylike objects (e.g., NodeLists)


    if (len !== len) {
      while (second[j] !== undefined) {
        first[i++] = second[j++];
      }
    }

    first.length = i;
    return first;
  },
  grep: function grep(elems, callback, invert) {
    var callbackInverse,
        matches = [],
        i = 0,
        length = elems.length,
        callbackExpect = !invert; // Go through the array, only saving the items
    // that pass the validator function

    for (; i < length; i++) {
      callbackInverse = !callback(elems[i], i);

      if (callbackInverse !== callbackExpect) {
        matches.push(elems[i]);
      }
    }

    return matches;
  },
  // arg is for internal usage only
  map: function map(elems, callback, arg) {
    var length,
        value,
        i = 0,
        ret = []; // Go through the array, translating each of the items to their new values

    if (isArrayLike(elems)) {
      length = elems.length;

      for (; i < length; i++) {
        value = callback(elems[i], i, arg);

        if (value != null) {
          ret.push(value);
        }
      } // Go through every key on the object,

    } else {
      for (i in elems) {
        value = callback(elems[i], i, arg);

        if (value != null) {
          ret.push(value);
        }
      }
    } // Flatten any nested arrays


    return concat.apply([], ret);
  },
  // A global GUID counter for objects
  guid: 1,
  // Bind a function to a context, optionally partially applying any
  // arguments.
  proxy: function proxy(fn, context) {
    var args, proxy, tmp;

    if (typeof context === "string") {
      tmp = fn[context];
      context = fn;
      fn = tmp;
    } // Quick check to determine if target is callable, in the spec
    // this throws a TypeError, but we will just return undefined.


    if (!_jQuery.isFunction(fn)) {
      return undefined;
    } // Simulated bind


    args = _slice.call(arguments, 2);

    proxy = function proxy() {
      return fn.apply(context || this, args.concat(_slice.call(arguments)));
    }; // Set the guid of unique handler to the same of original handler, so it can be removed


    proxy.guid = fn.guid = fn.guid || _jQuery.guid++;
    return proxy;
  },
  now: function now() {
    return +new Date();
  },
  // jQuery.support is not used in Core but other projects attach their
  // properties to it so it needs to exist.
  support: support
}); // JSHint would error on this code due to the Symbol not being defined in ES5.
// Defining this global in .jshintrc would create a danger of using the global
// unguarded in another place, it seems safer to just disable JSHint for these
// three lines.

/* jshint ignore: start */


if (typeof Symbol === "function") {
  _jQuery.fn[Symbol.iterator] = deletedIds[Symbol.iterator];
}
/* jshint ignore: end */
// Populate the class2type map


_jQuery.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "), function (i, name) {
  class2type["[object " + name + "]"] = name.toLowerCase();
});

function isArrayLike(obj) {
  // Support: iOS 8.2 (not reproducible in simulator)
  // `in` check used to prevent JIT error (gh-2145)
  // hasOwn isn't used here due to false negatives
  // regarding Nodelist length in IE
  var length = !!obj && "length" in obj && obj.length,
      type = _jQuery.type(obj);

  if (type === "function" || _jQuery.isWindow(obj)) {
    return false;
  }

  return type === "array" || length === 0 || typeof length === "number" && length > 0 && length - 1 in obj;
}

var Sizzle =
/*!
     * Sizzle CSS Selector Engine v2.2.1
     * http://sizzlejs.com/
     *
     * Copyright jQuery Foundation and other contributors
     * Released under the MIT license
     * http://jquery.org/license
     *
     * Date: 2015-10-17
     */
function (window) {
  var i,
      support,
      Expr,
      getText,
      isXML,
      tokenize,
      compile,
      select,
      outermostContext,
      sortInput,
      hasDuplicate,
      // Local document vars
  setDocument,
      document,
      docElem,
      documentIsHTML,
      rbuggyQSA,
      rbuggyMatches,
      matches,
      contains,
      // Instance-specific data
  expando = "sizzle" + 1 * new Date(),
      preferredDoc = window.document,
      dirruns = 0,
      done = 0,
      classCache = createCache(),
      tokenCache = createCache(),
      compilerCache = createCache(),
      sortOrder = function sortOrder(a, b) {
    if (a === b) {
      hasDuplicate = true;
    }

    return 0;
  },
      // General-purpose constants
  MAX_NEGATIVE = 1 << 31,
      // Instance methods
  hasOwn = {}.hasOwnProperty,
      arr = [],
      pop = arr.pop,
      push_native = arr.push,
      push = arr.push,
      slice = arr.slice,
      // Use a stripped-down indexOf as it's faster than native
  // http://jsperf.com/thor-indexof-vs-for/5
  indexOf = function indexOf(list, elem) {
    var i = 0,
        len = list.length;

    for (; i < len; i++) {
      if (list[i] === elem) {
        return i;
      }
    }

    return -1;
  },
      booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",
      // Regular expressions
  // http://www.w3.org/TR/css3-selectors/#whitespace
  whitespace = "[\\x20\\t\\r\\n\\f]",
      // http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
  identifier = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",
      // Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
  attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace + // Operator (capture 2)
  "*([*^$|!~]?=)" + whitespace + // "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
  "*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace + "*\\]",
      pseudos = ":(" + identifier + ")(?:\\((" + // To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
  // 1. quoted (capture 3; capture 4 or capture 5)
  "('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" + // 2. simple (capture 6)
  "((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" + // 3. anything else (capture 2)
  ".*" + ")\\)|)",
      // Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
  rwhitespace = new RegExp(whitespace + "+", "g"),
      rtrim = new RegExp("^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g"),
      rcomma = new RegExp("^" + whitespace + "*," + whitespace + "*"),
      rcombinators = new RegExp("^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*"),
      rattributeQuotes = new RegExp("=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g"),
      rpseudo = new RegExp(pseudos),
      ridentifier = new RegExp("^" + identifier + "$"),
      matchExpr = {
    "ID": new RegExp("^#(" + identifier + ")"),
    "CLASS": new RegExp("^\\.(" + identifier + ")"),
    "TAG": new RegExp("^(" + identifier + "|[*])"),
    "ATTR": new RegExp("^" + attributes),
    "PSEUDO": new RegExp("^" + pseudos),
    "CHILD": new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace + "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace + "*(\\d+)|))" + whitespace + "*\\)|)", "i"),
    "bool": new RegExp("^(?:" + booleans + ")$", "i"),
    // For use in libraries implementing .is()
    // We use this for POS matching in `select`
    "needsContext": new RegExp("^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i")
  },
      rinputs = /^(?:input|select|textarea|button)$/i,
      rheader = /^h\d$/i,
      rnative = /^[^{]+\{\s*\[native \w/,
      // Easily-parseable/retrievable ID or TAG or CLASS selectors
  rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,
      rsibling = /[+~]/,
      rescape = /'|\\/g,
      // CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
  runescape = new RegExp("\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig"),
      funescape = function funescape(_, escaped, escapedWhitespace) {
    var high = "0x" + escaped - 0x10000; // NaN means non-codepoint
    // Support: Firefox<24
    // Workaround erroneous numeric interpretation of +"0x"

    return high !== high || escapedWhitespace ? escaped : high < 0 ? // BMP codepoint
    String.fromCharCode(high + 0x10000) : // Supplemental Plane codepoint (surrogate pair)
    String.fromCharCode(high >> 10 | 0xD800, high & 0x3FF | 0xDC00);
  },
      // Used for iframes
  // See setDocument()
  // Removing the function wrapper causes a "Permission Denied"
  // error in IE
  unloadHandler = function unloadHandler() {
    setDocument();
  }; // Optimize for push.apply( _, NodeList )


  try {
    push.apply(arr = slice.call(preferredDoc.childNodes), preferredDoc.childNodes); // Support: Android<4.0
    // Detect silently failing push.apply

    arr[preferredDoc.childNodes.length].nodeType;
  } catch (e) {
    push = {
      apply: arr.length ? // Leverage slice if possible
      function (target, els) {
        push_native.apply(target, slice.call(els));
      } : // Support: IE<9
      // Otherwise append directly
      function (target, els) {
        var j = target.length,
            i = 0; // Can't trust NodeList.length

        while (target[j++] = els[i++]) {}

        target.length = j - 1;
      }
    };
  }

  function Sizzle(selector, context, results, seed) {
    var m,
        i,
        elem,
        nid,
        nidselect,
        match,
        groups,
        newSelector,
        newContext = context && context.ownerDocument,
        // nodeType defaults to 9, since context defaults to document
    nodeType = context ? context.nodeType : 9;
    results = results || []; // Return early from calls with invalid selector or context

    if (typeof selector !== "string" || !selector || nodeType !== 1 && nodeType !== 9 && nodeType !== 11) {
      return results;
    } // Try to shortcut find operations (as opposed to filters) in HTML documents


    if (!seed) {
      if ((context ? context.ownerDocument || context : preferredDoc) !== document) {
        setDocument(context);
      }

      context = context || document;

      if (documentIsHTML) {
        // If the selector is sufficiently simple, try using a "get*By*" DOM method
        // (excepting DocumentFragment context, where the methods don't exist)
        if (nodeType !== 11 && (match = rquickExpr.exec(selector))) {
          // ID selector
          if (m = match[1]) {
            // Document context
            if (nodeType === 9) {
              if (elem = context.getElementById(m)) {
                // Support: IE, Opera, Webkit
                // TODO: identify versions
                // getElementById can match elements by name instead of ID
                if (elem.id === m) {
                  results.push(elem);
                  return results;
                }
              } else {
                return results;
              } // Element context

            } else {
              // Support: IE, Opera, Webkit
              // TODO: identify versions
              // getElementById can match elements by name instead of ID
              if (newContext && (elem = newContext.getElementById(m)) && contains(context, elem) && elem.id === m) {
                results.push(elem);
                return results;
              }
            } // Type selector

          } else if (match[2]) {
            push.apply(results, context.getElementsByTagName(selector));
            return results; // Class selector
          } else if ((m = match[3]) && support.getElementsByClassName && context.getElementsByClassName) {
            push.apply(results, context.getElementsByClassName(m));
            return results;
          }
        } // Take advantage of querySelectorAll


        if (support.qsa && !compilerCache[selector + " "] && (!rbuggyQSA || !rbuggyQSA.test(selector))) {
          if (nodeType !== 1) {
            newContext = context;
            newSelector = selector; // qSA looks outside Element context, which is not what we want
            // Thanks to Andrew Dupont for this workaround technique
            // Support: IE <=8
            // Exclude object elements
          } else if (context.nodeName.toLowerCase() !== "object") {
            // Capture the context ID, setting it first if necessary
            if (nid = context.getAttribute("id")) {
              nid = nid.replace(rescape, "\\$&");
            } else {
              context.setAttribute("id", nid = expando);
            } // Prefix every selector in the list


            groups = tokenize(selector);
            i = groups.length;
            nidselect = ridentifier.test(nid) ? "#" + nid : "[id='" + nid + "']";

            while (i--) {
              groups[i] = nidselect + " " + toSelector(groups[i]);
            }

            newSelector = groups.join(","); // Expand context for sibling selectors

            newContext = rsibling.test(selector) && testContext(context.parentNode) || context;
          }

          if (newSelector) {
            try {
              push.apply(results, newContext.querySelectorAll(newSelector));
              return results;
            } catch (qsaError) {} finally {
              if (nid === expando) {
                context.removeAttribute("id");
              }
            }
          }
        }
      }
    } // All others


    return select(selector.replace(rtrim, "$1"), context, results, seed);
  }
  /**
   * Create key-value caches of limited size
   * @returns {function(string, object)} Returns the Object data after storing it on itself with
   *    property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
   *    deleting the oldest entry
   */


  function createCache() {
    var keys = [];

    function cache(key, value) {
      // Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
      if (keys.push(key + " ") > Expr.cacheLength) {
        // Only keep the most recent entries
        delete cache[keys.shift()];
      }

      return cache[key + " "] = value;
    }

    return cache;
  }
  /**
   * Mark a function for special use by Sizzle
   * @param {Function} fn The function to mark
   */


  function markFunction(fn) {
    fn[expando] = true;
    return fn;
  }
  /**
   * Support testing using an element
   * @param {Function} fn Passed the created div and expects a boolean result
   */


  function assert(fn) {
    var div = document.createElement("div");

    try {
      return !!fn(div);
    } catch (e) {
      return false;
    } finally {
      // Remove from its parent by default
      if (div.parentNode) {
        div.parentNode.removeChild(div);
      } // release memory in IE


      div = null;
    }
  }
  /**
   * Adds the same handler for all of the specified attrs
   * @param {String} attrs Pipe-separated list of attributes
   * @param {Function} handler The method that will be applied
   */


  function addHandle(attrs, handler) {
    var arr = attrs.split("|"),
        i = arr.length;

    while (i--) {
      Expr.attrHandle[arr[i]] = handler;
    }
  }
  /**
   * Checks document order of two siblings
   * @param {Element} a
   * @param {Element} b
   * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
   */


  function siblingCheck(a, b) {
    var cur = b && a,
        diff = cur && a.nodeType === 1 && b.nodeType === 1 && (~b.sourceIndex || MAX_NEGATIVE) - (~a.sourceIndex || MAX_NEGATIVE); // Use IE sourceIndex if available on both nodes

    if (diff) {
      return diff;
    } // Check if b follows a


    if (cur) {
      while (cur = cur.nextSibling) {
        if (cur === b) {
          return -1;
        }
      }
    }

    return a ? 1 : -1;
  }
  /**
   * Returns a function to use in pseudos for input types
   * @param {String} type
   */


  function createInputPseudo(type) {
    return function (elem) {
      var name = elem.nodeName.toLowerCase();
      return name === "input" && elem.type === type;
    };
  }
  /**
   * Returns a function to use in pseudos for buttons
   * @param {String} type
   */


  function createButtonPseudo(type) {
    return function (elem) {
      var name = elem.nodeName.toLowerCase();
      return (name === "input" || name === "button") && elem.type === type;
    };
  }
  /**
   * Returns a function to use in pseudos for positionals
   * @param {Function} fn
   */


  function createPositionalPseudo(fn) {
    return markFunction(function (argument) {
      argument = +argument;
      return markFunction(function (seed, matches) {
        var j,
            matchIndexes = fn([], seed.length, argument),
            i = matchIndexes.length; // Match elements found at the specified indexes

        while (i--) {
          if (seed[j = matchIndexes[i]]) {
            seed[j] = !(matches[j] = seed[j]);
          }
        }
      });
    });
  }
  /**
   * Checks a node for validity as a Sizzle context
   * @param {Element|Object=} context
   * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
   */


  function testContext(context) {
    return context && typeof context.getElementsByTagName !== "undefined" && context;
  } // Expose support vars for convenience


  support = Sizzle.support = {};
  /**
   * Detects XML nodes
   * @param {Element|Object} elem An element or a document
   * @returns {Boolean} True iff elem is a non-HTML XML node
   */

  isXML = Sizzle.isXML = function (elem) {
    // documentElement is verified for cases where it doesn't yet exist
    // (such as loading iframes in IE - #4833)
    var documentElement = elem && (elem.ownerDocument || elem).documentElement;
    return documentElement ? documentElement.nodeName !== "HTML" : false;
  };
  /**
   * Sets document-related variables once based on the current document
   * @param {Element|Object} [doc] An element or document object to use to set the document
   * @returns {Object} Returns the current document
   */


  setDocument = Sizzle.setDocument = function (node) {
    var hasCompare,
        parent,
        doc = node ? node.ownerDocument || node : preferredDoc; // Return early if doc is invalid or already selected

    if (doc === document || doc.nodeType !== 9 || !doc.documentElement) {
      return document;
    } // Update global variables


    document = doc;
    docElem = document.documentElement;
    documentIsHTML = !isXML(document); // Support: IE 9-11, Edge
    // Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)

    if ((parent = document.defaultView) && parent.top !== parent) {
      // Support: IE 11
      if (parent.addEventListener) {
        parent.addEventListener("unload", unloadHandler, false); // Support: IE 9 - 10 only
      } else if (parent.attachEvent) {
        parent.attachEvent("onunload", unloadHandler);
      }
    }
    /* Attributes
         ---------------------------------------------------------------------- */
    // Support: IE<8
    // Verify that getAttribute really returns attributes and not properties
    // (excepting IE8 booleans)


    support.attributes = assert(function (div) {
      div.className = "i";
      return !div.getAttribute("className");
    });
    /* getElement(s)By*
         ---------------------------------------------------------------------- */
    // Check if getElementsByTagName("*") returns only elements

    support.getElementsByTagName = assert(function (div) {
      div.appendChild(document.createComment(""));
      return !div.getElementsByTagName("*").length;
    }); // Support: IE<9

    support.getElementsByClassName = rnative.test(document.getElementsByClassName); // Support: IE<10
    // Check if getElementById returns elements by name
    // The broken getElementById methods don't pick up programatically-set names,
    // so use a roundabout getElementsByName test

    support.getById = assert(function (div) {
      docElem.appendChild(div).id = expando;
      return !document.getElementsByName || !document.getElementsByName(expando).length;
    }); // ID find and filter

    if (support.getById) {
      Expr.find["ID"] = function (id, context) {
        if (typeof context.getElementById !== "undefined" && documentIsHTML) {
          var m = context.getElementById(id);
          return m ? [m] : [];
        }
      };

      Expr.filter["ID"] = function (id) {
        var attrId = id.replace(runescape, funescape);
        return function (elem) {
          return elem.getAttribute("id") === attrId;
        };
      };
    } else {
      // Support: IE6/7
      // getElementById is not reliable as a find shortcut
      delete Expr.find["ID"];

      Expr.filter["ID"] = function (id) {
        var attrId = id.replace(runescape, funescape);
        return function (elem) {
          var node = typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id");
          return node && node.value === attrId;
        };
      };
    } // Tag


    Expr.find["TAG"] = support.getElementsByTagName ? function (tag, context) {
      if (typeof context.getElementsByTagName !== "undefined") {
        return context.getElementsByTagName(tag); // DocumentFragment nodes don't have gEBTN
      } else if (support.qsa) {
        return context.querySelectorAll(tag);
      }
    } : function (tag, context) {
      var elem,
          tmp = [],
          i = 0,
          // By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
      results = context.getElementsByTagName(tag); // Filter out possible comments

      if (tag === "*") {
        while (elem = results[i++]) {
          if (elem.nodeType === 1) {
            tmp.push(elem);
          }
        }

        return tmp;
      }

      return results;
    }; // Class

    Expr.find["CLASS"] = support.getElementsByClassName && function (className, context) {
      if (typeof context.getElementsByClassName !== "undefined" && documentIsHTML) {
        return context.getElementsByClassName(className);
      }
    };
    /* QSA/matchesSelector
         ---------------------------------------------------------------------- */
    // QSA and matchesSelector support
    // matchesSelector(:active) reports false when true (IE9/Opera 11.5)


    rbuggyMatches = []; // qSa(:focus) reports false when true (Chrome 21)
    // We allow this because of a bug in IE8/9 that throws an error
    // whenever `document.activeElement` is accessed on an iframe
    // So, we allow :focus to pass through QSA all the time to avoid the IE error
    // See http://bugs.jquery.com/ticket/13378

    rbuggyQSA = [];

    if (support.qsa = rnative.test(document.querySelectorAll)) {
      // Build QSA regex
      // Regex strategy adopted from Diego Perini
      assert(function (div) {
        // Select is set to empty string on purpose
        // This is to test IE's treatment of not explicitly
        // setting a boolean content attribute,
        // since its presence should be enough
        // http://bugs.jquery.com/ticket/12359
        docElem.appendChild(div).innerHTML = "<a id='" + expando + "'></a>" + "<select id='" + expando + "-\r\\' msallowcapture=''>" + "<option selected=''></option></select>"; // Support: IE8, Opera 11-12.16
        // Nothing should be selected when empty strings follow ^= or $= or *=
        // The test attribute must be unknown in Opera but "safe" for WinRT
        // http://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section

        if (div.querySelectorAll("[msallowcapture^='']").length) {
          rbuggyQSA.push("[*^$]=" + whitespace + "*(?:''|\"\")");
        } // Support: IE8
        // Boolean attributes and "value" are not treated correctly


        if (!div.querySelectorAll("[selected]").length) {
          rbuggyQSA.push("\\[" + whitespace + "*(?:value|" + booleans + ")");
        } // Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+


        if (!div.querySelectorAll("[id~=" + expando + "-]").length) {
          rbuggyQSA.push("~=");
        } // Webkit/Opera - :checked should return selected option elements
        // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
        // IE8 throws error here and will not see later tests


        if (!div.querySelectorAll(":checked").length) {
          rbuggyQSA.push(":checked");
        } // Support: Safari 8+, iOS 8+
        // https://bugs.webkit.org/show_bug.cgi?id=136851
        // In-page `selector#id sibing-combinator selector` fails


        if (!div.querySelectorAll("a#" + expando + "+*").length) {
          rbuggyQSA.push(".#.+[+~]");
        }
      });
      assert(function (div) {
        // Support: Windows 8 Native Apps
        // The type and name attributes are restricted during .innerHTML assignment
        var input = document.createElement("input");
        input.setAttribute("type", "hidden");
        div.appendChild(input).setAttribute("name", "D"); // Support: IE8
        // Enforce case-sensitivity of name attribute

        if (div.querySelectorAll("[name=d]").length) {
          rbuggyQSA.push("name" + whitespace + "*[*^$|!~]?=");
        } // FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
        // IE8 throws error here and will not see later tests


        if (!div.querySelectorAll(":enabled").length) {
          rbuggyQSA.push(":enabled", ":disabled");
        } // Opera 10-11 does not throw on post-comma invalid pseudos


        div.querySelectorAll("*,:x");
        rbuggyQSA.push(",.*:");
      });
    }

    if (support.matchesSelector = rnative.test(matches = docElem.matches || docElem.webkitMatchesSelector || docElem.mozMatchesSelector || docElem.oMatchesSelector || docElem.msMatchesSelector)) {
      assert(function (div) {
        // Check to see if it's possible to do matchesSelector
        // on a disconnected node (IE 9)
        support.disconnectedMatch = matches.call(div, "div"); // This should fail with an exception
        // Gecko does not error, returns false instead

        matches.call(div, "[s!='']:x");
        rbuggyMatches.push("!=", pseudos);
      });
    }

    rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join("|"));
    rbuggyMatches = rbuggyMatches.length && new RegExp(rbuggyMatches.join("|"));
    /* Contains
         ---------------------------------------------------------------------- */

    hasCompare = rnative.test(docElem.compareDocumentPosition); // Element contains another
    // Purposefully self-exclusive
    // As in, an element does not contain itself

    contains = hasCompare || rnative.test(docElem.contains) ? function (a, b) {
      var adown = a.nodeType === 9 ? a.documentElement : a,
          bup = b && b.parentNode;
      return a === bup || !!(bup && bup.nodeType === 1 && (adown.contains ? adown.contains(bup) : a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16));
    } : function (a, b) {
      if (b) {
        while (b = b.parentNode) {
          if (b === a) {
            return true;
          }
        }
      }

      return false;
    };
    /* Sorting
         ---------------------------------------------------------------------- */
    // Document order sorting

    sortOrder = hasCompare ? function (a, b) {
      // Flag for duplicate removal
      if (a === b) {
        hasDuplicate = true;
        return 0;
      } // Sort on method existence if only one input has compareDocumentPosition


      var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;

      if (compare) {
        return compare;
      } // Calculate position if both inputs belong to the same document


      compare = (a.ownerDocument || a) === (b.ownerDocument || b) ? a.compareDocumentPosition(b) : // Otherwise we know they are disconnected
      1; // Disconnected nodes

      if (compare & 1 || !support.sortDetached && b.compareDocumentPosition(a) === compare) {
        // Choose the first element that is related to our preferred document
        if (a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a)) {
          return -1;
        }

        if (b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b)) {
          return 1;
        } // Maintain original order


        return sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0;
      }

      return compare & 4 ? -1 : 1;
    } : function (a, b) {
      // Exit early if the nodes are identical
      if (a === b) {
        hasDuplicate = true;
        return 0;
      }

      var cur,
          i = 0,
          aup = a.parentNode,
          bup = b.parentNode,
          ap = [a],
          bp = [b]; // Parentless nodes are either documents or disconnected

      if (!aup || !bup) {
        return a === document ? -1 : b === document ? 1 : aup ? -1 : bup ? 1 : sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0; // If the nodes are siblings, we can do a quick check
      } else if (aup === bup) {
        return siblingCheck(a, b);
      } // Otherwise we need full lists of their ancestors for comparison


      cur = a;

      while (cur = cur.parentNode) {
        ap.unshift(cur);
      }

      cur = b;

      while (cur = cur.parentNode) {
        bp.unshift(cur);
      } // Walk down the tree looking for a discrepancy


      while (ap[i] === bp[i]) {
        i++;
      }

      return i ? // Do a sibling check if the nodes have a common ancestor
      siblingCheck(ap[i], bp[i]) : // Otherwise nodes in our document sort first
      ap[i] === preferredDoc ? -1 : bp[i] === preferredDoc ? 1 : 0;
    };
    return document;
  };

  Sizzle.matches = function (expr, elements) {
    return Sizzle(expr, null, null, elements);
  };

  Sizzle.matchesSelector = function (elem, expr) {
    // Set document vars if needed
    if ((elem.ownerDocument || elem) !== document) {
      setDocument(elem);
    } // Make sure that attribute selectors are quoted


    expr = expr.replace(rattributeQuotes, "='$1']");

    if (support.matchesSelector && documentIsHTML && !compilerCache[expr + " "] && (!rbuggyMatches || !rbuggyMatches.test(expr)) && (!rbuggyQSA || !rbuggyQSA.test(expr))) {
      try {
        var ret = matches.call(elem, expr); // IE 9's matchesSelector returns false on disconnected nodes

        if (ret || support.disconnectedMatch || // As well, disconnected nodes are said to be in a document
        // fragment in IE 9
        elem.document && elem.document.nodeType !== 11) {
          return ret;
        }
      } catch (e) {}
    }

    return Sizzle(expr, document, null, [elem]).length > 0;
  };

  Sizzle.contains = function (context, elem) {
    // Set document vars if needed
    if ((context.ownerDocument || context) !== document) {
      setDocument(context);
    }

    return contains(context, elem);
  };

  Sizzle.attr = function (elem, name) {
    // Set document vars if needed
    if ((elem.ownerDocument || elem) !== document) {
      setDocument(elem);
    }

    var fn = Expr.attrHandle[name.toLowerCase()],
        // Don't get fooled by Object.prototype properties (jQuery #13807)
    val = fn && hasOwn.call(Expr.attrHandle, name.toLowerCase()) ? fn(elem, name, !documentIsHTML) : undefined;
    return val !== undefined ? val : support.attributes || !documentIsHTML ? elem.getAttribute(name) : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
  };

  Sizzle.error = function (msg) {
    throw new Error("Syntax error, unrecognized expression: " + msg);
  };
  /**
   * Document sorting and removing duplicates
   * @param {ArrayLike} results
   */


  Sizzle.uniqueSort = function (results) {
    var elem,
        duplicates = [],
        j = 0,
        i = 0; // Unless we *know* we can detect duplicates, assume their presence

    hasDuplicate = !support.detectDuplicates;
    sortInput = !support.sortStable && results.slice(0);
    results.sort(sortOrder);

    if (hasDuplicate) {
      while (elem = results[i++]) {
        if (elem === results[i]) {
          j = duplicates.push(i);
        }
      }

      while (j--) {
        results.splice(duplicates[j], 1);
      }
    } // Clear input after sorting to release objects
    // See https://github.com/jquery/sizzle/pull/225


    sortInput = null;
    return results;
  };
  /**
   * Utility function for retrieving the text value of an array of DOM nodes
   * @param {Array|Element} elem
   */


  getText = Sizzle.getText = function (elem) {
    var node,
        ret = "",
        i = 0,
        nodeType = elem.nodeType;

    if (!nodeType) {
      // If no nodeType, this is expected to be an array
      while (node = elem[i++]) {
        // Do not traverse comment nodes
        ret += getText(node);
      }
    } else if (nodeType === 1 || nodeType === 9 || nodeType === 11) {
      // Use textContent for elements
      // innerText usage removed for consistency of new lines (jQuery #11153)
      if (typeof elem.textContent === "string") {
        return elem.textContent;
      } else {
        // Traverse its children
        for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
          ret += getText(elem);
        }
      }
    } else if (nodeType === 3 || nodeType === 4) {
      return elem.nodeValue;
    } // Do not include comment or processing instruction nodes


    return ret;
  };

  Expr = Sizzle.selectors = {
    // Can be adjusted by the user
    cacheLength: 50,
    createPseudo: markFunction,
    match: matchExpr,
    attrHandle: {},
    find: {},
    relative: {
      ">": {
        dir: "parentNode",
        first: true
      },
      " ": {
        dir: "parentNode"
      },
      "+": {
        dir: "previousSibling",
        first: true
      },
      "~": {
        dir: "previousSibling"
      }
    },
    preFilter: {
      "ATTR": function ATTR(match) {
        match[1] = match[1].replace(runescape, funescape); // Move the given value to match[3] whether quoted or unquoted

        match[3] = (match[3] || match[4] || match[5] || "").replace(runescape, funescape);

        if (match[2] === "~=") {
          match[3] = " " + match[3] + " ";
        }

        return match.slice(0, 4);
      },
      "CHILD": function CHILD(match) {
        /* matches from matchExpr["CHILD"]
             1 type (only|nth|...)
             2 what (child|of-type)
             3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
             4 xn-component of xn+y argument ([+-]?\d*n|)
             5 sign of xn-component
             6 x of xn-component
             7 sign of y-component
             8 y of y-component
             */
        match[1] = match[1].toLowerCase();

        if (match[1].slice(0, 3) === "nth") {
          // nth-* requires argument
          if (!match[3]) {
            Sizzle.error(match[0]);
          } // numeric x and y parameters for Expr.filter.CHILD
          // remember that false/true cast respectively to 0/1


          match[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * (match[3] === "even" || match[3] === "odd"));
          match[5] = +(match[7] + match[8] || match[3] === "odd"); // other types prohibit arguments
        } else if (match[3]) {
          Sizzle.error(match[0]);
        }

        return match;
      },
      "PSEUDO": function PSEUDO(match) {
        var excess,
            unquoted = !match[6] && match[2];

        if (matchExpr["CHILD"].test(match[0])) {
          return null;
        } // Accept quoted arguments as-is


        if (match[3]) {
          match[2] = match[4] || match[5] || ""; // Strip excess characters from unquoted arguments
        } else if (unquoted && rpseudo.test(unquoted) && ( // Get excess from tokenize (recursively)
        excess = tokenize(unquoted, true)) && ( // advance to the next closing parenthesis
        excess = unquoted.indexOf(")", unquoted.length - excess) - unquoted.length)) {
          // excess is a negative index
          match[0] = match[0].slice(0, excess);
          match[2] = unquoted.slice(0, excess);
        } // Return only captures needed by the pseudo filter method (type and argument)


        return match.slice(0, 3);
      }
    },
    filter: {
      "TAG": function TAG(nodeNameSelector) {
        var nodeName = nodeNameSelector.replace(runescape, funescape).toLowerCase();
        return nodeNameSelector === "*" ? function () {
          return true;
        } : function (elem) {
          return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
        };
      },
      "CLASS": function CLASS(className) {
        var pattern = classCache[className + " "];
        return pattern || (pattern = new RegExp("(^|" + whitespace + ")" + className + "(" + whitespace + "|$)")) && classCache(className, function (elem) {
          return pattern.test(typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "");
        });
      },
      "ATTR": function ATTR(name, operator, check) {
        return function (elem) {
          var result = Sizzle.attr(elem, name);

          if (result == null) {
            return operator === "!=";
          }

          if (!operator) {
            return true;
          }

          result += "";
          return operator === "=" ? result === check : operator === "!=" ? result !== check : operator === "^=" ? check && result.indexOf(check) === 0 : operator === "*=" ? check && result.indexOf(check) > -1 : operator === "$=" ? check && result.slice(-check.length) === check : operator === "~=" ? (" " + result.replace(rwhitespace, " ") + " ").indexOf(check) > -1 : operator === "|=" ? result === check || result.slice(0, check.length + 1) === check + "-" : false;
        };
      },
      "CHILD": function CHILD(type, what, argument, first, last) {
        var simple = type.slice(0, 3) !== "nth",
            forward = type.slice(-4) !== "last",
            ofType = what === "of-type";
        return first === 1 && last === 0 ? // Shortcut for :nth-*(n)
        function (elem) {
          return !!elem.parentNode;
        } : function (elem, context, xml) {
          var cache,
              uniqueCache,
              outerCache,
              node,
              nodeIndex,
              start,
              dir = simple !== forward ? "nextSibling" : "previousSibling",
              parent = elem.parentNode,
              name = ofType && elem.nodeName.toLowerCase(),
              useCache = !xml && !ofType,
              diff = false;

          if (parent) {
            // :(first|last|only)-(child|of-type)
            if (simple) {
              while (dir) {
                node = elem;

                while (node = node[dir]) {
                  if (ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) {
                    return false;
                  }
                } // Reverse direction for :only-* (if we haven't yet done so)


                start = dir = type === "only" && !start && "nextSibling";
              }

              return true;
            }

            start = [forward ? parent.firstChild : parent.lastChild]; // non-xml :nth-child(...) stores cache data on `parent`

            if (forward && useCache) {
              // Seek `elem` from a previously-cached index
              // ...in a gzip-friendly way
              node = parent;
              outerCache = node[expando] || (node[expando] = {}); // Support: IE <9 only
              // Defend against cloned attroperties (jQuery gh-1709)

              uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});
              cache = uniqueCache[type] || [];
              nodeIndex = cache[0] === dirruns && cache[1];
              diff = nodeIndex && cache[2];
              node = nodeIndex && parent.childNodes[nodeIndex];

              while (node = ++nodeIndex && node && node[dir] || ( // Fallback to seeking `elem` from the start
              diff = nodeIndex = 0) || start.pop()) {
                // When found, cache indexes on `parent` and break
                if (node.nodeType === 1 && ++diff && node === elem) {
                  uniqueCache[type] = [dirruns, nodeIndex, diff];
                  break;
                }
              }
            } else {
              // Use previously-cached element index if available
              if (useCache) {
                // ...in a gzip-friendly way
                node = elem;
                outerCache = node[expando] || (node[expando] = {}); // Support: IE <9 only
                // Defend against cloned attroperties (jQuery gh-1709)

                uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});
                cache = uniqueCache[type] || [];
                nodeIndex = cache[0] === dirruns && cache[1];
                diff = nodeIndex;
              } // xml :nth-child(...)
              // or :nth-last-child(...) or :nth(-last)?-of-type(...)


              if (diff === false) {
                // Use the same loop as above to seek `elem` from the start
                while (node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop()) {
                  if ((ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) && ++diff) {
                    // Cache the index of each encountered element
                    if (useCache) {
                      outerCache = node[expando] || (node[expando] = {}); // Support: IE <9 only
                      // Defend against cloned attroperties (jQuery gh-1709)

                      uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});
                      uniqueCache[type] = [dirruns, diff];
                    }

                    if (node === elem) {
                      break;
                    }
                  }
                }
              }
            } // Incorporate the offset, then check against cycle size


            diff -= last;
            return diff === first || diff % first === 0 && diff / first >= 0;
          }
        };
      },
      "PSEUDO": function PSEUDO(pseudo, argument) {
        // pseudo-class names are case-insensitive
        // http://www.w3.org/TR/selectors/#pseudo-classes
        // Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
        // Remember that setFilters inherits from pseudos
        var args,
            fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] || Sizzle.error("unsupported pseudo: " + pseudo); // The user may use createPseudo to indicate that
        // arguments are needed to create the filter function
        // just as Sizzle does

        if (fn[expando]) {
          return fn(argument);
        } // But maintain support for old signatures


        if (fn.length > 1) {
          args = [pseudo, pseudo, "", argument];
          return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ? markFunction(function (seed, matches) {
            var idx,
                matched = fn(seed, argument),
                i = matched.length;

            while (i--) {
              idx = indexOf(seed, matched[i]);
              seed[idx] = !(matches[idx] = matched[i]);
            }
          }) : function (elem) {
            return fn(elem, 0, args);
          };
        }

        return fn;
      }
    },
    pseudos: {
      // Potentially complex pseudos
      "not": markFunction(function (selector) {
        // Trim the selector passed to compile
        // to avoid treating leading and trailing
        // spaces as combinators
        var input = [],
            results = [],
            matcher = compile(selector.replace(rtrim, "$1"));
        return matcher[expando] ? markFunction(function (seed, matches, context, xml) {
          var elem,
              unmatched = matcher(seed, null, xml, []),
              i = seed.length; // Match elements unmatched by `matcher`

          while (i--) {
            if (elem = unmatched[i]) {
              seed[i] = !(matches[i] = elem);
            }
          }
        }) : function (elem, context, xml) {
          input[0] = elem;
          matcher(input, null, xml, results); // Don't keep the element (issue #299)

          input[0] = null;
          return !results.pop();
        };
      }),
      "has": markFunction(function (selector) {
        return function (elem) {
          return Sizzle(selector, elem).length > 0;
        };
      }),
      "contains": markFunction(function (text) {
        text = text.replace(runescape, funescape);
        return function (elem) {
          return (elem.textContent || elem.innerText || getText(elem)).indexOf(text) > -1;
        };
      }),
      // "Whether an element is represented by a :lang() selector
      // is based solely on the element's language value
      // being equal to the identifier C,
      // or beginning with the identifier C immediately followed by "-".
      // The matching of C against the element's language value is performed case-insensitively.
      // The identifier C does not have to be a valid language name."
      // http://www.w3.org/TR/selectors/#lang-pseudo
      "lang": markFunction(function (lang) {
        // lang value must be a valid identifier
        if (!ridentifier.test(lang || "")) {
          Sizzle.error("unsupported lang: " + lang);
        }

        lang = lang.replace(runescape, funescape).toLowerCase();
        return function (elem) {
          var elemLang;

          do {
            if (elemLang = documentIsHTML ? elem.lang : elem.getAttribute("xml:lang") || elem.getAttribute("lang")) {
              elemLang = elemLang.toLowerCase();
              return elemLang === lang || elemLang.indexOf(lang + "-") === 0;
            }
          } while ((elem = elem.parentNode) && elem.nodeType === 1);

          return false;
        };
      }),
      // Miscellaneous
      "target": function target(elem) {
        var hash = window.location && window.location.hash;
        return hash && hash.slice(1) === elem.id;
      },
      "root": function root(elem) {
        return elem === docElem;
      },
      "focus": function focus(elem) {
        return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
      },
      // Boolean properties
      "enabled": function enabled(elem) {
        return elem.disabled === false;
      },
      "disabled": function disabled(elem) {
        return elem.disabled === true;
      },
      "checked": function checked(elem) {
        // In CSS3, :checked should return both checked and selected elements
        // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
        var nodeName = elem.nodeName.toLowerCase();
        return nodeName === "input" && !!elem.checked || nodeName === "option" && !!elem.selected;
      },
      "selected": function selected(elem) {
        // Accessing this property makes selected-by-default
        // options in Safari work properly
        if (elem.parentNode) {
          elem.parentNode.selectedIndex;
        }

        return elem.selected === true;
      },
      // Contents
      "empty": function empty(elem) {
        // http://www.w3.org/TR/selectors/#empty-pseudo
        // :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
        //   but not by others (comment: 8; processing instruction: 7; etc.)
        // nodeType < 6 works because attributes (2) do not appear as children
        for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
          if (elem.nodeType < 6) {
            return false;
          }
        }

        return true;
      },
      "parent": function parent(elem) {
        return !Expr.pseudos["empty"](elem);
      },
      // Element/input types
      "header": function header(elem) {
        return rheader.test(elem.nodeName);
      },
      "input": function input(elem) {
        return rinputs.test(elem.nodeName);
      },
      "button": function button(elem) {
        var name = elem.nodeName.toLowerCase();
        return name === "input" && elem.type === "button" || name === "button";
      },
      "text": function text(elem) {
        var attr;
        return elem.nodeName.toLowerCase() === "input" && elem.type === "text" && ( // Support: IE<8
        // New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
        (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text");
      },
      // Position-in-collection
      "first": createPositionalPseudo(function () {
        return [0];
      }),
      "last": createPositionalPseudo(function (matchIndexes, length) {
        return [length - 1];
      }),
      "eq": createPositionalPseudo(function (matchIndexes, length, argument) {
        return [argument < 0 ? argument + length : argument];
      }),
      "even": createPositionalPseudo(function (matchIndexes, length) {
        var i = 0;

        for (; i < length; i += 2) {
          matchIndexes.push(i);
        }

        return matchIndexes;
      }),
      "odd": createPositionalPseudo(function (matchIndexes, length) {
        var i = 1;

        for (; i < length; i += 2) {
          matchIndexes.push(i);
        }

        return matchIndexes;
      }),
      "lt": createPositionalPseudo(function (matchIndexes, length, argument) {
        var i = argument < 0 ? argument + length : argument;

        for (; --i >= 0;) {
          matchIndexes.push(i);
        }

        return matchIndexes;
      }),
      "gt": createPositionalPseudo(function (matchIndexes, length, argument) {
        var i = argument < 0 ? argument + length : argument;

        for (; ++i < length;) {
          matchIndexes.push(i);
        }

        return matchIndexes;
      })
    }
  };
  Expr.pseudos["nth"] = Expr.pseudos["eq"]; // Add button/input type pseudos

  for (i in {
    radio: true,
    checkbox: true,
    file: true,
    password: true,
    image: true
  }) {
    Expr.pseudos[i] = createInputPseudo(i);
  }

  for (i in {
    submit: true,
    reset: true
  }) {
    Expr.pseudos[i] = createButtonPseudo(i);
  } // Easy API for creating new setFilters


  function setFilters() {}

  setFilters.prototype = Expr.filters = Expr.pseudos;
  Expr.setFilters = new setFilters();

  tokenize = Sizzle.tokenize = function (selector, parseOnly) {
    var matched,
        match,
        tokens,
        type,
        soFar,
        groups,
        preFilters,
        cached = tokenCache[selector + " "];

    if (cached) {
      return parseOnly ? 0 : cached.slice(0);
    }

    soFar = selector;
    groups = [];
    preFilters = Expr.preFilter;

    while (soFar) {
      // Comma and first run
      if (!matched || (match = rcomma.exec(soFar))) {
        if (match) {
          // Don't consume trailing commas as valid
          soFar = soFar.slice(match[0].length) || soFar;
        }

        groups.push(tokens = []);
      }

      matched = false; // Combinators

      if (match = rcombinators.exec(soFar)) {
        matched = match.shift();
        tokens.push({
          value: matched,
          // Cast descendant combinators to space
          type: match[0].replace(rtrim, " ")
        });
        soFar = soFar.slice(matched.length);
      } // Filters


      for (type in Expr.filter) {
        if ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] || (match = preFilters[type](match)))) {
          matched = match.shift();
          tokens.push({
            value: matched,
            type: type,
            matches: match
          });
          soFar = soFar.slice(matched.length);
        }
      }

      if (!matched) {
        break;
      }
    } // Return the length of the invalid excess
    // if we're just parsing
    // Otherwise, throw an error or return tokens


    return parseOnly ? soFar.length : soFar ? Sizzle.error(selector) : // Cache the tokens
    tokenCache(selector, groups).slice(0);
  };

  function toSelector(tokens) {
    var i = 0,
        len = tokens.length,
        selector = "";

    for (; i < len; i++) {
      selector += tokens[i].value;
    }

    return selector;
  }

  function addCombinator(matcher, combinator, base) {
    var dir = combinator.dir,
        checkNonElements = base && dir === "parentNode",
        doneName = done++;
    return combinator.first ? // Check against closest ancestor/preceding element
    function (elem, context, xml) {
      while (elem = elem[dir]) {
        if (elem.nodeType === 1 || checkNonElements) {
          return matcher(elem, context, xml);
        }
      }
    } : // Check against all ancestor/preceding elements
    function (elem, context, xml) {
      var oldCache,
          uniqueCache,
          outerCache,
          newCache = [dirruns, doneName]; // We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching

      if (xml) {
        while (elem = elem[dir]) {
          if (elem.nodeType === 1 || checkNonElements) {
            if (matcher(elem, context, xml)) {
              return true;
            }
          }
        }
      } else {
        while (elem = elem[dir]) {
          if (elem.nodeType === 1 || checkNonElements) {
            outerCache = elem[expando] || (elem[expando] = {}); // Support: IE <9 only
            // Defend against cloned attroperties (jQuery gh-1709)

            uniqueCache = outerCache[elem.uniqueID] || (outerCache[elem.uniqueID] = {});

            if ((oldCache = uniqueCache[dir]) && oldCache[0] === dirruns && oldCache[1] === doneName) {
              // Assign to newCache so results back-propagate to previous elements
              return newCache[2] = oldCache[2];
            } else {
              // Reuse newcache so results back-propagate to previous elements
              uniqueCache[dir] = newCache; // A match means we're done; a fail means we have to keep checking

              if (newCache[2] = matcher(elem, context, xml)) {
                return true;
              }
            }
          }
        }
      }
    };
  }

  function elementMatcher(matchers) {
    return matchers.length > 1 ? function (elem, context, xml) {
      var i = matchers.length;

      while (i--) {
        if (!matchers[i](elem, context, xml)) {
          return false;
        }
      }

      return true;
    } : matchers[0];
  }

  function multipleContexts(selector, contexts, results) {
    var i = 0,
        len = contexts.length;

    for (; i < len; i++) {
      Sizzle(selector, contexts[i], results);
    }

    return results;
  }

  function condense(unmatched, map, filter, context, xml) {
    var elem,
        newUnmatched = [],
        i = 0,
        len = unmatched.length,
        mapped = map != null;

    for (; i < len; i++) {
      if (elem = unmatched[i]) {
        if (!filter || filter(elem, context, xml)) {
          newUnmatched.push(elem);

          if (mapped) {
            map.push(i);
          }
        }
      }
    }

    return newUnmatched;
  }

  function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {
    if (postFilter && !postFilter[expando]) {
      postFilter = setMatcher(postFilter);
    }

    if (postFinder && !postFinder[expando]) {
      postFinder = setMatcher(postFinder, postSelector);
    }

    return markFunction(function (seed, results, context, xml) {
      var temp,
          i,
          elem,
          preMap = [],
          postMap = [],
          preexisting = results.length,
          // Get initial elements from seed or context
      elems = seed || multipleContexts(selector || "*", context.nodeType ? [context] : context, []),
          // Prefilter to get matcher input, preserving a map for seed-results synchronization
      matcherIn = preFilter && (seed || !selector) ? condense(elems, preMap, preFilter, context, xml) : elems,
          matcherOut = matcher ? // If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
      postFinder || (seed ? preFilter : preexisting || postFilter) ? // ...intermediate processing is necessary
      [] : // ...otherwise use results directly
      results : matcherIn; // Find primary matches

      if (matcher) {
        matcher(matcherIn, matcherOut, context, xml);
      } // Apply postFilter


      if (postFilter) {
        temp = condense(matcherOut, postMap);
        postFilter(temp, [], context, xml); // Un-match failing elements by moving them back to matcherIn

        i = temp.length;

        while (i--) {
          if (elem = temp[i]) {
            matcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem);
          }
        }
      }

      if (seed) {
        if (postFinder || preFilter) {
          if (postFinder) {
            // Get the final matcherOut by condensing this intermediate into postFinder contexts
            temp = [];
            i = matcherOut.length;

            while (i--) {
              if (elem = matcherOut[i]) {
                // Restore matcherIn since elem is not yet a final match
                temp.push(matcherIn[i] = elem);
              }
            }

            postFinder(null, matcherOut = [], temp, xml);
          } // Move matched elements from seed to results to keep them synchronized


          i = matcherOut.length;

          while (i--) {
            if ((elem = matcherOut[i]) && (temp = postFinder ? indexOf(seed, elem) : preMap[i]) > -1) {
              seed[temp] = !(results[temp] = elem);
            }
          }
        } // Add elements to results, through postFinder if defined

      } else {
        matcherOut = condense(matcherOut === results ? matcherOut.splice(preexisting, matcherOut.length) : matcherOut);

        if (postFinder) {
          postFinder(null, results, matcherOut, xml);
        } else {
          push.apply(results, matcherOut);
        }
      }
    });
  }

  function matcherFromTokens(tokens) {
    var checkContext,
        matcher,
        j,
        len = tokens.length,
        leadingRelative = Expr.relative[tokens[0].type],
        implicitRelative = leadingRelative || Expr.relative[" "],
        i = leadingRelative ? 1 : 0,
        // The foundational matcher ensures that elements are reachable from top-level context(s)
    matchContext = addCombinator(function (elem) {
      return elem === checkContext;
    }, implicitRelative, true),
        matchAnyContext = addCombinator(function (elem) {
      return indexOf(checkContext, elem) > -1;
    }, implicitRelative, true),
        matchers = [function (elem, context, xml) {
      var ret = !leadingRelative && (xml || context !== outermostContext) || ((checkContext = context).nodeType ? matchContext(elem, context, xml) : matchAnyContext(elem, context, xml)); // Avoid hanging onto element (issue #299)

      checkContext = null;
      return ret;
    }];

    for (; i < len; i++) {
      if (matcher = Expr.relative[tokens[i].type]) {
        matchers = [addCombinator(elementMatcher(matchers), matcher)];
      } else {
        matcher = Expr.filter[tokens[i].type].apply(null, tokens[i].matches); // Return special upon seeing a positional matcher

        if (matcher[expando]) {
          // Find the next relative operator (if any) for proper handling
          j = ++i;

          for (; j < len; j++) {
            if (Expr.relative[tokens[j].type]) {
              break;
            }
          }

          return setMatcher(i > 1 && elementMatcher(matchers), i > 1 && toSelector( // If the preceding token was a descendant combinator, insert an implicit any-element `*`
          tokens.slice(0, i - 1).concat({
            value: tokens[i - 2].type === " " ? "*" : ""
          })).replace(rtrim, "$1"), matcher, i < j && matcherFromTokens(tokens.slice(i, j)), j < len && matcherFromTokens(tokens = tokens.slice(j)), j < len && toSelector(tokens));
        }

        matchers.push(matcher);
      }
    }

    return elementMatcher(matchers);
  }

  function matcherFromGroupMatchers(elementMatchers, setMatchers) {
    var bySet = setMatchers.length > 0,
        byElement = elementMatchers.length > 0,
        superMatcher = function superMatcher(seed, context, xml, results, outermost) {
      var elem,
          j,
          matcher,
          matchedCount = 0,
          i = "0",
          unmatched = seed && [],
          setMatched = [],
          contextBackup = outermostContext,
          // We must always have either seed elements or outermost context
      elems = seed || byElement && Expr.find["TAG"]("*", outermost),
          // Use integer dirruns iff this is the outermost matcher
      dirrunsUnique = dirruns += contextBackup == null ? 1 : Math.random() || 0.1,
          len = elems.length;

      if (outermost) {
        outermostContext = context === document || context || outermost;
      } // Add elements passing elementMatchers directly to results
      // Support: IE<9, Safari
      // Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id


      for (; i !== len && (elem = elems[i]) != null; i++) {
        if (byElement && elem) {
          j = 0;

          if (!context && elem.ownerDocument !== document) {
            setDocument(elem);
            xml = !documentIsHTML;
          }

          while (matcher = elementMatchers[j++]) {
            if (matcher(elem, context || document, xml)) {
              results.push(elem);
              break;
            }
          }

          if (outermost) {
            dirruns = dirrunsUnique;
          }
        } // Track unmatched elements for set filters


        if (bySet) {
          // They will have gone through all possible matchers
          if (elem = !matcher && elem) {
            matchedCount--;
          } // Lengthen the array for every element, matched or not


          if (seed) {
            unmatched.push(elem);
          }
        }
      } // `i` is now the count of elements visited above, and adding it to `matchedCount`
      // makes the latter nonnegative.


      matchedCount += i; // Apply set filters to unmatched elements
      // NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
      // equals `i`), unless we didn't visit _any_ elements in the above loop because we have
      // no element matchers and no seed.
      // Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
      // case, which will result in a "00" `matchedCount` that differs from `i` but is also
      // numerically zero.

      if (bySet && i !== matchedCount) {
        j = 0;

        while (matcher = setMatchers[j++]) {
          matcher(unmatched, setMatched, context, xml);
        }

        if (seed) {
          // Reintegrate element matches to eliminate the need for sorting
          if (matchedCount > 0) {
            while (i--) {
              if (!(unmatched[i] || setMatched[i])) {
                setMatched[i] = pop.call(results);
              }
            }
          } // Discard index placeholder values to get only actual matches


          setMatched = condense(setMatched);
        } // Add matches to results


        push.apply(results, setMatched); // Seedless set matches succeeding multiple successful matchers stipulate sorting

        if (outermost && !seed && setMatched.length > 0 && matchedCount + setMatchers.length > 1) {
          Sizzle.uniqueSort(results);
        }
      } // Override manipulation of globals by nested matchers


      if (outermost) {
        dirruns = dirrunsUnique;
        outermostContext = contextBackup;
      }

      return unmatched;
    };

    return bySet ? markFunction(superMatcher) : superMatcher;
  }

  compile = Sizzle.compile = function (selector, match
  /* Internal Use Only */
  ) {
    var i,
        setMatchers = [],
        elementMatchers = [],
        cached = compilerCache[selector + " "];

    if (!cached) {
      // Generate a function of recursive functions that can be used to check each element
      if (!match) {
        match = tokenize(selector);
      }

      i = match.length;

      while (i--) {
        cached = matcherFromTokens(match[i]);

        if (cached[expando]) {
          setMatchers.push(cached);
        } else {
          elementMatchers.push(cached);
        }
      } // Cache the compiled function


      cached = compilerCache(selector, matcherFromGroupMatchers(elementMatchers, setMatchers)); // Save selector and tokenization

      cached.selector = selector;
    }

    return cached;
  };
  /**
   * A low-level selection function that works with Sizzle's compiled
   *  selector functions
   * @param {String|Function} selector A selector or a pre-compiled
   *  selector function built with Sizzle.compile
   * @param {Element} context
   * @param {Array} [results]
   * @param {Array} [seed] A set of elements to match against
   */


  select = Sizzle.select = function (selector, context, results, seed) {
    var i,
        tokens,
        token,
        type,
        find,
        compiled = typeof selector === "function" && selector,
        match = !seed && tokenize(selector = compiled.selector || selector);
    results = results || []; // Try to minimize operations if there is only one selector in the list and no seed
    // (the latter of which guarantees us context)

    if (match.length === 1) {
      // Reduce context if the leading compound selector is an ID
      tokens = match[0] = match[0].slice(0);

      if (tokens.length > 2 && (token = tokens[0]).type === "ID" && support.getById && context.nodeType === 9 && documentIsHTML && Expr.relative[tokens[1].type]) {
        context = (Expr.find["ID"](token.matches[0].replace(runescape, funescape), context) || [])[0];

        if (!context) {
          return results; // Precompiled matchers will still verify ancestry, so step up a level
        } else if (compiled) {
          context = context.parentNode;
        }

        selector = selector.slice(tokens.shift().value.length);
      } // Fetch a seed set for right-to-left matching


      i = matchExpr["needsContext"].test(selector) ? 0 : tokens.length;

      while (i--) {
        token = tokens[i]; // Abort if we hit a combinator

        if (Expr.relative[type = token.type]) {
          break;
        }

        if (find = Expr.find[type]) {
          // Search, expanding context for leading sibling combinators
          if (seed = find(token.matches[0].replace(runescape, funescape), rsibling.test(tokens[0].type) && testContext(context.parentNode) || context)) {
            // If seed is empty or no tokens remain, we can return early
            tokens.splice(i, 1);
            selector = seed.length && toSelector(tokens);

            if (!selector) {
              push.apply(results, seed);
              return results;
            }

            break;
          }
        }
      }
    } // Compile and execute a filtering function if one is not provided
    // Provide `match` to avoid retokenization if we modified the selector above


    (compiled || compile(selector, match))(seed, context, !documentIsHTML, results, !context || rsibling.test(selector) && testContext(context.parentNode) || context);
    return results;
  }; // One-time assignments
  // Sort stability


  support.sortStable = expando.split("").sort(sortOrder).join("") === expando; // Support: Chrome 14-35+
  // Always assume duplicates if they aren't passed to the comparison function

  support.detectDuplicates = !!hasDuplicate; // Initialize against the default document

  setDocument(); // Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
  // Detached nodes confoundingly follow *each other*

  support.sortDetached = assert(function (div1) {
    // Should return 1, but returns 4 (following)
    return div1.compareDocumentPosition(document.createElement("div")) & 1;
  }); // Support: IE<8
  // Prevent attribute/property "interpolation"
  // http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx

  if (!assert(function (div) {
    div.innerHTML = "<a href='#'></a>";
    return div.firstChild.getAttribute("href") === "#";
  })) {
    addHandle("type|href|height|width", function (elem, name, isXML) {
      if (!isXML) {
        return elem.getAttribute(name, name.toLowerCase() === "type" ? 1 : 2);
      }
    });
  } // Support: IE<9
  // Use defaultValue in place of getAttribute("value")


  if (!support.attributes || !assert(function (div) {
    div.innerHTML = "<input/>";
    div.firstChild.setAttribute("value", "");
    return div.firstChild.getAttribute("value") === "";
  })) {
    addHandle("value", function (elem, name, isXML) {
      if (!isXML && elem.nodeName.toLowerCase() === "input") {
        return elem.defaultValue;
      }
    });
  } // Support: IE<9
  // Use getAttributeNode to fetch booleans when getAttribute lies


  if (!assert(function (div) {
    return div.getAttribute("disabled") == null;
  })) {
    addHandle(booleans, function (elem, name, isXML) {
      var val;

      if (!isXML) {
        return elem[name] === true ? name.toLowerCase() : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
      }
    });
  }

  return Sizzle;
}(window);

_jQuery.find = Sizzle;
_jQuery.expr = Sizzle.selectors;
_jQuery.expr[":"] = _jQuery.expr.pseudos;
_jQuery.uniqueSort = _jQuery.unique = Sizzle.uniqueSort;
_jQuery.text = Sizzle.getText;
_jQuery.isXMLDoc = Sizzle.isXML;
_jQuery.contains = Sizzle.contains;

var dir = function dir(elem, _dir, until) {
  var matched = [],
      truncate = until !== undefined;

  while ((elem = elem[_dir]) && elem.nodeType !== 9) {
    if (elem.nodeType === 1) {
      if (truncate && _jQuery(elem).is(until)) {
        break;
      }

      matched.push(elem);
    }
  }

  return matched;
};

var _siblings = function siblings(n, elem) {
  var matched = [];

  for (; n; n = n.nextSibling) {
    if (n.nodeType === 1 && n !== elem) {
      matched.push(n);
    }
  }

  return matched;
};

var rneedsContext = _jQuery.expr.match.needsContext;
var rsingleTag = /^<([\w-]+)\s*\/?>(?:<\/\1>|)$/;
var risSimple = /^.[^:#\[\.,]*$/; // Implement the identical functionality for filter and not

function winnow(elements, qualifier, not) {
  if (_jQuery.isFunction(qualifier)) {
    return _jQuery.grep(elements, function (elem, i) {
      /* jshint -W018 */
      return !!qualifier.call(elem, i, elem) !== not;
    });
  }

  if (qualifier.nodeType) {
    return _jQuery.grep(elements, function (elem) {
      return elem === qualifier !== not;
    });
  }

  if (typeof qualifier === "string") {
    if (risSimple.test(qualifier)) {
      return _jQuery.filter(qualifier, elements, not);
    }

    qualifier = _jQuery.filter(qualifier, elements);
  }

  return _jQuery.grep(elements, function (elem) {
    return _jQuery.inArray(elem, qualifier) > -1 !== not;
  });
}

_jQuery.filter = function (expr, elems, not) {
  var elem = elems[0];

  if (not) {
    expr = ":not(" + expr + ")";
  }

  return elems.length === 1 && elem.nodeType === 1 ? _jQuery.find.matchesSelector(elem, expr) ? [elem] : [] : _jQuery.find.matches(expr, _jQuery.grep(elems, function (elem) {
    return elem.nodeType === 1;
  }));
};

_jQuery.fn.extend({
  find: function find(selector) {
    var i,
        ret = [],
        self = this,
        len = self.length;

    if (typeof selector !== "string") {
      return this.pushStack(_jQuery(selector).filter(function () {
        for (i = 0; i < len; i++) {
          if (_jQuery.contains(self[i], this)) {
            return true;
          }
        }
      }));
    }

    for (i = 0; i < len; i++) {
      _jQuery.find(selector, self[i], ret);
    } // Needed because $( selector, context ) becomes $( context ).find( selector )


    ret = this.pushStack(len > 1 ? _jQuery.unique(ret) : ret);
    ret.selector = this.selector ? this.selector + " " + selector : selector;
    return ret;
  },
  filter: function filter(selector) {
    return this.pushStack(winnow(this, selector || [], false));
  },
  not: function not(selector) {
    return this.pushStack(winnow(this, selector || [], true));
  },
  is: function is(selector) {
    return !!winnow(this, // If this is a positional/relative selector, check membership in the returned set
    // so $("p:first").is("p:last") won't return true for a doc with two "p".
    typeof selector === "string" && rneedsContext.test(selector) ? _jQuery(selector) : selector || [], false).length;
  }
}); // Initialize a jQuery object
// A central reference to the root jQuery(document)


var rootjQuery,
    // A simple way to check for HTML strings
// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
// Strict HTML recognition (#11290: must start with <)
rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,
    init = _jQuery.fn.init = function (selector, context, root) {
  var match, elem; // HANDLE: $(""), $(null), $(undefined), $(false)

  if (!selector) {
    return this;
  } // init accepts an alternate rootjQuery
  // so migrate can support jQuery.sub (gh-2101)


  root = root || rootjQuery; // Handle HTML strings

  if (typeof selector === "string") {
    if (selector.charAt(0) === "<" && selector.charAt(selector.length - 1) === ">" && selector.length >= 3) {
      // Assume that strings that start and end with <> are HTML and skip the regex check
      match = [null, selector, null];
    } else {
      match = rquickExpr.exec(selector);
    } // Match html or make sure no context is specified for #id


    if (match && (match[1] || !context)) {
      // HANDLE: $(html) -> $(array)
      if (match[1]) {
        context = context instanceof _jQuery ? context[0] : context; // scripts is true for back-compat
        // Intentionally let the error be thrown if parseHTML is not present

        _jQuery.merge(this, _jQuery.parseHTML(match[1], context && context.nodeType ? context.ownerDocument || context : document, true)); // HANDLE: $(html, props)


        if (rsingleTag.test(match[1]) && _jQuery.isPlainObject(context)) {
          for (match in context) {
            // Properties of context are called as methods if possible
            if (_jQuery.isFunction(this[match])) {
              this[match](context[match]); // ...and otherwise set as attributes
            } else {
              this.attr(match, context[match]);
            }
          }
        }

        return this; // HANDLE: $(#id)
      } else {
        elem = document.getElementById(match[2]); // Check parentNode to catch when Blackberry 4.6 returns
        // nodes that are no longer in the document #6963

        if (elem && elem.parentNode) {
          // Handle the case where IE and Opera return items
          // by name instead of ID
          if (elem.id !== match[2]) {
            return rootjQuery.find(selector);
          } // Otherwise, we inject the element directly into the jQuery object


          this.length = 1;
          this[0] = elem;
        }

        this.context = document;
        this.selector = selector;
        return this;
      } // HANDLE: $(expr, $(...))

    } else if (!context || context.jquery) {
      return (context || root).find(selector); // HANDLE: $(expr, context)
      // (which is just equivalent to: $(context).find(expr)
    } else {
      return this.constructor(context).find(selector);
    } // HANDLE: $(DOMElement)

  } else if (selector.nodeType) {
    this.context = this[0] = selector;
    this.length = 1;
    return this; // HANDLE: $(function)
    // Shortcut for document ready
  } else if (_jQuery.isFunction(selector)) {
    return typeof root.ready !== "undefined" ? root.ready(selector) : // Execute immediately if ready is not present
    selector(_jQuery);
  }

  if (selector.selector !== undefined) {
    this.selector = selector.selector;
    this.context = selector.context;
  }

  return _jQuery.makeArray(selector, this);
}; // Give the init function the jQuery prototype for later instantiation


init.prototype = _jQuery.fn; // Initialize central reference

rootjQuery = _jQuery(document);
var rparentsprev = /^(?:parents|prev(?:Until|All))/,
    // methods guaranteed to produce a unique set when starting from a unique set
guaranteedUnique = {
  children: true,
  contents: true,
  next: true,
  prev: true
};

_jQuery.fn.extend({
  has: function has(target) {
    var i,
        targets = _jQuery(target, this),
        len = targets.length;

    return this.filter(function () {
      for (i = 0; i < len; i++) {
        if (_jQuery.contains(this, targets[i])) {
          return true;
        }
      }
    });
  },
  closest: function closest(selectors, context) {
    var cur,
        i = 0,
        l = this.length,
        matched = [],
        pos = rneedsContext.test(selectors) || typeof selectors !== "string" ? _jQuery(selectors, context || this.context) : 0;

    for (; i < l; i++) {
      for (cur = this[i]; cur && cur !== context; cur = cur.parentNode) {
        // Always skip document fragments
        if (cur.nodeType < 11 && (pos ? pos.index(cur) > -1 : // Don't pass non-elements to Sizzle
        cur.nodeType === 1 && _jQuery.find.matchesSelector(cur, selectors))) {
          matched.push(cur);
          break;
        }
      }
    }

    return this.pushStack(matched.length > 1 ? _jQuery.uniqueSort(matched) : matched);
  },
  // Determine the position of an element within
  // the matched set of elements
  index: function index(elem) {
    // No argument, return index in parent
    if (!elem) {
      return this[0] && this[0].parentNode ? this.first().prevAll().length : -1;
    } // index in selector


    if (typeof elem === "string") {
      return _jQuery.inArray(this[0], _jQuery(elem));
    } // Locate the position of the desired element


    return _jQuery.inArray( // If it receives a jQuery object, the first element is used
    elem.jquery ? elem[0] : elem, this);
  },
  add: function add(selector, context) {
    return this.pushStack(_jQuery.uniqueSort(_jQuery.merge(this.get(), _jQuery(selector, context))));
  },
  addBack: function addBack(selector) {
    return this.add(selector == null ? this.prevObject : this.prevObject.filter(selector));
  }
});

function sibling(cur, dir) {
  do {
    cur = cur[dir];
  } while (cur && cur.nodeType !== 1);

  return cur;
}

_jQuery.each({
  parent: function parent(elem) {
    var parent = elem.parentNode;
    return parent && parent.nodeType !== 11 ? parent : null;
  },
  parents: function parents(elem) {
    return dir(elem, "parentNode");
  },
  parentsUntil: function parentsUntil(elem, i, until) {
    return dir(elem, "parentNode", until);
  },
  next: function next(elem) {
    return sibling(elem, "nextSibling");
  },
  prev: function prev(elem) {
    return sibling(elem, "previousSibling");
  },
  nextAll: function nextAll(elem) {
    return dir(elem, "nextSibling");
  },
  prevAll: function prevAll(elem) {
    return dir(elem, "previousSibling");
  },
  nextUntil: function nextUntil(elem, i, until) {
    return dir(elem, "nextSibling", until);
  },
  prevUntil: function prevUntil(elem, i, until) {
    return dir(elem, "previousSibling", until);
  },
  siblings: function siblings(elem) {
    return _siblings((elem.parentNode || {}).firstChild, elem);
  },
  children: function children(elem) {
    return _siblings(elem.firstChild);
  },
  contents: function contents(elem) {
    return _jQuery.nodeName(elem, "iframe") ? elem.contentDocument || elem.contentWindow.document : _jQuery.merge([], elem.childNodes);
  }
}, function (name, fn) {
  _jQuery.fn[name] = function (until, selector) {
    var ret = _jQuery.map(this, fn, until);

    if (name.slice(-5) !== "Until") {
      selector = until;
    }

    if (selector && typeof selector === "string") {
      ret = _jQuery.filter(selector, ret);
    }

    if (this.length > 1) {
      // Remove duplicates
      if (!guaranteedUnique[name]) {
        ret = _jQuery.uniqueSort(ret);
      } // Reverse order for parents* and prev-derivatives


      if (rparentsprev.test(name)) {
        ret = ret.reverse();
      }
    }

    return this.pushStack(ret);
  };
});

var rnotwhite = /\S+/g; // Convert String-formatted options into Object-formatted ones

function createOptions(options) {
  var object = {};

  _jQuery.each(options.match(rnotwhite) || [], function (_, flag) {
    object[flag] = true;
  });

  return object;
}
/*
     * Create a callback list using the following parameters:
     *
     *	options: an optional list of space-separated options that will change how
     *			the callback list behaves or a more traditional option object
     *
     * By default a callback list will act like an event callback list and can be
     * "fired" multiple times.
     *
     * Possible options:
     *
     *	once:			will ensure the callback list can only be fired once (like a Deferred)
     *
     *	memory:			will keep track of previous values and will call any callback added
     *					after the list has been fired right away with the latest "memorized"
     *					values (like a Deferred)
     *
     *	unique:			will ensure a callback can only be added once (no duplicate in the list)
     *
     *	stopOnFalse:	interrupt callings when a callback returns false
     *
     */


_jQuery.Callbacks = function (options) {
  // Convert options from String-formatted to Object-formatted if needed
  // (we check in cache first)
  options = typeof options === "string" ? createOptions(options) : _jQuery.extend({}, options);

  var // Flag to know if list is currently firing
  firing,
      // Last fire value for non-forgettable lists
  memory,
      // Flag to know if list was already fired
  _fired,
      // Flag to prevent firing
  _locked,
      // Actual callback list
  list = [],
      // Queue of execution data for repeatable lists
  queue = [],
      // Index of currently firing callback (modified by add/remove as needed)
  firingIndex = -1,
      // Fire callbacks
  fire = function fire() {
    // Enforce single-firing
    _locked = options.once; // Execute callbacks for all pending executions,
    // respecting firingIndex overrides and runtime changes

    _fired = firing = true;

    for (; queue.length; firingIndex = -1) {
      memory = queue.shift();

      while (++firingIndex < list.length) {
        // Run callback and check for early termination
        if (list[firingIndex].apply(memory[0], memory[1]) === false && options.stopOnFalse) {
          // Jump to end and forget the data so .add doesn't re-fire
          firingIndex = list.length;
          memory = false;
        }
      }
    } // Forget the data if we're done with it


    if (!options.memory) {
      memory = false;
    }

    firing = false; // Clean up if we're done firing for good

    if (_locked) {
      // Keep an empty list if we have data for future add calls
      if (memory) {
        list = []; // Otherwise, this object is spent
      } else {
        list = "";
      }
    }
  },
      // Actual Callbacks object
  self = {
    // Add a callback or a collection of callbacks to the list
    add: function add() {
      if (list) {
        // If we have memory from a past run, we should fire after adding
        if (memory && !firing) {
          firingIndex = list.length - 1;
          queue.push(memory);
        }

        (function add(args) {
          _jQuery.each(args, function (_, arg) {
            if (_jQuery.isFunction(arg)) {
              if (!options.unique || !self.has(arg)) {
                list.push(arg);
              }
            } else if (arg && arg.length && _jQuery.type(arg) !== "string") {
              // Inspect recursively
              add(arg);
            }
          });
        })(arguments);

        if (memory && !firing) {
          fire();
        }
      }

      return this;
    },
    // Remove a callback from the list
    remove: function remove() {
      _jQuery.each(arguments, function (_, arg) {
        var index;

        while ((index = _jQuery.inArray(arg, list, index)) > -1) {
          list.splice(index, 1); // Handle firing indexes

          if (index <= firingIndex) {
            firingIndex--;
          }
        }
      });

      return this;
    },
    // Check if a given callback is in the list.
    // If no argument is given, return whether or not list has callbacks attached.
    has: function has(fn) {
      return fn ? _jQuery.inArray(fn, list) > -1 : list.length > 0;
    },
    // Remove all callbacks from the list
    empty: function empty() {
      if (list) {
        list = [];
      }

      return this;
    },
    // Disable .fire and .add
    // Abort any current/pending executions
    // Clear all callbacks and values
    disable: function disable() {
      _locked = queue = [];
      list = memory = "";
      return this;
    },
    disabled: function disabled() {
      return !list;
    },
    // Disable .fire
    // Also disable .add unless we have memory (since it would have no effect)
    // Abort any pending executions
    lock: function lock() {
      _locked = true;

      if (!memory) {
        self.disable();
      }

      return this;
    },
    locked: function locked() {
      return !!_locked;
    },
    // Call all callbacks with the given context and arguments
    fireWith: function fireWith(context, args) {
      if (!_locked) {
        args = args || [];
        args = [context, args.slice ? args.slice() : args];
        queue.push(args);

        if (!firing) {
          fire();
        }
      }

      return this;
    },
    // Call all the callbacks with the given arguments
    fire: function fire() {
      self.fireWith(this, arguments);
      return this;
    },
    // To know if the callbacks have already been called at least once
    fired: function fired() {
      return !!_fired;
    }
  };

  return self;
};

_jQuery.extend({
  Deferred: function Deferred(func) {
    var tuples = [// action, add listener, listener list, final state
    ["resolve", "done", _jQuery.Callbacks("once memory"), "resolved"], ["reject", "fail", _jQuery.Callbacks("once memory"), "rejected"], ["notify", "progress", _jQuery.Callbacks("memory")]],
        _state = "pending",
        _promise = {
      state: function state() {
        return _state;
      },
      always: function always() {
        deferred.done(arguments).fail(arguments);
        return this;
      },
      then: function then()
      /* fnDone, fnFail, fnProgress */
      {
        var fns = arguments;
        return _jQuery.Deferred(function (newDefer) {
          _jQuery.each(tuples, function (i, tuple) {
            var fn = _jQuery.isFunction(fns[i]) && fns[i]; // deferred[ done | fail | progress ] for forwarding actions to newDefer

            deferred[tuple[1]](function () {
              var returned = fn && fn.apply(this, arguments);

              if (returned && _jQuery.isFunction(returned.promise)) {
                returned.promise().progress(newDefer.notify).done(newDefer.resolve).fail(newDefer.reject);
              } else {
                newDefer[tuple[0] + "With"](this === _promise ? newDefer.promise() : this, fn ? [returned] : arguments);
              }
            });
          });

          fns = null;
        }).promise();
      },
      // Get a promise for this deferred
      // If obj is provided, the promise aspect is added to the object
      promise: function promise(obj) {
        return obj != null ? _jQuery.extend(obj, _promise) : _promise;
      }
    },
        deferred = {}; // Keep pipe for back-compat

    _promise.pipe = _promise.then; // Add list-specific methods

    _jQuery.each(tuples, function (i, tuple) {
      var list = tuple[2],
          stateString = tuple[3]; // promise[ done | fail | progress ] = list.add

      _promise[tuple[1]] = list.add; // Handle state

      if (stateString) {
        list.add(function () {
          // state = [ resolved | rejected ]
          _state = stateString; // [ reject_list | resolve_list ].disable; progress_list.lock
        }, tuples[i ^ 1][2].disable, tuples[2][2].lock);
      } // deferred[ resolve | reject | notify ]


      deferred[tuple[0]] = function () {
        deferred[tuple[0] + "With"](this === deferred ? _promise : this, arguments);
        return this;
      };

      deferred[tuple[0] + "With"] = list.fireWith;
    }); // Make the deferred a promise


    _promise.promise(deferred); // Call given func if any


    if (func) {
      func.call(deferred, deferred);
    } // All done!


    return deferred;
  },
  // Deferred helper
  when: function when(subordinate
  /* , ..., subordinateN */
  ) {
    var i = 0,
        resolveValues = _slice.call(arguments),
        length = resolveValues.length,
        // the count of uncompleted subordinates
    remaining = length !== 1 || subordinate && _jQuery.isFunction(subordinate.promise) ? length : 0,
        // the master Deferred.
    // If resolveValues consist of only a single Deferred, just use that.
    deferred = remaining === 1 ? subordinate : _jQuery.Deferred(),
        // Update function for both resolve and progress values
    updateFunc = function updateFunc(i, contexts, values) {
      return function (value) {
        contexts[i] = this;
        values[i] = arguments.length > 1 ? _slice.call(arguments) : value;

        if (values === progressValues) {
          deferred.notifyWith(contexts, values);
        } else if (! --remaining) {
          deferred.resolveWith(contexts, values);
        }
      };
    },
        progressValues,
        progressContexts,
        resolveContexts; // add listeners to Deferred subordinates; treat others as resolved


    if (length > 1) {
      progressValues = new Array(length);
      progressContexts = new Array(length);
      resolveContexts = new Array(length);

      for (; i < length; i++) {
        if (resolveValues[i] && _jQuery.isFunction(resolveValues[i].promise)) {
          resolveValues[i].promise().progress(updateFunc(i, progressContexts, progressValues)).done(updateFunc(i, resolveContexts, resolveValues)).fail(deferred.reject);
        } else {
          --remaining;
        }
      }
    } // if we're not waiting on anything, resolve the master


    if (!remaining) {
      deferred.resolveWith(resolveContexts, resolveValues);
    }

    return deferred.promise();
  }
}); // The deferred used on DOM ready


var readyList;

_jQuery.fn.ready = function (fn) {
  // Add the callback
  _jQuery.ready.promise().done(fn);

  return this;
};

_jQuery.extend({
  // Is the DOM ready to be used? Set to true once it occurs.
  isReady: false,
  // A counter to track how many items to wait for before
  // the ready event fires. See #6781
  readyWait: 1,
  // Hold (or release) the ready event
  holdReady: function holdReady(hold) {
    if (hold) {
      _jQuery.readyWait++;
    } else {
      _jQuery.ready(true);
    }
  },
  // Handle when the DOM is ready
  ready: function ready(wait) {
    // Abort if there are pending holds or we're already ready
    if (wait === true ? --_jQuery.readyWait : _jQuery.isReady) {
      return;
    } // Remember that the DOM is ready


    _jQuery.isReady = true; // If a normal DOM Ready event fired, decrement, and wait if need be

    if (wait !== true && --_jQuery.readyWait > 0) {
      return;
    } // If there are functions bound, to execute


    readyList.resolveWith(document, [_jQuery]); // Trigger any bound ready events

    if (_jQuery.fn.triggerHandler) {
      _jQuery(document).triggerHandler("ready");

      _jQuery(document).off("ready");
    }
  }
});
/**
 * Clean-up method for dom ready events
 */


function detach() {
  if (document.addEventListener) {
    document.removeEventListener("DOMContentLoaded", completed);
    window.removeEventListener("load", completed);
  } else {
    document.detachEvent("onreadystatechange", completed);
    window.detachEvent("onload", completed);
  }
}
/**
 * The ready event handler and self cleanup method
 */


function completed() {
  // readyState === "complete" is good enough for us to call the dom ready in oldIE
  if (document.addEventListener || window.event.type === "load" || document.readyState === "complete") {
    detach();

    _jQuery.ready();
  }
}

_jQuery.ready.promise = function (obj) {
  if (!readyList) {
    readyList = _jQuery.Deferred(); // Catch cases where $(document).ready() is called
    // after the browser event has already occurred.
    // Support: IE6-10
    // Older IE sometimes signals "interactive" too soon

    if (document.readyState === "complete" || document.readyState !== "loading" && !document.documentElement.doScroll) {
      // Handle it asynchronously to allow scripts the opportunity to delay ready
      window.setTimeout(_jQuery.ready); // Standards-based browsers support DOMContentLoaded
    } else if (document.addEventListener) {
      // Use the handy event callback
      document.addEventListener("DOMContentLoaded", completed); // A fallback to window.onload, that will always work

      window.addEventListener("load", completed); // If IE event model is used
    } else {
      // Ensure firing before onload, maybe late but safe also for iframes
      document.attachEvent("onreadystatechange", completed); // A fallback to window.onload, that will always work

      window.attachEvent("onload", completed); // If IE and not a frame
      // continually check to see if the document is ready

      var top = false;

      try {
        top = window.frameElement == null && document.documentElement;
      } catch (e) {}

      if (top && top.doScroll) {
        (function doScrollCheck() {
          if (!_jQuery.isReady) {
            try {
              // Use the trick by Diego Perini
              // http://javascript.nwbox.com/IEContentLoaded/
              top.doScroll("left");
            } catch (e) {
              return window.setTimeout(doScrollCheck, 50);
            } // detach all dom ready events


            detach(); // and execute any waiting functions

            _jQuery.ready();
          }
        })();
      }
    }
  }

  return readyList.promise(obj);
}; // Kick off the DOM ready check even if the user does not


_jQuery.ready.promise(); // Support: IE<9
// Iteration over object's inherited properties before its own


var i;

for (i in _jQuery(support)) {
  break;
}

support.ownFirst = i === "0"; // Note: most support tests are defined in their respective modules.
// false until the test is run

support.inlineBlockNeedsLayout = false; // Execute ASAP in case we need to set body.style.zoom

_jQuery(function () {
  // Minified: var a,b,c,d
  var val, div, body, container;
  body = document.getElementsByTagName("body")[0];

  if (!body || !body.style) {
    // Return for frameset docs that don't have a body
    return;
  } // Setup


  div = document.createElement("div");
  container = document.createElement("div");
  container.style.cssText = "position:absolute;border:0;width:0;height:0;top:0;left:-9999px";
  body.appendChild(container).appendChild(div);

  if (typeof div.style.zoom !== "undefined") {
    // Support: IE<8
    // Check if natively block-level elements act like inline-block
    // elements when setting their display to 'inline' and giving
    // them layout
    div.style.cssText = "display:inline;margin:0;border:0;padding:1px;width:1px;zoom:1";
    support.inlineBlockNeedsLayout = val = div.offsetWidth === 3;

    if (val) {
      // Prevent IE 6 from affecting layout for positioned elements #11048
      // Prevent IE from shrinking the body in IE 7 mode #12869
      // Support: IE<8
      body.style.zoom = 1;
    }
  }

  body.removeChild(container);
});

(function () {
  var div = document.createElement("div"); // Support: IE<9

  support.deleteExpando = true;

  try {
    delete div.test;
  } catch (e) {
    support.deleteExpando = false;
  } // Null elements to avoid leaks in IE.


  div = null;
})();

var acceptData = function acceptData(elem) {
  var noData = _jQuery.noData[(elem.nodeName + " ").toLowerCase()],
      nodeType = +elem.nodeType || 1; // Do not set data on non-element DOM nodes because it will not be cleared (#8335).


  return nodeType !== 1 && nodeType !== 9 ? false : // Nodes accept data unless otherwise specified; rejection can be conditional
  !noData || noData !== true && elem.getAttribute("classid") === noData;
};

var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
    rmultiDash = /([A-Z])/g;

function dataAttr(elem, key, data) {
  // If nothing was found internally, try to fetch any
  // data from the HTML5 data-* attribute
  if (data === undefined && elem.nodeType === 1) {
    var name = "data-" + key.replace(rmultiDash, "-$1").toLowerCase();
    data = elem.getAttribute(name);

    if (typeof data === "string") {
      try {
        data = data === "true" ? true : data === "false" ? false : data === "null" ? null : // Only convert to a number if it doesn't change the string
        +data + "" === data ? +data : rbrace.test(data) ? _jQuery.parseJSON(data) : data;
      } catch (e) {} // Make sure we set the data so it isn't changed later


      _jQuery.data(elem, key, data);
    } else {
      data = undefined;
    }
  }

  return data;
} // checks a cache object for emptiness


function isEmptyDataObject(obj) {
  var name;

  for (name in obj) {
    // if the public data object is empty, the private is still empty
    if (name === "data" && _jQuery.isEmptyObject(obj[name])) {
      continue;
    }

    if (name !== "toJSON") {
      return false;
    }
  }

  return true;
}

function internalData(elem, name, data, pvt
/* Internal Use Only */
) {
  if (!acceptData(elem)) {
    return;
  }

  var ret,
      thisCache,
      internalKey = _jQuery.expando,
      // We have to handle DOM nodes and JS objects differently because IE6-7
  // can't GC object references properly across the DOM-JS boundary
  isNode = elem.nodeType,
      // Only DOM nodes need the global jQuery cache; JS object data is
  // attached directly to the object so GC can occur automatically
  cache = isNode ? _jQuery.cache : elem,
      // Only defining an ID for JS objects if its cache already exists allows
  // the code to shortcut on the same path as a DOM node with no cache
  id = isNode ? elem[internalKey] : elem[internalKey] && internalKey; // Avoid doing any more work than we need to when trying to get data on an
  // object that has no data at all

  if ((!id || !cache[id] || !pvt && !cache[id].data) && data === undefined && typeof name === "string") {
    return;
  }

  if (!id) {
    // Only DOM nodes need a new unique ID for each element since their data
    // ends up in the global cache
    if (isNode) {
      id = elem[internalKey] = deletedIds.pop() || _jQuery.guid++;
    } else {
      id = internalKey;
    }
  }

  if (!cache[id]) {
    // Avoid exposing jQuery metadata on plain JS objects when the object
    // is serialized using JSON.stringify
    cache[id] = isNode ? {} : {
      toJSON: _jQuery.noop
    };
  } // An object can be passed to jQuery.data instead of a key/value pair; this gets
  // shallow copied over onto the existing cache


  if (_typeof(name) === "object" || typeof name === "function") {
    if (pvt) {
      cache[id] = _jQuery.extend(cache[id], name);
    } else {
      cache[id].data = _jQuery.extend(cache[id].data, name);
    }
  }

  thisCache = cache[id]; // jQuery data() is stored in a separate object inside the object's internal data
  // cache in order to avoid key collisions between internal data and user-defined
  // data.

  if (!pvt) {
    if (!thisCache.data) {
      thisCache.data = {};
    }

    thisCache = thisCache.data;
  }

  if (data !== undefined) {
    thisCache[_jQuery.camelCase(name)] = data;
  } // Check for both converted-to-camel and non-converted data property names
  // If a data property was specified


  if (typeof name === "string") {
    // First Try to find as-is property data
    ret = thisCache[name]; // Test for null|undefined property data

    if (ret == null) {
      // Try to find the camelCased property
      ret = thisCache[_jQuery.camelCase(name)];
    }
  } else {
    ret = thisCache;
  }

  return ret;
}

function internalRemoveData(elem, name, pvt) {
  if (!acceptData(elem)) {
    return;
  }

  var thisCache,
      i,
      isNode = elem.nodeType,
      // See jQuery.data for more information
  cache = isNode ? _jQuery.cache : elem,
      id = isNode ? elem[_jQuery.expando] : _jQuery.expando; // If there is already no cache entry for this object, there is no
  // purpose in continuing

  if (!cache[id]) {
    return;
  }

  if (name) {
    thisCache = pvt ? cache[id] : cache[id].data;

    if (thisCache) {
      // Support array or space separated string names for data keys
      if (!_jQuery.isArray(name)) {
        // try the string as a key before any manipulation
        if (name in thisCache) {
          name = [name];
        } else {
          // split the camel cased version by spaces unless a key with the spaces exists
          name = _jQuery.camelCase(name);

          if (name in thisCache) {
            name = [name];
          } else {
            name = name.split(" ");
          }
        }
      } else {
        // If "name" is an array of keys...
        // When data is initially created, via ("key", "val") signature,
        // keys will be converted to camelCase.
        // Since there is no way to tell _how_ a key was added, remove
        // both plain key and camelCase key. #12786
        // This will only penalize the array argument path.
        name = name.concat(_jQuery.map(name, _jQuery.camelCase));
      }

      i = name.length;

      while (i--) {
        delete thisCache[name[i]];
      } // If there is no data left in the cache, we want to continue
      // and let the cache object itself get destroyed


      if (pvt ? !isEmptyDataObject(thisCache) : !_jQuery.isEmptyObject(thisCache)) {
        return;
      }
    }
  } // See jQuery.data for more information


  if (!pvt) {
    delete cache[id].data; // Don't destroy the parent cache unless the internal data object
    // had been the only thing left in it

    if (!isEmptyDataObject(cache[id])) {
      return;
    }
  } // Destroy the cache


  if (isNode) {
    _jQuery.cleanData([elem], true); // Use delete when supported for expandos or `cache` is not a window per isWindow (#10080)

    /* jshint eqeqeq: false */

  } else if (support.deleteExpando || cache != cache.window) {
    /* jshint eqeqeq: true */
    delete cache[id]; // When all else fails, undefined
  } else {
    cache[id] = undefined;
  }
}

_jQuery.extend({
  cache: {},
  // The following elements (space-suffixed to avoid Object.prototype collisions)
  // throw uncatchable exceptions if you attempt to set expando properties
  noData: {
    "applet ": true,
    "embed ": true,
    // ...but Flash objects (which have this classid) *can* handle expandos
    "object ": "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"
  },
  hasData: function hasData(elem) {
    elem = elem.nodeType ? _jQuery.cache[elem[_jQuery.expando]] : elem[_jQuery.expando];
    return !!elem && !isEmptyDataObject(elem);
  },
  data: function data(elem, name, _data) {
    return internalData(elem, name, _data);
  },
  removeData: function removeData(elem, name) {
    return internalRemoveData(elem, name);
  },
  // For internal use only.
  _data: function _data(elem, name, data) {
    return internalData(elem, name, data, true);
  },
  _removeData: function _removeData(elem, name) {
    return internalRemoveData(elem, name, true);
  }
});

_jQuery.fn.extend({
  data: function data(key, value) {
    var i,
        name,
        data,
        elem = this[0],
        attrs = elem && elem.attributes; // Special expections of .data basically thwart jQuery.access,
    // so implement the relevant behavior ourselves
    // Gets all values

    if (key === undefined) {
      if (this.length) {
        data = _jQuery.data(elem);

        if (elem.nodeType === 1 && !_jQuery._data(elem, "parsedAttrs")) {
          i = attrs.length;

          while (i--) {
            // Support: IE11+
            // The attrs elements can be null (#14894)
            if (attrs[i]) {
              name = attrs[i].name;

              if (name.indexOf("data-") === 0) {
                name = _jQuery.camelCase(name.slice(5));
                dataAttr(elem, name, data[name]);
              }
            }
          }

          _jQuery._data(elem, "parsedAttrs", true);
        }
      }

      return data;
    } // Sets multiple values


    if (_typeof(key) === "object") {
      return this.each(function () {
        _jQuery.data(this, key);
      });
    }

    return arguments.length > 1 ? // Sets one value
    this.each(function () {
      _jQuery.data(this, key, value);
    }) : // Gets one value
    // Try to fetch any internally stored data first
    elem ? dataAttr(elem, key, _jQuery.data(elem, key)) : undefined;
  },
  removeData: function removeData(key) {
    return this.each(function () {
      _jQuery.removeData(this, key);
    });
  }
});

_jQuery.extend({
  queue: function queue(elem, type, data) {
    var queue;

    if (elem) {
      type = (type || "fx") + "queue";
      queue = _jQuery._data(elem, type); // Speed up dequeue by getting out quickly if this is just a lookup

      if (data) {
        if (!queue || _jQuery.isArray(data)) {
          queue = _jQuery._data(elem, type, _jQuery.makeArray(data));
        } else {
          queue.push(data);
        }
      }

      return queue || [];
    }
  },
  dequeue: function dequeue(elem, type) {
    type = type || "fx";

    var queue = _jQuery.queue(elem, type),
        startLength = queue.length,
        fn = queue.shift(),
        hooks = _jQuery._queueHooks(elem, type),
        next = function next() {
      _jQuery.dequeue(elem, type);
    }; // If the fx queue is dequeued, always remove the progress sentinel


    if (fn === "inprogress") {
      fn = queue.shift();
      startLength--;
    }

    if (fn) {
      // Add a progress sentinel to prevent the fx queue from being
      // automatically dequeued
      if (type === "fx") {
        queue.unshift("inprogress");
      } // clear up the last queue stop function


      delete hooks.stop;
      fn.call(elem, next, hooks);
    }

    if (!startLength && hooks) {
      hooks.empty.fire();
    }
  },
  // not intended for public consumption - generates a queueHooks object,
  // or returns the current one
  _queueHooks: function _queueHooks(elem, type) {
    var key = type + "queueHooks";
    return _jQuery._data(elem, key) || _jQuery._data(elem, key, {
      empty: _jQuery.Callbacks("once memory").add(function () {
        _jQuery._removeData(elem, type + "queue");

        _jQuery._removeData(elem, key);
      })
    });
  }
});

_jQuery.fn.extend({
  queue: function queue(type, data) {
    var setter = 2;

    if (typeof type !== "string") {
      data = type;
      type = "fx";
      setter--;
    }

    if (arguments.length < setter) {
      return _jQuery.queue(this[0], type);
    }

    return data === undefined ? this : this.each(function () {
      var queue = _jQuery.queue(this, type, data); // ensure a hooks for this queue


      _jQuery._queueHooks(this, type);

      if (type === "fx" && queue[0] !== "inprogress") {
        _jQuery.dequeue(this, type);
      }
    });
  },
  dequeue: function dequeue(type) {
    return this.each(function () {
      _jQuery.dequeue(this, type);
    });
  },
  clearQueue: function clearQueue(type) {
    return this.queue(type || "fx", []);
  },
  // Get a promise resolved when queues of a certain type
  // are emptied (fx is the type by default)
  promise: function promise(type, obj) {
    var tmp,
        count = 1,
        defer = _jQuery.Deferred(),
        elements = this,
        i = this.length,
        resolve = function resolve() {
      if (! --count) {
        defer.resolveWith(elements, [elements]);
      }
    };

    if (typeof type !== "string") {
      obj = type;
      type = undefined;
    }

    type = type || "fx";

    while (i--) {
      tmp = _jQuery._data(elements[i], type + "queueHooks");

      if (tmp && tmp.empty) {
        count++;
        tmp.empty.add(resolve);
      }
    }

    resolve();
    return defer.promise(obj);
  }
});

(function () {
  var shrinkWrapBlocksVal;

  support.shrinkWrapBlocks = function () {
    if (shrinkWrapBlocksVal != null) {
      return shrinkWrapBlocksVal;
    } // Will be changed later if needed.


    shrinkWrapBlocksVal = false; // Minified: var b,c,d

    var div, body, container;
    body = document.getElementsByTagName("body")[0];

    if (!body || !body.style) {
      // Test fired too early or in an unsupported environment, exit.
      return;
    } // Setup


    div = document.createElement("div");
    container = document.createElement("div");
    container.style.cssText = "position:absolute;border:0;width:0;height:0;top:0;left:-9999px";
    body.appendChild(container).appendChild(div); // Support: IE6
    // Check if elements with layout shrink-wrap their children

    if (typeof div.style.zoom !== "undefined") {
      // Reset CSS: box-sizing; display; margin; border
      div.style.cssText = // Support: Firefox<29, Android 2.3
      // Vendor-prefix box-sizing
      "-webkit-box-sizing:content-box;-moz-box-sizing:content-box;" + "box-sizing:content-box;display:block;margin:0;border:0;" + "padding:1px;width:1px;zoom:1";
      div.appendChild(document.createElement("div")).style.width = "5px";
      shrinkWrapBlocksVal = div.offsetWidth !== 3;
    }

    body.removeChild(container);
    return shrinkWrapBlocksVal;
  };
})();

var pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source;
var rcssNum = new RegExp("^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i");
var cssExpand = ["Top", "Right", "Bottom", "Left"];

var isHidden = function isHidden(elem, el) {
  // isHidden might be called from jQuery#filter function;
  // in that case, element will be second argument
  elem = el || elem;
  return _jQuery.css(elem, "display") === "none" || !_jQuery.contains(elem.ownerDocument, elem);
};

function adjustCSS(elem, prop, valueParts, tween) {
  var adjusted,
      scale = 1,
      maxIterations = 20,
      currentValue = tween ? function () {
    return tween.cur();
  } : function () {
    return _jQuery.css(elem, prop, "");
  },
      initial = currentValue(),
      unit = valueParts && valueParts[3] || (_jQuery.cssNumber[prop] ? "" : "px"),
      // Starting value computation is required for potential unit mismatches
  initialInUnit = (_jQuery.cssNumber[prop] || unit !== "px" && +initial) && rcssNum.exec(_jQuery.css(elem, prop));

  if (initialInUnit && initialInUnit[3] !== unit) {
    // Trust units reported by jQuery.css
    unit = unit || initialInUnit[3]; // Make sure we update the tween properties later on

    valueParts = valueParts || []; // Iteratively approximate from a nonzero starting point

    initialInUnit = +initial || 1;

    do {
      // If previous iteration zeroed out, double until we get *something*.
      // Use string for doubling so we don't accidentally see scale as unchanged below
      scale = scale || ".5"; // Adjust and apply

      initialInUnit = initialInUnit / scale;

      _jQuery.style(elem, prop, initialInUnit + unit); // Update scale, tolerating zero or NaN from tween.cur()
      // Break the loop if scale is unchanged or perfect, or if we've just had enough.

    } while (scale !== (scale = currentValue() / initial) && scale !== 1 && --maxIterations);
  }

  if (valueParts) {
    initialInUnit = +initialInUnit || +initial || 0; // Apply relative offset (+=/-=) if specified

    adjusted = valueParts[1] ? initialInUnit + (valueParts[1] + 1) * valueParts[2] : +valueParts[2];

    if (tween) {
      tween.unit = unit;
      tween.start = initialInUnit;
      tween.end = adjusted;
    }
  }

  return adjusted;
} // Multifunctional method to get and set values of a collection
// The value/s can optionally be executed if it's a function


var access = function access(elems, fn, key, value, chainable, emptyGet, raw) {
  var i = 0,
      length = elems.length,
      bulk = key == null; // Sets many values

  if (_jQuery.type(key) === "object") {
    chainable = true;

    for (i in key) {
      access(elems, fn, i, key[i], true, emptyGet, raw);
    } // Sets one value

  } else if (value !== undefined) {
    chainable = true;

    if (!_jQuery.isFunction(value)) {
      raw = true;
    }

    if (bulk) {
      // Bulk operations run against the entire set
      if (raw) {
        fn.call(elems, value);
        fn = null; // ...except when executing function values
      } else {
        bulk = fn;

        fn = function fn(elem, key, value) {
          return bulk.call(_jQuery(elem), value);
        };
      }
    }

    if (fn) {
      for (; i < length; i++) {
        fn(elems[i], key, raw ? value : value.call(elems[i], i, fn(elems[i], key)));
      }
    }
  }

  return chainable ? elems : // Gets
  bulk ? fn.call(elems) : length ? fn(elems[0], key) : emptyGet;
};

var rcheckableType = /^(?:checkbox|radio)$/i;
var rtagName = /<([\w:-]+)/;
var rscriptType = /^$|\/(?:java|ecma)script/i;
var rleadingWhitespace = /^\s+/;
var nodeNames = "abbr|article|aside|audio|bdi|canvas|data|datalist|" + "details|dialog|figcaption|figure|footer|header|hgroup|main|" + "mark|meter|nav|output|picture|progress|section|summary|template|time|video";

function createSafeFragment(document) {
  var list = nodeNames.split("|"),
      safeFrag = document.createDocumentFragment();

  if (safeFrag.createElement) {
    while (list.length) {
      safeFrag.createElement(list.pop());
    }
  }

  return safeFrag;
}

(function () {
  var div = document.createElement("div"),
      fragment = document.createDocumentFragment(),
      input = document.createElement("input"); // Setup

  div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>"; // IE strips leading whitespace when .innerHTML is used

  support.leadingWhitespace = div.firstChild.nodeType === 3; // Make sure that tbody elements aren't automatically inserted
  // IE will insert them into empty tables

  support.tbody = !div.getElementsByTagName("tbody").length; // Make sure that link elements get serialized correctly by innerHTML
  // This requires a wrapper element in IE

  support.htmlSerialize = !!div.getElementsByTagName("link").length; // Makes sure cloning an html5 element does not cause problems
  // Where outerHTML is undefined, this still works

  support.html5Clone = document.createElement("nav").cloneNode(true).outerHTML !== "<:nav></:nav>"; // Check if a disconnected checkbox will retain its checked
  // value of true after appended to the DOM (IE6/7)

  input.type = "checkbox";
  input.checked = true;
  fragment.appendChild(input);
  support.appendChecked = input.checked; // Make sure textarea (and checkbox) defaultValue is properly cloned
  // Support: IE6-IE11+

  div.innerHTML = "<textarea>x</textarea>";
  support.noCloneChecked = !!div.cloneNode(true).lastChild.defaultValue; // #11217 - WebKit loses check when the name is after the checked attribute

  fragment.appendChild(div); // Support: Windows Web Apps (WWA)
  // `name` and `type` must use .setAttribute for WWA (#14901)

  input = document.createElement("input");
  input.setAttribute("type", "radio");
  input.setAttribute("checked", "checked");
  input.setAttribute("name", "t");
  div.appendChild(input); // Support: Safari 5.1, iOS 5.1, Android 4.x, Android 2.3
  // old WebKit doesn't clone checked state correctly in fragments

  support.checkClone = div.cloneNode(true).cloneNode(true).lastChild.checked; // Support: IE<9
  // Cloned elements keep attachEvent handlers, we use addEventListener on IE9+

  support.noCloneEvent = !!div.addEventListener; // Support: IE<9
  // Since attributes and properties are the same in IE,
  // cleanData must set properties to undefined rather than use removeAttribute

  div[_jQuery.expando] = 1;
  support.attributes = !div.getAttribute(_jQuery.expando);
})(); // We have to close these tags to support XHTML (#13200)


var wrapMap = {
  option: [1, "<select multiple='multiple'>", "</select>"],
  legend: [1, "<fieldset>", "</fieldset>"],
  area: [1, "<map>", "</map>"],
  // Support: IE8
  param: [1, "<object>", "</object>"],
  thead: [1, "<table>", "</table>"],
  tr: [2, "<table><tbody>", "</tbody></table>"],
  col: [2, "<table><tbody></tbody><colgroup>", "</colgroup></table>"],
  td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],
  // IE6-8 can't serialize link, script, style, or any html5 (NoScope) tags,
  // unless wrapped in a div with non-breaking characters in front of it.
  _default: support.htmlSerialize ? [0, "", ""] : [1, "X<div>", "</div>"]
}; // Support: IE8-IE9

wrapMap.optgroup = wrapMap.option;
wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;

function getAll(context, tag) {
  var elems,
      elem,
      i = 0,
      found = typeof context.getElementsByTagName !== "undefined" ? context.getElementsByTagName(tag || "*") : typeof context.querySelectorAll !== "undefined" ? context.querySelectorAll(tag || "*") : undefined;

  if (!found) {
    for (found = [], elems = context.childNodes || context; (elem = elems[i]) != null; i++) {
      if (!tag || _jQuery.nodeName(elem, tag)) {
        found.push(elem);
      } else {
        _jQuery.merge(found, getAll(elem, tag));
      }
    }
  }

  return tag === undefined || tag && _jQuery.nodeName(context, tag) ? _jQuery.merge([context], found) : found;
} // Mark scripts as having already been evaluated


function setGlobalEval(elems, refElements) {
  var elem,
      i = 0;

  for (; (elem = elems[i]) != null; i++) {
    _jQuery._data(elem, "globalEval", !refElements || _jQuery._data(refElements[i], "globalEval"));
  }
}

var rhtml = /<|&#?\w+;/,
    rtbody = /<tbody/i;

function fixDefaultChecked(elem) {
  if (rcheckableType.test(elem.type)) {
    elem.defaultChecked = elem.checked;
  }
}

function buildFragment(elems, context, scripts, selection, ignored) {
  var j,
      elem,
      contains,
      tmp,
      tag,
      tbody,
      wrap,
      l = elems.length,
      // Ensure a safe fragment
  safe = createSafeFragment(context),
      nodes = [],
      i = 0;

  for (; i < l; i++) {
    elem = elems[i];

    if (elem || elem === 0) {
      // Add nodes directly
      if (_jQuery.type(elem) === "object") {
        _jQuery.merge(nodes, elem.nodeType ? [elem] : elem); // Convert non-html into a text node

      } else if (!rhtml.test(elem)) {
        nodes.push(context.createTextNode(elem)); // Convert html into DOM nodes
      } else {
        tmp = tmp || safe.appendChild(context.createElement("div")); // Deserialize a standard representation

        tag = (rtagName.exec(elem) || ["", ""])[1].toLowerCase();
        wrap = wrapMap[tag] || wrapMap._default;
        tmp.innerHTML = wrap[1] + _jQuery.htmlPrefilter(elem) + wrap[2]; // Descend through wrappers to the right content

        j = wrap[0];

        while (j--) {
          tmp = tmp.lastChild;
        } // Manually add leading whitespace removed by IE


        if (!support.leadingWhitespace && rleadingWhitespace.test(elem)) {
          nodes.push(context.createTextNode(rleadingWhitespace.exec(elem)[0]));
        } // Remove IE's autoinserted <tbody> from table fragments


        if (!support.tbody) {
          // String was a <table>, *may* have spurious <tbody>
          elem = tag === "table" && !rtbody.test(elem) ? tmp.firstChild : // String was a bare <thead> or <tfoot>
          wrap[1] === "<table>" && !rtbody.test(elem) ? tmp : 0;
          j = elem && elem.childNodes.length;

          while (j--) {
            if (_jQuery.nodeName(tbody = elem.childNodes[j], "tbody") && !tbody.childNodes.length) {
              elem.removeChild(tbody);
            }
          }
        }

        _jQuery.merge(nodes, tmp.childNodes); // Fix #12392 for WebKit and IE > 9


        tmp.textContent = ""; // Fix #12392 for oldIE

        while (tmp.firstChild) {
          tmp.removeChild(tmp.firstChild);
        } // Remember the top-level container for proper cleanup


        tmp = safe.lastChild;
      }
    }
  } // Fix #11356: Clear elements from fragment


  if (tmp) {
    safe.removeChild(tmp);
  } // Reset defaultChecked for any radios and checkboxes
  // about to be appended to the DOM in IE 6/7 (#8060)


  if (!support.appendChecked) {
    _jQuery.grep(getAll(nodes, "input"), fixDefaultChecked);
  }

  i = 0;

  while (elem = nodes[i++]) {
    // Skip elements already in the context collection (trac-4087)
    if (selection && _jQuery.inArray(elem, selection) > -1) {
      if (ignored) {
        ignored.push(elem);
      }

      continue;
    }

    contains = _jQuery.contains(elem.ownerDocument, elem); // Append to fragment

    tmp = getAll(safe.appendChild(elem), "script"); // Preserve script evaluation history

    if (contains) {
      setGlobalEval(tmp);
    } // Capture executables


    if (scripts) {
      j = 0;

      while (elem = tmp[j++]) {
        if (rscriptType.test(elem.type || "")) {
          scripts.push(elem);
        }
      }
    }
  }

  tmp = null;
  return safe;
}

(function () {
  var i,
      eventName,
      div = document.createElement("div"); // Support: IE<9 (lack submit/change bubble), Firefox (lack focus(in | out) events)

  for (i in {
    submit: true,
    change: true,
    focusin: true
  }) {
    eventName = "on" + i;

    if (!(support[i] = eventName in window)) {
      // Beware of CSP restrictions (https://developer.mozilla.org/en/Security/CSP)
      div.setAttribute(eventName, "t");
      support[i] = div.attributes[eventName].expando === false;
    }
  } // Null elements to avoid leaks in IE.


  div = null;
})();

var rformElems = /^(?:input|select|textarea)$/i,
    rkeyEvent = /^key/,
    rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
    rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
    rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

function returnTrue() {
  return true;
}

function returnFalse() {
  return false;
} // Support: IE9
// See #13393 for more info


function safeActiveElement() {
  try {
    return document.activeElement;
  } catch (err) {}
}

function _on(elem, types, selector, data, fn, one) {
  var origFn, type; // Types can be a map of types/handlers

  if (_typeof(types) === "object") {
    // ( types-Object, selector, data )
    if (typeof selector !== "string") {
      // ( types-Object, data )
      data = data || selector;
      selector = undefined;
    }

    for (type in types) {
      _on(elem, type, selector, data, types[type], one);
    }

    return elem;
  }

  if (data == null && fn == null) {
    // ( types, fn )
    fn = selector;
    data = selector = undefined;
  } else if (fn == null) {
    if (typeof selector === "string") {
      // ( types, selector, fn )
      fn = data;
      data = undefined;
    } else {
      // ( types, data, fn )
      fn = data;
      data = selector;
      selector = undefined;
    }
  }

  if (fn === false) {
    fn = returnFalse;
  } else if (!fn) {
    return elem;
  }

  if (one === 1) {
    origFn = fn;

    fn = function fn(event) {
      // Can use an empty set, since event contains the info
      _jQuery().off(event);

      return origFn.apply(this, arguments);
    }; // Use same guid so caller can remove using origFn


    fn.guid = origFn.guid || (origFn.guid = _jQuery.guid++);
  }

  return elem.each(function () {
    _jQuery.event.add(this, types, fn, data, selector);
  });
}
/*
     * Helper functions for managing events -- not part of the public interface.
     * Props to Dean Edwards' addEvent library for many of the ideas.
     */


_jQuery.event = {
  global: {},
  add: function add(elem, types, handler, data, selector) {
    var tmp,
        events,
        t,
        handleObjIn,
        special,
        eventHandle,
        handleObj,
        handlers,
        type,
        namespaces,
        origType,
        elemData = _jQuery._data(elem); // Don't attach events to noData or text/comment nodes (but allow plain objects)


    if (!elemData) {
      return;
    } // Caller can pass in an object of custom data in lieu of the handler


    if (handler.handler) {
      handleObjIn = handler;
      handler = handleObjIn.handler;
      selector = handleObjIn.selector;
    } // Make sure that the handler has a unique ID, used to find/remove it later


    if (!handler.guid) {
      handler.guid = _jQuery.guid++;
    } // Init the element's event structure and main handler, if this is the first


    if (!(events = elemData.events)) {
      events = elemData.events = {};
    }

    if (!(eventHandle = elemData.handle)) {
      eventHandle = elemData.handle = function (e) {
        // Discard the second event of a jQuery.event.trigger() and
        // when an event is called after a page has unloaded
        return typeof _jQuery !== "undefined" && (!e || _jQuery.event.triggered !== e.type) ? _jQuery.event.dispatch.apply(eventHandle.elem, arguments) : undefined;
      }; // Add elem as a property of the handle fn to prevent a memory leak
      // with IE non-native events


      eventHandle.elem = elem;
    } // Handle multiple events separated by a space


    types = (types || "").match(rnotwhite) || [""];
    t = types.length;

    while (t--) {
      tmp = rtypenamespace.exec(types[t]) || [];
      type = origType = tmp[1];
      namespaces = (tmp[2] || "").split(".").sort(); // There *must* be a type, no attaching namespace-only handlers

      if (!type) {
        continue;
      } // If event changes its type, use the special event handlers for the changed type


      special = _jQuery.event.special[type] || {}; // If selector defined, determine special event api type, otherwise given type

      type = (selector ? special.delegateType : special.bindType) || type; // Update special based on newly reset type

      special = _jQuery.event.special[type] || {}; // handleObj is passed to all event handlers

      handleObj = _jQuery.extend({
        type: type,
        origType: origType,
        data: data,
        handler: handler,
        guid: handler.guid,
        selector: selector,
        needsContext: selector && _jQuery.expr.match.needsContext.test(selector),
        namespace: namespaces.join(".")
      }, handleObjIn); // Init the event handler queue if we're the first

      if (!(handlers = events[type])) {
        handlers = events[type] = [];
        handlers.delegateCount = 0; // Only use addEventListener/attachEvent if the special events handler returns false

        if (!special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false) {
          // Bind the global event handler to the element
          if (elem.addEventListener) {
            elem.addEventListener(type, eventHandle, false);
          } else if (elem.attachEvent) {
            elem.attachEvent("on" + type, eventHandle);
          }
        }
      }

      if (special.add) {
        special.add.call(elem, handleObj);

        if (!handleObj.handler.guid) {
          handleObj.handler.guid = handler.guid;
        }
      } // Add to the element's handler list, delegates in front


      if (selector) {
        handlers.splice(handlers.delegateCount++, 0, handleObj);
      } else {
        handlers.push(handleObj);
      } // Keep track of which events have ever been used, for event optimization


      _jQuery.event.global[type] = true;
    } // Nullify elem to prevent memory leaks in IE


    elem = null;
  },
  // Detach an event or set of events from an element
  remove: function remove(elem, types, handler, selector, mappedTypes) {
    var j,
        handleObj,
        tmp,
        origCount,
        t,
        events,
        special,
        handlers,
        type,
        namespaces,
        origType,
        elemData = _jQuery.hasData(elem) && _jQuery._data(elem);

    if (!elemData || !(events = elemData.events)) {
      return;
    } // Once for each type.namespace in types; type may be omitted


    types = (types || "").match(rnotwhite) || [""];
    t = types.length;

    while (t--) {
      tmp = rtypenamespace.exec(types[t]) || [];
      type = origType = tmp[1];
      namespaces = (tmp[2] || "").split(".").sort(); // Unbind all events (on this namespace, if provided) for the element

      if (!type) {
        for (type in events) {
          _jQuery.event.remove(elem, type + types[t], handler, selector, true);
        }

        continue;
      }

      special = _jQuery.event.special[type] || {};
      type = (selector ? special.delegateType : special.bindType) || type;
      handlers = events[type] || [];
      tmp = tmp[2] && new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)"); // Remove matching events

      origCount = j = handlers.length;

      while (j--) {
        handleObj = handlers[j];

        if ((mappedTypes || origType === handleObj.origType) && (!handler || handler.guid === handleObj.guid) && (!tmp || tmp.test(handleObj.namespace)) && (!selector || selector === handleObj.selector || selector === "**" && handleObj.selector)) {
          handlers.splice(j, 1);

          if (handleObj.selector) {
            handlers.delegateCount--;
          }

          if (special.remove) {
            special.remove.call(elem, handleObj);
          }
        }
      } // Remove generic event handler if we removed something and no more handlers exist
      // (avoids potential for endless recursion during removal of special event handlers)


      if (origCount && !handlers.length) {
        if (!special.teardown || special.teardown.call(elem, namespaces, elemData.handle) === false) {
          _jQuery.removeEvent(elem, type, elemData.handle);
        }

        delete events[type];
      }
    } // Remove the expando if it's no longer used


    if (_jQuery.isEmptyObject(events)) {
      delete elemData.handle; // removeData also checks for emptiness and clears the expando if empty
      // so use it instead of delete

      _jQuery._removeData(elem, "events");
    }
  },
  trigger: function trigger(event, data, elem, onlyHandlers) {
    var handle,
        ontype,
        cur,
        bubbleType,
        special,
        tmp,
        i,
        eventPath = [elem || document],
        type = hasOwn.call(event, "type") ? event.type : event,
        namespaces = hasOwn.call(event, "namespace") ? event.namespace.split(".") : [];
    cur = tmp = elem = elem || document; // Don't do events on text and comment nodes

    if (elem.nodeType === 3 || elem.nodeType === 8) {
      return;
    } // focus/blur morphs to focusin/out; ensure we're not firing them right now


    if (rfocusMorph.test(type + _jQuery.event.triggered)) {
      return;
    }

    if (type.indexOf(".") > -1) {
      // Namespaced trigger; create a regexp to match event type in handle()
      namespaces = type.split(".");
      type = namespaces.shift();
      namespaces.sort();
    }

    ontype = type.indexOf(":") < 0 && "on" + type; // Caller can pass in a jQuery.Event object, Object, or just an event type string

    event = event[_jQuery.expando] ? event : new _jQuery.Event(type, _typeof(event) === "object" && event); // Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)

    event.isTrigger = onlyHandlers ? 2 : 3;
    event.namespace = namespaces.join(".");
    event.rnamespace = event.namespace ? new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)") : null; // Clean up the event in case it is being reused

    event.result = undefined;

    if (!event.target) {
      event.target = elem;
    } // Clone any incoming data and prepend the event, creating the handler arg list


    data = data == null ? [event] : _jQuery.makeArray(data, [event]); // Allow special events to draw outside the lines

    special = _jQuery.event.special[type] || {};

    if (!onlyHandlers && special.trigger && special.trigger.apply(elem, data) === false) {
      return;
    } // Determine event propagation path in advance, per W3C events spec (#9951)
    // Bubble up to document, then to window; watch for a global ownerDocument var (#9724)


    if (!onlyHandlers && !special.noBubble && !_jQuery.isWindow(elem)) {
      bubbleType = special.delegateType || type;

      if (!rfocusMorph.test(bubbleType + type)) {
        cur = cur.parentNode;
      }

      for (; cur; cur = cur.parentNode) {
        eventPath.push(cur);
        tmp = cur;
      } // Only add window if we got to document (e.g., not plain obj or detached DOM)


      if (tmp === (elem.ownerDocument || document)) {
        eventPath.push(tmp.defaultView || tmp.parentWindow || window);
      }
    } // Fire handlers on the event path


    i = 0;

    while ((cur = eventPath[i++]) && !event.isPropagationStopped()) {
      event.type = i > 1 ? bubbleType : special.bindType || type; // jQuery handler

      handle = (_jQuery._data(cur, "events") || {})[event.type] && _jQuery._data(cur, "handle");

      if (handle) {
        handle.apply(cur, data);
      } // Native handler


      handle = ontype && cur[ontype];

      if (handle && handle.apply && acceptData(cur)) {
        event.result = handle.apply(cur, data);

        if (event.result === false) {
          event.preventDefault();
        }
      }
    }

    event.type = type; // If nobody prevented the default action, do it now

    if (!onlyHandlers && !event.isDefaultPrevented()) {
      if ((!special._default || special._default.apply(eventPath.pop(), data) === false) && acceptData(elem)) {
        // Call a native DOM method on the target with the same name name as the event.
        // Can't use an .isFunction() check here because IE6/7 fails that test.
        // Don't do default actions on window, that's where global variables be (#6170)
        if (ontype && elem[type] && !_jQuery.isWindow(elem)) {
          // Don't re-trigger an onFOO event when we call its FOO() method
          tmp = elem[ontype];

          if (tmp) {
            elem[ontype] = null;
          } // Prevent re-triggering of the same event, since we already bubbled it above


          _jQuery.event.triggered = type;

          try {
            elem[type]();
          } catch (e) {// IE<9 dies on focus/blur to hidden element (#1486,#12518)
            // only reproducible on winXP IE8 native, not IE9 in IE8 mode
          }

          _jQuery.event.triggered = undefined;

          if (tmp) {
            elem[ontype] = tmp;
          }
        }
      }
    }

    return event.result;
  },
  dispatch: function dispatch(event) {
    // Make a writable jQuery.Event from the native event object
    event = _jQuery.event.fix(event);

    var i,
        j,
        ret,
        matched,
        handleObj,
        handlerQueue = [],
        args = _slice.call(arguments),
        handlers = (_jQuery._data(this, "events") || {})[event.type] || [],
        special = _jQuery.event.special[event.type] || {}; // Use the fix-ed jQuery.Event rather than the (read-only) native event


    args[0] = event;
    event.delegateTarget = this; // Call the preDispatch hook for the mapped type, and let it bail if desired

    if (special.preDispatch && special.preDispatch.call(this, event) === false) {
      return;
    } // Determine handlers


    handlerQueue = _jQuery.event.handlers.call(this, event, handlers); // Run delegates first; they may want to stop propagation beneath us

    i = 0;

    while ((matched = handlerQueue[i++]) && !event.isPropagationStopped()) {
      event.currentTarget = matched.elem;
      j = 0;

      while ((handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped()) {
        // Triggered event must either 1) have no namespace, or 2) have namespace(s)
        // a subset or equal to those in the bound event (both can have no namespace).
        if (!event.rnamespace || event.rnamespace.test(handleObj.namespace)) {
          event.handleObj = handleObj;
          event.data = handleObj.data;
          ret = ((_jQuery.event.special[handleObj.origType] || {}).handle || handleObj.handler).apply(matched.elem, args);

          if (ret !== undefined) {
            if ((event.result = ret) === false) {
              event.preventDefault();
              event.stopPropagation();
            }
          }
        }
      }
    } // Call the postDispatch hook for the mapped type


    if (special.postDispatch) {
      special.postDispatch.call(this, event);
    }

    return event.result;
  },
  handlers: function handlers(event, _handlers) {
    var i,
        matches,
        sel,
        handleObj,
        handlerQueue = [],
        delegateCount = _handlers.delegateCount,
        cur = event.target; // Support (at least): Chrome, IE9
    // Find delegate handlers
    // Black-hole SVG <use> instance trees (#13180)
    //
    // Support: Firefox<=42+
    // Avoid non-left-click in FF but don't block IE radio events (#3861, gh-2343)

    if (delegateCount && cur.nodeType && (event.type !== "click" || isNaN(event.button) || event.button < 1)) {
      /* jshint eqeqeq: false */
      for (; cur != this; cur = cur.parentNode || this) {
        /* jshint eqeqeq: true */
        // Don't check non-elements (#13208)
        // Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
        if (cur.nodeType === 1 && (cur.disabled !== true || event.type !== "click")) {
          matches = [];

          for (i = 0; i < delegateCount; i++) {
            handleObj = _handlers[i]; // Don't conflict with Object.prototype properties (#13203)

            sel = handleObj.selector + " ";

            if (matches[sel] === undefined) {
              matches[sel] = handleObj.needsContext ? _jQuery(sel, this).index(cur) > -1 : _jQuery.find(sel, this, null, [cur]).length;
            }

            if (matches[sel]) {
              matches.push(handleObj);
            }
          }

          if (matches.length) {
            handlerQueue.push({
              elem: cur,
              handlers: matches
            });
          }
        }
      }
    } // Add the remaining (directly-bound) handlers


    if (delegateCount < _handlers.length) {
      handlerQueue.push({
        elem: this,
        handlers: _handlers.slice(delegateCount)
      });
    }

    return handlerQueue;
  },
  fix: function fix(event) {
    if (event[_jQuery.expando]) {
      return event;
    } // Create a writable copy of the event object and normalize some properties


    var i,
        prop,
        copy,
        type = event.type,
        originalEvent = event,
        fixHook = this.fixHooks[type];

    if (!fixHook) {
      this.fixHooks[type] = fixHook = rmouseEvent.test(type) ? this.mouseHooks : rkeyEvent.test(type) ? this.keyHooks : {};
    }

    copy = fixHook.props ? this.props.concat(fixHook.props) : this.props;
    event = new _jQuery.Event(originalEvent);
    i = copy.length;

    while (i--) {
      prop = copy[i];
      event[prop] = originalEvent[prop];
    } // Support: IE<9
    // Fix target property (#1925)


    if (!event.target) {
      event.target = originalEvent.srcElement || document;
    } // Support: Safari 6-8+
    // Target should not be a text node (#504, #13143)


    if (event.target.nodeType === 3) {
      event.target = event.target.parentNode;
    } // Support: IE<9
    // For mouse/key events, metaKey==false if it's undefined (#3368, #11328)


    event.metaKey = !!event.metaKey;
    return fixHook.filter ? fixHook.filter(event, originalEvent) : event;
  },
  // Includes some event props shared by KeyEvent and MouseEvent
  props: ("altKey bubbles cancelable ctrlKey currentTarget detail eventPhase " + "metaKey relatedTarget shiftKey target timeStamp view which").split(" "),
  fixHooks: {},
  keyHooks: {
    props: "char charCode key keyCode".split(" "),
    filter: function filter(event, original) {
      // Add which for key events
      if (event.which == null) {
        event.which = original.charCode != null ? original.charCode : original.keyCode;
      }

      return event;
    }
  },
  mouseHooks: {
    props: ("button buttons clientX clientY fromElement offsetX offsetY " + "pageX pageY screenX screenY toElement").split(" "),
    filter: function filter(event, original) {
      var body,
          eventDoc,
          doc,
          button = original.button,
          fromElement = original.fromElement; // Calculate pageX/Y if missing and clientX/Y available

      if (event.pageX == null && original.clientX != null) {
        eventDoc = event.target.ownerDocument || document;
        doc = eventDoc.documentElement;
        body = eventDoc.body;
        event.pageX = original.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0);
        event.pageY = original.clientY + (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0);
      } // Add relatedTarget, if necessary


      if (!event.relatedTarget && fromElement) {
        event.relatedTarget = fromElement === event.target ? original.toElement : fromElement;
      } // Add which for click: 1 === left; 2 === middle; 3 === right
      // Note: button is not normalized, so don't use it


      if (!event.which && button !== undefined) {
        event.which = button & 1 ? 1 : button & 2 ? 3 : button & 4 ? 2 : 0;
      }

      return event;
    }
  },
  special: {
    load: {
      // Prevent triggered image.load events from bubbling to window.load
      noBubble: true
    },
    focus: {
      // Fire native event if possible so blur/focus sequence is correct
      trigger: function trigger() {
        if (this !== safeActiveElement() && this.focus) {
          try {
            this.focus();
            return false;
          } catch (e) {// Support: IE<9
            // If we error on focus to hidden element (#1486, #12518),
            // let .trigger() run the handlers
          }
        }
      },
      delegateType: "focusin"
    },
    blur: {
      trigger: function trigger() {
        if (this === safeActiveElement() && this.blur) {
          this.blur();
          return false;
        }
      },
      delegateType: "focusout"
    },
    click: {
      // For checkbox, fire native event so checked state will be right
      trigger: function trigger() {
        if (_jQuery.nodeName(this, "input") && this.type === "checkbox" && this.click) {
          this.click();
          return false;
        }
      },
      // For cross-browser consistency, don't fire native .click() on links
      _default: function _default(event) {
        return _jQuery.nodeName(event.target, "a");
      }
    },
    beforeunload: {
      postDispatch: function postDispatch(event) {
        // Support: Firefox 20+
        // Firefox doesn't alert if the returnValue field is not set.
        if (event.result !== undefined && event.originalEvent) {
          event.originalEvent.returnValue = event.result;
        }
      }
    }
  },
  // Piggyback on a donor event to simulate a different one
  simulate: function simulate(type, elem, event) {
    var e = _jQuery.extend(new _jQuery.Event(), event, {
      type: type,
      isSimulated: true // Previously, `originalEvent: {}` was set here, so stopPropagation call
      // would not be triggered on donor event, since in our own
      // jQuery.event.stopPropagation function we had a check for existence of
      // originalEvent.stopPropagation method, so, consequently it would be a noop.
      //
      // Guard for simulated events was moved to jQuery.event.stopPropagation function
      // since `originalEvent` should point to the original event for the
      // constancy with other events and for more focused logic

    });

    _jQuery.event.trigger(e, null, elem);

    if (e.isDefaultPrevented()) {
      event.preventDefault();
    }
  }
};
_jQuery.removeEvent = document.removeEventListener ? function (elem, type, handle) {
  // This "if" is needed for plain objects
  if (elem.removeEventListener) {
    elem.removeEventListener(type, handle);
  }
} : function (elem, type, handle) {
  var name = "on" + type;

  if (elem.detachEvent) {
    // #8545, #7054, preventing memory leaks for custom events in IE6-8
    // detachEvent needed property on element, by name of that event,
    // to properly expose it to GC
    if (typeof elem[name] === "undefined") {
      elem[name] = null;
    }

    elem.detachEvent(name, handle);
  }
};

_jQuery.Event = function (src, props) {
  // Allow instantiation without the 'new' keyword
  if (!(this instanceof _jQuery.Event)) {
    return new _jQuery.Event(src, props);
  } // Event object


  if (src && src.type) {
    this.originalEvent = src;
    this.type = src.type; // Events bubbling up the document may have been marked as prevented
    // by a handler lower down the tree; reflect the correct value.

    this.isDefaultPrevented = src.defaultPrevented || src.defaultPrevented === undefined && // Support: IE < 9, Android < 4.0
    src.returnValue === false ? returnTrue : returnFalse; // Event type
  } else {
    this.type = src;
  } // Put explicitly provided properties onto the event object


  if (props) {
    _jQuery.extend(this, props);
  } // Create a timestamp if incoming event doesn't have one


  this.timeStamp = src && src.timeStamp || _jQuery.now(); // Mark it as fixed

  this[_jQuery.expando] = true;
}; // jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html


_jQuery.Event.prototype = {
  constructor: _jQuery.Event,
  isDefaultPrevented: returnFalse,
  isPropagationStopped: returnFalse,
  isImmediatePropagationStopped: returnFalse,
  preventDefault: function preventDefault() {
    var e = this.originalEvent;
    this.isDefaultPrevented = returnTrue;

    if (!e) {
      return;
    } // If preventDefault exists, run it on the original event


    if (e.preventDefault) {
      e.preventDefault(); // Support: IE
      // Otherwise set the returnValue property of the original event to false
    } else {
      e.returnValue = false;
    }
  },
  stopPropagation: function stopPropagation() {
    var e = this.originalEvent;
    this.isPropagationStopped = returnTrue;

    if (!e || this.isSimulated) {
      return;
    } // If stopPropagation exists, run it on the original event


    if (e.stopPropagation) {
      e.stopPropagation();
    } // Support: IE
    // Set the cancelBubble property of the original event to true


    e.cancelBubble = true;
  },
  stopImmediatePropagation: function stopImmediatePropagation() {
    var e = this.originalEvent;
    this.isImmediatePropagationStopped = returnTrue;

    if (e && e.stopImmediatePropagation) {
      e.stopImmediatePropagation();
    }

    this.stopPropagation();
  }
}; // Create mouseenter/leave events using mouseover/out and event-time checks
// so that event delegation works in jQuery.
// Do the same for pointerenter/pointerleave and pointerover/pointerout
//
// Support: Safari 7 only
// Safari sends mouseenter too often; see:
// https://code.google.com/p/chromium/issues/detail?id=470258
// for the description of the bug (it existed in older Chrome versions as well).

_jQuery.each({
  mouseenter: "mouseover",
  mouseleave: "mouseout",
  pointerenter: "pointerover",
  pointerleave: "pointerout"
}, function (orig, fix) {
  _jQuery.event.special[orig] = {
    delegateType: fix,
    bindType: fix,
    handle: function handle(event) {
      var ret,
          target = this,
          related = event.relatedTarget,
          handleObj = event.handleObj; // For mouseenter/leave call the handler if related is outside the target.
      // NB: No relatedTarget if the mouse left/entered the browser window

      if (!related || related !== target && !_jQuery.contains(target, related)) {
        event.type = handleObj.origType;
        ret = handleObj.handler.apply(this, arguments);
        event.type = fix;
      }

      return ret;
    }
  };
}); // IE submit delegation


if (!support.submit) {
  _jQuery.event.special.submit = {
    setup: function setup() {
      // Only need this for delegated form submit events
      if (_jQuery.nodeName(this, "form")) {
        return false;
      } // Lazy-add a submit handler when a descendant form may potentially be submitted


      _jQuery.event.add(this, "click._submit keypress._submit", function (e) {
        // Node name check avoids a VML-related crash in IE (#9807)
        var elem = e.target,
            form = _jQuery.nodeName(elem, "input") || _jQuery.nodeName(elem, "button") ? // Support: IE <=8
        // We use jQuery.prop instead of elem.form
        // to allow fixing the IE8 delegated submit issue (gh-2332)
        // by 3rd party polyfills/workarounds.
        _jQuery.prop(elem, "form") : undefined;

        if (form && !_jQuery._data(form, "submit")) {
          _jQuery.event.add(form, "submit._submit", function (event) {
            event._submitBubble = true;
          });

          _jQuery._data(form, "submit", true);
        }
      }); // return undefined since we don't need an event listener

    },
    postDispatch: function postDispatch(event) {
      // If form was submitted by the user, bubble the event up the tree
      if (event._submitBubble) {
        delete event._submitBubble;

        if (this.parentNode && !event.isTrigger) {
          _jQuery.event.simulate("submit", this.parentNode, event);
        }
      }
    },
    teardown: function teardown() {
      // Only need this for delegated form submit events
      if (_jQuery.nodeName(this, "form")) {
        return false;
      } // Remove delegated handlers; cleanData eventually reaps submit handlers attached above


      _jQuery.event.remove(this, "._submit");
    }
  };
} // IE change delegation and checkbox/radio fix


if (!support.change) {
  _jQuery.event.special.change = {
    setup: function setup() {
      if (rformElems.test(this.nodeName)) {
        // IE doesn't fire change on a check/radio until blur; trigger it on click
        // after a propertychange. Eat the blur-change in special.change.handle.
        // This still fires onchange a second time for check/radio after blur.
        if (this.type === "checkbox" || this.type === "radio") {
          _jQuery.event.add(this, "propertychange._change", function (event) {
            if (event.originalEvent.propertyName === "checked") {
              this._justChanged = true;
            }
          });

          _jQuery.event.add(this, "click._change", function (event) {
            if (this._justChanged && !event.isTrigger) {
              this._justChanged = false;
            } // Allow triggered, simulated change events (#11500)


            _jQuery.event.simulate("change", this, event);
          });
        }

        return false;
      } // Delegated event; lazy-add a change handler on descendant inputs


      _jQuery.event.add(this, "beforeactivate._change", function (e) {
        var elem = e.target;

        if (rformElems.test(elem.nodeName) && !_jQuery._data(elem, "change")) {
          _jQuery.event.add(elem, "change._change", function (event) {
            if (this.parentNode && !event.isSimulated && !event.isTrigger) {
              _jQuery.event.simulate("change", this.parentNode, event);
            }
          });

          _jQuery._data(elem, "change", true);
        }
      });
    },
    handle: function handle(event) {
      var elem = event.target; // Swallow native change events from checkbox/radio, we already triggered them above

      if (this !== elem || event.isSimulated || event.isTrigger || elem.type !== "radio" && elem.type !== "checkbox") {
        return event.handleObj.handler.apply(this, arguments);
      }
    },
    teardown: function teardown() {
      _jQuery.event.remove(this, "._change");

      return !rformElems.test(this.nodeName);
    }
  };
} // Support: Firefox
// Firefox doesn't have focus(in | out) events
// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
//
// Support: Chrome, Safari
// focus(in | out) events fire after focus & blur events,
// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
// Related ticket - https://code.google.com/p/chromium/issues/detail?id=449857


if (!support.focusin) {
  _jQuery.each({
    focus: "focusin",
    blur: "focusout"
  }, function (orig, fix) {
    // Attach a single capturing handler on the document while someone wants focusin/focusout
    var handler = function handler(event) {
      _jQuery.event.simulate(fix, event.target, _jQuery.event.fix(event));
    };

    _jQuery.event.special[fix] = {
      setup: function setup() {
        var doc = this.ownerDocument || this,
            attaches = _jQuery._data(doc, fix);

        if (!attaches) {
          doc.addEventListener(orig, handler, true);
        }

        _jQuery._data(doc, fix, (attaches || 0) + 1);
      },
      teardown: function teardown() {
        var doc = this.ownerDocument || this,
            attaches = _jQuery._data(doc, fix) - 1;

        if (!attaches) {
          doc.removeEventListener(orig, handler, true);

          _jQuery._removeData(doc, fix);
        } else {
          _jQuery._data(doc, fix, attaches);
        }
      }
    };
  });
}

_jQuery.fn.extend({
  on: function on(types, selector, data, fn) {
    return _on(this, types, selector, data, fn);
  },
  one: function one(types, selector, data, fn) {
    return _on(this, types, selector, data, fn, 1);
  },
  off: function off(types, selector, fn) {
    var handleObj, type;

    if (types && types.preventDefault && types.handleObj) {
      // ( event )  dispatched jQuery.Event
      handleObj = types.handleObj;

      _jQuery(types.delegateTarget).off(handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType, handleObj.selector, handleObj.handler);

      return this;
    }

    if (_typeof(types) === "object") {
      // ( types-object [, selector] )
      for (type in types) {
        this.off(type, selector, types[type]);
      }

      return this;
    }

    if (selector === false || typeof selector === "function") {
      // ( types [, fn] )
      fn = selector;
      selector = undefined;
    }

    if (fn === false) {
      fn = returnFalse;
    }

    return this.each(function () {
      _jQuery.event.remove(this, types, fn, selector);
    });
  },
  trigger: function trigger(type, data) {
    return this.each(function () {
      _jQuery.event.trigger(type, data, this);
    });
  },
  triggerHandler: function triggerHandler(type, data) {
    var elem = this[0];

    if (elem) {
      return _jQuery.event.trigger(type, data, elem, true);
    }
  }
});

var rinlinejQuery = / jQuery\d+="(?:null|\d+)"/g,
    rnoshimcache = new RegExp("<(?:" + nodeNames + ")[\\s/>]", "i"),
    rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,
    // Support: IE 10-11, Edge 10240+
// In IE/Edge using regex groups here causes severe slowdowns.
// See https://connect.microsoft.com/IE/feedback/details/1736512/
rnoInnerhtml = /<script|<style|<link/i,
    // checked="checked" or checked
rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
    rscriptTypeMasked = /^true\/(.*)/,
    rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,
    safeFragment = createSafeFragment(document),
    fragmentDiv = safeFragment.appendChild(document.createElement("div")); // Support: IE<8
// Manipulating tables requires a tbody

function manipulationTarget(elem, content) {
  return _jQuery.nodeName(elem, "table") && _jQuery.nodeName(content.nodeType !== 11 ? content : content.firstChild, "tr") ? elem.getElementsByTagName("tbody")[0] || elem.appendChild(elem.ownerDocument.createElement("tbody")) : elem;
} // Replace/restore the type attribute of script elements for safe DOM manipulation


function disableScript(elem) {
  elem.type = (_jQuery.find.attr(elem, "type") !== null) + "/" + elem.type;
  return elem;
}

function restoreScript(elem) {
  var match = rscriptTypeMasked.exec(elem.type);

  if (match) {
    elem.type = match[1];
  } else {
    elem.removeAttribute("type");
  }

  return elem;
}

function cloneCopyEvent(src, dest) {
  if (dest.nodeType !== 1 || !_jQuery.hasData(src)) {
    return;
  }

  var type,
      i,
      l,
      oldData = _jQuery._data(src),
      curData = _jQuery._data(dest, oldData),
      events = oldData.events;

  if (events) {
    delete curData.handle;
    curData.events = {};

    for (type in events) {
      for (i = 0, l = events[type].length; i < l; i++) {
        _jQuery.event.add(dest, type, events[type][i]);
      }
    }
  } // make the cloned public data object a copy from the original


  if (curData.data) {
    curData.data = _jQuery.extend({}, curData.data);
  }
}

function fixCloneNodeIssues(src, dest) {
  var nodeName, e, data; // We do not need to do anything for non-Elements

  if (dest.nodeType !== 1) {
    return;
  }

  nodeName = dest.nodeName.toLowerCase(); // IE6-8 copies events bound via attachEvent when using cloneNode.

  if (!support.noCloneEvent && dest[_jQuery.expando]) {
    data = _jQuery._data(dest);

    for (e in data.events) {
      _jQuery.removeEvent(dest, e, data.handle);
    } // Event data gets referenced instead of copied if the expando gets copied too


    dest.removeAttribute(_jQuery.expando);
  } // IE blanks contents when cloning scripts, and tries to evaluate newly-set text


  if (nodeName === "script" && dest.text !== src.text) {
    disableScript(dest).text = src.text;
    restoreScript(dest); // IE6-10 improperly clones children of object elements using classid.
    // IE10 throws NoModificationAllowedError if parent is null, #12132.
  } else if (nodeName === "object") {
    if (dest.parentNode) {
      dest.outerHTML = src.outerHTML;
    } // This path appears unavoidable for IE9. When cloning an object
    // element in IE9, the outerHTML strategy above is not sufficient.
    // If the src has innerHTML and the destination does not,
    // copy the src.innerHTML into the dest.innerHTML. #10324


    if (support.html5Clone && src.innerHTML && !_jQuery.trim(dest.innerHTML)) {
      dest.innerHTML = src.innerHTML;
    }
  } else if (nodeName === "input" && rcheckableType.test(src.type)) {
    // IE6-8 fails to persist the checked state of a cloned checkbox
    // or radio button. Worse, IE6-7 fail to give the cloned element
    // a checked appearance if the defaultChecked value isn't also set
    dest.defaultChecked = dest.checked = src.checked; // IE6-7 get confused and end up setting the value of a cloned
    // checkbox/radio button to an empty string instead of "on"

    if (dest.value !== src.value) {
      dest.value = src.value;
    } // IE6-8 fails to return the selected option to the default selected
    // state when cloning options

  } else if (nodeName === "option") {
    dest.defaultSelected = dest.selected = src.defaultSelected; // IE6-8 fails to set the defaultValue to the correct value when
    // cloning other types of input fields
  } else if (nodeName === "input" || nodeName === "textarea") {
    dest.defaultValue = src.defaultValue;
  }
}

function domManip(collection, args, callback, ignored) {
  // Flatten any nested arrays
  args = concat.apply([], args);

  var first,
      node,
      hasScripts,
      scripts,
      doc,
      fragment,
      i = 0,
      l = collection.length,
      iNoClone = l - 1,
      value = args[0],
      isFunction = _jQuery.isFunction(value); // We can't cloneNode fragments that contain checked, in WebKit


  if (isFunction || l > 1 && typeof value === "string" && !support.checkClone && rchecked.test(value)) {
    return collection.each(function (index) {
      var self = collection.eq(index);

      if (isFunction) {
        args[0] = value.call(this, index, self.html());
      }

      domManip(self, args, callback, ignored);
    });
  }

  if (l) {
    fragment = buildFragment(args, collection[0].ownerDocument, false, collection, ignored);
    first = fragment.firstChild;

    if (fragment.childNodes.length === 1) {
      fragment = first;
    } // Require either new content or an interest in ignored elements to invoke the callback


    if (first || ignored) {
      scripts = _jQuery.map(getAll(fragment, "script"), disableScript);
      hasScripts = scripts.length; // Use the original fragment for the last item
      // instead of the first because it can end up
      // being emptied incorrectly in certain situations (#8070).

      for (; i < l; i++) {
        node = fragment;

        if (i !== iNoClone) {
          node = _jQuery.clone(node, true, true); // Keep references to cloned scripts for later restoration

          if (hasScripts) {
            // Support: Android<4.1, PhantomJS<2
            // push.apply(_, arraylike) throws on ancient WebKit
            _jQuery.merge(scripts, getAll(node, "script"));
          }
        }

        callback.call(collection[i], node, i);
      }

      if (hasScripts) {
        doc = scripts[scripts.length - 1].ownerDocument; // Reenable scripts

        _jQuery.map(scripts, restoreScript); // Evaluate executable scripts on first document insertion


        for (i = 0; i < hasScripts; i++) {
          node = scripts[i];

          if (rscriptType.test(node.type || "") && !_jQuery._data(node, "globalEval") && _jQuery.contains(doc, node)) {
            if (node.src) {
              // Optional AJAX dependency, but won't run scripts if not present
              if (_jQuery._evalUrl) {
                _jQuery._evalUrl(node.src);
              }
            } else {
              _jQuery.globalEval((node.text || node.textContent || node.innerHTML || "").replace(rcleanScript, ""));
            }
          }
        }
      } // Fix #11809: Avoid leaking memory


      fragment = first = null;
    }
  }

  return collection;
}

function _remove(elem, selector, keepData) {
  var node,
      elems = selector ? _jQuery.filter(selector, elem) : elem,
      i = 0;

  for (; (node = elems[i]) != null; i++) {
    if (!keepData && node.nodeType === 1) {
      _jQuery.cleanData(getAll(node));
    }

    if (node.parentNode) {
      if (keepData && _jQuery.contains(node.ownerDocument, node)) {
        setGlobalEval(getAll(node, "script"));
      }

      node.parentNode.removeChild(node);
    }
  }

  return elem;
}

_jQuery.extend({
  htmlPrefilter: function htmlPrefilter(html) {
    return html.replace(rxhtmlTag, "<$1></$2>");
  },
  clone: function clone(elem, dataAndEvents, deepDataAndEvents) {
    var destElements,
        node,
        clone,
        i,
        srcElements,
        inPage = _jQuery.contains(elem.ownerDocument, elem);

    if (support.html5Clone || _jQuery.isXMLDoc(elem) || !rnoshimcache.test("<" + elem.nodeName + ">")) {
      clone = elem.cloneNode(true); // IE<=8 does not properly clone detached, unknown element nodes
    } else {
      fragmentDiv.innerHTML = elem.outerHTML;
      fragmentDiv.removeChild(clone = fragmentDiv.firstChild);
    }

    if ((!support.noCloneEvent || !support.noCloneChecked) && (elem.nodeType === 1 || elem.nodeType === 11) && !_jQuery.isXMLDoc(elem)) {
      // We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2
      destElements = getAll(clone);
      srcElements = getAll(elem); // Fix all IE cloning issues

      for (i = 0; (node = srcElements[i]) != null; ++i) {
        // Ensure that the destination node is not null; Fixes #9587
        if (destElements[i]) {
          fixCloneNodeIssues(node, destElements[i]);
        }
      }
    } // Copy the events from the original to the clone


    if (dataAndEvents) {
      if (deepDataAndEvents) {
        srcElements = srcElements || getAll(elem);
        destElements = destElements || getAll(clone);

        for (i = 0; (node = srcElements[i]) != null; i++) {
          cloneCopyEvent(node, destElements[i]);
        }
      } else {
        cloneCopyEvent(elem, clone);
      }
    } // Preserve script evaluation history


    destElements = getAll(clone, "script");

    if (destElements.length > 0) {
      setGlobalEval(destElements, !inPage && getAll(elem, "script"));
    }

    destElements = srcElements = node = null; // Return the cloned set

    return clone;
  },
  cleanData: function cleanData(elems,
  /* internal */
  forceAcceptData) {
    var elem,
        type,
        id,
        data,
        i = 0,
        internalKey = _jQuery.expando,
        cache = _jQuery.cache,
        attributes = support.attributes,
        special = _jQuery.event.special;

    for (; (elem = elems[i]) != null; i++) {
      if (forceAcceptData || acceptData(elem)) {
        id = elem[internalKey];
        data = id && cache[id];

        if (data) {
          if (data.events) {
            for (type in data.events) {
              if (special[type]) {
                _jQuery.event.remove(elem, type); // This is a shortcut to avoid jQuery.event.remove's overhead

              } else {
                _jQuery.removeEvent(elem, type, data.handle);
              }
            }
          } // Remove cache only if it was not already removed by jQuery.event.remove


          if (cache[id]) {
            delete cache[id]; // Support: IE<9
            // IE does not allow us to delete expando properties from nodes
            // IE creates expando attributes along with the property
            // IE does not have a removeAttribute function on Document nodes

            if (!attributes && typeof elem.removeAttribute !== "undefined") {
              elem.removeAttribute(internalKey); // Webkit & Blink performance suffers when deleting properties
              // from DOM nodes, so set to undefined instead
              // https://code.google.com/p/chromium/issues/detail?id=378607
            } else {
              elem[internalKey] = undefined;
            }

            deletedIds.push(id);
          }
        }
      }
    }
  }
});

_jQuery.fn.extend({
  // Keep domManip exposed until 3.0 (gh-2225)
  domManip: domManip,
  detach: function detach(selector) {
    return _remove(this, selector, true);
  },
  remove: function remove(selector) {
    return _remove(this, selector);
  },
  text: function text(value) {
    return access(this, function (value) {
      return value === undefined ? _jQuery.text(this) : this.empty().append((this[0] && this[0].ownerDocument || document).createTextNode(value));
    }, null, value, arguments.length);
  },
  append: function append() {
    return domManip(this, arguments, function (elem) {
      if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
        var target = manipulationTarget(this, elem);
        target.appendChild(elem);
      }
    });
  },
  prepend: function prepend() {
    return domManip(this, arguments, function (elem) {
      if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
        var target = manipulationTarget(this, elem);
        target.insertBefore(elem, target.firstChild);
      }
    });
  },
  before: function before() {
    return domManip(this, arguments, function (elem) {
      if (this.parentNode) {
        this.parentNode.insertBefore(elem, this);
      }
    });
  },
  after: function after() {
    return domManip(this, arguments, function (elem) {
      if (this.parentNode) {
        this.parentNode.insertBefore(elem, this.nextSibling);
      }
    });
  },
  empty: function empty() {
    var elem,
        i = 0;

    for (; (elem = this[i]) != null; i++) {
      // Remove element nodes and prevent memory leaks
      if (elem.nodeType === 1) {
        _jQuery.cleanData(getAll(elem, false));
      } // Remove any remaining nodes


      while (elem.firstChild) {
        elem.removeChild(elem.firstChild);
      } // If this is a select, ensure that it displays empty (#12336)
      // Support: IE<9


      if (elem.options && _jQuery.nodeName(elem, "select")) {
        elem.options.length = 0;
      }
    }

    return this;
  },
  clone: function clone(dataAndEvents, deepDataAndEvents) {
    dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
    deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;
    return this.map(function () {
      return _jQuery.clone(this, dataAndEvents, deepDataAndEvents);
    });
  },
  html: function html(value) {
    return access(this, function (value) {
      var elem = this[0] || {},
          i = 0,
          l = this.length;

      if (value === undefined) {
        return elem.nodeType === 1 ? elem.innerHTML.replace(rinlinejQuery, "") : undefined;
      } // See if we can take a shortcut and just use innerHTML


      if (typeof value === "string" && !rnoInnerhtml.test(value) && (support.htmlSerialize || !rnoshimcache.test(value)) && (support.leadingWhitespace || !rleadingWhitespace.test(value)) && !wrapMap[(rtagName.exec(value) || ["", ""])[1].toLowerCase()]) {
        value = _jQuery.htmlPrefilter(value);

        try {
          for (; i < l; i++) {
            // Remove element nodes and prevent memory leaks
            elem = this[i] || {};

            if (elem.nodeType === 1) {
              _jQuery.cleanData(getAll(elem, false));

              elem.innerHTML = value;
            }
          }

          elem = 0; // If using innerHTML throws an exception, use the fallback method
        } catch (e) {}
      }

      if (elem) {
        this.empty().append(value);
      }
    }, null, value, arguments.length);
  },
  replaceWith: function replaceWith() {
    var ignored = []; // Make the changes, replacing each non-ignored context element with the new content

    return domManip(this, arguments, function (elem) {
      var parent = this.parentNode;

      if (_jQuery.inArray(this, ignored) < 0) {
        _jQuery.cleanData(getAll(this));

        if (parent) {
          parent.replaceChild(elem, this);
        }
      } // Force callback invocation

    }, ignored);
  }
});

_jQuery.each({
  appendTo: "append",
  prependTo: "prepend",
  insertBefore: "before",
  insertAfter: "after",
  replaceAll: "replaceWith"
}, function (name, original) {
  _jQuery.fn[name] = function (selector) {
    var elems,
        i = 0,
        ret = [],
        insert = _jQuery(selector),
        last = insert.length - 1;

    for (; i <= last; i++) {
      elems = i === last ? this : this.clone(true);

      _jQuery(insert[i])[original](elems); // Modern browsers can apply jQuery collections as arrays, but oldIE needs a .get()


      push.apply(ret, elems.get());
    }

    return this.pushStack(ret);
  };
});

var iframe,
    elemdisplay = {
  // Support: Firefox
  // We have to pre-define these values for FF (#10227)
  HTML: "block",
  BODY: "block"
};
/**
 * Retrieve the actual display of a element
 * @param {String} name nodeName of the element
 * @param {Object} doc Document object
 */
// Called only from within defaultDisplay

function actualDisplay(name, doc) {
  var elem = _jQuery(doc.createElement(name)).appendTo(doc.body),
      display = _jQuery.css(elem[0], "display"); // We don't have any data stored on the element,
  // so use "detach" method as fast way to get rid of the element


  elem.detach();
  return display;
}
/**
 * Try to determine the default display value of an element
 * @param {String} nodeName
 */


function defaultDisplay(nodeName) {
  var doc = document,
      display = elemdisplay[nodeName];

  if (!display) {
    display = actualDisplay(nodeName, doc); // If the simple way fails, read from inside an iframe

    if (display === "none" || !display) {
      // Use the already-created iframe if possible
      iframe = (iframe || _jQuery("<iframe frameborder='0' width='0' height='0'/>")).appendTo(doc.documentElement); // Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse

      doc = (iframe[0].contentWindow || iframe[0].contentDocument).document; // Support: IE

      doc.write();
      doc.close();
      display = actualDisplay(nodeName, doc);
      iframe.detach();
    } // Store the correct default display


    elemdisplay[nodeName] = display;
  }

  return display;
}

var rmargin = /^margin/;
var rnumnonpx = new RegExp("^(" + pnum + ")(?!px)[a-z%]+$", "i");

var swap = function swap(elem, options, callback, args) {
  var ret,
      name,
      old = {}; // Remember the old values, and insert the new ones

  for (name in options) {
    old[name] = elem.style[name];
    elem.style[name] = options[name];
  }

  ret = callback.apply(elem, args || []); // Revert the old values

  for (name in options) {
    elem.style[name] = old[name];
  }

  return ret;
};

var documentElement = document.documentElement;

(function () {
  var pixelPositionVal,
      pixelMarginRightVal,
      boxSizingReliableVal,
      reliableHiddenOffsetsVal,
      reliableMarginRightVal,
      reliableMarginLeftVal,
      container = document.createElement("div"),
      div = document.createElement("div"); // Finish early in limited (non-browser) environments

  if (!div.style) {
    return;
  }

  div.style.cssText = "float:left;opacity:.5"; // Support: IE<9
  // Make sure that element opacity exists (as opposed to filter)

  support.opacity = div.style.opacity === "0.5"; // Verify style float existence
  // (IE uses styleFloat instead of cssFloat)

  support.cssFloat = !!div.style.cssFloat;
  div.style.backgroundClip = "content-box";
  div.cloneNode(true).style.backgroundClip = "";
  support.clearCloneStyle = div.style.backgroundClip === "content-box";
  container = document.createElement("div");
  container.style.cssText = "border:0;width:8px;height:0;top:0;left:-9999px;" + "padding:0;margin-top:1px;position:absolute";
  div.innerHTML = "";
  container.appendChild(div); // Support: Firefox<29, Android 2.3
  // Vendor-prefix box-sizing

  support.boxSizing = div.style.boxSizing === "" || div.style.MozBoxSizing === "" || div.style.WebkitBoxSizing === "";

  _jQuery.extend(support, {
    reliableHiddenOffsets: function reliableHiddenOffsets() {
      if (pixelPositionVal == null) {
        computeStyleTests();
      }

      return reliableHiddenOffsetsVal;
    },
    boxSizingReliable: function boxSizingReliable() {
      // We're checking for pixelPositionVal here instead of boxSizingReliableVal
      // since that compresses better and they're computed together anyway.
      if (pixelPositionVal == null) {
        computeStyleTests();
      }

      return boxSizingReliableVal;
    },
    pixelMarginRight: function pixelMarginRight() {
      // Support: Android 4.0-4.3
      if (pixelPositionVal == null) {
        computeStyleTests();
      }

      return pixelMarginRightVal;
    },
    pixelPosition: function pixelPosition() {
      if (pixelPositionVal == null) {
        computeStyleTests();
      }

      return pixelPositionVal;
    },
    reliableMarginRight: function reliableMarginRight() {
      // Support: Android 2.3
      if (pixelPositionVal == null) {
        computeStyleTests();
      }

      return reliableMarginRightVal;
    },
    reliableMarginLeft: function reliableMarginLeft() {
      // Support: IE <=8 only, Android 4.0 - 4.3 only, Firefox <=3 - 37
      if (pixelPositionVal == null) {
        computeStyleTests();
      }

      return reliableMarginLeftVal;
    }
  });

  function computeStyleTests() {
    var contents,
        divStyle,
        documentElement = document.documentElement; // Setup

    documentElement.appendChild(container);
    div.style.cssText = // Support: Android 2.3
    // Vendor-prefix box-sizing
    "-webkit-box-sizing:border-box;box-sizing:border-box;" + "position:relative;display:block;" + "margin:auto;border:1px;padding:1px;" + "top:1%;width:50%"; // Support: IE<9
    // Assume reasonable values in the absence of getComputedStyle

    pixelPositionVal = boxSizingReliableVal = reliableMarginLeftVal = false;
    pixelMarginRightVal = reliableMarginRightVal = true; // Check for getComputedStyle so that this code is not run in IE<9.

    if (window.getComputedStyle) {
      divStyle = window.getComputedStyle(div);
      pixelPositionVal = (divStyle || {}).top !== "1%";
      reliableMarginLeftVal = (divStyle || {}).marginLeft === "2px";
      boxSizingReliableVal = (divStyle || {
        width: "4px"
      }).width === "4px"; // Support: Android 4.0 - 4.3 only
      // Some styles come back with percentage values, even though they shouldn't

      div.style.marginRight = "50%";
      pixelMarginRightVal = (divStyle || {
        marginRight: "4px"
      }).marginRight === "4px"; // Support: Android 2.3 only
      // Div with explicit width and no margin-right incorrectly
      // gets computed margin-right based on width of container (#3333)
      // WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right

      contents = div.appendChild(document.createElement("div")); // Reset CSS: box-sizing; display; margin; border; padding

      contents.style.cssText = div.style.cssText = // Support: Android 2.3
      // Vendor-prefix box-sizing
      "-webkit-box-sizing:content-box;-moz-box-sizing:content-box;" + "box-sizing:content-box;display:block;margin:0;border:0;padding:0";
      contents.style.marginRight = contents.style.width = "0";
      div.style.width = "1px";
      reliableMarginRightVal = !parseFloat((window.getComputedStyle(contents) || {}).marginRight);
      div.removeChild(contents);
    } // Support: IE6-8
    // First check that getClientRects works as expected
    // Check if table cells still have offsetWidth/Height when they are set
    // to display:none and there are still other visible table cells in a
    // table row; if so, offsetWidth/Height are not reliable for use when
    // determining if an element has been hidden directly using
    // display:none (it is still safe to use offsets if a parent element is
    // hidden; don safety goggles and see bug #4512 for more information).


    div.style.display = "none";
    reliableHiddenOffsetsVal = div.getClientRects().length === 0;

    if (reliableHiddenOffsetsVal) {
      div.style.display = "";
      div.innerHTML = "<table><tr><td></td><td>t</td></tr></table>";
      div.childNodes[0].style.borderCollapse = "separate";
      contents = div.getElementsByTagName("td");
      contents[0].style.cssText = "margin:0;border:0;padding:0;display:none";
      reliableHiddenOffsetsVal = contents[0].offsetHeight === 0;

      if (reliableHiddenOffsetsVal) {
        contents[0].style.display = "";
        contents[1].style.display = "none";
        reliableHiddenOffsetsVal = contents[0].offsetHeight === 0;
      }
    } // Teardown


    documentElement.removeChild(container);
  }
})();

var getStyles,
    curCSS,
    rposition = /^(top|right|bottom|left)$/;

if (window.getComputedStyle) {
  getStyles = function getStyles(elem) {
    // Support: IE<=11+, Firefox<=30+ (#15098, #14150)
    // IE throws on elements created in popups
    // FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
    var view = elem.ownerDocument.defaultView;

    if (!view || !view.opener) {
      view = window;
    }

    return view.getComputedStyle(elem);
  };

  curCSS = function curCSS(elem, name, computed) {
    var width,
        minWidth,
        maxWidth,
        ret,
        style = elem.style;
    computed = computed || getStyles(elem); // getPropertyValue is only needed for .css('filter') in IE9, see #12537

    ret = computed ? computed.getPropertyValue(name) || computed[name] : undefined; // Support: Opera 12.1x only
    // Fall back to style even without computed
    // computed is undefined for elems on document fragments

    if ((ret === "" || ret === undefined) && !_jQuery.contains(elem.ownerDocument, elem)) {
      ret = _jQuery.style(elem, name);
    }

    if (computed) {
      // A tribute to the "awesome hack by Dean Edwards"
      // Chrome < 17 and Safari 5.0 uses "computed value"
      // instead of "used value" for margin-right
      // Safari 5.1.7 (at least) returns percentage for a larger set of values,
      // but width seems to be reliably pixels
      // this is against the CSSOM draft spec:
      // http://dev.w3.org/csswg/cssom/#resolved-values
      if (!support.pixelMarginRight() && rnumnonpx.test(ret) && rmargin.test(name)) {
        // Remember the original values
        width = style.width;
        minWidth = style.minWidth;
        maxWidth = style.maxWidth; // Put in the new values to get a computed value out

        style.minWidth = style.maxWidth = style.width = ret;
        ret = computed.width; // Revert the changed values

        style.width = width;
        style.minWidth = minWidth;
        style.maxWidth = maxWidth;
      }
    } // Support: IE
    // IE returns zIndex value as an integer.


    return ret === undefined ? ret : ret + "";
  };
} else if (documentElement.currentStyle) {
  getStyles = function getStyles(elem) {
    return elem.currentStyle;
  };

  curCSS = function curCSS(elem, name, computed) {
    var left,
        rs,
        rsLeft,
        ret,
        style = elem.style;
    computed = computed || getStyles(elem);
    ret = computed ? computed[name] : undefined; // Avoid setting ret to empty string here
    // so we don't default to auto

    if (ret == null && style && style[name]) {
      ret = style[name];
    } // From the awesome hack by Dean Edwards
    // http://erik.eae.net/archives/2007/07/27/18.54.15/#comment-102291
    // If we're not dealing with a regular pixel number
    // but a number that has a weird ending, we need to convert it to pixels
    // but not position css attributes, as those are
    // proportional to the parent element instead
    // and we can't measure the parent instead because it
    // might trigger a "stacking dolls" problem


    if (rnumnonpx.test(ret) && !rposition.test(name)) {
      // Remember the original values
      left = style.left;
      rs = elem.runtimeStyle;
      rsLeft = rs && rs.left; // Put in the new values to get a computed value out

      if (rsLeft) {
        rs.left = elem.currentStyle.left;
      }

      style.left = name === "fontSize" ? "1em" : ret;
      ret = style.pixelLeft + "px"; // Revert the changed values

      style.left = left;

      if (rsLeft) {
        rs.left = rsLeft;
      }
    } // Support: IE
    // IE returns zIndex value as an integer.


    return ret === undefined ? ret : ret + "" || "auto";
  };
}

function addGetHookIf(conditionFn, hookFn) {
  // Define the hook, we'll check on the first run if it's really needed.
  return {
    get: function get() {
      if (conditionFn()) {
        // Hook not needed (or it's not possible to use it due
        // to missing dependency), remove it.
        delete this.get;
        return;
      } // Hook needed; redefine it so that the support test is not executed again.


      return (this.get = hookFn).apply(this, arguments);
    }
  };
}

var ralpha = /alpha\([^)]*\)/i,
    ropacity = /opacity\s*=\s*([^)]*)/i,
    // swappable if display is none or starts with table except
// "table", "table-cell", or "table-caption"
// see here for display values:
// https://developer.mozilla.org/en-US/docs/CSS/display
rdisplayswap = /^(none|table(?!-c[ea]).+)/,
    rnumsplit = new RegExp("^(" + pnum + ")(.*)$", "i"),
    cssShow = {
  position: "absolute",
  visibility: "hidden",
  display: "block"
},
    cssNormalTransform = {
  letterSpacing: "0",
  fontWeight: "400"
},
    cssPrefixes = ["Webkit", "O", "Moz", "ms"],
    emptyStyle = document.createElement("div").style; // return a css property mapped to a potentially vendor prefixed property

function vendorPropName(name) {
  // shortcut for names that are not vendor prefixed
  if (name in emptyStyle) {
    return name;
  } // check for vendor prefixed names


  var capName = name.charAt(0).toUpperCase() + name.slice(1),
      i = cssPrefixes.length;

  while (i--) {
    name = cssPrefixes[i] + capName;

    if (name in emptyStyle) {
      return name;
    }
  }
}

function showHide(elements, show) {
  var display,
      elem,
      hidden,
      values = [],
      index = 0,
      length = elements.length;

  for (; index < length; index++) {
    elem = elements[index];

    if (!elem.style) {
      continue;
    }

    values[index] = _jQuery._data(elem, "olddisplay");
    display = elem.style.display;

    if (show) {
      // Reset the inline display of this element to learn if it is
      // being hidden by cascaded rules or not
      if (!values[index] && display === "none") {
        elem.style.display = "";
      } // Set elements which have been overridden with display: none
      // in a stylesheet to whatever the default browser style is
      // for such an element


      if (elem.style.display === "" && isHidden(elem)) {
        values[index] = _jQuery._data(elem, "olddisplay", defaultDisplay(elem.nodeName));
      }
    } else {
      hidden = isHidden(elem);

      if (display && display !== "none" || !hidden) {
        _jQuery._data(elem, "olddisplay", hidden ? display : _jQuery.css(elem, "display"));
      }
    }
  } // Set the display of most of the elements in a second loop
  // to avoid the constant reflow


  for (index = 0; index < length; index++) {
    elem = elements[index];

    if (!elem.style) {
      continue;
    }

    if (!show || elem.style.display === "none" || elem.style.display === "") {
      elem.style.display = show ? values[index] || "" : "none";
    }
  }

  return elements;
}

function setPositiveNumber(elem, value, subtract) {
  var matches = rnumsplit.exec(value);
  return matches ? // Guard against undefined "subtract", e.g., when used as in cssHooks
  Math.max(0, matches[1] - (subtract || 0)) + (matches[2] || "px") : value;
}

function augmentWidthOrHeight(elem, name, extra, isBorderBox, styles) {
  var i = extra === (isBorderBox ? "border" : "content") ? // If we already have the right measurement, avoid augmentation
  4 : // Otherwise initialize for horizontal or vertical properties
  name === "width" ? 1 : 0,
      val = 0;

  for (; i < 4; i += 2) {
    // both box models exclude margin, so add it if we want it
    if (extra === "margin") {
      val += _jQuery.css(elem, extra + cssExpand[i], true, styles);
    }

    if (isBorderBox) {
      // border-box includes padding, so remove it if we want content
      if (extra === "content") {
        val -= _jQuery.css(elem, "padding" + cssExpand[i], true, styles);
      } // at this point, extra isn't border nor margin, so remove border


      if (extra !== "margin") {
        val -= _jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
      }
    } else {
      // at this point, extra isn't content, so add padding
      val += _jQuery.css(elem, "padding" + cssExpand[i], true, styles); // at this point, extra isn't content nor padding, so add border

      if (extra !== "padding") {
        val += _jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
      }
    }
  }

  return val;
}

function getWidthOrHeight(elem, name, extra) {
  // Start with offset property, which is equivalent to the border-box value
  var valueIsBorderBox = true,
      val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
      styles = getStyles(elem),
      isBorderBox = support.boxSizing && _jQuery.css(elem, "boxSizing", false, styles) === "border-box"; // some non-html elements return undefined for offsetWidth, so check for null/undefined
  // svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
  // MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668

  if (val <= 0 || val == null) {
    // Fall back to computed then uncomputed css if necessary
    val = curCSS(elem, name, styles);

    if (val < 0 || val == null) {
      val = elem.style[name];
    } // Computed unit is not pixels. Stop here and return.


    if (rnumnonpx.test(val)) {
      return val;
    } // we need the check for style in case a browser which returns unreliable values
    // for getComputedStyle silently falls back to the reliable elem.style


    valueIsBorderBox = isBorderBox && (support.boxSizingReliable() || val === elem.style[name]); // Normalize "", auto, and prepare for extra

    val = parseFloat(val) || 0;
  } // use the active box-sizing model to add/subtract irrelevant styles


  return val + augmentWidthOrHeight(elem, name, extra || (isBorderBox ? "border" : "content"), valueIsBorderBox, styles) + "px";
}

_jQuery.extend({
  // Add in style property hooks for overriding the default
  // behavior of getting and setting a style property
  cssHooks: {
    opacity: {
      get: function get(elem, computed) {
        if (computed) {
          // We should always get a number back from opacity
          var ret = curCSS(elem, "opacity");
          return ret === "" ? "1" : ret;
        }
      }
    }
  },
  // Don't automatically add "px" to these possibly-unitless properties
  cssNumber: {
    "animationIterationCount": true,
    "columnCount": true,
    "fillOpacity": true,
    "flexGrow": true,
    "flexShrink": true,
    "fontWeight": true,
    "lineHeight": true,
    "opacity": true,
    "order": true,
    "orphans": true,
    "widows": true,
    "zIndex": true,
    "zoom": true
  },
  // Add in properties whose names you wish to fix before
  // setting or getting the value
  cssProps: {
    // normalize float css property
    "float": support.cssFloat ? "cssFloat" : "styleFloat"
  },
  // Get and set the style property on a DOM Node
  style: function style(elem, name, value, extra) {
    // Don't set styles on text and comment nodes
    if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {
      return;
    } // Make sure that we're working with the right name


    var ret,
        type,
        hooks,
        origName = _jQuery.camelCase(name),
        style = elem.style;

    name = _jQuery.cssProps[origName] || (_jQuery.cssProps[origName] = vendorPropName(origName) || origName); // gets hook for the prefixed version
    // followed by the unprefixed version

    hooks = _jQuery.cssHooks[name] || _jQuery.cssHooks[origName]; // Check if we're setting a value

    if (value !== undefined) {
      type = _typeof(value); // Convert "+=" or "-=" to relative numbers (#7345)

      if (type === "string" && (ret = rcssNum.exec(value)) && ret[1]) {
        value = adjustCSS(elem, name, ret); // Fixes bug #9237

        type = "number";
      } // Make sure that null and NaN values aren't set. See: #7116


      if (value == null || value !== value) {
        return;
      } // If a number was passed in, add the unit (except for certain CSS properties)


      if (type === "number") {
        value += ret && ret[3] || (_jQuery.cssNumber[origName] ? "" : "px");
      } // Fixes #8908, it can be done more correctly by specifing setters in cssHooks,
      // but it would mean to define eight
      // (for every problematic property) identical functions


      if (!support.clearCloneStyle && value === "" && name.indexOf("background") === 0) {
        style[name] = "inherit";
      } // If a hook was provided, use that value, otherwise just set the specified value


      if (!hooks || !("set" in hooks) || (value = hooks.set(elem, value, extra)) !== undefined) {
        // Support: IE
        // Swallow errors from 'invalid' CSS values (#5509)
        try {
          style[name] = value;
        } catch (e) {}
      }
    } else {
      // If a hook was provided get the non-computed value from there
      if (hooks && "get" in hooks && (ret = hooks.get(elem, false, extra)) !== undefined) {
        return ret;
      } // Otherwise just get the value from the style object


      return style[name];
    }
  },
  css: function css(elem, name, extra, styles) {
    var num,
        val,
        hooks,
        origName = _jQuery.camelCase(name); // Make sure that we're working with the right name


    name = _jQuery.cssProps[origName] || (_jQuery.cssProps[origName] = vendorPropName(origName) || origName); // gets hook for the prefixed version
    // followed by the unprefixed version

    hooks = _jQuery.cssHooks[name] || _jQuery.cssHooks[origName]; // If a hook was provided get the computed value from there

    if (hooks && "get" in hooks) {
      val = hooks.get(elem, true, extra);
    } // Otherwise, if a way to get the computed value exists, use that


    if (val === undefined) {
      val = curCSS(elem, name, styles);
    } //convert "normal" to computed value


    if (val === "normal" && name in cssNormalTransform) {
      val = cssNormalTransform[name];
    } // Return, converting to number if forced or a qualifier was provided and val looks numeric


    if (extra === "" || extra) {
      num = parseFloat(val);
      return extra === true || isFinite(num) ? num || 0 : val;
    }

    return val;
  }
});

_jQuery.each(["height", "width"], function (i, name) {
  _jQuery.cssHooks[name] = {
    get: function get(elem, computed, extra) {
      if (computed) {
        // certain elements can have dimension info if we invisibly show them
        // however, it must have a current display style that would benefit from this
        return rdisplayswap.test(_jQuery.css(elem, "display")) && elem.offsetWidth === 0 ? swap(elem, cssShow, function () {
          return getWidthOrHeight(elem, name, extra);
        }) : getWidthOrHeight(elem, name, extra);
      }
    },
    set: function set(elem, value, extra) {
      var styles = extra && getStyles(elem);
      return setPositiveNumber(elem, value, extra ? augmentWidthOrHeight(elem, name, extra, support.boxSizing && _jQuery.css(elem, "boxSizing", false, styles) === "border-box", styles) : 0);
    }
  };
});

if (!support.opacity) {
  _jQuery.cssHooks.opacity = {
    get: function get(elem, computed) {
      // IE uses filters for opacity
      return ropacity.test((computed && elem.currentStyle ? elem.currentStyle.filter : elem.style.filter) || "") ? 0.01 * parseFloat(RegExp.$1) + "" : computed ? "1" : "";
    },
    set: function set(elem, value) {
      var style = elem.style,
          currentStyle = elem.currentStyle,
          opacity = _jQuery.isNumeric(value) ? "alpha(opacity=" + value * 100 + ")" : "",
          filter = currentStyle && currentStyle.filter || style.filter || ""; // IE has trouble with opacity if it does not have layout
      // Force it by setting the zoom level

      style.zoom = 1; // if setting opacity to 1, and no other filters exist -
      // attempt to remove filter attribute #6652
      // if value === "", then remove inline opacity #12685

      if ((value >= 1 || value === "") && _jQuery.trim(filter.replace(ralpha, "")) === "" && style.removeAttribute) {
        // Setting style.filter to null, "" & " " still leave "filter:" in the cssText
        // if "filter:" is present at all, clearType is disabled, we want to avoid this
        // style.removeAttribute is IE Only, but so apparently is this code path...
        style.removeAttribute("filter"); // if there is no filter style applied in a css rule
        // or unset inline opacity, we are done

        if (value === "" || currentStyle && !currentStyle.filter) {
          return;
        }
      } // otherwise, set new filter values


      style.filter = ralpha.test(filter) ? filter.replace(ralpha, opacity) : filter + " " + opacity;
    }
  };
}

_jQuery.cssHooks.marginRight = addGetHookIf(support.reliableMarginRight, function (elem, computed) {
  if (computed) {
    return swap(elem, {
      "display": "inline-block"
    }, curCSS, [elem, "marginRight"]);
  }
});
_jQuery.cssHooks.marginLeft = addGetHookIf(support.reliableMarginLeft, function (elem, computed) {
  if (computed) {
    return (parseFloat(curCSS(elem, "marginLeft")) || ( // Support: IE<=11+
    // Running getBoundingClientRect on a disconnected node in IE throws an error
    // Support: IE8 only
    // getClientRects() errors on disconnected elems
    _jQuery.contains(elem.ownerDocument, elem) ? elem.getBoundingClientRect().left - swap(elem, {
      marginLeft: 0
    }, function () {
      return elem.getBoundingClientRect().left;
    }) : 0)) + "px";
  }
}); // These hooks are used by animate to expand properties

_jQuery.each({
  margin: "",
  padding: "",
  border: "Width"
}, function (prefix, suffix) {
  _jQuery.cssHooks[prefix + suffix] = {
    expand: function expand(value) {
      var i = 0,
          expanded = {},
          // assumes a single number if not a string
      parts = typeof value === "string" ? value.split(" ") : [value];

      for (; i < 4; i++) {
        expanded[prefix + cssExpand[i] + suffix] = parts[i] || parts[i - 2] || parts[0];
      }

      return expanded;
    }
  };

  if (!rmargin.test(prefix)) {
    _jQuery.cssHooks[prefix + suffix].set = setPositiveNumber;
  }
});

_jQuery.fn.extend({
  css: function css(name, value) {
    return access(this, function (elem, name, value) {
      var styles,
          len,
          map = {},
          i = 0;

      if (_jQuery.isArray(name)) {
        styles = getStyles(elem);
        len = name.length;

        for (; i < len; i++) {
          map[name[i]] = _jQuery.css(elem, name[i], false, styles);
        }

        return map;
      }

      return value !== undefined ? _jQuery.style(elem, name, value) : _jQuery.css(elem, name);
    }, name, value, arguments.length > 1);
  },
  show: function show() {
    return showHide(this, true);
  },
  hide: function hide() {
    return showHide(this);
  },
  toggle: function toggle(state) {
    if (typeof state === "boolean") {
      return state ? this.show() : this.hide();
    }

    return this.each(function () {
      if (isHidden(this)) {
        _jQuery(this).show();
      } else {
        _jQuery(this).hide();
      }
    });
  }
});

function Tween(elem, options, prop, end, easing) {
  return new Tween.prototype.init(elem, options, prop, end, easing);
}

_jQuery.Tween = Tween;
Tween.prototype = {
  constructor: Tween,
  init: function init(elem, options, prop, end, easing, unit) {
    this.elem = elem;
    this.prop = prop;
    this.easing = easing || _jQuery.easing._default;
    this.options = options;
    this.start = this.now = this.cur();
    this.end = end;
    this.unit = unit || (_jQuery.cssNumber[prop] ? "" : "px");
  },
  cur: function cur() {
    var hooks = Tween.propHooks[this.prop];
    return hooks && hooks.get ? hooks.get(this) : Tween.propHooks._default.get(this);
  },
  run: function run(percent) {
    var eased,
        hooks = Tween.propHooks[this.prop];

    if (this.options.duration) {
      this.pos = eased = _jQuery.easing[this.easing](percent, this.options.duration * percent, 0, 1, this.options.duration);
    } else {
      this.pos = eased = percent;
    }

    this.now = (this.end - this.start) * eased + this.start;

    if (this.options.step) {
      this.options.step.call(this.elem, this.now, this);
    }

    if (hooks && hooks.set) {
      hooks.set(this);
    } else {
      Tween.propHooks._default.set(this);
    }

    return this;
  }
};
Tween.prototype.init.prototype = Tween.prototype;
Tween.propHooks = {
  _default: {
    get: function get(tween) {
      var result; // Use a property on the element directly when it is not a DOM element,
      // or when there is no matching style property that exists.

      if (tween.elem.nodeType !== 1 || tween.elem[tween.prop] != null && tween.elem.style[tween.prop] == null) {
        return tween.elem[tween.prop];
      } // passing an empty string as a 3rd parameter to .css will automatically
      // attempt a parseFloat and fallback to a string if the parse fails
      // so, simple values such as "10px" are parsed to Float.
      // complex values such as "rotate(1rad)" are returned as is.


      result = _jQuery.css(tween.elem, tween.prop, ""); // Empty strings, null, undefined and "auto" are converted to 0.

      return !result || result === "auto" ? 0 : result;
    },
    set: function set(tween) {
      // use step hook for back compat - use cssHook if its there - use .style if its
      // available and use plain properties where available
      if (_jQuery.fx.step[tween.prop]) {
        _jQuery.fx.step[tween.prop](tween);
      } else if (tween.elem.nodeType === 1 && (tween.elem.style[_jQuery.cssProps[tween.prop]] != null || _jQuery.cssHooks[tween.prop])) {
        _jQuery.style(tween.elem, tween.prop, tween.now + tween.unit);
      } else {
        tween.elem[tween.prop] = tween.now;
      }
    }
  }
}; // Support: IE <=9
// Panic based approach to setting things on disconnected nodes

Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
  set: function set(tween) {
    if (tween.elem.nodeType && tween.elem.parentNode) {
      tween.elem[tween.prop] = tween.now;
    }
  }
};
_jQuery.easing = {
  linear: function linear(p) {
    return p;
  },
  swing: function swing(p) {
    return 0.5 - Math.cos(p * Math.PI) / 2;
  },
  _default: "swing"
};
_jQuery.fx = Tween.prototype.init; // Back Compat <1.8 extension point

_jQuery.fx.step = {};
var fxNow,
    timerId,
    rfxtypes = /^(?:toggle|show|hide)$/,
    rrun = /queueHooks$/; // Animations created synchronously will run synchronously

function createFxNow() {
  window.setTimeout(function () {
    fxNow = undefined;
  });
  return fxNow = _jQuery.now();
} // Generate parameters to create a standard animation


function genFx(type, includeWidth) {
  var which,
      attrs = {
    height: type
  },
      i = 0; // if we include width, step value is 1 to do all cssExpand values,
  // if we don't include width, step value is 2 to skip over Left and Right

  includeWidth = includeWidth ? 1 : 0;

  for (; i < 4; i += 2 - includeWidth) {
    which = cssExpand[i];
    attrs["margin" + which] = attrs["padding" + which] = type;
  }

  if (includeWidth) {
    attrs.opacity = attrs.width = type;
  }

  return attrs;
}

function createTween(value, prop, animation) {
  var tween,
      collection = (Animation.tweeners[prop] || []).concat(Animation.tweeners["*"]),
      index = 0,
      length = collection.length;

  for (; index < length; index++) {
    if (tween = collection[index].call(animation, prop, value)) {
      // we're done with this property
      return tween;
    }
  }
}

function defaultPrefilter(elem, props, opts) {
  /* jshint validthis: true */
  var prop,
      value,
      toggle,
      tween,
      hooks,
      oldfire,
      display,
      checkDisplay,
      anim = this,
      orig = {},
      style = elem.style,
      hidden = elem.nodeType && isHidden(elem),
      dataShow = _jQuery._data(elem, "fxshow"); // handle queue: false promises


  if (!opts.queue) {
    hooks = _jQuery._queueHooks(elem, "fx");

    if (hooks.unqueued == null) {
      hooks.unqueued = 0;
      oldfire = hooks.empty.fire;

      hooks.empty.fire = function () {
        if (!hooks.unqueued) {
          oldfire();
        }
      };
    }

    hooks.unqueued++;
    anim.always(function () {
      // doing this makes sure that the complete handler will be called
      // before this completes
      anim.always(function () {
        hooks.unqueued--;

        if (!_jQuery.queue(elem, "fx").length) {
          hooks.empty.fire();
        }
      });
    });
  } // height/width overflow pass


  if (elem.nodeType === 1 && ("height" in props || "width" in props)) {
    // Make sure that nothing sneaks out
    // Record all 3 overflow attributes because IE does not
    // change the overflow attribute when overflowX and
    // overflowY are set to the same value
    opts.overflow = [style.overflow, style.overflowX, style.overflowY]; // Set display property to inline-block for height/width
    // animations on inline elements that are having width/height animated

    display = _jQuery.css(elem, "display"); // Test default display if display is currently "none"

    checkDisplay = display === "none" ? _jQuery._data(elem, "olddisplay") || defaultDisplay(elem.nodeName) : display;

    if (checkDisplay === "inline" && _jQuery.css(elem, "float") === "none") {
      // inline-level elements accept inline-block;
      // block-level elements need to be inline with layout
      if (!support.inlineBlockNeedsLayout || defaultDisplay(elem.nodeName) === "inline") {
        style.display = "inline-block";
      } else {
        style.zoom = 1;
      }
    }
  }

  if (opts.overflow) {
    style.overflow = "hidden";

    if (!support.shrinkWrapBlocks()) {
      anim.always(function () {
        style.overflow = opts.overflow[0];
        style.overflowX = opts.overflow[1];
        style.overflowY = opts.overflow[2];
      });
    }
  } // show/hide pass


  for (prop in props) {
    value = props[prop];

    if (rfxtypes.exec(value)) {
      delete props[prop];
      toggle = toggle || value === "toggle";

      if (value === (hidden ? "hide" : "show")) {
        // If there is dataShow left over from a stopped hide or show
        // and we are going to proceed with show, we should pretend to be hidden
        if (value === "show" && dataShow && dataShow[prop] !== undefined) {
          hidden = true;
        } else {
          continue;
        }
      }

      orig[prop] = dataShow && dataShow[prop] || _jQuery.style(elem, prop); // Any non-fx value stops us from restoring the original display value
    } else {
      display = undefined;
    }
  }

  if (!_jQuery.isEmptyObject(orig)) {
    if (dataShow) {
      if ("hidden" in dataShow) {
        hidden = dataShow.hidden;
      }
    } else {
      dataShow = _jQuery._data(elem, "fxshow", {});
    } // store state if its toggle - enables .stop().toggle() to "reverse"


    if (toggle) {
      dataShow.hidden = !hidden;
    }

    if (hidden) {
      _jQuery(elem).show();
    } else {
      anim.done(function () {
        _jQuery(elem).hide();
      });
    }

    anim.done(function () {
      var prop;

      _jQuery._removeData(elem, "fxshow");

      for (prop in orig) {
        _jQuery.style(elem, prop, orig[prop]);
      }
    });

    for (prop in orig) {
      tween = createTween(hidden ? dataShow[prop] : 0, prop, anim);

      if (!(prop in dataShow)) {
        dataShow[prop] = tween.start;

        if (hidden) {
          tween.end = tween.start;
          tween.start = prop === "width" || prop === "height" ? 1 : 0;
        }
      }
    } // If this is a noop like .hide().hide(), restore an overwritten display value

  } else if ((display === "none" ? defaultDisplay(elem.nodeName) : display) === "inline") {
    style.display = display;
  }
}

function propFilter(props, specialEasing) {
  var index, name, easing, value, hooks; // camelCase, specialEasing and expand cssHook pass

  for (index in props) {
    name = _jQuery.camelCase(index);
    easing = specialEasing[name];
    value = props[index];

    if (_jQuery.isArray(value)) {
      easing = value[1];
      value = props[index] = value[0];
    }

    if (index !== name) {
      props[name] = value;
      delete props[index];
    }

    hooks = _jQuery.cssHooks[name];

    if (hooks && "expand" in hooks) {
      value = hooks.expand(value);
      delete props[name]; // not quite $.extend, this wont overwrite keys already present.
      // also - reusing 'index' from above because we have the correct "name"

      for (index in value) {
        if (!(index in props)) {
          props[index] = value[index];
          specialEasing[index] = easing;
        }
      }
    } else {
      specialEasing[name] = easing;
    }
  }
}

function Animation(elem, properties, options) {
  var result,
      stopped,
      index = 0,
      length = Animation.prefilters.length,
      deferred = _jQuery.Deferred().always(function () {
    // don't match elem in the :animated selector
    delete tick.elem;
  }),
      tick = function tick() {
    if (stopped) {
      return false;
    }

    var currentTime = fxNow || createFxNow(),
        remaining = Math.max(0, animation.startTime + animation.duration - currentTime),
        // Support: Android 2.3
    // Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
    temp = remaining / animation.duration || 0,
        percent = 1 - temp,
        index = 0,
        length = animation.tweens.length;

    for (; index < length; index++) {
      animation.tweens[index].run(percent);
    }

    deferred.notifyWith(elem, [animation, percent, remaining]);

    if (percent < 1 && length) {
      return remaining;
    } else {
      deferred.resolveWith(elem, [animation]);
      return false;
    }
  },
      animation = deferred.promise({
    elem: elem,
    props: _jQuery.extend({}, properties),
    opts: _jQuery.extend(true, {
      specialEasing: {},
      easing: _jQuery.easing._default
    }, options),
    originalProperties: properties,
    originalOptions: options,
    startTime: fxNow || createFxNow(),
    duration: options.duration,
    tweens: [],
    createTween: function createTween(prop, end) {
      var tween = _jQuery.Tween(elem, animation.opts, prop, end, animation.opts.specialEasing[prop] || animation.opts.easing);

      animation.tweens.push(tween);
      return tween;
    },
    stop: function stop(gotoEnd) {
      var index = 0,
          // if we are going to the end, we want to run all the tweens
      // otherwise we skip this part
      length = gotoEnd ? animation.tweens.length : 0;

      if (stopped) {
        return this;
      }

      stopped = true;

      for (; index < length; index++) {
        animation.tweens[index].run(1);
      } // resolve when we played the last frame
      // otherwise, reject


      if (gotoEnd) {
        deferred.notifyWith(elem, [animation, 1, 0]);
        deferred.resolveWith(elem, [animation, gotoEnd]);
      } else {
        deferred.rejectWith(elem, [animation, gotoEnd]);
      }

      return this;
    }
  }),
      props = animation.props;

  propFilter(props, animation.opts.specialEasing);

  for (; index < length; index++) {
    result = Animation.prefilters[index].call(animation, elem, props, animation.opts);

    if (result) {
      if (_jQuery.isFunction(result.stop)) {
        _jQuery._queueHooks(animation.elem, animation.opts.queue).stop = _jQuery.proxy(result.stop, result);
      }

      return result;
    }
  }

  _jQuery.map(props, createTween, animation);

  if (_jQuery.isFunction(animation.opts.start)) {
    animation.opts.start.call(elem, animation);
  }

  _jQuery.fx.timer(_jQuery.extend(tick, {
    elem: elem,
    anim: animation,
    queue: animation.opts.queue
  })); // attach callbacks from options


  return animation.progress(animation.opts.progress).done(animation.opts.done, animation.opts.complete).fail(animation.opts.fail).always(animation.opts.always);
}

_jQuery.Animation = _jQuery.extend(Animation, {
  tweeners: {
    "*": [function (prop, value) {
      var tween = this.createTween(prop, value);
      adjustCSS(tween.elem, prop, rcssNum.exec(value), tween);
      return tween;
    }]
  },
  tweener: function tweener(props, callback) {
    if (_jQuery.isFunction(props)) {
      callback = props;
      props = ["*"];
    } else {
      props = props.match(rnotwhite);
    }

    var prop,
        index = 0,
        length = props.length;

    for (; index < length; index++) {
      prop = props[index];
      Animation.tweeners[prop] = Animation.tweeners[prop] || [];
      Animation.tweeners[prop].unshift(callback);
    }
  },
  prefilters: [defaultPrefilter],
  prefilter: function prefilter(callback, prepend) {
    if (prepend) {
      Animation.prefilters.unshift(callback);
    } else {
      Animation.prefilters.push(callback);
    }
  }
});

_jQuery.speed = function (speed, easing, fn) {
  var opt = speed && _typeof(speed) === "object" ? _jQuery.extend({}, speed) : {
    complete: fn || !fn && easing || _jQuery.isFunction(speed) && speed,
    duration: speed,
    easing: fn && easing || easing && !_jQuery.isFunction(easing) && easing
  };
  opt.duration = _jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration : opt.duration in _jQuery.fx.speeds ? _jQuery.fx.speeds[opt.duration] : _jQuery.fx.speeds._default; // normalize opt.queue - true/undefined/null -> "fx"

  if (opt.queue == null || opt.queue === true) {
    opt.queue = "fx";
  } // Queueing


  opt.old = opt.complete;

  opt.complete = function () {
    if (_jQuery.isFunction(opt.old)) {
      opt.old.call(this);
    }

    if (opt.queue) {
      _jQuery.dequeue(this, opt.queue);
    }
  };

  return opt;
};

_jQuery.fn.extend({
  fadeTo: function fadeTo(speed, to, easing, callback) {
    // show any hidden elements after setting opacity to 0
    return this.filter(isHidden).css("opacity", 0).show() // animate to the value specified
    .end().animate({
      opacity: to
    }, speed, easing, callback);
  },
  animate: function animate(prop, speed, easing, callback) {
    var empty = _jQuery.isEmptyObject(prop),
        optall = _jQuery.speed(speed, easing, callback),
        doAnimation = function doAnimation() {
      // Operate on a copy of prop so per-property easing won't be lost
      var anim = Animation(this, _jQuery.extend({}, prop), optall); // Empty animations, or finishing resolves immediately

      if (empty || _jQuery._data(this, "finish")) {
        anim.stop(true);
      }
    };

    doAnimation.finish = doAnimation;
    return empty || optall.queue === false ? this.each(doAnimation) : this.queue(optall.queue, doAnimation);
  },
  stop: function stop(type, clearQueue, gotoEnd) {
    var stopQueue = function stopQueue(hooks) {
      var stop = hooks.stop;
      delete hooks.stop;
      stop(gotoEnd);
    };

    if (typeof type !== "string") {
      gotoEnd = clearQueue;
      clearQueue = type;
      type = undefined;
    }

    if (clearQueue && type !== false) {
      this.queue(type || "fx", []);
    }

    return this.each(function () {
      var dequeue = true,
          index = type != null && type + "queueHooks",
          timers = _jQuery.timers,
          data = _jQuery._data(this);

      if (index) {
        if (data[index] && data[index].stop) {
          stopQueue(data[index]);
        }
      } else {
        for (index in data) {
          if (data[index] && data[index].stop && rrun.test(index)) {
            stopQueue(data[index]);
          }
        }
      }

      for (index = timers.length; index--;) {
        if (timers[index].elem === this && (type == null || timers[index].queue === type)) {
          timers[index].anim.stop(gotoEnd);
          dequeue = false;
          timers.splice(index, 1);
        }
      } // start the next in the queue if the last step wasn't forced
      // timers currently will call their complete callbacks, which will dequeue
      // but only if they were gotoEnd


      if (dequeue || !gotoEnd) {
        _jQuery.dequeue(this, type);
      }
    });
  },
  finish: function finish(type) {
    if (type !== false) {
      type = type || "fx";
    }

    return this.each(function () {
      var index,
          data = _jQuery._data(this),
          queue = data[type + "queue"],
          hooks = data[type + "queueHooks"],
          timers = _jQuery.timers,
          length = queue ? queue.length : 0; // enable finishing flag on private data


      data.finish = true; // empty the queue first

      _jQuery.queue(this, type, []);

      if (hooks && hooks.stop) {
        hooks.stop.call(this, true);
      } // look for any active animations, and finish them


      for (index = timers.length; index--;) {
        if (timers[index].elem === this && timers[index].queue === type) {
          timers[index].anim.stop(true);
          timers.splice(index, 1);
        }
      } // look for any animations in the old queue and finish them


      for (index = 0; index < length; index++) {
        if (queue[index] && queue[index].finish) {
          queue[index].finish.call(this);
        }
      } // turn off finishing flag


      delete data.finish;
    });
  }
});

_jQuery.each(["toggle", "show", "hide"], function (i, name) {
  var cssFn = _jQuery.fn[name];

  _jQuery.fn[name] = function (speed, easing, callback) {
    return speed == null || typeof speed === "boolean" ? cssFn.apply(this, arguments) : this.animate(genFx(name, true), speed, easing, callback);
  };
}); // Generate shortcuts for custom animations


_jQuery.each({
  slideDown: genFx("show"),
  slideUp: genFx("hide"),
  slideToggle: genFx("toggle"),
  fadeIn: {
    opacity: "show"
  },
  fadeOut: {
    opacity: "hide"
  },
  fadeToggle: {
    opacity: "toggle"
  }
}, function (name, props) {
  _jQuery.fn[name] = function (speed, easing, callback) {
    return this.animate(props, speed, easing, callback);
  };
});

_jQuery.timers = [];

_jQuery.fx.tick = function () {
  var timer,
      timers = _jQuery.timers,
      i = 0;
  fxNow = _jQuery.now();

  for (; i < timers.length; i++) {
    timer = timers[i]; // Checks the timer has not already been removed

    if (!timer() && timers[i] === timer) {
      timers.splice(i--, 1);
    }
  }

  if (!timers.length) {
    _jQuery.fx.stop();
  }

  fxNow = undefined;
};

_jQuery.fx.timer = function (timer) {
  _jQuery.timers.push(timer);

  if (timer()) {
    _jQuery.fx.start();
  } else {
    _jQuery.timers.pop();
  }
};

_jQuery.fx.interval = 13;

_jQuery.fx.start = function () {
  if (!timerId) {
    timerId = window.setInterval(_jQuery.fx.tick, _jQuery.fx.interval);
  }
};

_jQuery.fx.stop = function () {
  window.clearInterval(timerId);
  timerId = null;
};

_jQuery.fx.speeds = {
  slow: 600,
  fast: 200,
  // Default speed
  _default: 400
}; // Based off of the plugin by Clint Helfers, with permission.
// http://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/

_jQuery.fn.delay = function (time, type) {
  time = _jQuery.fx ? _jQuery.fx.speeds[time] || time : time;
  type = type || "fx";
  return this.queue(type, function (next, hooks) {
    var timeout = window.setTimeout(next, time);

    hooks.stop = function () {
      window.clearTimeout(timeout);
    };
  });
};

(function () {
  var a,
      input = document.createElement("input"),
      div = document.createElement("div"),
      select = document.createElement("select"),
      opt = select.appendChild(document.createElement("option")); // Setup

  div = document.createElement("div");
  div.setAttribute("className", "t");
  div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";
  a = div.getElementsByTagName("a")[0]; // Support: Windows Web Apps (WWA)
  // `type` must use .setAttribute for WWA (#14901)

  input.setAttribute("type", "checkbox");
  div.appendChild(input);
  a = div.getElementsByTagName("a")[0]; // First batch of tests.

  a.style.cssText = "top:1px"; // Test setAttribute on camelCase class.
  // If it works, we need attrFixes when doing get/setAttribute (ie6/7)

  support.getSetAttribute = div.className !== "t"; // Get the style information from getAttribute
  // (IE uses .cssText instead)

  support.style = /top/.test(a.getAttribute("style")); // Make sure that URLs aren't manipulated
  // (IE normalizes it by default)

  support.hrefNormalized = a.getAttribute("href") === "/a"; // Check the default checkbox/radio value ("" on WebKit; "on" elsewhere)

  support.checkOn = !!input.value; // Make sure that a selected-by-default option has a working selected property.
  // (WebKit defaults to false instead of true, IE too, if it's in an optgroup)

  support.optSelected = opt.selected; // Tests for enctype support on a form (#6743)

  support.enctype = !!document.createElement("form").enctype; // Make sure that the options inside disabled selects aren't marked as disabled
  // (WebKit marks them as disabled)

  select.disabled = true;
  support.optDisabled = !opt.disabled; // Support: IE8 only
  // Check if we can trust getAttribute("value")

  input = document.createElement("input");
  input.setAttribute("value", "");
  support.input = input.getAttribute("value") === ""; // Check if an input maintains its value after becoming a radio

  input.value = "t";
  input.setAttribute("type", "radio");
  support.radioValue = input.value === "t";
})();

var rreturn = /\r/g,
    rspaces = /[\x20\t\r\n\f]+/g;

_jQuery.fn.extend({
  val: function val(value) {
    var hooks,
        ret,
        isFunction,
        elem = this[0];

    if (!arguments.length) {
      if (elem) {
        hooks = _jQuery.valHooks[elem.type] || _jQuery.valHooks[elem.nodeName.toLowerCase()];

        if (hooks && "get" in hooks && (ret = hooks.get(elem, "value")) !== undefined) {
          return ret;
        }

        ret = elem.value;
        return typeof ret === "string" ? // handle most common string cases
        ret.replace(rreturn, "") : // handle cases where value is null/undef or number
        ret == null ? "" : ret;
      }

      return;
    }

    isFunction = _jQuery.isFunction(value);
    return this.each(function (i) {
      var val;

      if (this.nodeType !== 1) {
        return;
      }

      if (isFunction) {
        val = value.call(this, i, _jQuery(this).val());
      } else {
        val = value;
      } // Treat null/undefined as ""; convert numbers to string


      if (val == null) {
        val = "";
      } else if (typeof val === "number") {
        val += "";
      } else if (_jQuery.isArray(val)) {
        val = _jQuery.map(val, function (value) {
          return value == null ? "" : value + "";
        });
      }

      hooks = _jQuery.valHooks[this.type] || _jQuery.valHooks[this.nodeName.toLowerCase()]; // If set returns undefined, fall back to normal setting

      if (!hooks || !("set" in hooks) || hooks.set(this, val, "value") === undefined) {
        this.value = val;
      }
    });
  }
});

_jQuery.extend({
  valHooks: {
    option: {
      get: function get(elem) {
        var val = _jQuery.find.attr(elem, "value");

        return val != null ? val : // Support: IE10-11+
        // option.text throws exceptions (#14686, #14858)
        // Strip and collapse whitespace
        // https://html.spec.whatwg.org/#strip-and-collapse-whitespace
        _jQuery.trim(_jQuery.text(elem)).replace(rspaces, " ");
      }
    },
    select: {
      get: function get(elem) {
        var value,
            option,
            options = elem.options,
            index = elem.selectedIndex,
            one = elem.type === "select-one" || index < 0,
            values = one ? null : [],
            max = one ? index + 1 : options.length,
            i = index < 0 ? max : one ? index : 0; // Loop through all the selected options

        for (; i < max; i++) {
          option = options[i]; // oldIE doesn't update selected after form reset (#2551)

          if ((option.selected || i === index) && ( // Don't return options that are disabled or in a disabled optgroup
          support.optDisabled ? !option.disabled : option.getAttribute("disabled") === null) && (!option.parentNode.disabled || !_jQuery.nodeName(option.parentNode, "optgroup"))) {
            // Get the specific value for the option
            value = _jQuery(option).val(); // We don't need an array for one selects

            if (one) {
              return value;
            } // Multi-Selects return an array


            values.push(value);
          }
        }

        return values;
      },
      set: function set(elem, value) {
        var optionSet,
            option,
            options = elem.options,
            values = _jQuery.makeArray(value),
            i = options.length;

        while (i--) {
          option = options[i];

          if (_jQuery.inArray(_jQuery.valHooks.option.get(option), values) > -1) {
            // Support: IE6
            // When new option element is added to select box we need to
            // force reflow of newly added node in order to workaround delay
            // of initialization properties
            try {
              option.selected = optionSet = true;
            } catch (_) {
              // Will be executed only in IE6
              option.scrollHeight;
            }
          } else {
            option.selected = false;
          }
        } // Force browsers to behave consistently when non-matching value is set


        if (!optionSet) {
          elem.selectedIndex = -1;
        }

        return options;
      }
    }
  }
}); // Radios and checkboxes getter/setter


_jQuery.each(["radio", "checkbox"], function () {
  _jQuery.valHooks[this] = {
    set: function set(elem, value) {
      if (_jQuery.isArray(value)) {
        return elem.checked = _jQuery.inArray(_jQuery(elem).val(), value) > -1;
      }
    }
  };

  if (!support.checkOn) {
    _jQuery.valHooks[this].get = function (elem) {
      return elem.getAttribute("value") === null ? "on" : elem.value;
    };
  }
});

var nodeHook,
    boolHook,
    attrHandle = _jQuery.expr.attrHandle,
    ruseDefault = /^(?:checked|selected)$/i,
    getSetAttribute = support.getSetAttribute,
    getSetInput = support.input;

_jQuery.fn.extend({
  attr: function attr(name, value) {
    return access(this, _jQuery.attr, name, value, arguments.length > 1);
  },
  removeAttr: function removeAttr(name) {
    return this.each(function () {
      _jQuery.removeAttr(this, name);
    });
  }
});

_jQuery.extend({
  attr: function attr(elem, name, value) {
    var ret,
        hooks,
        nType = elem.nodeType; // Don't get/set attributes on text, comment and attribute nodes

    if (nType === 3 || nType === 8 || nType === 2) {
      return;
    } // Fallback to prop when attributes are not supported


    if (typeof elem.getAttribute === "undefined") {
      return _jQuery.prop(elem, name, value);
    } // All attributes are lowercase
    // Grab necessary hook if one is defined


    if (nType !== 1 || !_jQuery.isXMLDoc(elem)) {
      name = name.toLowerCase();
      hooks = _jQuery.attrHooks[name] || (_jQuery.expr.match.bool.test(name) ? boolHook : nodeHook);
    }

    if (value !== undefined) {
      if (value === null) {
        _jQuery.removeAttr(elem, name);

        return;
      }

      if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {
        return ret;
      }

      elem.setAttribute(name, value + "");
      return value;
    }

    if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
      return ret;
    }

    ret = _jQuery.find.attr(elem, name); // Non-existent attributes return null, we normalize to undefined

    return ret == null ? undefined : ret;
  },
  attrHooks: {
    type: {
      set: function set(elem, value) {
        if (!support.radioValue && value === "radio" && _jQuery.nodeName(elem, "input")) {
          // Setting the type on a radio button after the value resets the value in IE8-9
          // Reset value to default in case type is set after value during creation
          var val = elem.value;
          elem.setAttribute("type", value);

          if (val) {
            elem.value = val;
          }

          return value;
        }
      }
    }
  },
  removeAttr: function removeAttr(elem, value) {
    var name,
        propName,
        i = 0,
        attrNames = value && value.match(rnotwhite);

    if (attrNames && elem.nodeType === 1) {
      while (name = attrNames[i++]) {
        propName = _jQuery.propFix[name] || name; // Boolean attributes get special treatment (#10870)

        if (_jQuery.expr.match.bool.test(name)) {
          // Set corresponding property to false
          if (getSetInput && getSetAttribute || !ruseDefault.test(name)) {
            elem[propName] = false; // Support: IE<9
            // Also clear defaultChecked/defaultSelected (if appropriate)
          } else {
            elem[_jQuery.camelCase("default-" + name)] = elem[propName] = false;
          } // See #9699 for explanation of this approach (setting first, then removal)

        } else {
          _jQuery.attr(elem, name, "");
        }

        elem.removeAttribute(getSetAttribute ? name : propName);
      }
    }
  }
}); // Hooks for boolean attributes


boolHook = {
  set: function set(elem, value, name) {
    if (value === false) {
      // Remove boolean attributes when set to false
      _jQuery.removeAttr(elem, name);
    } else if (getSetInput && getSetAttribute || !ruseDefault.test(name)) {
      // IE<8 needs the *property* name
      elem.setAttribute(!getSetAttribute && _jQuery.propFix[name] || name, name);
    } else {
      // Support: IE<9
      // Use defaultChecked and defaultSelected for oldIE
      elem[_jQuery.camelCase("default-" + name)] = elem[name] = true;
    }

    return name;
  }
};

_jQuery.each(_jQuery.expr.match.bool.source.match(/\w+/g), function (i, name) {
  var getter = attrHandle[name] || _jQuery.find.attr;

  if (getSetInput && getSetAttribute || !ruseDefault.test(name)) {
    attrHandle[name] = function (elem, name, isXML) {
      var ret, handle;

      if (!isXML) {
        // Avoid an infinite loop by temporarily removing this function from the getter
        handle = attrHandle[name];
        attrHandle[name] = ret;
        ret = getter(elem, name, isXML) != null ? name.toLowerCase() : null;
        attrHandle[name] = handle;
      }

      return ret;
    };
  } else {
    attrHandle[name] = function (elem, name, isXML) {
      if (!isXML) {
        return elem[_jQuery.camelCase("default-" + name)] ? name.toLowerCase() : null;
      }
    };
  }
}); // fix oldIE attroperties


if (!getSetInput || !getSetAttribute) {
  _jQuery.attrHooks.value = {
    set: function set(elem, value, name) {
      if (_jQuery.nodeName(elem, "input")) {
        // Does not return so that setAttribute is also used
        elem.defaultValue = value;
      } else {
        // Use nodeHook if defined (#1954); otherwise setAttribute is fine
        return nodeHook && nodeHook.set(elem, value, name);
      }
    }
  };
} // IE6/7 do not support getting/setting some attributes with get/setAttribute


if (!getSetAttribute) {
  // Use this for any attribute in IE6/7
  // This fixes almost every IE6/7 issue
  nodeHook = {
    set: function set(elem, value, name) {
      // Set the existing or create a new attribute node
      var ret = elem.getAttributeNode(name);

      if (!ret) {
        elem.setAttributeNode(ret = elem.ownerDocument.createAttribute(name));
      }

      ret.value = value += ""; // Break association with cloned elements by also using setAttribute (#9646)

      if (name === "value" || value === elem.getAttribute(name)) {
        return value;
      }
    }
  }; // Some attributes are constructed with empty-string values when not defined

  attrHandle.id = attrHandle.name = attrHandle.coords = function (elem, name, isXML) {
    var ret;

    if (!isXML) {
      return (ret = elem.getAttributeNode(name)) && ret.value !== "" ? ret.value : null;
    }
  }; // Fixing value retrieval on a button requires this module


  _jQuery.valHooks.button = {
    get: function get(elem, name) {
      var ret = elem.getAttributeNode(name);

      if (ret && ret.specified) {
        return ret.value;
      }
    },
    set: nodeHook.set
  }; // Set contenteditable to false on removals(#10429)
  // Setting to empty string throws an error as an invalid value

  _jQuery.attrHooks.contenteditable = {
    set: function set(elem, value, name) {
      nodeHook.set(elem, value === "" ? false : value, name);
    }
  }; // Set width and height to auto instead of 0 on empty string( Bug #8150 )
  // This is for removals

  _jQuery.each(["width", "height"], function (i, name) {
    _jQuery.attrHooks[name] = {
      set: function set(elem, value) {
        if (value === "") {
          elem.setAttribute(name, "auto");
          return value;
        }
      }
    };
  });
}

if (!support.style) {
  _jQuery.attrHooks.style = {
    get: function get(elem) {
      // Return undefined in the case of empty string
      // Note: IE uppercases css property names, but if we were to .toLowerCase()
      // .cssText, that would destroy case sensitivity in URL's, like in "background"
      return elem.style.cssText || undefined;
    },
    set: function set(elem, value) {
      return elem.style.cssText = value + "";
    }
  };
}

var rfocusable = /^(?:input|select|textarea|button|object)$/i,
    rclickable = /^(?:a|area)$/i;

_jQuery.fn.extend({
  prop: function prop(name, value) {
    return access(this, _jQuery.prop, name, value, arguments.length > 1);
  },
  removeProp: function removeProp(name) {
    name = _jQuery.propFix[name] || name;
    return this.each(function () {
      // try/catch handles cases where IE balks (such as removing a property on window)
      try {
        this[name] = undefined;
        delete this[name];
      } catch (e) {}
    });
  }
});

_jQuery.extend({
  prop: function prop(elem, name, value) {
    var ret,
        hooks,
        nType = elem.nodeType; // Don't get/set properties on text, comment and attribute nodes

    if (nType === 3 || nType === 8 || nType === 2) {
      return;
    }

    if (nType !== 1 || !_jQuery.isXMLDoc(elem)) {
      // Fix name and attach hooks
      name = _jQuery.propFix[name] || name;
      hooks = _jQuery.propHooks[name];
    }

    if (value !== undefined) {
      if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {
        return ret;
      }

      return elem[name] = value;
    }

    if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
      return ret;
    }

    return elem[name];
  },
  propHooks: {
    tabIndex: {
      get: function get(elem) {
        // elem.tabIndex doesn't always return the
        // correct value when it hasn't been explicitly set
        // http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
        // Use proper attribute retrieval(#12072)
        var tabindex = _jQuery.find.attr(elem, "tabindex");

        return tabindex ? parseInt(tabindex, 10) : rfocusable.test(elem.nodeName) || rclickable.test(elem.nodeName) && elem.href ? 0 : -1;
      }
    }
  },
  propFix: {
    "for": "htmlFor",
    "class": "className"
  }
}); // Some attributes require a special call on IE
// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx


if (!support.hrefNormalized) {
  // href/src property should get the full normalized URL (#10299/#12915)
  _jQuery.each(["href", "src"], function (i, name) {
    _jQuery.propHooks[name] = {
      get: function get(elem) {
        return elem.getAttribute(name, 4);
      }
    };
  });
} // Support: Safari, IE9+
// Accessing the selectedIndex property
// forces the browser to respect setting selected
// on the option
// The getter ensures a default option is selected
// when in an optgroup


if (!support.optSelected) {
  _jQuery.propHooks.selected = {
    get: function get(elem) {
      var parent = elem.parentNode;

      if (parent) {
        parent.selectedIndex; // Make sure that it also works with optgroups, see #5701

        if (parent.parentNode) {
          parent.parentNode.selectedIndex;
        }
      }

      return null;
    },
    set: function set(elem) {
      var parent = elem.parentNode;

      if (parent) {
        parent.selectedIndex;

        if (parent.parentNode) {
          parent.parentNode.selectedIndex;
        }
      }
    }
  };
}

_jQuery.each(["tabIndex", "readOnly", "maxLength", "cellSpacing", "cellPadding", "rowSpan", "colSpan", "useMap", "frameBorder", "contentEditable"], function () {
  _jQuery.propFix[this.toLowerCase()] = this;
}); // IE6/7 call enctype encoding


if (!support.enctype) {
  _jQuery.propFix.enctype = "encoding";
}

var rclass = /[\t\r\n\f]/g;

function getClass(elem) {
  return _jQuery.attr(elem, "class") || "";
}

_jQuery.fn.extend({
  addClass: function addClass(value) {
    var classes,
        elem,
        cur,
        curValue,
        clazz,
        j,
        finalValue,
        i = 0;

    if (_jQuery.isFunction(value)) {
      return this.each(function (j) {
        _jQuery(this).addClass(value.call(this, j, getClass(this)));
      });
    }

    if (typeof value === "string" && value) {
      classes = value.match(rnotwhite) || [];

      while (elem = this[i++]) {
        curValue = getClass(elem);
        cur = elem.nodeType === 1 && (" " + curValue + " ").replace(rclass, " ");

        if (cur) {
          j = 0;

          while (clazz = classes[j++]) {
            if (cur.indexOf(" " + clazz + " ") < 0) {
              cur += clazz + " ";
            }
          } // only assign if different to avoid unneeded rendering.


          finalValue = _jQuery.trim(cur);

          if (curValue !== finalValue) {
            _jQuery.attr(elem, "class", finalValue);
          }
        }
      }
    }

    return this;
  },
  removeClass: function removeClass(value) {
    var classes,
        elem,
        cur,
        curValue,
        clazz,
        j,
        finalValue,
        i = 0;

    if (_jQuery.isFunction(value)) {
      return this.each(function (j) {
        _jQuery(this).removeClass(value.call(this, j, getClass(this)));
      });
    }

    if (!arguments.length) {
      return this.attr("class", "");
    }

    if (typeof value === "string" && value) {
      classes = value.match(rnotwhite) || [];

      while (elem = this[i++]) {
        curValue = getClass(elem); // This expression is here for better compressibility (see addClass)

        cur = elem.nodeType === 1 && (" " + curValue + " ").replace(rclass, " ");

        if (cur) {
          j = 0;

          while (clazz = classes[j++]) {
            // Remove *all* instances
            while (cur.indexOf(" " + clazz + " ") > -1) {
              cur = cur.replace(" " + clazz + " ", " ");
            }
          } // Only assign if different to avoid unneeded rendering.


          finalValue = _jQuery.trim(cur);

          if (curValue !== finalValue) {
            _jQuery.attr(elem, "class", finalValue);
          }
        }
      }
    }

    return this;
  },
  toggleClass: function toggleClass(value, stateVal) {
    var type = _typeof(value);

    if (typeof stateVal === "boolean" && type === "string") {
      return stateVal ? this.addClass(value) : this.removeClass(value);
    }

    if (_jQuery.isFunction(value)) {
      return this.each(function (i) {
        _jQuery(this).toggleClass(value.call(this, i, getClass(this), stateVal), stateVal);
      });
    }

    return this.each(function () {
      var className, i, self, classNames;

      if (type === "string") {
        // Toggle individual class names
        i = 0;
        self = _jQuery(this);
        classNames = value.match(rnotwhite) || [];

        while (className = classNames[i++]) {
          // Check each className given, space separated list
          if (self.hasClass(className)) {
            self.removeClass(className);
          } else {
            self.addClass(className);
          }
        } // Toggle whole class name

      } else if (value === undefined || type === "boolean") {
        className = getClass(this);

        if (className) {
          // store className if set
          _jQuery._data(this, "__className__", className);
        } // If the element has a class name or if we're passed "false",
        // then remove the whole classname (if there was one, the above saved it).
        // Otherwise bring back whatever was previously saved (if anything),
        // falling back to the empty string if nothing was stored.


        _jQuery.attr(this, "class", className || value === false ? "" : _jQuery._data(this, "__className__") || "");
      }
    });
  },
  hasClass: function hasClass(selector) {
    var className,
        elem,
        i = 0;
    className = " " + selector + " ";

    while (elem = this[i++]) {
      if (elem.nodeType === 1 && (" " + getClass(elem) + " ").replace(rclass, " ").indexOf(className) > -1) {
        return true;
      }
    }

    return false;
  }
}); // Return jQuery for attributes-only inclusion


_jQuery.each(("blur focus focusin focusout load resize scroll unload click dblclick " + "mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " + "change select submit keydown keypress keyup error contextmenu").split(" "), function (i, name) {
  // Handle event binding
  _jQuery.fn[name] = function (data, fn) {
    return arguments.length > 0 ? this.on(name, null, data, fn) : this.trigger(name);
  };
});

_jQuery.fn.extend({
  hover: function hover(fnOver, fnOut) {
    return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);
  }
});

var location = window.location;

var nonce = _jQuery.now();

var rquery = /\?/;
var rvalidtokens = /(,)|(\[|{)|(}|])|"(?:[^"\\\r\n]|\\["\\\/bfnrt]|\\u[\da-fA-F]{4})*"\s*:?|true|false|null|-?(?!0\d)\d+(?:\.\d+|)(?:[eE][+-]?\d+|)/g;

_jQuery.parseJSON = function (data) {
  // Attempt to parse using the native JSON parser first
  if (window.JSON && window.JSON.parse) {
    // Support: Android 2.3
    // Workaround failure to string-cast null input
    return window.JSON.parse(data + "");
  }

  var requireNonComma,
      depth = null,
      str = _jQuery.trim(data + ""); // Guard against invalid (and possibly dangerous) input by ensuring that nothing remains
  // after removing valid tokens


  return str && !_jQuery.trim(str.replace(rvalidtokens, function (token, comma, open, close) {
    // Force termination if we see a misplaced comma
    if (requireNonComma && comma) {
      depth = 0;
    } // Perform no more replacements after returning to outermost depth


    if (depth === 0) {
      return token;
    } // Commas must not follow "[", "{", or ","


    requireNonComma = open || comma; // Determine new depth
    // array/object open ("[" or "{"): depth += true - false (increment)
    // array/object close ("]" or "}"): depth += false - true (decrement)
    // other cases ("," or primitive): depth += true - true (numeric cast)

    depth += !close - !open; // Remove this token

    return "";
  })) ? Function("return " + str)() : _jQuery.error("Invalid JSON: " + data);
}; // Cross-browser xml parsing


_jQuery.parseXML = function (data) {
  var xml, tmp;

  if (!data || typeof data !== "string") {
    return null;
  }

  try {
    if (window.DOMParser) {
      // Standard
      tmp = new window.DOMParser();
      xml = tmp.parseFromString(data, "text/xml");
    } else {
      // IE
      xml = new window.ActiveXObject("Microsoft.XMLDOM");
      xml.async = "false";
      xml.loadXML(data);
    }
  } catch (e) {
    xml = undefined;
  }

  if (!xml || !xml.documentElement || xml.getElementsByTagName("parsererror").length) {
    _jQuery.error("Invalid XML: " + data);
  }

  return xml;
};

var rhash = /#.*$/,
    rts = /([?&])_=[^&]*/,
    // IE leaves an \r character at EOL
rheaders = /^(.*?):[ \t]*([^\r\n]*)\r?$/mg,
    // #7653, #8125, #8152: local protocol detection
rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
    rnoContent = /^(?:GET|HEAD)$/,
    rprotocol = /^\/\//,
    rurl = /^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,

/* Prefilters
     * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
     * 2) These are called:
     *    - BEFORE asking for a transport
     *    - AFTER param serialization (s.data is a string if s.processData is true)
     * 3) key is the dataType
     * 4) the catchall symbol "*" can be used
     * 5) execution will start with transport dataType and THEN continue down to "*" if needed
     */
prefilters = {},

/* Transports bindings
     * 1) key is the dataType
     * 2) the catchall symbol "*" can be used
     * 3) selection will start with transport dataType and THEN go to "*" if needed
     */
transports = {},
    // Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
allTypes = "*/".concat("*"),
    // Document location
ajaxLocation = location.href,
    // Segment location into parts
ajaxLocParts = rurl.exec(ajaxLocation.toLowerCase()) || []; // Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport

function addToPrefiltersOrTransports(structure) {
  // dataTypeExpression is optional and defaults to "*"
  return function (dataTypeExpression, func) {
    if (typeof dataTypeExpression !== "string") {
      func = dataTypeExpression;
      dataTypeExpression = "*";
    }

    var dataType,
        i = 0,
        dataTypes = dataTypeExpression.toLowerCase().match(rnotwhite) || [];

    if (_jQuery.isFunction(func)) {
      // For each dataType in the dataTypeExpression
      while (dataType = dataTypes[i++]) {
        // Prepend if requested
        if (dataType.charAt(0) === "+") {
          dataType = dataType.slice(1) || "*";
          (structure[dataType] = structure[dataType] || []).unshift(func); // Otherwise append
        } else {
          (structure[dataType] = structure[dataType] || []).push(func);
        }
      }
    }
  };
} // Base inspection function for prefilters and transports


function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR) {
  var inspected = {},
      seekingTransport = structure === transports;

  function inspect(dataType) {
    var selected;
    inspected[dataType] = true;

    _jQuery.each(structure[dataType] || [], function (_, prefilterOrFactory) {
      var dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR);

      if (typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[dataTypeOrTransport]) {
        options.dataTypes.unshift(dataTypeOrTransport);
        inspect(dataTypeOrTransport);
        return false;
      } else if (seekingTransport) {
        return !(selected = dataTypeOrTransport);
      }
    });

    return selected;
  }

  return inspect(options.dataTypes[0]) || !inspected["*"] && inspect("*");
} // A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887


function ajaxExtend(target, src) {
  var deep,
      key,
      flatOptions = _jQuery.ajaxSettings.flatOptions || {};

  for (key in src) {
    if (src[key] !== undefined) {
      (flatOptions[key] ? target : deep || (deep = {}))[key] = src[key];
    }
  }

  if (deep) {
    _jQuery.extend(true, target, deep);
  }

  return target;
}
/* Handles responses to an ajax request:
     * - finds the right dataType (mediates between content-type and expected dataType)
     * - returns the corresponding response
     */


function ajaxHandleResponses(s, jqXHR, responses) {
  var firstDataType,
      ct,
      finalDataType,
      type,
      contents = s.contents,
      dataTypes = s.dataTypes; // Remove auto dataType and get content-type in the process

  while (dataTypes[0] === "*") {
    dataTypes.shift();

    if (ct === undefined) {
      ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
    }
  } // Check if we're dealing with a known content-type


  if (ct) {
    for (type in contents) {
      if (contents[type] && contents[type].test(ct)) {
        dataTypes.unshift(type);
        break;
      }
    }
  } // Check to see if we have a response for the expected dataType


  if (dataTypes[0] in responses) {
    finalDataType = dataTypes[0];
  } else {
    // Try convertible dataTypes
    for (type in responses) {
      if (!dataTypes[0] || s.converters[type + " " + dataTypes[0]]) {
        finalDataType = type;
        break;
      }

      if (!firstDataType) {
        firstDataType = type;
      }
    } // Or just use first one


    finalDataType = finalDataType || firstDataType;
  } // If we found a dataType
  // We add the dataType to the list if needed
  // and return the corresponding response


  if (finalDataType) {
    if (finalDataType !== dataTypes[0]) {
      dataTypes.unshift(finalDataType);
    }

    return responses[finalDataType];
  }
}
/* Chain conversions given the request and the original response
     * Also sets the responseXXX fields on the jqXHR instance
     */


function ajaxConvert(s, response, jqXHR, isSuccess) {
  var conv2,
      current,
      conv,
      tmp,
      prev,
      converters = {},
      // Work with a copy of dataTypes in case we need to modify it for conversion
  dataTypes = s.dataTypes.slice(); // Create converters map with lowercased keys

  if (dataTypes[1]) {
    for (conv in s.converters) {
      converters[conv.toLowerCase()] = s.converters[conv];
    }
  }

  current = dataTypes.shift(); // Convert to each sequential dataType

  while (current) {
    if (s.responseFields[current]) {
      jqXHR[s.responseFields[current]] = response;
    } // Apply the dataFilter if provided


    if (!prev && isSuccess && s.dataFilter) {
      response = s.dataFilter(response, s.dataType);
    }

    prev = current;
    current = dataTypes.shift();

    if (current) {
      // There's only work to do if current dataType is non-auto
      if (current === "*") {
        current = prev; // Convert response if prev dataType is non-auto and differs from current
      } else if (prev !== "*" && prev !== current) {
        // Seek a direct converter
        conv = converters[prev + " " + current] || converters["* " + current]; // If none found, seek a pair

        if (!conv) {
          for (conv2 in converters) {
            // If conv2 outputs current
            tmp = conv2.split(" ");

            if (tmp[1] === current) {
              // If prev can be converted to accepted input
              conv = converters[prev + " " + tmp[0]] || converters["* " + tmp[0]];

              if (conv) {
                // Condense equivalence converters
                if (conv === true) {
                  conv = converters[conv2]; // Otherwise, insert the intermediate dataType
                } else if (converters[conv2] !== true) {
                  current = tmp[0];
                  dataTypes.unshift(tmp[1]);
                }

                break;
              }
            }
          }
        } // Apply converter (if not an equivalence)


        if (conv !== true) {
          // Unless errors are allowed to bubble, catch and return them
          if (conv && s["throws"]) {
            // jscs:ignore requireDotNotation
            response = conv(response);
          } else {
            try {
              response = conv(response);
            } catch (e) {
              return {
                state: "parsererror",
                error: conv ? e : "No conversion from " + prev + " to " + current
              };
            }
          }
        }
      }
    }
  }

  return {
    state: "success",
    data: response
  };
}

_jQuery.extend({
  // Counter for holding the number of active queries
  active: 0,
  // Last-Modified header cache for next request
  lastModified: {},
  etag: {},
  ajaxSettings: {
    url: ajaxLocation,
    type: "GET",
    isLocal: rlocalProtocol.test(ajaxLocParts[1]),
    global: true,
    processData: true,
    async: true,
    contentType: "application/x-www-form-urlencoded; charset=UTF-8",

    /*
         timeout: 0,
         data: null,
         dataType: null,
         username: null,
         password: null,
         cache: null,
         throws: false,
         traditional: false,
         headers: {},
         */
    accepts: {
      "*": allTypes,
      text: "text/plain",
      html: "text/html",
      xml: "application/xml, text/xml",
      json: "application/json, text/javascript"
    },
    contents: {
      xml: /\bxml\b/,
      html: /\bhtml/,
      json: /\bjson\b/
    },
    responseFields: {
      xml: "responseXML",
      text: "responseText",
      json: "responseJSON"
    },
    // Data converters
    // Keys separate source (or catchall "*") and destination types with a single space
    converters: {
      // Convert anything to text
      "* text": String,
      // Text to html (true = no transformation)
      "text html": true,
      // Evaluate text as a json expression
      "text json": _jQuery.parseJSON,
      // Parse text as xml
      "text xml": _jQuery.parseXML
    },
    // For options that shouldn't be deep extended:
    // you can add your own custom options here if
    // and when you create one that shouldn't be
    // deep extended (see ajaxExtend)
    flatOptions: {
      url: true,
      context: true
    }
  },
  // Creates a full fledged settings object into target
  // with both ajaxSettings and settings fields.
  // If target is omitted, writes into ajaxSettings.
  ajaxSetup: function ajaxSetup(target, settings) {
    return settings ? // Building a settings object
    ajaxExtend(ajaxExtend(target, _jQuery.ajaxSettings), settings) : // Extending ajaxSettings
    ajaxExtend(_jQuery.ajaxSettings, target);
  },
  ajaxPrefilter: addToPrefiltersOrTransports(prefilters),
  ajaxTransport: addToPrefiltersOrTransports(transports),
  // Main method
  ajax: function ajax(url, options) {
    // If url is an object, simulate pre-1.5 signature
    if (_typeof(url) === "object") {
      options = url;
      url = undefined;
    } // Force options to be an object


    options = options || {};

    var // Cross-domain detection vars
    parts,
        // Loop variable
    i,
        // URL without anti-cache param
    cacheURL,
        // Response headers as string
    responseHeadersString,
        // timeout handle
    timeoutTimer,
        // To know if global events are to be dispatched
    fireGlobals,
        transport,
        // Response headers
    responseHeaders,
        // Create the final options object
    s = _jQuery.ajaxSetup({}, options),
        // Callbacks context
    callbackContext = s.context || s,
        // Context for global events is callbackContext if it is a DOM node or jQuery collection
    globalEventContext = s.context && (callbackContext.nodeType || callbackContext.jquery) ? _jQuery(callbackContext) : _jQuery.event,
        // Deferreds
    deferred = _jQuery.Deferred(),
        completeDeferred = _jQuery.Callbacks("once memory"),
        // Status-dependent callbacks
    _statusCode = s.statusCode || {},
        // Headers (they are sent all at once)
    requestHeaders = {},
        requestHeadersNames = {},
        // The jqXHR state
    state = 0,
        // Default abort message
    strAbort = "canceled",
        // Fake xhr
    jqXHR = {
      readyState: 0,
      // Builds headers hashtable if needed
      getResponseHeader: function getResponseHeader(key) {
        var match;

        if (state === 2) {
          if (!responseHeaders) {
            responseHeaders = {};

            while (match = rheaders.exec(responseHeadersString)) {
              responseHeaders[match[1].toLowerCase()] = match[2];
            }
          }

          match = responseHeaders[key.toLowerCase()];
        }

        return match == null ? null : match;
      },
      // Raw string
      getAllResponseHeaders: function getAllResponseHeaders() {
        return state === 2 ? responseHeadersString : null;
      },
      // Caches the header
      setRequestHeader: function setRequestHeader(name, value) {
        var lname = name.toLowerCase();

        if (!state) {
          name = requestHeadersNames[lname] = requestHeadersNames[lname] || name;
          requestHeaders[name] = value;
        }

        return this;
      },
      // Overrides response content-type header
      overrideMimeType: function overrideMimeType(type) {
        if (!state) {
          s.mimeType = type;
        }

        return this;
      },
      // Status-dependent callbacks
      statusCode: function statusCode(map) {
        var code;

        if (map) {
          if (state < 2) {
            for (code in map) {
              // Lazy-add the new callback in a way that preserves old ones
              _statusCode[code] = [_statusCode[code], map[code]];
            }
          } else {
            // Execute the appropriate callbacks
            jqXHR.always(map[jqXHR.status]);
          }
        }

        return this;
      },
      // Cancel the request
      abort: function abort(statusText) {
        var finalText = statusText || strAbort;

        if (transport) {
          transport.abort(finalText);
        }

        done(0, finalText);
        return this;
      }
    }; // Attach deferreds


    deferred.promise(jqXHR).complete = completeDeferred.add;
    jqXHR.success = jqXHR.done;
    jqXHR.error = jqXHR.fail; // Remove hash character (#7531: and string promotion)
    // Add protocol if not provided (#5866: IE7 issue with protocol-less urls)
    // Handle falsy url in the settings object (#10093: consistency with old signature)
    // We also use the url parameter if available

    s.url = ((url || s.url || ajaxLocation) + "").replace(rhash, "").replace(rprotocol, ajaxLocParts[1] + "//"); // Alias method option to type as per ticket #12004

    s.type = options.method || options.type || s.method || s.type; // Extract dataTypes list

    s.dataTypes = _jQuery.trim(s.dataType || "*").toLowerCase().match(rnotwhite) || [""]; // A cross-domain request is in order when we have a protocol:host:port mismatch

    if (s.crossDomain == null) {
      parts = rurl.exec(s.url.toLowerCase());
      s.crossDomain = !!(parts && (parts[1] !== ajaxLocParts[1] || parts[2] !== ajaxLocParts[2] || (parts[3] || (parts[1] === "http:" ? "80" : "443")) !== (ajaxLocParts[3] || (ajaxLocParts[1] === "http:" ? "80" : "443"))));
    } // Convert data if not already a string


    if (s.data && s.processData && typeof s.data !== "string") {
      s.data = _jQuery.param(s.data, s.traditional);
    } // Apply prefilters


    inspectPrefiltersOrTransports(prefilters, s, options, jqXHR); // If request was aborted inside a prefilter, stop there

    if (state === 2) {
      return jqXHR;
    } // We can fire global events as of now if asked to
    // Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)


    fireGlobals = _jQuery.event && s.global; // Watch for a new set of requests

    if (fireGlobals && _jQuery.active++ === 0) {
      _jQuery.event.trigger("ajaxStart");
    } // Uppercase the type


    s.type = s.type.toUpperCase(); // Determine if request has content

    s.hasContent = !rnoContent.test(s.type); // Save the URL in case we're toying with the If-Modified-Since
    // and/or If-None-Match header later on

    cacheURL = s.url; // More options handling for requests with no content

    if (!s.hasContent) {
      // If data is available, append data to url
      if (s.data) {
        cacheURL = s.url += (rquery.test(cacheURL) ? "&" : "?") + s.data; // #9682: remove data so that it's not used in an eventual retry

        delete s.data;
      } // Add anti-cache in url if needed


      if (s.cache === false) {
        s.url = rts.test(cacheURL) ? // If there is already a '_' parameter, set its value
        cacheURL.replace(rts, "$1_=" + nonce++) : // Otherwise add one to the end
        cacheURL + (rquery.test(cacheURL) ? "&" : "?") + "_=" + nonce++;
      }
    } // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.


    if (s.ifModified) {
      if (_jQuery.lastModified[cacheURL]) {
        jqXHR.setRequestHeader("If-Modified-Since", _jQuery.lastModified[cacheURL]);
      }

      if (_jQuery.etag[cacheURL]) {
        jqXHR.setRequestHeader("If-None-Match", _jQuery.etag[cacheURL]);
      }
    } // Set the correct header, if data is being sent


    if (s.data && s.hasContent && s.contentType !== false || options.contentType) {
      jqXHR.setRequestHeader("Content-Type", s.contentType);
    } // Set the Accepts header for the server, depending on the dataType


    jqXHR.setRequestHeader("Accept", s.dataTypes[0] && s.accepts[s.dataTypes[0]] ? s.accepts[s.dataTypes[0]] + (s.dataTypes[0] !== "*" ? ", " + allTypes + "; q=0.01" : "") : s.accepts["*"]); // Check for headers option

    for (i in s.headers) {
      jqXHR.setRequestHeader(i, s.headers[i]);
    } // Allow custom headers/mimetypes and early abort


    if (s.beforeSend && (s.beforeSend.call(callbackContext, jqXHR, s) === false || state === 2)) {
      // Abort if not done already and return
      return jqXHR.abort();
    } // aborting is no longer a cancellation


    strAbort = "abort"; // Install callbacks on deferreds

    for (i in {
      success: 1,
      error: 1,
      complete: 1
    }) {
      jqXHR[i](s[i]);
    } // Get transport


    transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR); // If no transport, we auto-abort

    if (!transport) {
      done(-1, "No Transport");
    } else {
      jqXHR.readyState = 1; // Send global event

      if (fireGlobals) {
        globalEventContext.trigger("ajaxSend", [jqXHR, s]);
      } // If request was aborted inside ajaxSend, stop there


      if (state === 2) {
        return jqXHR;
      } // Timeout


      if (s.async && s.timeout > 0) {
        timeoutTimer = window.setTimeout(function () {
          jqXHR.abort("timeout");
        }, s.timeout);
      }

      try {
        state = 1;
        transport.send(requestHeaders, done);
      } catch (e) {
        // Propagate exception as error if not done
        if (state < 2) {
          done(-1, e); // Simply rethrow otherwise
        } else {
          throw e;
        }
      }
    } // Callback for when everything is done


    function done(status, nativeStatusText, responses, headers) {
      var isSuccess,
          success,
          error,
          response,
          modified,
          statusText = nativeStatusText; // Called once

      if (state === 2) {
        return;
      } // State is "done" now


      state = 2; // Clear timeout if it exists

      if (timeoutTimer) {
        window.clearTimeout(timeoutTimer);
      } // Dereference transport for early garbage collection
      // (no matter how long the jqXHR object will be used)


      transport = undefined; // Cache response headers

      responseHeadersString = headers || ""; // Set readyState

      jqXHR.readyState = status > 0 ? 4 : 0; // Determine if successful

      isSuccess = status >= 200 && status < 300 || status === 304; // Get response data

      if (responses) {
        response = ajaxHandleResponses(s, jqXHR, responses);
      } // Convert no matter what (that way responseXXX fields are always set)


      response = ajaxConvert(s, response, jqXHR, isSuccess); // If successful, handle type chaining

      if (isSuccess) {
        // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
        if (s.ifModified) {
          modified = jqXHR.getResponseHeader("Last-Modified");

          if (modified) {
            _jQuery.lastModified[cacheURL] = modified;
          }

          modified = jqXHR.getResponseHeader("etag");

          if (modified) {
            _jQuery.etag[cacheURL] = modified;
          }
        } // if no content


        if (status === 204 || s.type === "HEAD") {
          statusText = "nocontent"; // if not modified
        } else if (status === 304) {
          statusText = "notmodified"; // If we have data, let's convert it
        } else {
          statusText = response.state;
          success = response.data;
          error = response.error;
          isSuccess = !error;
        }
      } else {
        // We extract error from statusText
        // then normalize statusText and status for non-aborts
        error = statusText;

        if (status || !statusText) {
          statusText = "error";

          if (status < 0) {
            status = 0;
          }
        }
      } // Set data for the fake xhr object


      jqXHR.status = status;
      jqXHR.statusText = (nativeStatusText || statusText) + ""; // Success/Error

      if (isSuccess) {
        deferred.resolveWith(callbackContext, [success, statusText, jqXHR]);
      } else {
        deferred.rejectWith(callbackContext, [jqXHR, statusText, error]);
      } // Status-dependent callbacks


      jqXHR.statusCode(_statusCode);
      _statusCode = undefined;

      if (fireGlobals) {
        globalEventContext.trigger(isSuccess ? "ajaxSuccess" : "ajaxError", [jqXHR, s, isSuccess ? success : error]);
      } // Complete


      completeDeferred.fireWith(callbackContext, [jqXHR, statusText]);

      if (fireGlobals) {
        globalEventContext.trigger("ajaxComplete", [jqXHR, s]); // Handle the global AJAX counter

        if (! --_jQuery.active) {
          _jQuery.event.trigger("ajaxStop");
        }
      }
    }

    return jqXHR;
  },
  getJSON: function getJSON(url, data, callback) {
    return _jQuery.get(url, data, callback, "json");
  },
  getScript: function getScript(url, callback) {
    return _jQuery.get(url, undefined, callback, "script");
  }
});

_jQuery.each(["get", "post"], function (i, method) {
  _jQuery[method] = function (url, data, callback, type) {
    // shift arguments if data argument was omitted
    if (_jQuery.isFunction(data)) {
      type = type || callback;
      callback = data;
      data = undefined;
    } // The url can be an options object (which then must have .url)


    return _jQuery.ajax(_jQuery.extend({
      url: url,
      type: method,
      dataType: type,
      data: data,
      success: callback
    }, _jQuery.isPlainObject(url) && url));
  };
});

_jQuery._evalUrl = function (url) {
  return _jQuery.ajax({
    url: url,
    // Make this explicit, since user can override this through ajaxSetup (#11264)
    type: "GET",
    dataType: "script",
    cache: true,
    async: false,
    global: false,
    "throws": true
  });
};

_jQuery.fn.extend({
  wrapAll: function wrapAll(html) {
    if (_jQuery.isFunction(html)) {
      return this.each(function (i) {
        _jQuery(this).wrapAll(html.call(this, i));
      });
    }

    if (this[0]) {
      // The elements to wrap the target around
      var wrap = _jQuery(html, this[0].ownerDocument).eq(0).clone(true);

      if (this[0].parentNode) {
        wrap.insertBefore(this[0]);
      }

      wrap.map(function () {
        var elem = this;

        while (elem.firstChild && elem.firstChild.nodeType === 1) {
          elem = elem.firstChild;
        }

        return elem;
      }).append(this);
    }

    return this;
  },
  wrapInner: function wrapInner(html) {
    if (_jQuery.isFunction(html)) {
      return this.each(function (i) {
        _jQuery(this).wrapInner(html.call(this, i));
      });
    }

    return this.each(function () {
      var self = _jQuery(this),
          contents = self.contents();

      if (contents.length) {
        contents.wrapAll(html);
      } else {
        self.append(html);
      }
    });
  },
  wrap: function wrap(html) {
    var isFunction = _jQuery.isFunction(html);

    return this.each(function (i) {
      _jQuery(this).wrapAll(isFunction ? html.call(this, i) : html);
    });
  },
  unwrap: function unwrap() {
    return this.parent().each(function () {
      if (!_jQuery.nodeName(this, "body")) {
        _jQuery(this).replaceWith(this.childNodes);
      }
    }).end();
  }
});

function getDisplay(elem) {
  return elem.style && elem.style.display || _jQuery.css(elem, "display");
}

function filterHidden(elem) {
  // Disconnected elements are considered hidden
  if (!_jQuery.contains(elem.ownerDocument || document, elem)) {
    return true;
  }

  while (elem && elem.nodeType === 1) {
    if (getDisplay(elem) === "none" || elem.type === "hidden") {
      return true;
    }

    elem = elem.parentNode;
  }

  return false;
}

_jQuery.expr.filters.hidden = function (elem) {
  // Support: Opera <= 12.12
  // Opera reports offsetWidths and offsetHeights less than zero on some elements
  return support.reliableHiddenOffsets() ? elem.offsetWidth <= 0 && elem.offsetHeight <= 0 && !elem.getClientRects().length : filterHidden(elem);
};

_jQuery.expr.filters.visible = function (elem) {
  return !_jQuery.expr.filters.hidden(elem);
};

var r20 = /%20/g,
    rbracket = /\[\]$/,
    rCRLF = /\r?\n/g,
    rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
    rsubmittable = /^(?:input|select|textarea|keygen)/i;

function buildParams(prefix, obj, traditional, add) {
  var name;

  if (_jQuery.isArray(obj)) {
    // Serialize array item.
    _jQuery.each(obj, function (i, v) {
      if (traditional || rbracket.test(prefix)) {
        // Treat each array item as a scalar.
        add(prefix, v);
      } else {
        // Item is non-scalar (array or object), encode its numeric index.
        buildParams(prefix + "[" + (_typeof(v) === "object" && v != null ? i : "") + "]", v, traditional, add);
      }
    });
  } else if (!traditional && _jQuery.type(obj) === "object") {
    // Serialize object item.
    for (name in obj) {
      buildParams(prefix + "[" + name + "]", obj[name], traditional, add);
    }
  } else {
    // Serialize scalar item.
    add(prefix, obj);
  }
} // Serialize an array of form elements or a set of
// key/values into a query string


_jQuery.param = function (a, traditional) {
  var prefix,
      s = [],
      add = function add(key, value) {
    // If value is a function, invoke it and return its value
    value = _jQuery.isFunction(value) ? value() : value == null ? "" : value;
    s[s.length] = encodeURIComponent(key) + "=" + encodeURIComponent(value);
  }; // Set traditional to true for jQuery <= 1.3.2 behavior.


  if (traditional === undefined) {
    traditional = _jQuery.ajaxSettings && _jQuery.ajaxSettings.traditional;
  } // If an array was passed in, assume that it is an array of form elements.


  if (_jQuery.isArray(a) || a.jquery && !_jQuery.isPlainObject(a)) {
    // Serialize the form elements
    _jQuery.each(a, function () {
      add(this.name, this.value);
    });
  } else {
    // If traditional, encode the "old" way (the way 1.3.2 or older
    // did it), otherwise encode params recursively.
    for (prefix in a) {
      buildParams(prefix, a[prefix], traditional, add);
    }
  } // Return the resulting serialization


  return s.join("&").replace(r20, "+");
};

_jQuery.fn.extend({
  serialize: function serialize() {
    return _jQuery.param(this.serializeArray());
  },
  serializeArray: function serializeArray() {
    return this.map(function () {
      // Can add propHook for "elements" to filter or add form elements
      var elements = _jQuery.prop(this, "elements");

      return elements ? _jQuery.makeArray(elements) : this;
    }).filter(function () {
      var type = this.type; // Use .is(":disabled") so that fieldset[disabled] works

      return this.name && !_jQuery(this).is(":disabled") && rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) && (this.checked || !rcheckableType.test(type));
    }).map(function (i, elem) {
      var val = _jQuery(this).val();

      return val == null ? null : _jQuery.isArray(val) ? _jQuery.map(val, function (val) {
        return {
          name: elem.name,
          value: val.replace(rCRLF, "\r\n")
        };
      }) : {
        name: elem.name,
        value: val.replace(rCRLF, "\r\n")
      };
    }).get();
  }
}); // Create the request object
// (This is still attached to ajaxSettings for backward compatibility)


_jQuery.ajaxSettings.xhr = window.ActiveXObject !== undefined ? // Support: IE6-IE8
function () {
  // XHR cannot access local files, always use ActiveX for that case
  if (this.isLocal) {
    return createActiveXHR();
  } // Support: IE 9-11
  // IE seems to error on cross-domain PATCH requests when ActiveX XHR
  // is used. In IE 9+ always use the native XHR.
  // Note: this condition won't catch Edge as it doesn't define
  // document.documentMode but it also doesn't support ActiveX so it won't
  // reach this code.


  if (document.documentMode > 8) {
    return createStandardXHR();
  } // Support: IE<9
  // oldIE XHR does not support non-RFC2616 methods (#13240)
  // See http://msdn.microsoft.com/en-us/library/ie/ms536648(v=vs.85).aspx
  // and http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9
  // Although this check for six methods instead of eight
  // since IE also does not support "trace" and "connect"


  return /^(get|post|head|put|delete|options)$/i.test(this.type) && createStandardXHR() || createActiveXHR();
} : // For all other browsers, use the standard XMLHttpRequest object
createStandardXHR;

var xhrId = 0,
    xhrCallbacks = {},
    xhrSupported = _jQuery.ajaxSettings.xhr(); // Support: IE<10
// Open requests must be manually aborted on unload (#5280)
// See https://support.microsoft.com/kb/2856746 for more info


if (window.attachEvent) {
  window.attachEvent("onunload", function () {
    for (var key in xhrCallbacks) {
      xhrCallbacks[key](undefined, true);
    }
  });
} // Determine support properties


support.cors = !!xhrSupported && "withCredentials" in xhrSupported;
xhrSupported = support.ajax = !!xhrSupported; // Create transport if the browser can provide an xhr

if (xhrSupported) {
  _jQuery.ajaxTransport(function (options) {
    // Cross domain only allowed if supported through XMLHttpRequest
    if (!options.crossDomain || support.cors) {
      var _callback;

      return {
        send: function send(headers, complete) {
          var i,
              xhr = options.xhr(),
              id = ++xhrId; // Open the socket

          xhr.open(options.type, options.url, options.async, options.username, options.password); // Apply custom fields if provided

          if (options.xhrFields) {
            for (i in options.xhrFields) {
              xhr[i] = options.xhrFields[i];
            }
          } // Override mime type if needed


          if (options.mimeType && xhr.overrideMimeType) {
            xhr.overrideMimeType(options.mimeType);
          } // X-Requested-With header
          // For cross-domain requests, seeing as conditions for a preflight are
          // akin to a jigsaw puzzle, we simply never set it to be sure.
          // (it can always be set on a per-request basis or even using ajaxSetup)
          // For same-domain requests, won't change header if already provided.


          if (!options.crossDomain && !headers["X-Requested-With"]) {
            headers["X-Requested-With"] = "XMLHttpRequest";
          } // Set headers


          for (i in headers) {
            // Support: IE<9
            // IE's ActiveXObject throws a 'Type Mismatch' exception when setting
            // request header to a null-value.
            //
            // To keep consistent with other XHR implementations, cast the value
            // to string and ignore `undefined`.
            if (headers[i] !== undefined) {
              xhr.setRequestHeader(i, headers[i] + "");
            }
          } // Do send the request
          // This may raise an exception which is actually
          // handled in jQuery.ajax (so no try/catch here)


          xhr.send(options.hasContent && options.data || null); // Listener

          _callback = function callback(_, isAbort) {
            var status, statusText, responses; // Was never called and is aborted or complete

            if (_callback && (isAbort || xhr.readyState === 4)) {
              // Clean up
              delete xhrCallbacks[id];
              _callback = undefined;
              xhr.onreadystatechange = _jQuery.noop; // Abort manually if needed

              if (isAbort) {
                if (xhr.readyState !== 4) {
                  xhr.abort();
                }
              } else {
                responses = {};
                status = xhr.status; // Support: IE<10
                // Accessing binary-data responseText throws an exception
                // (#11426)

                if (typeof xhr.responseText === "string") {
                  responses.text = xhr.responseText;
                } // Firefox throws an exception when accessing
                // statusText for faulty cross-domain requests


                try {
                  statusText = xhr.statusText;
                } catch (e) {
                  // We normalize with Webkit giving an empty statusText
                  statusText = "";
                } // Filter status for non standard behaviors
                // If the request is local and we have data: assume a success
                // (success with no data won't get notified, that's the best we
                // can do given current implementations)


                if (!status && options.isLocal && !options.crossDomain) {
                  status = responses.text ? 200 : 404; // IE - #1450: sometimes returns 1223 when it should be 204
                } else if (status === 1223) {
                  status = 204;
                }
              }
            } // Call complete if needed


            if (responses) {
              complete(status, statusText, responses, xhr.getAllResponseHeaders());
            }
          }; // Do send the request
          // `xhr.send` may raise an exception, but it will be
          // handled in jQuery.ajax (so no try/catch here)


          if (!options.async) {
            // If we're in sync mode we fire the callback
            _callback();
          } else if (xhr.readyState === 4) {
            // (IE6 & IE7) if it's in cache and has been
            // retrieved directly we need to fire the callback
            window.setTimeout(_callback);
          } else {
            // Register the callback, but delay it in case `xhr.send` throws
            // Add to the list of active xhr callbacks
            xhr.onreadystatechange = xhrCallbacks[id] = _callback;
          }
        },
        abort: function abort() {
          if (_callback) {
            _callback(undefined, true);
          }
        }
      };
    }
  });
} // Functions to create xhrs


function createStandardXHR() {
  try {
    return new window.XMLHttpRequest();
  } catch (e) {}
}

function createActiveXHR() {
  try {
    return new window.ActiveXObject("Microsoft.XMLHTTP");
  } catch (e) {}
} // Install script dataType


_jQuery.ajaxSetup({
  accepts: {
    script: "text/javascript, application/javascript, " + "application/ecmascript, application/x-ecmascript"
  },
  contents: {
    script: /\b(?:java|ecma)script\b/
  },
  converters: {
    "text script": function textScript(text) {
      _jQuery.globalEval(text);

      return text;
    }
  }
}); // Handle cache's special case and global


_jQuery.ajaxPrefilter("script", function (s) {
  if (s.cache === undefined) {
    s.cache = false;
  }

  if (s.crossDomain) {
    s.type = "GET";
    s.global = false;
  }
}); // Bind script tag hack transport


_jQuery.ajaxTransport("script", function (s) {
  // This transport only deals with cross domain requests
  if (s.crossDomain) {
    var script,
        head = document.head || _jQuery("head")[0] || document.documentElement;
    return {
      send: function send(_, callback) {
        script = document.createElement("script");
        script.async = true;

        if (s.scriptCharset) {
          script.charset = s.scriptCharset;
        }

        script.src = s.url; // Attach handlers for all browsers

        script.onload = script.onreadystatechange = function (_, isAbort) {
          if (isAbort || !script.readyState || /loaded|complete/.test(script.readyState)) {
            // Handle memory leak in IE
            script.onload = script.onreadystatechange = null; // Remove the script

            if (script.parentNode) {
              script.parentNode.removeChild(script);
            } // Dereference the script


            script = null; // Callback if not abort

            if (!isAbort) {
              callback(200, "success");
            }
          }
        }; // Circumvent IE6 bugs with base elements (#2709 and #4378) by prepending
        // Use native DOM manipulation to avoid our domManip AJAX trickery


        head.insertBefore(script, head.firstChild);
      },
      abort: function abort() {
        if (script) {
          script.onload(undefined, true);
        }
      }
    };
  }
});

var oldCallbacks = [],
    rjsonp = /(=)\?(?=&|$)|\?\?/; // Default jsonp settings

_jQuery.ajaxSetup({
  jsonp: "callback",
  jsonpCallback: function jsonpCallback() {
    var callback = oldCallbacks.pop() || _jQuery.expando + "_" + nonce++;
    this[callback] = true;
    return callback;
  }
}); // Detect, normalize options and install callbacks for jsonp requests


_jQuery.ajaxPrefilter("json jsonp", function (s, originalSettings, jqXHR) {
  var callbackName,
      overwritten,
      responseContainer,
      jsonProp = s.jsonp !== false && (rjsonp.test(s.url) ? "url" : typeof s.data === "string" && (s.contentType || "").indexOf("application/x-www-form-urlencoded") === 0 && rjsonp.test(s.data) && "data"); // Handle iff the expected data type is "jsonp" or we have a parameter to set

  if (jsonProp || s.dataTypes[0] === "jsonp") {
    // Get callback name, remembering preexisting value associated with it
    callbackName = s.jsonpCallback = _jQuery.isFunction(s.jsonpCallback) ? s.jsonpCallback() : s.jsonpCallback; // Insert callback into url or form data

    if (jsonProp) {
      s[jsonProp] = s[jsonProp].replace(rjsonp, "$1" + callbackName);
    } else if (s.jsonp !== false) {
      s.url += (rquery.test(s.url) ? "&" : "?") + s.jsonp + "=" + callbackName;
    } // Use data converter to retrieve json after script execution


    s.converters["script json"] = function () {
      if (!responseContainer) {
        _jQuery.error(callbackName + " was not called");
      }

      return responseContainer[0];
    }; // force json dataType


    s.dataTypes[0] = "json"; // Install callback

    overwritten = window[callbackName];

    window[callbackName] = function () {
      responseContainer = arguments;
    }; // Clean-up function (fires after converters)


    jqXHR.always(function () {
      // If previous value didn't exist - remove it
      if (overwritten === undefined) {
        _jQuery(window).removeProp(callbackName); // Otherwise restore preexisting value

      } else {
        window[callbackName] = overwritten;
      } // Save back as free


      if (s[callbackName]) {
        // make sure that re-using the options doesn't screw things around
        s.jsonpCallback = originalSettings.jsonpCallback; // save the callback name for future use

        oldCallbacks.push(callbackName);
      } // Call if it was a function and we have a response


      if (responseContainer && _jQuery.isFunction(overwritten)) {
        overwritten(responseContainer[0]);
      }

      responseContainer = overwritten = undefined;
    }); // Delegate to script

    return "script";
  }
}); // data: string of html
// context (optional): If specified, the fragment will be created in this context,
// defaults to document
// keepScripts (optional): If true, will include scripts passed in the html string


_jQuery.parseHTML = function (data, context, keepScripts) {
  if (!data || typeof data !== "string") {
    return null;
  }

  if (typeof context === "boolean") {
    keepScripts = context;
    context = false;
  }

  context = context || document;
  var parsed = rsingleTag.exec(data),
      scripts = !keepScripts && []; // Single tag

  if (parsed) {
    return [context.createElement(parsed[1])];
  }

  parsed = buildFragment([data], context, scripts);

  if (scripts && scripts.length) {
    _jQuery(scripts).remove();
  }

  return _jQuery.merge([], parsed.childNodes);
}; // Keep a copy of the old load method


var _load = _jQuery.fn.load;
/**
 * Load a url into a page
 */

_jQuery.fn.load = function (url, params, callback) {
  if (typeof url !== "string" && _load) {
    return _load.apply(this, arguments);
  }

  var selector,
      type,
      response,
      self = this,
      off = url.indexOf(" ");

  if (off > -1) {
    selector = _jQuery.trim(url.slice(off, url.length));
    url = url.slice(0, off);
  } // If it's a function


  if (_jQuery.isFunction(params)) {
    // We assume that it's the callback
    callback = params;
    params = undefined; // Otherwise, build a param string
  } else if (params && _typeof(params) === "object") {
    type = "POST";
  } // If we have elements to modify, make the request


  if (self.length > 0) {
    _jQuery.ajax({
      url: url,
      // If "type" variable is undefined, then "GET" method will be used.
      // Make value of this field explicit since
      // user can override it through ajaxSetup method
      type: type || "GET",
      dataType: "html",
      data: params
    }).done(function (responseText) {
      // Save response for use in complete callback
      response = arguments;
      self.html(selector ? // If a selector was specified, locate the right elements in a dummy div
      // Exclude scripts to avoid IE 'Permission Denied' errors
      _jQuery("<div>").append(_jQuery.parseHTML(responseText)).find(selector) : // Otherwise use the full result
      responseText); // If the request succeeds, this function gets "data", "status", "jqXHR"
      // but they are ignored because response was set above.
      // If it fails, this function gets "jqXHR", "status", "error"
    }).always(callback && function (jqXHR, status) {
      self.each(function () {
        callback.apply(this, response || [jqXHR.responseText, status, jqXHR]);
      });
    });
  }

  return this;
}; // Attach a bunch of functions for handling common AJAX events


_jQuery.each(["ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend"], function (i, type) {
  _jQuery.fn[type] = function (fn) {
    return this.on(type, fn);
  };
});

_jQuery.expr.filters.animated = function (elem) {
  return _jQuery.grep(_jQuery.timers, function (fn) {
    return elem === fn.elem;
  }).length;
};
/**
 * Gets a window from an element
 */


function getWindow(elem) {
  return _jQuery.isWindow(elem) ? elem : elem.nodeType === 9 ? elem.defaultView || elem.parentWindow : false;
}

_jQuery.offset = {
  setOffset: function setOffset(elem, options, i) {
    var curPosition,
        curLeft,
        curCSSTop,
        curTop,
        curOffset,
        curCSSLeft,
        calculatePosition,
        position = _jQuery.css(elem, "position"),
        curElem = _jQuery(elem),
        props = {}; // set position first, in-case top/left are set even on static elem


    if (position === "static") {
      elem.style.position = "relative";
    }

    curOffset = curElem.offset();
    curCSSTop = _jQuery.css(elem, "top");
    curCSSLeft = _jQuery.css(elem, "left");
    calculatePosition = (position === "absolute" || position === "fixed") && _jQuery.inArray("auto", [curCSSTop, curCSSLeft]) > -1; // need to be able to calculate position if either top or left
    // is auto and position is either absolute or fixed

    if (calculatePosition) {
      curPosition = curElem.position();
      curTop = curPosition.top;
      curLeft = curPosition.left;
    } else {
      curTop = parseFloat(curCSSTop) || 0;
      curLeft = parseFloat(curCSSLeft) || 0;
    }

    if (_jQuery.isFunction(options)) {
      // Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
      options = options.call(elem, i, _jQuery.extend({}, curOffset));
    }

    if (options.top != null) {
      props.top = options.top - curOffset.top + curTop;
    }

    if (options.left != null) {
      props.left = options.left - curOffset.left + curLeft;
    }

    if ("using" in options) {
      options.using.call(elem, props);
    } else {
      curElem.css(props);
    }
  }
};

_jQuery.fn.extend({
  offset: function offset(options) {
    if (arguments.length) {
      return options === undefined ? this : this.each(function (i) {
        _jQuery.offset.setOffset(this, options, i);
      });
    }

    var docElem,
        win,
        box = {
      top: 0,
      left: 0
    },
        elem = this[0],
        doc = elem && elem.ownerDocument;

    if (!doc) {
      return;
    }

    docElem = doc.documentElement; // Make sure it's not a disconnected DOM node

    if (!_jQuery.contains(docElem, elem)) {
      return box;
    } // If we don't have gBCR, just use 0,0 rather than error
    // BlackBerry 5, iOS 3 (original iPhone)


    if (typeof elem.getBoundingClientRect !== "undefined") {
      box = elem.getBoundingClientRect();
    }

    win = getWindow(doc);
    return {
      top: box.top + (win.pageYOffset || docElem.scrollTop) - (docElem.clientTop || 0),
      left: box.left + (win.pageXOffset || docElem.scrollLeft) - (docElem.clientLeft || 0)
    };
  },
  position: function position() {
    if (!this[0]) {
      return;
    }

    var offsetParent,
        offset,
        parentOffset = {
      top: 0,
      left: 0
    },
        elem = this[0]; // Fixed elements are offset from window (parentOffset = {top:0, left: 0},
    // because it is its only offset parent

    if (_jQuery.css(elem, "position") === "fixed") {
      // we assume that getBoundingClientRect is available when computed position is fixed
      offset = elem.getBoundingClientRect();
    } else {
      // Get *real* offsetParent
      offsetParent = this.offsetParent(); // Get correct offsets

      offset = this.offset();

      if (!_jQuery.nodeName(offsetParent[0], "html")) {
        parentOffset = offsetParent.offset();
      } // Add offsetParent borders


      parentOffset.top += _jQuery.css(offsetParent[0], "borderTopWidth", true);
      parentOffset.left += _jQuery.css(offsetParent[0], "borderLeftWidth", true);
    } // Subtract parent offsets and element margins
    // note: when an element has margin: auto the offsetLeft and marginLeft
    // are the same in Safari causing offset.left to incorrectly be 0


    return {
      top: offset.top - parentOffset.top - _jQuery.css(elem, "marginTop", true),
      left: offset.left - parentOffset.left - _jQuery.css(elem, "marginLeft", true)
    };
  },
  offsetParent: function offsetParent() {
    return this.map(function () {
      var offsetParent = this.offsetParent;

      while (offsetParent && !_jQuery.nodeName(offsetParent, "html") && _jQuery.css(offsetParent, "position") === "static") {
        offsetParent = offsetParent.offsetParent;
      }

      return offsetParent || documentElement;
    });
  }
}); // Create scrollLeft and scrollTop methods


_jQuery.each({
  scrollLeft: "pageXOffset",
  scrollTop: "pageYOffset"
}, function (method, prop) {
  var top = /Y/.test(prop);

  _jQuery.fn[method] = function (val) {
    return access(this, function (elem, method, val) {
      var win = getWindow(elem);

      if (val === undefined) {
        return win ? prop in win ? win[prop] : win.document.documentElement[method] : elem[method];
      }

      if (win) {
        win.scrollTo(!top ? val : _jQuery(win).scrollLeft(), top ? val : _jQuery(win).scrollTop());
      } else {
        elem[method] = val;
      }
    }, method, val, arguments.length, null);
  };
}); // Support: Safari<7-8+, Chrome<37-44+
// Add the top/left cssHooks using jQuery.fn.position
// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
// getComputedStyle returns percent when specified for top/left/bottom/right
// rather than make the css module depend on the offset module, we just check for it here


_jQuery.each(["top", "left"], function (i, prop) {
  _jQuery.cssHooks[prop] = addGetHookIf(support.pixelPosition, function (elem, computed) {
    if (computed) {
      computed = curCSS(elem, prop); // if curCSS returns percentage, fallback to offset

      return rnumnonpx.test(computed) ? _jQuery(elem).position()[prop] + "px" : computed;
    }
  });
}); // Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods


_jQuery.each({
  Height: "height",
  Width: "width"
}, function (name, type) {
  _jQuery.each({
    padding: "inner" + name,
    content: type,
    "": "outer" + name
  }, function (defaultExtra, funcName) {
    // margin is only for outerHeight, outerWidth
    _jQuery.fn[funcName] = function (margin, value) {
      var chainable = arguments.length && (defaultExtra || typeof margin !== "boolean"),
          extra = defaultExtra || (margin === true || value === true ? "margin" : "border");
      return access(this, function (elem, type, value) {
        var doc;

        if (_jQuery.isWindow(elem)) {
          // As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
          // isn't a whole lot we can do. See pull request at this URL for discussion:
          // https://github.com/jquery/jquery/pull/764
          return elem.document.documentElement["client" + name];
        } // Get document width or height


        if (elem.nodeType === 9) {
          doc = elem.documentElement; // Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
          // whichever is greatest
          // unfortunately, this causes bug #3838 in IE6/8 only,
          // but there is currently no good, small way to fix it.

          return Math.max(elem.body["scroll" + name], doc["scroll" + name], elem.body["offset" + name], doc["offset" + name], doc["client" + name]);
        }

        return value === undefined ? // Get width or height on the element, requesting but not forcing parseFloat
        _jQuery.css(elem, type, extra) : // Set width or height on the element
        _jQuery.style(elem, type, value, extra);
      }, type, chainable ? margin : undefined, chainable, null);
    };
  });
});

_jQuery.fn.extend({
  bind: function bind(types, data, fn) {
    return this.on(types, null, data, fn);
  },
  unbind: function unbind(types, fn) {
    return this.off(types, null, fn);
  },
  delegate: function delegate(selector, types, data, fn) {
    return this.on(types, selector, data, fn);
  },
  undelegate: function undelegate(selector, types, fn) {
    // ( namespace ) or ( selector, types [, fn] )
    return arguments.length === 1 ? this.off(selector, "**") : this.off(types, selector || "**", fn);
  }
}); // The number of elements contained in the matched element set


_jQuery.fn.size = function () {
  return this.length;
};

_jQuery.fn.andSelf = _jQuery.fn.addBack;
$ = _jQuery;
/* harmony default export */ __webpack_exports__["default"] = ($);

/***/ }),

/***/ "./vendor/underscore.js":
/*!******************************!*\
  !*** ./vendor/underscore.js ***!
  \******************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

//     Underscore.js 1.8.3
//     http://underscorejs.org
//     (c) 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
//     Underscore may be freely distributed under the MIT license.
// Modified for encapsulation in igv module -- es6 export
var _ = function _(obj) {
  if (obj instanceof _) return obj;
  if (!(this instanceof _)) return new _(obj);
  this._wrapped = obj;
}; // Baseline setup
// --------------
// Save bytes in the minified (but not gzipped) version:


var ArrayProto = Array.prototype,
    ObjProto = Object.prototype,
    FuncProto = Function.prototype; // Create quick reference variables for speed access to core prototypes.

var push = ArrayProto.push,
    slice = ArrayProto.slice,
    toString = ObjProto.toString,
    hasOwnProperty = ObjProto.hasOwnProperty; // All **ECMAScript 5** native function implementations that we hope to use
// are declared here.

var nativeIsArray = Array.isArray,
    nativeKeys = Object.keys,
    nativeBind = FuncProto.bind,
    nativeCreate = Object.create; // Naked function reference for surrogate-prototype-swapping.

var Ctor = function Ctor() {}; // Current version.


_.VERSION = '1.8.3'; // Internal function that returns an efficient (for current engines) version
// of the passed-in callback, to be repeatedly applied in other Underscore
// functions.

var optimizeCb = function optimizeCb(func, context, argCount) {
  if (context === void 0) return func;

  switch (argCount == null ? 3 : argCount) {
    case 1:
      return function (value) {
        return func.call(context, value);
      };

    case 2:
      return function (value, other) {
        return func.call(context, value, other);
      };

    case 3:
      return function (value, index, collection) {
        return func.call(context, value, index, collection);
      };

    case 4:
      return function (accumulator, value, index, collection) {
        return func.call(context, accumulator, value, index, collection);
      };
  }

  return function () {
    return func.apply(context, arguments);
  };
}; // A mostly-internal function to generate callbacks that can be applied
// to each element in a collection, returning the desired result — either
// identity, an arbitrary callback, a property matcher, or a property accessor.


var cb = function cb(value, context, argCount) {
  if (value == null) return _.identity;
  if (_.isFunction(value)) return optimizeCb(value, context, argCount);
  if (_.isObject(value)) return _.matcher(value);
  return _.property(value);
};

_.iteratee = function (value, context) {
  return cb(value, context, Infinity);
}; // An internal function for creating assigner functions.


var createAssigner = function createAssigner(keysFunc, undefinedOnly) {
  return function (obj) {
    var length = arguments.length;
    if (length < 2 || obj == null) return obj;

    for (var index = 1; index < length; index++) {
      var source = arguments[index],
          keys = keysFunc(source),
          l = keys.length;

      for (var i = 0; i < l; i++) {
        var key = keys[i];
        if (!undefinedOnly || obj[key] === void 0) obj[key] = source[key];
      }
    }

    return obj;
  };
}; // An internal function for creating a new object that inherits from another.


var baseCreate = function baseCreate(prototype) {
  if (!_.isObject(prototype)) return {};
  if (nativeCreate) return nativeCreate(prototype);
  Ctor.prototype = prototype;
  var result = new Ctor();
  Ctor.prototype = null;
  return result;
};

var property = function property(key) {
  return function (obj) {
    return obj == null ? void 0 : obj[key];
  };
}; // Helper for collection methods to determine whether a collection
// should be iterated as an array or as an object
// Related: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength
// Avoids a very nasty iOS 8 JIT bug on ARM-64. #2094


var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;
var getLength = property('length');

var isArrayLike = function isArrayLike(collection) {
  var length = getLength(collection);
  return typeof length == 'number' && length >= 0 && length <= MAX_ARRAY_INDEX;
}; // Collection Functions
// --------------------
// The cornerstone, an `each` implementation, aka `forEach`.
// Handles raw objects in addition to array-likes. Treats all
// sparse array-likes as if they were dense.


_.each = _.forEach = function (obj, iteratee, context) {
  iteratee = optimizeCb(iteratee, context);
  var i, length;

  if (isArrayLike(obj)) {
    for (i = 0, length = obj.length; i < length; i++) {
      iteratee(obj[i], i, obj);
    }
  } else {
    var keys = _.keys(obj);

    for (i = 0, length = keys.length; i < length; i++) {
      iteratee(obj[keys[i]], keys[i], obj);
    }
  }

  return obj;
}; // Return the results of applying the iteratee to each element.


_.map = _.collect = function (obj, iteratee, context) {
  iteratee = cb(iteratee, context);

  var keys = !isArrayLike(obj) && _.keys(obj),
      length = (keys || obj).length,
      results = Array(length);

  for (var index = 0; index < length; index++) {
    var currentKey = keys ? keys[index] : index;
    results[index] = iteratee(obj[currentKey], currentKey, obj);
  }

  return results;
}; // Create a reducing function iterating left or right.


function createReduce(dir) {
  // Optimized iterator function as using arguments.length
  // in the main function will deoptimize the, see #1991.
  function iterator(obj, iteratee, memo, keys, index, length) {
    for (; index >= 0 && index < length; index += dir) {
      var currentKey = keys ? keys[index] : index;
      memo = iteratee(memo, obj[currentKey], currentKey, obj);
    }

    return memo;
  }

  return function (obj, iteratee, memo, context) {
    iteratee = optimizeCb(iteratee, context, 4);

    var keys = !isArrayLike(obj) && _.keys(obj),
        length = (keys || obj).length,
        index = dir > 0 ? 0 : length - 1; // Determine the initial value if none is provided.


    if (arguments.length < 3) {
      memo = obj[keys ? keys[index] : index];
      index += dir;
    }

    return iterator(obj, iteratee, memo, keys, index, length);
  };
} // **Reduce** builds up a single result from a list of values, aka `inject`,
// or `foldl`.


_.reduce = _.foldl = _.inject = createReduce(1); // The right-associative version of reduce, also known as `foldr`.

_.reduceRight = _.foldr = createReduce(-1); // Return the first value which passes a truth test. Aliased as `detect`.

_.find = _.detect = function (obj, predicate, context) {
  var key;

  if (isArrayLike(obj)) {
    key = _.findIndex(obj, predicate, context);
  } else {
    key = _.findKey(obj, predicate, context);
  }

  if (key !== void 0 && key !== -1) return obj[key];
}; // Return all the elements that pass a truth test.
// Aliased as `select`.


_.filter = _.select = function (obj, predicate, context) {
  var results = [];
  predicate = cb(predicate, context);

  _.each(obj, function (value, index, list) {
    if (predicate(value, index, list)) results.push(value);
  });

  return results;
}; // Return all the elements for which a truth test fails.


_.reject = function (obj, predicate, context) {
  return _.filter(obj, _.negate(cb(predicate)), context);
}; // Determine whether all of the elements match a truth test.
// Aliased as `all`.


_.every = _.all = function (obj, predicate, context) {
  predicate = cb(predicate, context);

  var keys = !isArrayLike(obj) && _.keys(obj),
      length = (keys || obj).length;

  for (var index = 0; index < length; index++) {
    var currentKey = keys ? keys[index] : index;
    if (!predicate(obj[currentKey], currentKey, obj)) return false;
  }

  return true;
}; // Determine if at least one element in the object matches a truth test.
// Aliased as `any`.


_.some = _.any = function (obj, predicate, context) {
  predicate = cb(predicate, context);

  var keys = !isArrayLike(obj) && _.keys(obj),
      length = (keys || obj).length;

  for (var index = 0; index < length; index++) {
    var currentKey = keys ? keys[index] : index;
    if (predicate(obj[currentKey], currentKey, obj)) return true;
  }

  return false;
}; // Determine if the array or object contains a given item (using `===`).
// Aliased as `includes` and `include`.


_.contains = _.includes = _.include = function (obj, item, fromIndex, guard) {
  if (!isArrayLike(obj)) obj = _.values(obj);
  if (typeof fromIndex != 'number' || guard) fromIndex = 0;
  return _.indexOf(obj, item, fromIndex) >= 0;
}; // Invoke a method (with arguments) on every item in a collection.


_.invoke = function (obj, method) {
  var args = slice.call(arguments, 2);

  var isFunc = _.isFunction(method);

  return _.map(obj, function (value) {
    var func = isFunc ? method : value[method];
    return func == null ? func : func.apply(value, args);
  });
}; // Convenience version of a common use case of `map`: fetching a property.


_.pluck = function (obj, key) {
  return _.map(obj, _.property(key));
}; // Convenience version of a common use case of `filter`: selecting only objects
// containing specific `key:value` pairs.


_.where = function (obj, attrs) {
  return _.filter(obj, _.matcher(attrs));
}; // Convenience version of a common use case of `find`: getting the first object
// containing specific `key:value` pairs.


_.findWhere = function (obj, attrs) {
  return _.find(obj, _.matcher(attrs));
}; // Return the maximum element (or element-based computation).


_.max = function (obj, iteratee, context) {
  var result = -Infinity,
      lastComputed = -Infinity,
      value,
      computed;

  if (iteratee == null && obj != null) {
    obj = isArrayLike(obj) ? obj : _.values(obj);

    for (var i = 0, length = obj.length; i < length; i++) {
      value = obj[i];

      if (value > result) {
        result = value;
      }
    }
  } else {
    iteratee = cb(iteratee, context);

    _.each(obj, function (value, index, list) {
      computed = iteratee(value, index, list);

      if (computed > lastComputed || computed === -Infinity && result === -Infinity) {
        result = value;
        lastComputed = computed;
      }
    });
  }

  return result;
}; // Return the minimum element (or element-based computation).


_.min = function (obj, iteratee, context) {
  var result = Infinity,
      lastComputed = Infinity,
      value,
      computed;

  if (iteratee == null && obj != null) {
    obj = isArrayLike(obj) ? obj : _.values(obj);

    for (var i = 0, length = obj.length; i < length; i++) {
      value = obj[i];

      if (value < result) {
        result = value;
      }
    }
  } else {
    iteratee = cb(iteratee, context);

    _.each(obj, function (value, index, list) {
      computed = iteratee(value, index, list);

      if (computed < lastComputed || computed === Infinity && result === Infinity) {
        result = value;
        lastComputed = computed;
      }
    });
  }

  return result;
}; // Shuffle a collection, using the modern version of the
// [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).


_.shuffle = function (obj) {
  var set = isArrayLike(obj) ? obj : _.values(obj);
  var length = set.length;
  var shuffled = Array(length);

  for (var index = 0, rand; index < length; index++) {
    rand = _.random(0, index);
    if (rand !== index) shuffled[index] = shuffled[rand];
    shuffled[rand] = set[index];
  }

  return shuffled;
}; // Sample **n** random values from a collection.
// If **n** is not specified, returns a single random element.
// The internal `guard` argument allows it to work with `map`.


_.sample = function (obj, n, guard) {
  if (n == null || guard) {
    if (!isArrayLike(obj)) obj = _.values(obj);
    return obj[_.random(obj.length - 1)];
  }

  return _.shuffle(obj).slice(0, Math.max(0, n));
}; // Sort the object's values by a criterion produced by an iteratee.


_.sortBy = function (obj, iteratee, context) {
  iteratee = cb(iteratee, context);
  return _.pluck(_.map(obj, function (value, index, list) {
    return {
      value: value,
      index: index,
      criteria: iteratee(value, index, list)
    };
  }).sort(function (left, right) {
    var a = left.criteria;
    var b = right.criteria;

    if (a !== b) {
      if (a > b || a === void 0) return 1;
      if (a < b || b === void 0) return -1;
    }

    return left.index - right.index;
  }), 'value');
}; // An internal function used for aggregate "group by" operations.


var group = function group(behavior) {
  return function (obj, iteratee, context) {
    var result = {};
    iteratee = cb(iteratee, context);

    _.each(obj, function (value, index) {
      var key = iteratee(value, index, obj);
      behavior(result, value, key);
    });

    return result;
  };
}; // Groups the object's values by a criterion. Pass either a string attribute
// to group by, or a function that returns the criterion.


_.groupBy = group(function (result, value, key) {
  if (_.has(result, key)) result[key].push(value);else result[key] = [value];
}); // Indexes the object's values by a criterion, similar to `groupBy`, but for
// when you know that your index values will be unique.

_.indexBy = group(function (result, value, key) {
  result[key] = value;
}); // Counts instances of an object that group by a certain criterion. Pass
// either a string attribute to count by, or a function that returns the
// criterion.

_.countBy = group(function (result, value, key) {
  if (_.has(result, key)) result[key]++;else result[key] = 1;
}); // Safely create a real, live array from anything iterable.

_.toArray = function (obj) {
  if (!obj) return [];
  if (_.isArray(obj)) return slice.call(obj);
  if (isArrayLike(obj)) return _.map(obj, _.identity);
  return _.values(obj);
}; // Return the number of elements in an object.


_.size = function (obj) {
  if (obj == null) return 0;
  return isArrayLike(obj) ? obj.length : _.keys(obj).length;
}; // Split a collection into two arrays: one whose elements all satisfy the given
// predicate, and one whose elements all do not satisfy the predicate.


_.partition = function (obj, predicate, context) {
  predicate = cb(predicate, context);
  var pass = [],
      fail = [];

  _.each(obj, function (value, key, obj) {
    (predicate(value, key, obj) ? pass : fail).push(value);
  });

  return [pass, fail];
}; // Array Functions
// ---------------
// Get the first element of an array. Passing **n** will return the first N
// values in the array. Aliased as `head` and `take`. The **guard** check
// allows it to work with `_.map`.


_.first = _.head = _.take = function (array, n, guard) {
  if (array == null) return void 0;
  if (n == null || guard) return array[0];
  return _.initial(array, array.length - n);
}; // Returns everything but the last entry of the array. Especially useful on
// the arguments object. Passing **n** will return all the values in
// the array, excluding the last N.


_.initial = function (array, n, guard) {
  return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));
}; // Get the last element of an array. Passing **n** will return the last N
// values in the array.


_.last = function (array, n, guard) {
  if (array == null) return void 0;
  if (n == null || guard) return array[array.length - 1];
  return _.rest(array, Math.max(0, array.length - n));
}; // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.
// Especially useful on the arguments object. Passing an **n** will return
// the rest N values in the array.


_.rest = _.tail = _.drop = function (array, n, guard) {
  return slice.call(array, n == null || guard ? 1 : n);
}; // Trim out all falsy values from an array.


_.compact = function (array) {
  return _.filter(array, _.identity);
}; // Internal implementation of a recursive `flatten` function.


var flatten = function flatten(input, shallow, strict, startIndex) {
  var output = [],
      idx = 0;

  for (var i = startIndex || 0, length = getLength(input); i < length; i++) {
    var value = input[i];

    if (isArrayLike(value) && (_.isArray(value) || _.isArguments(value))) {
      //flatten current level of array or arguments object
      if (!shallow) value = flatten(value, shallow, strict);
      var j = 0,
          len = value.length;
      output.length += len;

      while (j < len) {
        output[idx++] = value[j++];
      }
    } else if (!strict) {
      output[idx++] = value;
    }
  }

  return output;
}; // Flatten out an array, either recursively (by default), or just one level.


_.flatten = function (array, shallow) {
  return flatten(array, shallow, false);
}; // Return a version of the array that does not contain the specified value(s).


_.without = function (array) {
  return _.difference(array, slice.call(arguments, 1));
}; // Produce a duplicate-free version of the array. If the array has already
// been sorted, you have the option of using a faster algorithm.
// Aliased as `unique`.


_.uniq = _.unique = function (array, isSorted, iteratee, context) {
  if (!_.isBoolean(isSorted)) {
    context = iteratee;
    iteratee = isSorted;
    isSorted = false;
  }

  if (iteratee != null) iteratee = cb(iteratee, context);
  var result = [];
  var seen = [];

  for (var i = 0, length = getLength(array); i < length; i++) {
    var value = array[i],
        computed = iteratee ? iteratee(value, i, array) : value;

    if (isSorted) {
      if (!i || seen !== computed) result.push(value);
      seen = computed;
    } else if (iteratee) {
      if (!_.contains(seen, computed)) {
        seen.push(computed);
        result.push(value);
      }
    } else if (!_.contains(result, value)) {
      result.push(value);
    }
  }

  return result;
}; // Produce an array that contains the union: each distinct element from all of
// the passed-in arrays.


_.union = function () {
  return _.uniq(flatten(arguments, true, true));
}; // Produce an array that contains every item shared between all the
// passed-in arrays.


_.intersection = function (array) {
  var result = [];
  var argsLength = arguments.length;

  for (var i = 0, length = getLength(array); i < length; i++) {
    var item = array[i];
    if (_.contains(result, item)) continue;

    for (var j = 1; j < argsLength; j++) {
      if (!_.contains(arguments[j], item)) break;
    }

    if (j === argsLength) result.push(item);
  }

  return result;
}; // Take the difference between one array and a number of other arrays.
// Only the elements present in just the first array will remain.


_.difference = function (array) {
  var rest = flatten(arguments, true, true, 1);
  return _.filter(array, function (value) {
    return !_.contains(rest, value);
  });
}; // Zip together multiple lists into a single array -- elements that share
// an index go together.


_.zip = function () {
  return _.unzip(arguments);
}; // Complement of _.zip. Unzip accepts an array of arrays and groups
// each array's elements on shared indices


_.unzip = function (array) {
  var length = array && _.max(array, getLength).length || 0;
  var result = Array(length);

  for (var index = 0; index < length; index++) {
    result[index] = _.pluck(array, index);
  }

  return result;
}; // Converts lists into objects. Pass either a single array of `[key, value]`
// pairs, or two parallel arrays of the same length -- one of keys, and one of
// the corresponding values.


_.object = function (list, values) {
  var result = {};

  for (var i = 0, length = getLength(list); i < length; i++) {
    if (values) {
      result[list[i]] = values[i];
    } else {
      result[list[i][0]] = list[i][1];
    }
  }

  return result;
}; // Generator function to create the findIndex and findLastIndex functions


function createPredicateIndexFinder(dir) {
  return function (array, predicate, context) {
    predicate = cb(predicate, context);
    var length = getLength(array);
    var index = dir > 0 ? 0 : length - 1;

    for (; index >= 0 && index < length; index += dir) {
      if (predicate(array[index], index, array)) return index;
    }

    return -1;
  };
} // Returns the first index on an array-like that passes a predicate test


_.findIndex = createPredicateIndexFinder(1);
_.findLastIndex = createPredicateIndexFinder(-1); // Use a comparator function to figure out the smallest index at which
// an object should be inserted so as to maintain order. Uses binary search.

_.sortedIndex = function (array, obj, iteratee, context) {
  iteratee = cb(iteratee, context, 1);
  var value = iteratee(obj);
  var low = 0,
      high = getLength(array);

  while (low < high) {
    var mid = Math.floor((low + high) / 2);
    if (iteratee(array[mid]) < value) low = mid + 1;else high = mid;
  }

  return low;
}; // Generator function to create the indexOf and lastIndexOf functions


function createIndexFinder(dir, predicateFind, sortedIndex) {
  return function (array, item, idx) {
    var i = 0,
        length = getLength(array);

    if (typeof idx == 'number') {
      if (dir > 0) {
        i = idx >= 0 ? idx : Math.max(idx + length, i);
      } else {
        length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;
      }
    } else if (sortedIndex && idx && length) {
      idx = sortedIndex(array, item);
      return array[idx] === item ? idx : -1;
    }

    if (item !== item) {
      idx = predicateFind(slice.call(array, i, length), _.isNaN);
      return idx >= 0 ? idx + i : -1;
    }

    for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {
      if (array[idx] === item) return idx;
    }

    return -1;
  };
} // Return the position of the first occurrence of an item in an array,
// or -1 if the item is not included in the array.
// If the array is large and already in sort order, pass `true`
// for **isSorted** to use binary search.


_.indexOf = createIndexFinder(1, _.findIndex, _.sortedIndex);
_.lastIndexOf = createIndexFinder(-1, _.findLastIndex); // Generate an integer Array containing an arithmetic progression. A port of
// the native Python `range()` function. See
// [the Python documentation](http://docs.python.org/library/functions.html#range).

_.range = function (start, stop, step) {
  if (stop == null) {
    stop = start || 0;
    start = 0;
  }

  step = step || 1;
  var length = Math.max(Math.ceil((stop - start) / step), 0);
  var range = Array(length);

  for (var idx = 0; idx < length; idx++, start += step) {
    range[idx] = start;
  }

  return range;
}; // Function (ahem) Functions
// ------------------
// Determines whether to execute a function as a constructor
// or a normal function with the provided arguments


var executeBound = function executeBound(sourceFunc, boundFunc, context, callingContext, args) {
  if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);
  var self = baseCreate(sourceFunc.prototype);
  var result = sourceFunc.apply(self, args);
  if (_.isObject(result)) return result;
  return self;
}; // Create a function bound to a given object (assigning `this`, and arguments,
// optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if
// available.


_.bind = function (func, context) {
  if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));
  if (!_.isFunction(func)) throw new TypeError('Bind must be called on a function');
  var args = slice.call(arguments, 2);

  var bound = function bound() {
    return executeBound(func, bound, context, this, args.concat(slice.call(arguments)));
  };

  return bound;
}; // Partially apply a function by creating a version that has had some of its
// arguments pre-filled, without changing its dynamic `this` context. _ acts
// as a placeholder, allowing any combination of arguments to be pre-filled.


_.partial = function (func) {
  var boundArgs = slice.call(arguments, 1);

  var bound = function bound() {
    var position = 0,
        length = boundArgs.length;
    var args = Array(length);

    for (var i = 0; i < length; i++) {
      args[i] = boundArgs[i] === _ ? arguments[position++] : boundArgs[i];
    }

    while (position < arguments.length) {
      args.push(arguments[position++]);
    }

    return executeBound(func, bound, this, this, args);
  };

  return bound;
}; // Bind a number of an object's methods to that object. Remaining arguments
// are the method names to be bound. Useful for ensuring that all callbacks
// defined on an object belong to it.


_.bindAll = function (obj) {
  var i,
      length = arguments.length,
      key;
  if (length <= 1) throw new Error('bindAll must be passed function names');

  for (i = 1; i < length; i++) {
    key = arguments[i];
    obj[key] = _.bind(obj[key], obj);
  }

  return obj;
}; // Memoize an expensive function by storing its results.


_.memoize = function (func, hasher) {
  var memoize = function memoize(key) {
    var cache = memoize.cache;
    var address = '' + (hasher ? hasher.apply(this, arguments) : key);
    if (!_.has(cache, address)) cache[address] = func.apply(this, arguments);
    return cache[address];
  };

  memoize.cache = {};
  return memoize;
}; // Delays a function for the given number of milliseconds, and then calls
// it with the arguments supplied.


_.delay = function (func, wait) {
  var args = slice.call(arguments, 2);
  return setTimeout(function () {
    return func.apply(null, args);
  }, wait);
}; // Defers a function, scheduling it to run after the current call stack has
// cleared.


_.defer = _.partial(_.delay, _, 1); // Returns a function, that, when invoked, will only be triggered at most once
// during a given window of time. Normally, the throttled function will run
// as much as it can, without ever going more than once per `wait` duration;
// but if you'd like to disable the execution on the leading edge, pass
// `{leading: false}`. To disable execution on the trailing edge, ditto.

_.throttle = function (func, wait, options) {
  var context, args, result;
  var timeout = null;
  var previous = 0;
  if (!options) options = {};

  var later = function later() {
    previous = options.leading === false ? 0 : _.now();
    timeout = null;
    result = func.apply(context, args);
    if (!timeout) context = args = null;
  };

  return function () {
    var now = _.now();

    if (!previous && options.leading === false) previous = now;
    var remaining = wait - (now - previous);
    context = this;
    args = arguments;

    if (remaining <= 0 || remaining > wait) {
      if (timeout) {
        clearTimeout(timeout);
        timeout = null;
      }

      previous = now;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    } else if (!timeout && options.trailing !== false) {
      timeout = setTimeout(later, remaining);
    }

    return result;
  };
}; // Returns a function, that, as long as it continues to be invoked, will not
// be triggered. The function will be called after it stops being called for
// N milliseconds. If `immediate` is passed, trigger the function on the
// leading edge, instead of the trailing.


_.debounce = function (func, wait, immediate) {
  var timeout, args, context, timestamp, result;

  var later = function later() {
    var last = _.now() - timestamp;

    if (last < wait && last >= 0) {
      timeout = setTimeout(later, wait - last);
    } else {
      timeout = null;

      if (!immediate) {
        result = func.apply(context, args);
        if (!timeout) context = args = null;
      }
    }
  };

  return function () {
    context = this;
    args = arguments;
    timestamp = _.now();
    var callNow = immediate && !timeout;
    if (!timeout) timeout = setTimeout(later, wait);

    if (callNow) {
      result = func.apply(context, args);
      context = args = null;
    }

    return result;
  };
}; // Returns the first function passed as an argument to the second,
// allowing you to adjust arguments, run code before and after, and
// conditionally execute the original function.


_.wrap = function (func, wrapper) {
  return _.partial(wrapper, func);
}; // Returns a negated version of the passed-in predicate.


_.negate = function (predicate) {
  return function () {
    return !predicate.apply(this, arguments);
  };
}; // Returns a function that is the composition of a list of functions, each
// consuming the return value of the function that follows.


_.compose = function () {
  var args = arguments;
  var start = args.length - 1;
  return function () {
    var i = start;
    var result = args[start].apply(this, arguments);

    while (i--) {
      result = args[i].call(this, result);
    }

    return result;
  };
}; // Returns a function that will only be executed on and after the Nth call.


_.after = function (times, func) {
  return function () {
    if (--times < 1) {
      return func.apply(this, arguments);
    }
  };
}; // Returns a function that will only be executed up to (but not including) the Nth call.


_.before = function (times, func) {
  var memo;
  return function () {
    if (--times > 0) {
      memo = func.apply(this, arguments);
    }

    if (times <= 1) func = null;
    return memo;
  };
}; // Returns a function that will be executed at most one time, no matter how
// often you call it. Useful for lazy initialization.


_.once = _.partial(_.before, 2); // Object Functions
// ----------------
// Keys in IE < 9 that won't be iterated by `for key in ...` and thus missed.

var hasEnumBug = !{
  toString: null
}.propertyIsEnumerable('toString');
var nonEnumerableProps = ['valueOf', 'isPrototypeOf', 'toString', 'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];

function collectNonEnumProps(obj, keys) {
  var nonEnumIdx = nonEnumerableProps.length;
  var constructor = obj.constructor;
  var proto = _.isFunction(constructor) && constructor.prototype || ObjProto; // Constructor is a special case.

  var prop = 'constructor';
  if (_.has(obj, prop) && !_.contains(keys, prop)) keys.push(prop);

  while (nonEnumIdx--) {
    prop = nonEnumerableProps[nonEnumIdx];

    if (prop in obj && obj[prop] !== proto[prop] && !_.contains(keys, prop)) {
      keys.push(prop);
    }
  }
} // Retrieve the names of an object's own properties.
// Delegates to **ECMAScript 5**'s native `Object.keys`


_.keys = function (obj) {
  if (!_.isObject(obj)) return [];
  if (nativeKeys) return nativeKeys(obj);
  var keys = [];

  for (var key in obj) {
    if (_.has(obj, key)) keys.push(key);
  } // Ahem, IE < 9.


  if (hasEnumBug) collectNonEnumProps(obj, keys);
  return keys;
}; // Retrieve all the property names of an object.


_.allKeys = function (obj) {
  if (!_.isObject(obj)) return [];
  var keys = [];

  for (var key in obj) {
    keys.push(key);
  } // Ahem, IE < 9.


  if (hasEnumBug) collectNonEnumProps(obj, keys);
  return keys;
}; // Retrieve the values of an object's properties.


_.values = function (obj) {
  var keys = _.keys(obj);

  var length = keys.length;
  var values = Array(length);

  for (var i = 0; i < length; i++) {
    values[i] = obj[keys[i]];
  }

  return values;
}; // Returns the results of applying the iteratee to each element of the object
// In contrast to _.map it returns an object


_.mapObject = function (obj, iteratee, context) {
  iteratee = cb(iteratee, context);

  var keys = _.keys(obj),
      length = keys.length,
      results = {},
      currentKey;

  for (var index = 0; index < length; index++) {
    currentKey = keys[index];
    results[currentKey] = iteratee(obj[currentKey], currentKey, obj);
  }

  return results;
}; // Convert an object into a list of `[key, value]` pairs.


_.pairs = function (obj) {
  var keys = _.keys(obj);

  var length = keys.length;
  var pairs = Array(length);

  for (var i = 0; i < length; i++) {
    pairs[i] = [keys[i], obj[keys[i]]];
  }

  return pairs;
}; // Invert the keys and values of an object. The values must be serializable.


_.invert = function (obj) {
  var result = {};

  var keys = _.keys(obj);

  for (var i = 0, length = keys.length; i < length; i++) {
    result[obj[keys[i]]] = keys[i];
  }

  return result;
}; // Return a sorted list of the function names available on the object.
// Aliased as `methods`


_.functions = _.methods = function (obj) {
  var names = [];

  for (var key in obj) {
    if (_.isFunction(obj[key])) names.push(key);
  }

  return names.sort();
}; // Extend a given object with all the properties in passed-in object(s).


_.extend = createAssigner(_.allKeys); // Assigns a given object with all the own properties in the passed-in object(s)
// (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)

_.extendOwn = _.assign = createAssigner(_.keys); // Returns the first key on an object that passes a predicate test

_.findKey = function (obj, predicate, context) {
  predicate = cb(predicate, context);

  var keys = _.keys(obj),
      key;

  for (var i = 0, length = keys.length; i < length; i++) {
    key = keys[i];
    if (predicate(obj[key], key, obj)) return key;
  }
}; // Return a copy of the object only containing the whitelisted properties.


_.pick = function (object, oiteratee, context) {
  var result = {},
      obj = object,
      iteratee,
      keys;
  if (obj == null) return result;

  if (_.isFunction(oiteratee)) {
    keys = _.allKeys(obj);
    iteratee = optimizeCb(oiteratee, context);
  } else {
    keys = flatten(arguments, false, false, 1);

    iteratee = function iteratee(value, key, obj) {
      return key in obj;
    };

    obj = Object(obj);
  }

  for (var i = 0, length = keys.length; i < length; i++) {
    var key = keys[i];
    var value = obj[key];
    if (iteratee(value, key, obj)) result[key] = value;
  }

  return result;
}; // Return a copy of the object without the blacklisted properties.


_.omit = function (obj, iteratee, context) {
  if (_.isFunction(iteratee)) {
    iteratee = _.negate(iteratee);
  } else {
    var keys = _.map(flatten(arguments, false, false, 1), String);

    iteratee = function iteratee(value, key) {
      return !_.contains(keys, key);
    };
  }

  return _.pick(obj, iteratee, context);
}; // Fill in a given object with default properties.


_.defaults = createAssigner(_.allKeys, true); // Creates an object that inherits from the given prototype object.
// If additional properties are provided then they will be added to the
// created object.

_.create = function (prototype, props) {
  var result = baseCreate(prototype);
  if (props) _.extendOwn(result, props);
  return result;
}; // Create a (shallow-cloned) duplicate of an object.


_.clone = function (obj) {
  if (!_.isObject(obj)) return obj;
  return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
}; // Invokes interceptor with the obj, and then returns obj.
// The primary purpose of this method is to "tap into" a method chain, in
// order to perform operations on intermediate results within the chain.


_.tap = function (obj, interceptor) {
  interceptor(obj);
  return obj;
}; // Returns whether an object has a given set of `key:value` pairs.


_.isMatch = function (object, attrs) {
  var keys = _.keys(attrs),
      length = keys.length;

  if (object == null) return !length;
  var obj = Object(object);

  for (var i = 0; i < length; i++) {
    var key = keys[i];
    if (attrs[key] !== obj[key] || !(key in obj)) return false;
  }

  return true;
}; // Internal recursive comparison function for `isEqual`.


var eq = function eq(a, b, aStack, bStack) {
  // Identical objects are equal. `0 === -0`, but they aren't identical.
  // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).
  if (a === b) return a !== 0 || 1 / a === 1 / b; // A strict comparison is necessary because `null == undefined`.

  if (a == null || b == null) return a === b; // Unwrap any wrapped objects.

  if (a instanceof _) a = a._wrapped;
  if (b instanceof _) b = b._wrapped; // Compare `[[Class]]` names.

  var className = toString.call(a);
  if (className !== toString.call(b)) return false;

  switch (className) {
    // Strings, numbers, regular expressions, dates, and booleans are compared by value.
    case '[object RegExp]': // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')

    case '[object String]':
      // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
      // equivalent to `new String("5")`.
      return '' + a === '' + b;

    case '[object Number]':
      // `NaN`s are equivalent, but non-reflexive.
      // Object(NaN) is equivalent to NaN
      if (+a !== +a) return +b !== +b; // An `egal` comparison is performed for other numeric values.

      return +a === 0 ? 1 / +a === 1 / b : +a === +b;

    case '[object Date]':
    case '[object Boolean]':
      // Coerce dates and booleans to numeric primitive values. Dates are compared by their
      // millisecond representations. Note that invalid dates with millisecond representations
      // of `NaN` are not equivalent.
      return +a === +b;
  }

  var areArrays = className === '[object Array]';

  if (!areArrays) {
    if (_typeof(a) != 'object' || _typeof(b) != 'object') return false; // Objects with different constructors are not equivalent, but `Object`s or `Array`s
    // from different frames are.

    var aCtor = a.constructor,
        bCtor = b.constructor;

    if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor && _.isFunction(bCtor) && bCtor instanceof bCtor) && 'constructor' in a && 'constructor' in b) {
      return false;
    }
  } // Assume equality for cyclic structures. The algorithm for detecting cyclic
  // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.
  // Initializing stack of traversed objects.
  // It's done here since we only need them for objects and arrays comparison.


  aStack = aStack || [];
  bStack = bStack || [];
  var length = aStack.length;

  while (length--) {
    // Linear search. Performance is inversely proportional to the number of
    // unique nested structures.
    if (aStack[length] === a) return bStack[length] === b;
  } // Add the first object to the stack of traversed objects.


  aStack.push(a);
  bStack.push(b); // Recursively compare objects and arrays.

  if (areArrays) {
    // Compare array lengths to determine if a deep comparison is necessary.
    length = a.length;
    if (length !== b.length) return false; // Deep compare the contents, ignoring non-numeric properties.

    while (length--) {
      if (!eq(a[length], b[length], aStack, bStack)) return false;
    }
  } else {
    // Deep compare objects.
    var keys = _.keys(a),
        key;

    length = keys.length; // Ensure that both objects contain the same number of properties before comparing deep equality.

    if (_.keys(b).length !== length) return false;

    while (length--) {
      // Deep compare each member
      key = keys[length];
      if (!(_.has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;
    }
  } // Remove the first object from the stack of traversed objects.


  aStack.pop();
  bStack.pop();
  return true;
}; // Perform a deep comparison to check if two objects are equal.


_.isEqual = function (a, b) {
  return eq(a, b);
}; // Is a given array, string, or object empty?
// An "empty" object has no enumerable own-properties.


_.isEmpty = function (obj) {
  if (obj == null) return true;
  if (isArrayLike(obj) && (_.isArray(obj) || _.isString(obj) || _.isArguments(obj))) return obj.length === 0;
  return _.keys(obj).length === 0;
}; // Is a given value a DOM element?


_.isElement = function (obj) {
  return !!(obj && obj.nodeType === 1);
}; // Is a given value an array?
// Delegates to ECMA5's native Array.isArray


_.isArray = nativeIsArray || function (obj) {
  return toString.call(obj) === '[object Array]';
}; // Is a given variable an object?


_.isObject = function (obj) {
  var type = _typeof(obj);

  return type === 'function' || type === 'object' && !!obj;
}; // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp, isError.


_.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp', 'Error'], function (name) {
  _['is' + name] = function (obj) {
    return toString.call(obj) === '[object ' + name + ']';
  };
}); // Optimize `isFunction` if appropriate. Work around some typeof bugs in old v8,
// IE 11 (#1621), and in Safari 8 (#1929).


if ( true && (typeof Int8Array === "undefined" ? "undefined" : _typeof(Int8Array)) != 'object') {
  _.isFunction = function (obj) {
    return typeof obj == 'function' || false;
  };
} // Is a given object a finite number?


_.isFinite = function (obj) {
  return isFinite(obj) && !isNaN(parseFloat(obj));
}; // Is the given value `NaN`? (NaN is the only number which does not equal itself).


_.isNaN = function (obj) {
  return _.isNumber(obj) && obj !== +obj;
}; // Is a given value a boolean?


_.isBoolean = function (obj) {
  return obj === true || obj === false || toString.call(obj) === '[object Boolean]';
}; // Is a given value equal to null?


_.isNull = function (obj) {
  return obj === null;
}; // Is a given variable undefined?


_.isUndefined = function (obj) {
  return obj === void 0;
}; // Shortcut function for checking if an object has a given property directly
// on itself (in other words, not on a prototype).


_.has = function (obj, key) {
  return obj != null && hasOwnProperty.call(obj, key);
}; // Utility Functions
// -----------------
// Keep the identity function around for default iteratees.


_.identity = function (value) {
  return value;
}; // Predicate-generating functions. Often useful outside of Underscore.


_.constant = function (value) {
  return function () {
    return value;
  };
};

_.noop = function () {};

_.property = property; // Generates a function for a given object that returns a given property.

_.propertyOf = function (obj) {
  return obj == null ? function () {} : function (key) {
    return obj[key];
  };
}; // Returns a predicate for checking whether an object has a given set of
// `key:value` pairs.


_.matcher = _.matches = function (attrs) {
  attrs = _.extendOwn({}, attrs);
  return function (obj) {
    return _.isMatch(obj, attrs);
  };
}; // Run a function **n** times.


_.times = function (n, iteratee, context) {
  var accum = Array(Math.max(0, n));
  iteratee = optimizeCb(iteratee, context, 1);

  for (var i = 0; i < n; i++) {
    accum[i] = iteratee(i);
  }

  return accum;
}; // Return a random integer between min and max (inclusive).


_.random = function (min, max) {
  if (max == null) {
    max = min;
    min = 0;
  }

  return min + Math.floor(Math.random() * (max - min + 1));
}; // A (possibly faster) way to get the current timestamp as an integer.


_.now = Date.now || function () {
  return new Date().getTime();
}; // List of HTML entities for escaping.


var escapeMap = {
  '&': '&amp;',
  '<': '&lt;',
  '>': '&gt;',
  '"': '&quot;',
  "'": '&#x27;',
  '`': '&#x60;'
};

var unescapeMap = _.invert(escapeMap); // Functions for escaping and unescaping strings to/from HTML interpolation.


var createEscaper = function createEscaper(map) {
  var escaper = function escaper(match) {
    return map[match];
  }; // Regexes for identifying a key that needs to be escaped


  var source = '(?:' + _.keys(map).join('|') + ')';
  var testRegexp = RegExp(source);
  var replaceRegexp = RegExp(source, 'g');
  return function (string) {
    string = string == null ? '' : '' + string;
    return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;
  };
};

_.escape = createEscaper(escapeMap);
_.unescape = createEscaper(unescapeMap); // If the value of the named `property` is a function then invoke it with the
// `object` as context; otherwise, return it.

_.result = function (object, property, fallback) {
  var value = object == null ? void 0 : object[property];

  if (value === void 0) {
    value = fallback;
  }

  return _.isFunction(value) ? value.call(object) : value;
}; // Generate a unique integer id (unique within the entire client session).
// Useful for temporary DOM ids.


var idCounter = 0;

_.uniqueId = function (prefix) {
  var id = ++idCounter + '';
  return prefix ? prefix + id : id;
}; // By default, Underscore uses ERB-style template delimiters, change the
// following template settings to use alternative delimiters.


_.templateSettings = {
  evaluate: /<%([\s\S]+?)%>/g,
  interpolate: /<%=([\s\S]+?)%>/g,
  escape: /<%-([\s\S]+?)%>/g
}; // When customizing `templateSettings`, if you don't want to define an
// interpolation, evaluation or escaping regex, we need one that is
// guaranteed not to match.

var noMatch = /(.)^/; // Certain characters need to be escaped so that they can be put into a
// string literal.

var escapes = {
  "'": "'",
  '\\': '\\',
  '\r': 'r',
  '\n': 'n',
  "\u2028": 'u2028',
  "\u2029": 'u2029'
};
var escaper = /\\|'|\r|\n|\u2028|\u2029/g;

var escapeChar = function escapeChar(match) {
  return '\\' + escapes[match];
}; // JavaScript micro-templating, similar to John Resig's implementation.
// Underscore templating handles arbitrary delimiters, preserves whitespace,
// and correctly escapes quotes within interpolated code.
// NB: `oldSettings` only exists for backwards compatibility.


_.template = function (text, settings, oldSettings) {
  if (!settings && oldSettings) settings = oldSettings;
  settings = _.defaults({}, settings, _.templateSettings); // Combine delimiters into one regular expression via alternation.

  var matcher = RegExp([(settings.escape || noMatch).source, (settings.interpolate || noMatch).source, (settings.evaluate || noMatch).source].join('|') + '|$', 'g'); // Compile the template source, escaping string literals appropriately.

  var index = 0;
  var source = "__p+='";
  text.replace(matcher, function (match, escape, interpolate, evaluate, offset) {
    source += text.slice(index, offset).replace(escaper, escapeChar);
    index = offset + match.length;

    if (escape) {
      source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
    } else if (interpolate) {
      source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
    } else if (evaluate) {
      source += "';\n" + evaluate + "\n__p+='";
    } // Adobe VMs need the match returned to produce the correct offest.


    return match;
  });
  source += "';\n"; // If a variable is not specified, place data values in local scope.

  if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n';
  source = "var __t,__p='',__j=Array.prototype.join," + "print=function(){__p+=__j.call(arguments,'');};\n" + source + 'return __p;\n';

  try {
    var render = new Function(settings.variable || 'obj', '_', source);
  } catch (e) {
    e.source = source;
    throw e;
  }

  var template = function template(data) {
    return render.call(this, data, _);
  }; // Provide the compiled source as a convenience for precompilation.


  var argument = settings.variable || 'obj';
  template.source = 'function(' + argument + '){\n' + source + '}';
  return template;
}; // Add a "chain" function. Start chaining a wrapped Underscore object.


_.chain = function (obj) {
  var instance = _(obj);

  instance._chain = true;
  return instance;
}; // OOP
// ---------------
// If Underscore is called as a function, it returns a wrapped object that
// can be used OO-style. This wrapper holds altered versions of all the
// underscore functions. Wrapped objects may be chained.
// Helper function to continue chaining intermediate results.


var result = function result(instance, obj) {
  return instance._chain ? _(obj).chain() : obj;
}; // Add your own custom functions to the Underscore object.


_.mixin = function (obj) {
  _.each(_.functions(obj), function (name) {
    var func = _[name] = obj[name];

    _.prototype[name] = function () {
      var args = [this._wrapped];
      push.apply(args, arguments);
      return result(this, func.apply(_, args));
    };
  });
}; // Add all of the Underscore functions to the wrapper object.


_.mixin(_); // Add all mutator Array functions to the wrapper.


_.each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function (name) {
  var method = ArrayProto[name];

  _.prototype[name] = function () {
    var obj = this._wrapped;
    method.apply(obj, arguments);
    if ((name === 'shift' || name === 'splice') && obj.length === 0) delete obj[0];
    return result(this, obj);
  };
}); // Add all accessor Array functions to the wrapper.


_.each(['concat', 'join', 'slice'], function (name) {
  var method = ArrayProto[name];

  _.prototype[name] = function () {
    return result(this, method.apply(this._wrapped, arguments));
  };
}); // Extracts the result from a wrapped and chained object.


_.prototype.value = function () {
  return this._wrapped;
}; // Provide unwrapping proxy for some methods used in engine operations
// such as arithmetic and JSON stringification.


_.prototype.valueOf = _.prototype.toJSON = _.prototype.value;

_.prototype.toString = function () {
  return '' + this._wrapped;
};

/* harmony default export */ __webpack_exports__["default"] = (_);

/***/ }),

/***/ "./vendor/zlib_and_gzip.js":
/*!*********************************!*\
  !*** ./vendor/zlib_and_gzip.js ***!
  \*********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/**
 * @fileoverview Zlib namespace. Zlib の仕様に準拠した圧縮は Zlib.Deflate で実装
 * されている. これは Inflate との共存を考慮している為.
 */
var USE_TYPEDARRAY = true;
var Zlib = {
  Huffman: {},
  Util: {},
  CRC32: {}
};
/**
 * Compression Method
 * @enum {number}
 */

Zlib.CompressionMethod = {
  DEFLATE: 8,
  RESERVED: 15
};
/**
 * @param {Object=} opt_params options.
 * @constructor
 */

Zlib.Zip = function (opt_params) {
  opt_params = opt_params || {};
  /** @type {Array.<{
   *   buffer: !(Array.<number>|Uint8Array),
   *   option: Object,
   *   compressed: boolean,
   *   encrypted: boolean,
   *   size: number,
   *   crc32: number
   * }>} */

  this.files = [];
  /** @type {(Array.<number>|Uint8Array)} */

  this.comment = opt_params['comment'];
  /** @type {(Array.<number>|Uint8Array)} */

  this.password;
};
/**
 * @enum {number}
 */


Zlib.Zip.CompressionMethod = {
  STORE: 0,
  DEFLATE: 8
};
/**
 * @enum {number}
 */

Zlib.Zip.OperatingSystem = {
  MSDOS: 0,
  UNIX: 3,
  MACINTOSH: 7
};
/**
 * @enum {number}
 */

Zlib.Zip.Flags = {
  ENCRYPT: 0x0001,
  DESCRIPTOR: 0x0008,
  UTF8: 0x0800
};
/**
 * @type {Array.<number>}
 * @const
 */

Zlib.Zip.FileHeaderSignature = [0x50, 0x4b, 0x01, 0x02];
/**
 * @type {Array.<number>}
 * @const
 */

Zlib.Zip.LocalFileHeaderSignature = [0x50, 0x4b, 0x03, 0x04];
/**
 * @type {Array.<number>}
 * @const
 */

Zlib.Zip.CentralDirectorySignature = [0x50, 0x4b, 0x05, 0x06];
/**
 * @param {Array.<number>|Uint8Array} input
 * @param {Object=} opt_params options.
 */

Zlib.Zip.prototype.addFile = function (input, opt_params) {
  opt_params = opt_params || {};
  /** @type {string} */

  var filename =  false || opt_params['filename'];
  /** @type {boolean} */

  var compressed;
  /** @type {number} */

  var size = input.length;
  /** @type {number} */

  var crc32 = 0;

  if (USE_TYPEDARRAY && input instanceof Array) {
    input = new Uint8Array(input);
  } // default


  if (typeof opt_params['compressionMethod'] !== 'number') {
    opt_params['compressionMethod'] = Zlib.Zip.CompressionMethod.DEFLATE;
  } // その場で圧縮する場合


  if (opt_params['compress']) {
    switch (opt_params['compressionMethod']) {
      case Zlib.Zip.CompressionMethod.STORE:
        break;

      case Zlib.Zip.CompressionMethod.DEFLATE:
        crc32 = Zlib.CRC32.calc(input);
        input = this.deflateWithOption(input, opt_params);
        compressed = true;
        break;

      default:
        throw new Error('unknown compression method:' + opt_params['compressionMethod']);
    }
  }

  this.files.push({
    buffer: input,
    option: opt_params,
    compressed: compressed,
    encrypted: false,
    size: size,
    crc32: crc32
  });
};
/**
 * @param {(Array.<number>|Uint8Array)} password
 */


Zlib.Zip.prototype.setPassword = function (password) {
  this.password = password;
};

Zlib.Zip.prototype.compress = function () {
  /** @type {Array.<{
   *   buffer: !(Array.<number>|Uint8Array),
   *   option: Object,
   *   compressed: boolean,
   *   encrypted: boolean,
   *   size: number,
   *   crc32: number
   * }>} */
  var files = this.files;
  /** @type {{
   *   buffer: !(Array.<number>|Uint8Array),
   *   option: Object,
   *   compressed: boolean,
   *   encrypted: boolean,
   *   size: number,
   *   crc32: number
   * }} */

  var file;
  /** @type {!(Array.<number>|Uint8Array)} */

  var output;
  /** @type {number} */

  var op1;
  /** @type {number} */

  var op2;
  /** @type {number} */

  var op3;
  /** @type {number} */

  var localFileSize = 0;
  /** @type {number} */

  var centralDirectorySize = 0;
  /** @type {number} */

  var endOfCentralDirectorySize;
  /** @type {number} */

  var offset;
  /** @type {number} */

  var needVersion;
  /** @type {number} */

  var flags;
  /** @type {Zlib.Zip.CompressionMethod} */

  var compressionMethod;
  /** @type {Date} */

  var date;
  /** @type {number} */

  var crc32;
  /** @type {number} */

  var size;
  /** @type {number} */

  var plainSize;
  /** @type {number} */

  var filenameLength;
  /** @type {number} */

  var extraFieldLength;
  /** @type {number} */

  var commentLength;
  /** @type {(Array.<number>|Uint8Array)} */

  var filename;
  /** @type {(Array.<number>|Uint8Array)} */

  var extraField;
  /** @type {(Array.<number>|Uint8Array)} */

  var comment;
  /** @type {(Array.<number>|Uint8Array)} */

  var buffer;
  /** @type {*} */

  var tmp;
  /** @type {Array.<number>|Uint32Array|Object} */

  var key;
  /** @type {number} */

  var i;
  /** @type {number} */

  var il;
  /** @type {number} */

  var j;
  /** @type {number} */

  var jl; // ファイルの圧縮

  for (i = 0, il = files.length; i < il; ++i) {
    file = files[i];
    filenameLength = file.option['filename'] ? file.option['filename'].length : 0;
    extraFieldLength = file.option['extraField'] ? file.option['extraField'].length : 0;
    commentLength = file.option['comment'] ? file.option['comment'].length : 0; // 圧縮されていなかったら圧縮

    if (!file.compressed) {
      // 圧縮前に CRC32 の計算をしておく
      file.crc32 = Zlib.CRC32.calc(file.buffer);

      switch (file.option['compressionMethod']) {
        case Zlib.Zip.CompressionMethod.STORE:
          break;

        case Zlib.Zip.CompressionMethod.DEFLATE:
          file.buffer = this.deflateWithOption(file.buffer, file.option);
          file.compressed = true;
          break;

        default:
          throw new Error('unknown compression method:' + file.option['compressionMethod']);
      }
    } // encryption


    if (file.option['password'] !== void 0 || this.password !== void 0) {
      // init encryption
      key = this.createEncryptionKey(file.option['password'] || this.password); // add header

      buffer = file.buffer;

      if (USE_TYPEDARRAY) {
        tmp = new Uint8Array(buffer.length + 12);
        tmp.set(buffer, 12);
        buffer = tmp;
      } else {
        buffer.unshift(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
      }

      for (j = 0; j < 12; ++j) {
        buffer[j] = this.encode(key, i === 11 ? file.crc32 & 0xff : Math.random() * 256 | 0);
      } // data encryption


      for (jl = buffer.length; j < jl; ++j) {
        buffer[j] = this.encode(key, buffer[j]);
      }

      file.buffer = buffer;
    } // 必要バッファサイズの計算


    localFileSize += // local file header
    30 + filenameLength + // file data
    file.buffer.length;
    centralDirectorySize += // file header
    46 + filenameLength + commentLength;
  } // end of central directory


  endOfCentralDirectorySize = 22 + (this.comment ? this.comment.length : 0);
  output = new (USE_TYPEDARRAY ? Uint8Array : Array)(localFileSize + centralDirectorySize + endOfCentralDirectorySize);
  op1 = 0;
  op2 = localFileSize;
  op3 = op2 + centralDirectorySize; // ファイルの圧縮

  for (i = 0, il = files.length; i < il; ++i) {
    file = files[i];
    filenameLength = file.option['filename'] ? file.option['filename'].length : 0;
    extraFieldLength = 0; // TODO

    commentLength = file.option['comment'] ? file.option['comment'].length : 0; //-------------------------------------------------------------------------
    // local file header & file header
    //-------------------------------------------------------------------------

    offset = op1; // signature
    // local file header

    output[op1++] = Zlib.Zip.LocalFileHeaderSignature[0];
    output[op1++] = Zlib.Zip.LocalFileHeaderSignature[1];
    output[op1++] = Zlib.Zip.LocalFileHeaderSignature[2];
    output[op1++] = Zlib.Zip.LocalFileHeaderSignature[3]; // file header

    output[op2++] = Zlib.Zip.FileHeaderSignature[0];
    output[op2++] = Zlib.Zip.FileHeaderSignature[1];
    output[op2++] = Zlib.Zip.FileHeaderSignature[2];
    output[op2++] = Zlib.Zip.FileHeaderSignature[3]; // compressor info

    needVersion = 20;
    output[op2++] = needVersion & 0xff;
    output[op2++] =
    /** @type {Zlib.Zip.OperatingSystem} */
    file.option['os'] || Zlib.Zip.OperatingSystem.MSDOS; // need version

    output[op1++] = output[op2++] = needVersion & 0xff;
    output[op1++] = output[op2++] = needVersion >> 8 & 0xff; // general purpose bit flag

    flags = 0;

    if (file.option['password'] || this.password) {
      flags |= Zlib.Zip.Flags.ENCRYPT;
    }

    output[op1++] = output[op2++] = flags & 0xff;
    output[op1++] = output[op2++] = flags >> 8 & 0xff; // compression method

    compressionMethod =
    /** @type {Zlib.Zip.CompressionMethod} */
    file.option['compressionMethod'];
    output[op1++] = output[op2++] = compressionMethod & 0xff;
    output[op1++] = output[op2++] = compressionMethod >> 8 & 0xff; // date

    date =
    /** @type {(Date|undefined)} */
    file.option['date'] || new Date();
    output[op1++] = output[op2++] = (date.getMinutes() & 0x7) << 5 | (date.getSeconds() / 2 | 0);
    output[op1++] = output[op2++] = date.getHours() << 3 | date.getMinutes() >> 3; //

    output[op1++] = output[op2++] = (date.getMonth() + 1 & 0x7) << 5 | date.getDate();
    output[op1++] = output[op2++] = (date.getFullYear() - 1980 & 0x7f) << 1 | date.getMonth() + 1 >> 3; // CRC-32

    crc32 = file.crc32;
    output[op1++] = output[op2++] = crc32 & 0xff;
    output[op1++] = output[op2++] = crc32 >> 8 & 0xff;
    output[op1++] = output[op2++] = crc32 >> 16 & 0xff;
    output[op1++] = output[op2++] = crc32 >> 24 & 0xff; // compressed size

    size = file.buffer.length;
    output[op1++] = output[op2++] = size & 0xff;
    output[op1++] = output[op2++] = size >> 8 & 0xff;
    output[op1++] = output[op2++] = size >> 16 & 0xff;
    output[op1++] = output[op2++] = size >> 24 & 0xff; // uncompressed size

    plainSize = file.size;
    output[op1++] = output[op2++] = plainSize & 0xff;
    output[op1++] = output[op2++] = plainSize >> 8 & 0xff;
    output[op1++] = output[op2++] = plainSize >> 16 & 0xff;
    output[op1++] = output[op2++] = plainSize >> 24 & 0xff; // filename length

    output[op1++] = output[op2++] = filenameLength & 0xff;
    output[op1++] = output[op2++] = filenameLength >> 8 & 0xff; // extra field length

    output[op1++] = output[op2++] = extraFieldLength & 0xff;
    output[op1++] = output[op2++] = extraFieldLength >> 8 & 0xff; // file comment length

    output[op2++] = commentLength & 0xff;
    output[op2++] = commentLength >> 8 & 0xff; // disk number start

    output[op2++] = 0;
    output[op2++] = 0; // internal file attributes

    output[op2++] = 0;
    output[op2++] = 0; // external file attributes

    output[op2++] = 0;
    output[op2++] = 0;
    output[op2++] = 0;
    output[op2++] = 0; // relative offset of local header

    output[op2++] = offset & 0xff;
    output[op2++] = offset >> 8 & 0xff;
    output[op2++] = offset >> 16 & 0xff;
    output[op2++] = offset >> 24 & 0xff; // filename

    filename = file.option['filename'];

    if (filename) {
      if (USE_TYPEDARRAY) {
        output.set(filename, op1);
        output.set(filename, op2);
        op1 += filenameLength;
        op2 += filenameLength;
      } else {
        for (j = 0; j < filenameLength; ++j) {
          output[op1++] = output[op2++] = filename[j];
        }
      }
    } // extra field


    extraField = file.option['extraField'];

    if (extraField) {
      if (USE_TYPEDARRAY) {
        output.set(extraField, op1);
        output.set(extraField, op2);
        op1 += extraFieldLength;
        op2 += extraFieldLength;
      } else {
        for (j = 0; j < commentLength; ++j) {
          output[op1++] = output[op2++] = extraField[j];
        }
      }
    } // comment


    comment = file.option['comment'];

    if (comment) {
      if (USE_TYPEDARRAY) {
        output.set(comment, op2);
        op2 += commentLength;
      } else {
        for (j = 0; j < commentLength; ++j) {
          output[op2++] = comment[j];
        }
      }
    } //-------------------------------------------------------------------------
    // file data
    //-------------------------------------------------------------------------


    if (USE_TYPEDARRAY) {
      output.set(file.buffer, op1);
      op1 += file.buffer.length;
    } else {
      for (j = 0, jl = file.buffer.length; j < jl; ++j) {
        output[op1++] = file.buffer[j];
      }
    }
  } //-------------------------------------------------------------------------
  // end of central directory
  //-------------------------------------------------------------------------
  // signature


  output[op3++] = Zlib.Zip.CentralDirectorySignature[0];
  output[op3++] = Zlib.Zip.CentralDirectorySignature[1];
  output[op3++] = Zlib.Zip.CentralDirectorySignature[2];
  output[op3++] = Zlib.Zip.CentralDirectorySignature[3]; // number of this disk

  output[op3++] = 0;
  output[op3++] = 0; // number of the disk with the start of the central directory

  output[op3++] = 0;
  output[op3++] = 0; // total number of entries in the central directory on this disk

  output[op3++] = il & 0xff;
  output[op3++] = il >> 8 & 0xff; // total number of entries in the central directory

  output[op3++] = il & 0xff;
  output[op3++] = il >> 8 & 0xff; // size of the central directory

  output[op3++] = centralDirectorySize & 0xff;
  output[op3++] = centralDirectorySize >> 8 & 0xff;
  output[op3++] = centralDirectorySize >> 16 & 0xff;
  output[op3++] = centralDirectorySize >> 24 & 0xff; // offset of start of central directory with respect to the starting disk number

  output[op3++] = localFileSize & 0xff;
  output[op3++] = localFileSize >> 8 & 0xff;
  output[op3++] = localFileSize >> 16 & 0xff;
  output[op3++] = localFileSize >> 24 & 0xff; // .ZIP file comment length

  commentLength = this.comment ? this.comment.length : 0;
  output[op3++] = commentLength & 0xff;
  output[op3++] = commentLength >> 8 & 0xff; // .ZIP file comment

  if (this.comment) {
    if (USE_TYPEDARRAY) {
      output.set(this.comment, op3);
      op3 += commentLength;
    } else {
      for (j = 0, jl = commentLength; j < jl; ++j) {
        output[op3++] = this.comment[j];
      }
    }
  }

  return output;
};
/**
 * @param {!(Array.<number>|Uint8Array)} input
 * @param {Object=} opt_params options.
 * @return {!(Array.<number>|Uint8Array)}
 */


Zlib.Zip.prototype.deflateWithOption = function (input, opt_params) {
  /** @type {Zlib.RawDeflate} */
  var deflator = new Zlib.RawDeflate(input, opt_params['deflateOption']);
  return deflator.compress();
};
/**
 * @param {(Array.<number>|Uint32Array)} key
 * @return {number}
 */


Zlib.Zip.prototype.getByte = function (key) {
  /** @type {number} */
  var tmp = key[2] & 0xffff | 2;
  return tmp * (tmp ^ 1) >> 8 & 0xff;
};
/**
 * @param {(Array.<number>|Uint32Array|Object)} key
 * @param {number} n
 * @return {number}
 */


Zlib.Zip.prototype.encode = function (key, n) {
  /** @type {number} */
  var tmp = this.getByte(
  /** @type {(Array.<number>|Uint32Array)} */
  key);
  this.updateKeys(
  /** @type {(Array.<number>|Uint32Array)} */
  key, n);
  return tmp ^ n;
};
/**
 * @param {(Array.<number>|Uint32Array)} key
 * @param {number} n
 */


Zlib.Zip.prototype.updateKeys = function (key, n) {
  key[0] = Zlib.CRC32.single(key[0], n);
  key[1] = (((key[1] + (key[0] & 0xff)) * 20173 >>> 0) * 6681 >>> 0) + 1 >>> 0;
  key[2] = Zlib.CRC32.single(key[2], key[1] >>> 24);
};
/**
 * @param {(Array.<number>|Uint8Array)} password
 * @return {!(Array.<number>|Uint32Array|Object)}
 */


Zlib.Zip.prototype.createEncryptionKey = function (password) {
  /** @type {!(Array.<number>|Uint32Array)} */
  var key = [305419896, 591751049, 878082192];
  /** @type {number} */

  var i;
  /** @type {number} */

  var il;

  if (USE_TYPEDARRAY) {
    key = new Uint32Array(key);
  }

  for (i = 0, il = password.length; i < il; ++i) {
    this.updateKeys(key, password[i] & 0xff);
  }

  return key;
};
/**
 * build huffman table from length list.
 * @param {!(Array.<number>|Uint8Array)} lengths length list.
 * @return {!Array} huffman table.
 */


Zlib.Huffman.buildHuffmanTable = function (lengths) {
  /** @type {number} length list size. */
  var listSize = lengths.length;
  /** @type {number} max code length for table size. */

  var maxCodeLength = 0;
  /** @type {number} min code length for table size. */

  var minCodeLength = Number.POSITIVE_INFINITY;
  /** @type {number} table size. */

  var size;
  /** @type {!(Array|Uint8Array)} huffman code table. */

  var table;
  /** @type {number} bit length. */

  var bitLength;
  /** @type {number} huffman code. */

  var code;
  /**
   * サイズが 2^maxlength 個のテーブルを埋めるためのスキップ長.
   * @type {number} skip length for table filling.
   */

  var skip;
  /** @type {number} reversed code. */

  var reversed;
  /** @type {number} reverse temp. */

  var rtemp;
  /** @type {number} loop counter. */

  var i;
  /** @type {number} loop limit. */

  var il;
  /** @type {number} loop counter. */

  var j;
  /** @type {number} table value. */

  var value; // Math.max は遅いので最長の値は for-loop で取得する

  for (i = 0, il = listSize; i < il; ++i) {
    if (lengths[i] > maxCodeLength) {
      maxCodeLength = lengths[i];
    }

    if (lengths[i] < minCodeLength) {
      minCodeLength = lengths[i];
    }
  }

  size = 1 << maxCodeLength;
  table = new (USE_TYPEDARRAY ? Uint32Array : Array)(size); // ビット長の短い順からハフマン符号を割り当てる

  for (bitLength = 1, code = 0, skip = 2; bitLength <= maxCodeLength;) {
    for (i = 0; i < listSize; ++i) {
      if (lengths[i] === bitLength) {
        // ビットオーダーが逆になるためビット長分並びを反転する
        for (reversed = 0, rtemp = code, j = 0; j < bitLength; ++j) {
          reversed = reversed << 1 | rtemp & 1;
          rtemp >>= 1;
        } // 最大ビット長をもとにテーブルを作るため、
        // 最大ビット長以外では 0 / 1 どちらでも良い箇所ができる
        // そのどちらでも良い場所は同じ値で埋めることで
        // 本来のビット長以上のビット数取得しても問題が起こらないようにする


        value = bitLength << 16 | i;

        for (j = reversed; j < size; j += skip) {
          table[j] = value;
        }

        ++code;
      }
    } // 次のビット長へ


    ++bitLength;
    code <<= 1;
    skip <<= 1;
  }

  return [table, maxCodeLength, minCodeLength];
}; //-----------------------------------------------------------------------------

/** @define {number} buffer block size. */


var ZLIB_RAW_INFLATE_BUFFER_SIZE = 0x8000; // [ 0x8000 >= ZLIB_BUFFER_BLOCK_SIZE ]
//-----------------------------------------------------------------------------

var buildHuffmanTable = Zlib.Huffman.buildHuffmanTable;
/**
 * @constructor
 * @param {!(Uint8Array|Array.<number>)} input input buffer.
 * @param {Object} opt_params option parameter.
 *
 * opt_params は以下のプロパティを指定する事ができます。
 *   - index: input buffer の deflate コンテナの開始位置.
 *   - blockSize: バッファのブロックサイズ.
 *   - bufferType: Zlib.RawInflate.BufferType の値によってバッファの管理方法を指定する.
 *   - resize: 確保したバッファが実際の大きさより大きかった場合に切り詰める.
 */

Zlib.RawInflate = function (input, opt_params) {
  /** @type {!(Array.<number>|Uint8Array)} inflated buffer */
  this.buffer;
  /** @type {!Array.<(Array.<number>|Uint8Array)>} */

  this.blocks = [];
  /** @type {number} block size. */

  this.bufferSize = ZLIB_RAW_INFLATE_BUFFER_SIZE;
  /** @type {!number} total output buffer pointer. */

  this.totalpos = 0;
  /** @type {!number} input buffer pointer. */

  this.ip = 0;
  /** @type {!number} bit stream reader buffer. */

  this.bitsbuf = 0;
  /** @type {!number} bit stream reader buffer size. */

  this.bitsbuflen = 0;
  /** @type {!(Array.<number>|Uint8Array)} input buffer. */

  this.input = USE_TYPEDARRAY ? new Uint8Array(input) : input;
  /** @type {!(Uint8Array|Array.<number>)} output buffer. */

  this.output;
  /** @type {!number} output buffer pointer. */

  this.op;
  /** @type {boolean} is final block flag. */

  this.bfinal = false;
  /** @type {Zlib.RawInflate.BufferType} buffer management. */

  this.bufferType = Zlib.RawInflate.BufferType.ADAPTIVE;
  /** @type {boolean} resize flag for memory size optimization. */

  this.resize = false; // option parameters

  if (opt_params || !(opt_params = {})) {
    if (opt_params['index']) {
      this.ip = opt_params['index'];
    }

    if (opt_params['bufferSize']) {
      this.bufferSize = opt_params['bufferSize'];
    }

    if (opt_params['bufferType']) {
      this.bufferType = opt_params['bufferType'];
    }

    if (opt_params['resize']) {
      this.resize = opt_params['resize'];
    }
  } // initialize


  switch (this.bufferType) {
    case Zlib.RawInflate.BufferType.BLOCK:
      this.op = Zlib.RawInflate.MaxBackwardLength;
      this.output = new (USE_TYPEDARRAY ? Uint8Array : Array)(Zlib.RawInflate.MaxBackwardLength + this.bufferSize + Zlib.RawInflate.MaxCopyLength);
      break;

    case Zlib.RawInflate.BufferType.ADAPTIVE:
      this.op = 0;
      this.output = new (USE_TYPEDARRAY ? Uint8Array : Array)(this.bufferSize);
      break;

    default:
      throw new Error('invalid inflate mode');
  }
};
/**
 * @enum {number}
 */


Zlib.RawInflate.BufferType = {
  BLOCK: 0,
  ADAPTIVE: 1
};
/**
 * decompress.
 * @return {!(Uint8Array|Array.<number>)} inflated buffer.
 */

Zlib.RawInflate.prototype.decompress = function () {
  while (!this.bfinal) {
    this.parseBlock();
  }

  switch (this.bufferType) {
    case Zlib.RawInflate.BufferType.BLOCK:
      return this.concatBufferBlock();

    case Zlib.RawInflate.BufferType.ADAPTIVE:
      return this.concatBufferDynamic();

    default:
      throw new Error('invalid inflate mode');
  }
};
/**
 * @const
 * @type {number} max backward length for LZ77.
 */


Zlib.RawInflate.MaxBackwardLength = 32768;
/**
 * @const
 * @type {number} max copy length for LZ77.
 */

Zlib.RawInflate.MaxCopyLength = 258;
/**
 * huffman order
 * @const
 * @type {!(Array.<number>|Uint8Array)}
 */

Zlib.RawInflate.Order = function (table) {
  return USE_TYPEDARRAY ? new Uint16Array(table) : table;
}([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);
/**
 * huffman length code table.
 * @const
 * @type {!(Array.<number>|Uint16Array)}
 */


Zlib.RawInflate.LengthCodeTable = function (table) {
  return USE_TYPEDARRAY ? new Uint16Array(table) : table;
}([0x0003, 0x0004, 0x0005, 0x0006, 0x0007, 0x0008, 0x0009, 0x000a, 0x000b, 0x000d, 0x000f, 0x0011, 0x0013, 0x0017, 0x001b, 0x001f, 0x0023, 0x002b, 0x0033, 0x003b, 0x0043, 0x0053, 0x0063, 0x0073, 0x0083, 0x00a3, 0x00c3, 0x00e3, 0x0102, 0x0102, 0x0102]);
/**
 * huffman length extra-bits table.
 * @const
 * @type {!(Array.<number>|Uint8Array)}
 */


Zlib.RawInflate.LengthExtraTable = function (table) {
  return USE_TYPEDARRAY ? new Uint8Array(table) : table;
}([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 0, 0]);
/**
 * huffman dist code table.
 * @const
 * @type {!(Array.<number>|Uint16Array)}
 */


Zlib.RawInflate.DistCodeTable = function (table) {
  return USE_TYPEDARRAY ? new Uint16Array(table) : table;
}([0x0001, 0x0002, 0x0003, 0x0004, 0x0005, 0x0007, 0x0009, 0x000d, 0x0011, 0x0019, 0x0021, 0x0031, 0x0041, 0x0061, 0x0081, 0x00c1, 0x0101, 0x0181, 0x0201, 0x0301, 0x0401, 0x0601, 0x0801, 0x0c01, 0x1001, 0x1801, 0x2001, 0x3001, 0x4001, 0x6001]);
/**
 * huffman dist extra-bits table.
 * @const
 * @type {!(Array.<number>|Uint8Array)}
 */


Zlib.RawInflate.DistExtraTable = function (table) {
  return USE_TYPEDARRAY ? new Uint8Array(table) : table;
}([0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13]);
/**
 * fixed huffman length code table
 * @const
 * @type {!Array}
 */


Zlib.RawInflate.FixedLiteralLengthTable = function (table) {
  return table;
}(function () {
  var lengths = new (USE_TYPEDARRAY ? Uint8Array : Array)(288);
  var i, il;

  for (i = 0, il = lengths.length; i < il; ++i) {
    lengths[i] = i <= 143 ? 8 : i <= 255 ? 9 : i <= 279 ? 7 : 8;
  }

  return buildHuffmanTable(lengths);
}());
/**
 * fixed huffman distance code table
 * @const
 * @type {!Array}
 */


Zlib.RawInflate.FixedDistanceTable = function (table) {
  return table;
}(function () {
  var lengths = new (USE_TYPEDARRAY ? Uint8Array : Array)(30);
  var i, il;

  for (i = 0, il = lengths.length; i < il; ++i) {
    lengths[i] = 5;
  }

  return buildHuffmanTable(lengths);
}());
/**
 * parse deflated block.
 */


Zlib.RawInflate.prototype.parseBlock = function () {
  /** @type {number} header */
  var hdr = this.readBits(3); // BFINAL

  if (hdr & 0x1) {
    this.bfinal = true;
  } // BTYPE


  hdr >>>= 1;

  switch (hdr) {
    // uncompressed
    case 0:
      this.parseUncompressedBlock();
      break;
    // fixed huffman

    case 1:
      this.parseFixedHuffmanBlock();
      break;
    // dynamic huffman

    case 2:
      this.parseDynamicHuffmanBlock();
      break;
    // reserved or other

    default:
      throw new Error('unknown BTYPE: ' + hdr);
  }
};
/**
 * read inflate bits
 * @param {number} length bits length.
 * @return {number} read bits.
 */


Zlib.RawInflate.prototype.readBits = function (length) {
  var bitsbuf = this.bitsbuf;
  var bitsbuflen = this.bitsbuflen;
  var input = this.input;
  var ip = this.ip;
  /** @type {number} */

  var inputLength = input.length;
  /** @type {number} input and output byte. */

  var octet; // input byte

  if (ip + (length - bitsbuflen + 7 >> 3) >= inputLength) {
    throw new Error('input buffer is broken');
  } // not enough buffer


  while (bitsbuflen < length) {
    bitsbuf |= input[ip++] << bitsbuflen;
    bitsbuflen += 8;
  } // output byte


  octet = bitsbuf &
  /* MASK */
  (1 << length) - 1;
  bitsbuf >>>= length;
  bitsbuflen -= length;
  this.bitsbuf = bitsbuf;
  this.bitsbuflen = bitsbuflen;
  this.ip = ip;
  return octet;
};
/**
 * read huffman code using table
 * @param {!(Array.<number>|Uint8Array|Uint16Array)} table huffman code table.
 * @return {number} huffman code.
 */


Zlib.RawInflate.prototype.readCodeByTable = function (table) {
  var bitsbuf = this.bitsbuf;
  var bitsbuflen = this.bitsbuflen;
  var input = this.input;
  var ip = this.ip;
  /** @type {number} */

  var inputLength = input.length;
  /** @type {!(Array.<number>|Uint8Array)} huffman code table */

  var codeTable = table[0];
  /** @type {number} */

  var maxCodeLength = table[1];
  /** @type {number} code length & code (16bit, 16bit) */

  var codeWithLength;
  /** @type {number} code bits length */

  var codeLength; // not enough buffer

  while (bitsbuflen < maxCodeLength) {
    if (ip >= inputLength) {
      break;
    }

    bitsbuf |= input[ip++] << bitsbuflen;
    bitsbuflen += 8;
  } // read max length


  codeWithLength = codeTable[bitsbuf & (1 << maxCodeLength) - 1];
  codeLength = codeWithLength >>> 16;

  if (codeLength > bitsbuflen) {
    throw new Error('invalid code length: ' + codeLength);
  }

  this.bitsbuf = bitsbuf >> codeLength;
  this.bitsbuflen = bitsbuflen - codeLength;
  this.ip = ip;
  return codeWithLength & 0xffff;
};
/**
 * parse uncompressed block.
 */


Zlib.RawInflate.prototype.parseUncompressedBlock = function () {
  var input = this.input;
  var ip = this.ip;
  var output = this.output;
  var op = this.op;
  /** @type {number} */

  var inputLength = input.length;
  /** @type {number} block length */

  var len;
  /** @type {number} number for check block length */

  var nlen;
  /** @type {number} output buffer length */

  var olength = output.length;
  /** @type {number} copy counter */

  var preCopy; // skip buffered header bits

  this.bitsbuf = 0;
  this.bitsbuflen = 0; // len

  if (ip + 1 >= inputLength) {
    throw new Error('invalid uncompressed block header: LEN');
  }

  len = input[ip++] | input[ip++] << 8; // nlen

  if (ip + 1 >= inputLength) {
    throw new Error('invalid uncompressed block header: NLEN');
  }

  nlen = input[ip++] | input[ip++] << 8; // check len & nlen

  if (len === ~nlen) {
    throw new Error('invalid uncompressed block header: length verify');
  } // check size


  if (ip + len > input.length) {
    throw new Error('input buffer is broken');
  } // expand buffer


  switch (this.bufferType) {
    case Zlib.RawInflate.BufferType.BLOCK:
      // pre copy
      while (op + len > output.length) {
        preCopy = olength - op;
        len -= preCopy;

        if (USE_TYPEDARRAY) {
          output.set(input.subarray(ip, ip + preCopy), op);
          op += preCopy;
          ip += preCopy;
        } else {
          while (preCopy--) {
            output[op++] = input[ip++];
          }
        }

        this.op = op;
        output = this.expandBufferBlock();
        op = this.op;
      }

      break;

    case Zlib.RawInflate.BufferType.ADAPTIVE:
      while (op + len > output.length) {
        output = this.expandBufferAdaptive({
          fixRatio: 2
        });
      }

      break;

    default:
      throw new Error('invalid inflate mode');
  } // copy


  if (USE_TYPEDARRAY) {
    output.set(input.subarray(ip, ip + len), op);
    op += len;
    ip += len;
  } else {
    while (len--) {
      output[op++] = input[ip++];
    }
  }

  this.ip = ip;
  this.op = op;
  this.output = output;
};
/**
 * parse fixed huffman block.
 */


Zlib.RawInflate.prototype.parseFixedHuffmanBlock = function () {
  switch (this.bufferType) {
    case Zlib.RawInflate.BufferType.ADAPTIVE:
      this.decodeHuffmanAdaptive(Zlib.RawInflate.FixedLiteralLengthTable, Zlib.RawInflate.FixedDistanceTable);
      break;

    case Zlib.RawInflate.BufferType.BLOCK:
      this.decodeHuffmanBlock(Zlib.RawInflate.FixedLiteralLengthTable, Zlib.RawInflate.FixedDistanceTable);
      break;

    default:
      throw new Error('invalid inflate mode');
  }
};
/**
 * parse dynamic huffman block.
 */


Zlib.RawInflate.prototype.parseDynamicHuffmanBlock = function () {
  /** @type {number} number of literal and length codes. */
  var hlit = this.readBits(5) + 257;
  /** @type {number} number of distance codes. */

  var hdist = this.readBits(5) + 1;
  /** @type {number} number of code lengths. */

  var hclen = this.readBits(4) + 4;
  /** @type {!(Uint8Array|Array.<number>)} code lengths. */

  var codeLengths = new (USE_TYPEDARRAY ? Uint8Array : Array)(Zlib.RawInflate.Order.length);
  /** @type {!Array} code lengths table. */

  var codeLengthsTable;
  /** @type {!(Uint8Array|Array.<number>)} literal and length code table. */

  var litlenTable;
  /** @type {!(Uint8Array|Array.<number>)} distance code table. */

  var distTable;
  /** @type {!(Uint8Array|Array.<number>)} code length table. */

  var lengthTable;
  /** @type {number} */

  var code;
  /** @type {number} */

  var prev;
  /** @type {number} */

  var repeat;
  /** @type {number} loop counter. */

  var i;
  /** @type {number} loop limit. */

  var il; // decode code lengths

  for (i = 0; i < hclen; ++i) {
    codeLengths[Zlib.RawInflate.Order[i]] = this.readBits(3);
  }

  if (!USE_TYPEDARRAY) {
    for (i = hclen, hclen = codeLengths.length; i < hclen; ++i) {
      codeLengths[Zlib.RawInflate.Order[i]] = 0;
    }
  } // decode length table


  codeLengthsTable = buildHuffmanTable(codeLengths);
  lengthTable = new (USE_TYPEDARRAY ? Uint8Array : Array)(hlit + hdist);

  for (i = 0, il = hlit + hdist; i < il;) {
    code = this.readCodeByTable(codeLengthsTable);

    switch (code) {
      case 16:
        repeat = 3 + this.readBits(2);

        while (repeat--) {
          lengthTable[i++] = prev;
        }

        break;

      case 17:
        repeat = 3 + this.readBits(3);

        while (repeat--) {
          lengthTable[i++] = 0;
        }

        prev = 0;
        break;

      case 18:
        repeat = 11 + this.readBits(7);

        while (repeat--) {
          lengthTable[i++] = 0;
        }

        prev = 0;
        break;

      default:
        lengthTable[i++] = code;
        prev = code;
        break;
    }
  }

  litlenTable = USE_TYPEDARRAY ? buildHuffmanTable(lengthTable.subarray(0, hlit)) : buildHuffmanTable(lengthTable.slice(0, hlit));
  distTable = USE_TYPEDARRAY ? buildHuffmanTable(lengthTable.subarray(hlit)) : buildHuffmanTable(lengthTable.slice(hlit));

  switch (this.bufferType) {
    case Zlib.RawInflate.BufferType.ADAPTIVE:
      this.decodeHuffmanAdaptive(litlenTable, distTable);
      break;

    case Zlib.RawInflate.BufferType.BLOCK:
      this.decodeHuffmanBlock(litlenTable, distTable);
      break;

    default:
      throw new Error('invalid inflate mode');
  }
};
/**
 * decode huffman code
 * @param {!(Array.<number>|Uint16Array)} litlen literal and length code table.
 * @param {!(Array.<number>|Uint8Array)} dist distination code table.
 */


Zlib.RawInflate.prototype.decodeHuffmanBlock = function (litlen, dist) {
  var output = this.output;
  var op = this.op;
  this.currentLitlenTable = litlen;
  /** @type {number} output position limit. */

  var olength = output.length - Zlib.RawInflate.MaxCopyLength;
  /** @type {number} huffman code. */

  var code;
  /** @type {number} table index. */

  var ti;
  /** @type {number} huffman code distination. */

  var codeDist;
  /** @type {number} huffman code length. */

  var codeLength;
  var lengthCodeTable = Zlib.RawInflate.LengthCodeTable;
  var lengthExtraTable = Zlib.RawInflate.LengthExtraTable;
  var distCodeTable = Zlib.RawInflate.DistCodeTable;
  var distExtraTable = Zlib.RawInflate.DistExtraTable;

  while ((code = this.readCodeByTable(litlen)) !== 256) {
    // literal
    if (code < 256) {
      if (op >= olength) {
        this.op = op;
        output = this.expandBufferBlock();
        op = this.op;
      }

      output[op++] = code;
      continue;
    } // length code


    ti = code - 257;
    codeLength = lengthCodeTable[ti];

    if (lengthExtraTable[ti] > 0) {
      codeLength += this.readBits(lengthExtraTable[ti]);
    } // dist code


    code = this.readCodeByTable(dist);
    codeDist = distCodeTable[code];

    if (distExtraTable[code] > 0) {
      codeDist += this.readBits(distExtraTable[code]);
    } // lz77 decode


    if (op >= olength) {
      this.op = op;
      output = this.expandBufferBlock();
      op = this.op;
    }

    while (codeLength--) {
      output[op] = output[op++ - codeDist];
    }
  }

  while (this.bitsbuflen >= 8) {
    this.bitsbuflen -= 8;
    this.ip--;
  }

  this.op = op;
};
/**
 * decode huffman code (adaptive)
 * @param {!(Array.<number>|Uint16Array)} litlen literal and length code table.
 * @param {!(Array.<number>|Uint8Array)} dist distination code table.
 */


Zlib.RawInflate.prototype.decodeHuffmanAdaptive = function (litlen, dist) {
  var output = this.output;
  var op = this.op;
  this.currentLitlenTable = litlen;
  /** @type {number} output position limit. */

  var olength = output.length;
  /** @type {number} huffman code. */

  var code;
  /** @type {number} table index. */

  var ti;
  /** @type {number} huffman code distination. */

  var codeDist;
  /** @type {number} huffman code length. */

  var codeLength;
  var lengthCodeTable = Zlib.RawInflate.LengthCodeTable;
  var lengthExtraTable = Zlib.RawInflate.LengthExtraTable;
  var distCodeTable = Zlib.RawInflate.DistCodeTable;
  var distExtraTable = Zlib.RawInflate.DistExtraTable;

  while ((code = this.readCodeByTable(litlen)) !== 256) {
    // literal
    if (code < 256) {
      if (op >= olength) {
        output = this.expandBufferAdaptive();
        olength = output.length;
      }

      output[op++] = code;
      continue;
    } // length code


    ti = code - 257;
    codeLength = lengthCodeTable[ti];

    if (lengthExtraTable[ti] > 0) {
      codeLength += this.readBits(lengthExtraTable[ti]);
    } // dist code


    code = this.readCodeByTable(dist);
    codeDist = distCodeTable[code];

    if (distExtraTable[code] > 0) {
      codeDist += this.readBits(distExtraTable[code]);
    } // lz77 decode


    if (op + codeLength > olength) {
      output = this.expandBufferAdaptive();
      olength = output.length;
    }

    while (codeLength--) {
      output[op] = output[op++ - codeDist];
    }
  }

  while (this.bitsbuflen >= 8) {
    this.bitsbuflen -= 8;
    this.ip--;
  }

  this.op = op;
};
/**
 * expand output buffer.
 * @param {Object=} opt_param option parameters.
 * @return {!(Array.<number>|Uint8Array)} output buffer.
 */


Zlib.RawInflate.prototype.expandBufferBlock = function (opt_param) {
  /** @type {!(Array.<number>|Uint8Array)} store buffer. */
  var buffer = new (USE_TYPEDARRAY ? Uint8Array : Array)(this.op - Zlib.RawInflate.MaxBackwardLength);
  /** @type {number} backward base point */

  var backward = this.op - Zlib.RawInflate.MaxBackwardLength;
  /** @type {number} copy index. */

  var i;
  /** @type {number} copy limit */

  var il;
  var output = this.output; // copy to output buffer

  if (USE_TYPEDARRAY) {
    buffer.set(output.subarray(Zlib.RawInflate.MaxBackwardLength, buffer.length));
  } else {
    for (i = 0, il = buffer.length; i < il; ++i) {
      buffer[i] = output[i + Zlib.RawInflate.MaxBackwardLength];
    }
  }

  this.blocks.push(buffer);
  this.totalpos += buffer.length; // copy to backward buffer

  if (USE_TYPEDARRAY) {
    output.set(output.subarray(backward, backward + Zlib.RawInflate.MaxBackwardLength));
  } else {
    for (i = 0; i < Zlib.RawInflate.MaxBackwardLength; ++i) {
      output[i] = output[backward + i];
    }
  }

  this.op = Zlib.RawInflate.MaxBackwardLength;
  return output;
};
/**
 * expand output buffer. (adaptive)
 * @param {Object=} opt_param option parameters.
 * @return {!(Array.<number>|Uint8Array)} output buffer pointer.
 */


Zlib.RawInflate.prototype.expandBufferAdaptive = function (opt_param) {
  /** @type {!(Array.<number>|Uint8Array)} store buffer. */
  var buffer;
  /** @type {number} expantion ratio. */

  var ratio = this.input.length / this.ip + 1 | 0;
  /** @type {number} maximum number of huffman code. */

  var maxHuffCode;
  /** @type {number} new output buffer size. */

  var newSize;
  /** @type {number} max inflate size. */

  var maxInflateSize;
  var input = this.input;
  var output = this.output;

  if (opt_param) {
    if (typeof opt_param.fixRatio === 'number') {
      ratio = opt_param.fixRatio;
    }

    if (typeof opt_param.addRatio === 'number') {
      ratio += opt_param.addRatio;
    }
  } // calculate new buffer size


  if (ratio < 2) {
    maxHuffCode = (input.length - this.ip) / this.currentLitlenTable[2];
    maxInflateSize = maxHuffCode / 2 * 258 | 0;
    newSize = maxInflateSize < output.length ? output.length + maxInflateSize : output.length << 1;
  } else {
    newSize = output.length * ratio;
  } // buffer expantion


  if (USE_TYPEDARRAY) {
    buffer = new Uint8Array(newSize);
    buffer.set(output);
  } else {
    buffer = output;
  }

  this.output = buffer;
  return this.output;
};
/**
 * concat output buffer.
 * @return {!(Array.<number>|Uint8Array)} output buffer.
 */


Zlib.RawInflate.prototype.concatBufferBlock = function () {
  /** @type {number} buffer pointer. */
  var pos = 0;
  /** @type {number} buffer pointer. */

  var limit = this.totalpos + (this.op - Zlib.RawInflate.MaxBackwardLength);
  /** @type {!(Array.<number>|Uint8Array)} output block array. */

  var output = this.output;
  /** @type {!Array} blocks array. */

  var blocks = this.blocks;
  /** @type {!(Array.<number>|Uint8Array)} output block array. */

  var block;
  /** @type {!(Array.<number>|Uint8Array)} output buffer. */

  var buffer = new (USE_TYPEDARRAY ? Uint8Array : Array)(limit);
  /** @type {number} loop counter. */

  var i;
  /** @type {number} loop limiter. */

  var il;
  /** @type {number} loop counter. */

  var j;
  /** @type {number} loop limiter. */

  var jl; // single buffer

  if (blocks.length === 0) {
    return USE_TYPEDARRAY ? this.output.subarray(Zlib.RawInflate.MaxBackwardLength, this.op) : this.output.slice(Zlib.RawInflate.MaxBackwardLength, this.op);
  } // copy to buffer


  for (i = 0, il = blocks.length; i < il; ++i) {
    block = blocks[i];

    for (j = 0, jl = block.length; j < jl; ++j) {
      buffer[pos++] = block[j];
    }
  } // current buffer


  for (i = Zlib.RawInflate.MaxBackwardLength, il = this.op; i < il; ++i) {
    buffer[pos++] = output[i];
  }

  this.blocks = [];
  this.buffer = buffer;
  return this.buffer;
};
/**
 * concat output buffer. (dynamic)
 * @return {!(Array.<number>|Uint8Array)} output buffer.
 */


Zlib.RawInflate.prototype.concatBufferDynamic = function () {
  /** @type {Array.<number>|Uint8Array} output buffer. */
  var buffer;
  var op = this.op;

  if (USE_TYPEDARRAY) {
    if (this.resize) {
      buffer = new Uint8Array(op);
      buffer.set(this.output.subarray(0, op));
    } else {
      buffer = this.output.subarray(0, op);
    }
  } else {
    if (this.output.length > op) {
      this.output.length = op;
    }

    buffer = this.output;
  }

  this.buffer = buffer;
  return this.buffer;
};

var buildHuffmanTable = Zlib.Huffman.buildHuffmanTable;
/**
 * @param {!(Uint8Array|Array.<number>)} input input buffer.
 * @param {number} ip input buffer pointer.
 * @param {number=} opt_buffersize buffer block size.
 * @constructor
 */

Zlib.RawInflateStream = function (input, ip, opt_buffersize) {
  /** @type {!Array.<(Array|Uint8Array)>} */
  this.blocks = [];
  /** @type {number} block size. */

  this.bufferSize = opt_buffersize ? opt_buffersize : ZLIB_STREAM_RAW_INFLATE_BUFFER_SIZE;
  /** @type {!number} total output buffer pointer. */

  this.totalpos = 0;
  /** @type {!number} input buffer pointer. */

  this.ip = ip === void 0 ? 0 : ip;
  /** @type {!number} bit stream reader buffer. */

  this.bitsbuf = 0;
  /** @type {!number} bit stream reader buffer size. */

  this.bitsbuflen = 0;
  /** @type {!(Array|Uint8Array)} input buffer. */

  this.input = USE_TYPEDARRAY ? new Uint8Array(input) : input;
  /** @type {!(Uint8Array|Array)} output buffer. */

  this.output = new (USE_TYPEDARRAY ? Uint8Array : Array)(this.bufferSize);
  /** @type {!number} output buffer pointer. */

  this.op = 0;
  /** @type {boolean} is final block flag. */

  this.bfinal = false;
  /** @type {number} uncompressed block length. */

  this.blockLength;
  /** @type {boolean} resize flag for memory size optimization. */

  this.resize = false;
  /** @type {Array} */

  this.litlenTable;
  /** @type {Array} */

  this.distTable;
  /** @type {number} */

  this.sp = 0; // stream pointer

  /** @type {Zlib.RawInflateStream.Status} */

  this.status = Zlib.RawInflateStream.Status.INITIALIZED; //
  // backup
  //

  /** @type {!number} */

  this.ip_;
  /** @type {!number} */

  this.bitsbuflen_;
  /** @type {!number} */

  this.bitsbuf_;
};
/**
 * @enum {number}
 */


Zlib.RawInflateStream.BlockType = {
  UNCOMPRESSED: 0,
  FIXED: 1,
  DYNAMIC: 2
};
/**
 * @enum {number}
 */

Zlib.RawInflateStream.Status = {
  INITIALIZED: 0,
  BLOCK_HEADER_START: 1,
  BLOCK_HEADER_END: 2,
  BLOCK_BODY_START: 3,
  BLOCK_BODY_END: 4,
  DECODE_BLOCK_START: 5,
  DECODE_BLOCK_END: 6
};
/**
 * decompress.
 * @return {!(Uint8Array|Array)} inflated buffer.
 */

Zlib.RawInflateStream.prototype.decompress = function (newInput, ip) {
  /** @type {boolean} */
  var stop = false;

  if (newInput !== void 0) {
    this.input = newInput;
  }

  if (ip !== void 0) {
    this.ip = ip;
  } // decompress


  while (!stop) {
    switch (this.status) {
      // block header
      case Zlib.RawInflateStream.Status.INITIALIZED:
      case Zlib.RawInflateStream.Status.BLOCK_HEADER_START:
        if (this.readBlockHeader() < 0) {
          stop = true;
        }

        break;
      // block body

      case Zlib.RawInflateStream.Status.BLOCK_HEADER_END:
      /* FALLTHROUGH */

      case Zlib.RawInflateStream.Status.BLOCK_BODY_START:
        switch (this.currentBlockType) {
          case Zlib.RawInflateStream.BlockType.UNCOMPRESSED:
            if (this.readUncompressedBlockHeader() < 0) {
              stop = true;
            }

            break;

          case Zlib.RawInflateStream.BlockType.FIXED:
            if (this.parseFixedHuffmanBlock() < 0) {
              stop = true;
            }

            break;

          case Zlib.RawInflateStream.BlockType.DYNAMIC:
            if (this.parseDynamicHuffmanBlock() < 0) {
              stop = true;
            }

            break;
        }

        break;
      // decode data

      case Zlib.RawInflateStream.Status.BLOCK_BODY_END:
      case Zlib.RawInflateStream.Status.DECODE_BLOCK_START:
        switch (this.currentBlockType) {
          case Zlib.RawInflateStream.BlockType.UNCOMPRESSED:
            if (this.parseUncompressedBlock() < 0) {
              stop = true;
            }

            break;

          case Zlib.RawInflateStream.BlockType.FIXED:
          /* FALLTHROUGH */

          case Zlib.RawInflateStream.BlockType.DYNAMIC:
            if (this.decodeHuffman() < 0) {
              stop = true;
            }

            break;
        }

        break;

      case Zlib.RawInflateStream.Status.DECODE_BLOCK_END:
        if (this.bfinal) {
          stop = true;
        } else {
          this.status = Zlib.RawInflateStream.Status.INITIALIZED;
        }

        break;
    }
  }

  return this.concatBuffer();
};
/**
 * @const
 * @type {number} max backward length for LZ77.
 */


Zlib.RawInflateStream.MaxBackwardLength = 32768;
/**
 * @const
 * @type {number} max copy length for LZ77.
 */

Zlib.RawInflateStream.MaxCopyLength = 258;
/**
 * huffman order
 * @const
 * @type {!(Array.<number>|Uint8Array)}
 */

Zlib.RawInflateStream.Order = function (table) {
  return USE_TYPEDARRAY ? new Uint16Array(table) : table;
}([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);
/**
 * huffman length code table.
 * @const
 * @type {!(Array.<number>|Uint16Array)}
 */


Zlib.RawInflateStream.LengthCodeTable = function (table) {
  return USE_TYPEDARRAY ? new Uint16Array(table) : table;
}([0x0003, 0x0004, 0x0005, 0x0006, 0x0007, 0x0008, 0x0009, 0x000a, 0x000b, 0x000d, 0x000f, 0x0011, 0x0013, 0x0017, 0x001b, 0x001f, 0x0023, 0x002b, 0x0033, 0x003b, 0x0043, 0x0053, 0x0063, 0x0073, 0x0083, 0x00a3, 0x00c3, 0x00e3, 0x0102, 0x0102, 0x0102]);
/**
 * huffman length extra-bits table.
 * @const
 * @type {!(Array.<number>|Uint8Array)}
 */


Zlib.RawInflateStream.LengthExtraTable = function (table) {
  return USE_TYPEDARRAY ? new Uint8Array(table) : table;
}([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 0, 0]);
/**
 * huffman dist code table.
 * @const
 * @type {!(Array.<number>|Uint16Array)}
 */


Zlib.RawInflateStream.DistCodeTable = function (table) {
  return USE_TYPEDARRAY ? new Uint16Array(table) : table;
}([0x0001, 0x0002, 0x0003, 0x0004, 0x0005, 0x0007, 0x0009, 0x000d, 0x0011, 0x0019, 0x0021, 0x0031, 0x0041, 0x0061, 0x0081, 0x00c1, 0x0101, 0x0181, 0x0201, 0x0301, 0x0401, 0x0601, 0x0801, 0x0c01, 0x1001, 0x1801, 0x2001, 0x3001, 0x4001, 0x6001]);
/**
 * huffman dist extra-bits table.
 * @const
 * @type {!(Array.<number>|Uint8Array)}
 */


Zlib.RawInflateStream.DistExtraTable = function (table) {
  return USE_TYPEDARRAY ? new Uint8Array(table) : table;
}([0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13]);
/**
 * fixed huffman length code table
 * @const
 * @type {!Array}
 */


Zlib.RawInflateStream.FixedLiteralLengthTable = function (table) {
  return table;
}(function () {
  var lengths = new (USE_TYPEDARRAY ? Uint8Array : Array)(288);
  var i, il;

  for (i = 0, il = lengths.length; i < il; ++i) {
    lengths[i] = i <= 143 ? 8 : i <= 255 ? 9 : i <= 279 ? 7 : 8;
  }

  return buildHuffmanTable(lengths);
}());
/**
 * fixed huffman distance code table
 * @const
 * @type {!Array}
 */


Zlib.RawInflateStream.FixedDistanceTable = function (table) {
  return table;
}(function () {
  var lengths = new (USE_TYPEDARRAY ? Uint8Array : Array)(30);
  var i, il;

  for (i = 0, il = lengths.length; i < il; ++i) {
    lengths[i] = 5;
  }

  return buildHuffmanTable(lengths);
}());
/**
 * parse deflated block.
 */


Zlib.RawInflateStream.prototype.readBlockHeader = function () {
  /** @type {number} header */
  var hdr;
  this.status = Zlib.RawInflateStream.Status.BLOCK_HEADER_START;
  this.save_();

  if ((hdr = this.readBits(3)) < 0) {
    this.restore_();
    return -1;
  } // BFINAL


  if (hdr & 0x1) {
    this.bfinal = true;
  } // BTYPE


  hdr >>>= 1;

  switch (hdr) {
    case 0:
      // uncompressed
      this.currentBlockType = Zlib.RawInflateStream.BlockType.UNCOMPRESSED;
      break;

    case 1:
      // fixed huffman
      this.currentBlockType = Zlib.RawInflateStream.BlockType.FIXED;
      break;

    case 2:
      // dynamic huffman
      this.currentBlockType = Zlib.RawInflateStream.BlockType.DYNAMIC;
      break;

    default:
      // reserved or other
      throw new Error('unknown BTYPE: ' + hdr);
  }

  this.status = Zlib.RawInflateStream.Status.BLOCK_HEADER_END;
};
/**
 * read inflate bits
 * @param {number} length bits length.
 * @return {number} read bits.
 */


Zlib.RawInflateStream.prototype.readBits = function (length) {
  var bitsbuf = this.bitsbuf;
  var bitsbuflen = this.bitsbuflen;
  var input = this.input;
  var ip = this.ip;
  /** @type {number} input and output byte. */

  var octet; // not enough buffer

  while (bitsbuflen < length) {
    // input byte
    if (input.length <= ip) {
      return -1;
    }

    octet = input[ip++]; // concat octet

    bitsbuf |= octet << bitsbuflen;
    bitsbuflen += 8;
  } // output byte


  octet = bitsbuf &
  /* MASK */
  (1 << length) - 1;
  bitsbuf >>>= length;
  bitsbuflen -= length;
  this.bitsbuf = bitsbuf;
  this.bitsbuflen = bitsbuflen;
  this.ip = ip;
  return octet;
};
/**
 * read huffman code using table
 * @param {Array} table huffman code table.
 * @return {number} huffman code.
 */


Zlib.RawInflateStream.prototype.readCodeByTable = function (table) {
  var bitsbuf = this.bitsbuf;
  var bitsbuflen = this.bitsbuflen;
  var input = this.input;
  var ip = this.ip;
  /** @type {!(Array|Uint8Array)} huffman code table */

  var codeTable = table[0];
  /** @type {number} */

  var maxCodeLength = table[1];
  /** @type {number} input byte */

  var octet;
  /** @type {number} code length & code (16bit, 16bit) */

  var codeWithLength;
  /** @type {number} code bits length */

  var codeLength; // not enough buffer

  while (bitsbuflen < maxCodeLength) {
    if (input.length <= ip) {
      return -1;
    }

    octet = input[ip++];
    bitsbuf |= octet << bitsbuflen;
    bitsbuflen += 8;
  } // read max length


  codeWithLength = codeTable[bitsbuf & (1 << maxCodeLength) - 1];
  codeLength = codeWithLength >>> 16;

  if (codeLength > bitsbuflen) {
    throw new Error('invalid code length: ' + codeLength);
  }

  this.bitsbuf = bitsbuf >> codeLength;
  this.bitsbuflen = bitsbuflen - codeLength;
  this.ip = ip;
  return codeWithLength & 0xffff;
};
/**
 * read uncompressed block header
 */


Zlib.RawInflateStream.prototype.readUncompressedBlockHeader = function () {
  /** @type {number} block length */
  var len;
  /** @type {number} number for check block length */

  var nlen;
  var input = this.input;
  var ip = this.ip;
  this.status = Zlib.RawInflateStream.Status.BLOCK_BODY_START;

  if (ip + 4 >= input.length) {
    return -1;
  }

  len = input[ip++] | input[ip++] << 8;
  nlen = input[ip++] | input[ip++] << 8; // check len & nlen

  if (len === ~nlen) {
    throw new Error('invalid uncompressed block header: length verify');
  } // skip buffered header bits


  this.bitsbuf = 0;
  this.bitsbuflen = 0;
  this.ip = ip;
  this.blockLength = len;
  this.status = Zlib.RawInflateStream.Status.BLOCK_BODY_END;
};
/**
 * parse uncompressed block.
 */


Zlib.RawInflateStream.prototype.parseUncompressedBlock = function () {
  var input = this.input;
  var ip = this.ip;
  var output = this.output;
  var op = this.op;
  var len = this.blockLength;
  this.status = Zlib.RawInflateStream.Status.DECODE_BLOCK_START; // copy
  // XXX: とりあえず素直にコピー

  while (len--) {
    if (op === output.length) {
      output = this.expandBuffer({
        fixRatio: 2
      });
    } // not enough input buffer


    if (ip >= input.length) {
      this.ip = ip;
      this.op = op;
      this.blockLength = len + 1; // コピーしてないので戻す

      return -1;
    }

    output[op++] = input[ip++];
  }

  if (len < 0) {
    this.status = Zlib.RawInflateStream.Status.DECODE_BLOCK_END;
  }

  this.ip = ip;
  this.op = op;
  return 0;
};
/**
 * parse fixed huffman block.
 */


Zlib.RawInflateStream.prototype.parseFixedHuffmanBlock = function () {
  this.status = Zlib.RawInflateStream.Status.BLOCK_BODY_START;
  this.litlenTable = Zlib.RawInflateStream.FixedLiteralLengthTable;
  this.distTable = Zlib.RawInflateStream.FixedDistanceTable;
  this.status = Zlib.RawInflateStream.Status.BLOCK_BODY_END;
  return 0;
};
/**
 * オブジェクトのコンテキストを別のプロパティに退避する.
 * @private
 */


Zlib.RawInflateStream.prototype.save_ = function () {
  this.ip_ = this.ip;
  this.bitsbuflen_ = this.bitsbuflen;
  this.bitsbuf_ = this.bitsbuf;
};
/**
 * 別のプロパティに退避したコンテキストを復元する.
 * @private
 */


Zlib.RawInflateStream.prototype.restore_ = function () {
  this.ip = this.ip_;
  this.bitsbuflen = this.bitsbuflen_;
  this.bitsbuf = this.bitsbuf_;
};
/**
 * parse dynamic huffman block.
 */


Zlib.RawInflateStream.prototype.parseDynamicHuffmanBlock = function () {
  /** @type {number} number of literal and length codes. */
  var hlit;
  /** @type {number} number of distance codes. */

  var hdist;
  /** @type {number} number of code lengths. */

  var hclen;
  /** @type {!(Uint8Array|Array)} code lengths. */

  var codeLengths = new (USE_TYPEDARRAY ? Uint8Array : Array)(Zlib.RawInflateStream.Order.length);
  /** @type {!Array} code lengths table. */

  var codeLengthsTable;
  /** @type {!(Uint32Array|Array)} literal and length code lengths. */

  var litlenLengths;
  /** @type {!(Uint32Array|Array)} distance code lengths. */

  var distLengths;
  this.status = Zlib.RawInflateStream.Status.BLOCK_BODY_START;
  this.save_();
  hlit = this.readBits(5) + 257;
  hdist = this.readBits(5) + 1;
  hclen = this.readBits(4) + 4;

  if (hlit < 0 || hdist < 0 || hclen < 0) {
    this.restore_();
    return -1;
  }

  try {
    parseDynamicHuffmanBlockImpl.call(this);
  } catch (e) {
    this.restore_();
    return -1;
  }

  function parseDynamicHuffmanBlockImpl() {
    /** @type {number} */
    var bits;
    var code;
    var prev = 0;
    var repeat;
    /** @type {!(Uint8Array|Array.<number>)} code length table. */

    var lengthTable;
    /** @type {number} loop counter. */

    var i;
    /** @type {number} loop limit. */

    var il; // decode code lengths

    for (i = 0; i < hclen; ++i) {
      if ((bits = this.readBits(3)) < 0) {
        throw new Error('not enough input');
      }

      codeLengths[Zlib.RawInflateStream.Order[i]] = bits;
    } // decode length table


    codeLengthsTable = buildHuffmanTable(codeLengths);
    lengthTable = new (USE_TYPEDARRAY ? Uint8Array : Array)(hlit + hdist);

    for (i = 0, il = hlit + hdist; i < il;) {
      code = this.readCodeByTable(codeLengthsTable);

      if (code < 0) {
        throw new Error('not enough input');
      }

      switch (code) {
        case 16:
          if ((bits = this.readBits(2)) < 0) {
            throw new Error('not enough input');
          }

          repeat = 3 + bits;

          while (repeat--) {
            lengthTable[i++] = prev;
          }

          break;

        case 17:
          if ((bits = this.readBits(3)) < 0) {
            throw new Error('not enough input');
          }

          repeat = 3 + bits;

          while (repeat--) {
            lengthTable[i++] = 0;
          }

          prev = 0;
          break;

        case 18:
          if ((bits = this.readBits(7)) < 0) {
            throw new Error('not enough input');
          }

          repeat = 11 + bits;

          while (repeat--) {
            lengthTable[i++] = 0;
          }

          prev = 0;
          break;

        default:
          lengthTable[i++] = code;
          prev = code;
          break;
      }
    } // literal and length code


    litlenLengths = new (USE_TYPEDARRAY ? Uint8Array : Array)(hlit); // distance code

    distLengths = new (USE_TYPEDARRAY ? Uint8Array : Array)(hdist);
    this.litlenTable = USE_TYPEDARRAY ? buildHuffmanTable(lengthTable.subarray(0, hlit)) : buildHuffmanTable(lengthTable.slice(0, hlit));
    this.distTable = USE_TYPEDARRAY ? buildHuffmanTable(lengthTable.subarray(hlit)) : buildHuffmanTable(lengthTable.slice(hlit));
  }

  this.status = Zlib.RawInflateStream.Status.BLOCK_BODY_END;
  return 0;
};
/**
 * decode huffman code (dynamic)
 * @return {(number|undefined)} -1 is error.
 */


Zlib.RawInflateStream.prototype.decodeHuffman = function () {
  var output = this.output;
  var op = this.op;
  /** @type {number} huffman code. */

  var code;
  /** @type {number} table index. */

  var ti;
  /** @type {number} huffman code distination. */

  var codeDist;
  /** @type {number} huffman code length. */

  var codeLength;
  var litlen = this.litlenTable;
  var dist = this.distTable;
  var olength = output.length;
  var bits;
  this.status = Zlib.RawInflateStream.Status.DECODE_BLOCK_START;

  while (true) {
    this.save_();
    code = this.readCodeByTable(litlen);

    if (code < 0) {
      this.op = op;
      this.restore_();
      return -1;
    }

    if (code === 256) {
      break;
    } // literal


    if (code < 256) {
      if (op === olength) {
        output = this.expandBuffer();
        olength = output.length;
      }

      output[op++] = code;
      continue;
    } // length code


    ti = code - 257;
    codeLength = Zlib.RawInflateStream.LengthCodeTable[ti];

    if (Zlib.RawInflateStream.LengthExtraTable[ti] > 0) {
      bits = this.readBits(Zlib.RawInflateStream.LengthExtraTable[ti]);

      if (bits < 0) {
        this.op = op;
        this.restore_();
        return -1;
      }

      codeLength += bits;
    } // dist code


    code = this.readCodeByTable(dist);

    if (code < 0) {
      this.op = op;
      this.restore_();
      return -1;
    }

    codeDist = Zlib.RawInflateStream.DistCodeTable[code];

    if (Zlib.RawInflateStream.DistExtraTable[code] > 0) {
      bits = this.readBits(Zlib.RawInflateStream.DistExtraTable[code]);

      if (bits < 0) {
        this.op = op;
        this.restore_();
        return -1;
      }

      codeDist += bits;
    } // lz77 decode


    if (op + codeLength >= olength) {
      output = this.expandBuffer();
      olength = output.length;
    }

    while (codeLength--) {
      output[op] = output[op++ - codeDist];
    } // break


    if (this.ip === this.input.length) {
      this.op = op;
      return -1;
    }
  }

  while (this.bitsbuflen >= 8) {
    this.bitsbuflen -= 8;
    this.ip--;
  }

  this.op = op;
  this.status = Zlib.RawInflateStream.Status.DECODE_BLOCK_END;
};
/**
 * expand output buffer. (dynamic)
 * @param {Object=} opt_param option parameters.
 * @return {!(Array|Uint8Array)} output buffer pointer.
 */


Zlib.RawInflateStream.prototype.expandBuffer = function (opt_param) {
  /** @type {!(Array|Uint8Array)} store buffer. */
  var buffer;
  /** @type {number} expantion ratio. */

  var ratio = this.input.length / this.ip + 1 | 0;
  /** @type {number} maximum number of huffman code. */

  var maxHuffCode;
  /** @type {number} new output buffer size. */

  var newSize;
  /** @type {number} max inflate size. */

  var maxInflateSize;
  var input = this.input;
  var output = this.output;

  if (opt_param) {
    if (typeof opt_param.fixRatio === 'number') {
      ratio = opt_param.fixRatio;
    }

    if (typeof opt_param.addRatio === 'number') {
      ratio += opt_param.addRatio;
    }
  } // calculate new buffer size


  if (ratio < 2) {
    maxHuffCode = (input.length - this.ip) / this.litlenTable[2];
    maxInflateSize = maxHuffCode / 2 * 258 | 0;
    newSize = maxInflateSize < output.length ? output.length + maxInflateSize : output.length << 1;
  } else {
    newSize = output.length * ratio;
  } // buffer expantion


  if (USE_TYPEDARRAY) {
    buffer = new Uint8Array(newSize);
    buffer.set(output);
  } else {
    buffer = output;
  }

  this.output = buffer;
  return this.output;
};
/**
 * concat output buffer. (dynamic)
 * @return {!(Array|Uint8Array)} output buffer.
 */


Zlib.RawInflateStream.prototype.concatBuffer = function () {
  /** @type {!(Array|Uint8Array)} output buffer. */
  var buffer;
  /** @type {number} */

  var op = this.op;
  /** @type {Uint8Array} */

  var tmp;

  if (this.resize) {
    if (USE_TYPEDARRAY) {
      buffer = new Uint8Array(this.output.subarray(this.sp, op));
    } else {
      buffer = this.output.slice(this.sp, op);
    }
  } else {
    buffer = USE_TYPEDARRAY ? this.output.subarray(this.sp, op) : this.output.slice(this.sp, op);
  }

  this.sp = op; // compaction

  if (op > Zlib.RawInflateStream.MaxBackwardLength + this.bufferSize) {
    this.op = this.sp = Zlib.RawInflateStream.MaxBackwardLength;

    if (USE_TYPEDARRAY) {
      tmp =
      /** @type {Uint8Array} */
      this.output;
      this.output = new Uint8Array(this.bufferSize + Zlib.RawInflateStream.MaxBackwardLength);
      this.output.set(tmp.subarray(op - Zlib.RawInflateStream.MaxBackwardLength, op));
    } else {
      this.output = this.output.slice(op - Zlib.RawInflateStream.MaxBackwardLength);
    }
  }

  return buffer;
};
/**
 * @constructor
 * @param {!(Uint8Array|Array)} input deflated buffer.
 * @param {Object=} opt_params option parameters.
 *
 * opt_params は以下のプロパティを指定する事ができます。
 *   - index: input buffer の deflate コンテナの開始位置.
 *   - blockSize: バッファのブロックサイズ.
 *   - verify: 伸張が終わった後 adler-32 checksum の検証を行うか.
 *   - bufferType: Zlib.Inflate.BufferType の値によってバッファの管理方法を指定する.
 *       Zlib.Inflate.BufferType は Zlib.RawInflate.BufferType のエイリアス.
 */


Zlib.Inflate = function (input, opt_params) {
  /** @type {number} */
  var bufferSize;
  /** @type {Zlib.Inflate.BufferType} */

  var bufferType;
  /** @type {number} */

  var cmf;
  /** @type {number} */

  var flg;
  /** @type {!(Uint8Array|Array)} */

  this.input = input;
  /** @type {number} */

  this.ip = 0;
  /** @type {Zlib.RawInflate} */

  this.rawinflate;
  /** @type {(boolean|undefined)} verify flag. */

  this.verify; // option parameters

  if (opt_params || !(opt_params = {})) {
    if (opt_params['index']) {
      this.ip = opt_params['index'];
    }

    if (opt_params['verify']) {
      this.verify = opt_params['verify'];
    }
  } // Compression Method and Flags


  cmf = input[this.ip++];
  flg = input[this.ip++]; // compression method

  switch (cmf & 0x0f) {
    case Zlib.CompressionMethod.DEFLATE:
      this.method = Zlib.CompressionMethod.DEFLATE;
      break;

    default:
      throw new Error('unsupported compression method');
  } // fcheck


  if (((cmf << 8) + flg) % 31 !== 0) {
    throw new Error('invalid fcheck flag:' + ((cmf << 8) + flg) % 31);
  } // fdict (not supported)


  if (flg & 0x20) {
    throw new Error('fdict flag is not supported');
  } // RawInflate


  this.rawinflate = new Zlib.RawInflate(input, {
    'index': this.ip,
    'bufferSize': opt_params['bufferSize'],
    'bufferType': opt_params['bufferType'],
    'resize': opt_params['resize']
  });
};
/**
 * @enum {number}
 */


Zlib.Inflate.BufferType = Zlib.RawInflate.BufferType;
/**
 * decompress.
 * @return {!(Uint8Array|Array)} inflated buffer.
 */

Zlib.Inflate.prototype.decompress = function () {
  /** @type {!(Array|Uint8Array)} input buffer. */
  var input = this.input;
  /** @type {!(Uint8Array|Array)} inflated buffer. */

  var buffer;
  /** @type {number} adler-32 checksum */

  var adler32;
  buffer = this.rawinflate.decompress();
  this.ip = this.rawinflate.ip; // verify adler-32

  if (this.verify) {
    adler32 = (input[this.ip++] << 24 | input[this.ip++] << 16 | input[this.ip++] << 8 | input[this.ip++]) >>> 0;

    if (adler32 !== Zlib.Adler32(buffer)) {
      throw new Error('invalid adler-32 checksum');
    }
  }

  return buffer;
};
/* vim:set expandtab ts=2 sw=2 tw=80: */

/**
 * @param {!(Uint8Array|Array)} input deflated buffer.
 * @constructor
 */


Zlib.InflateStream = function (input) {
  /** @type {!(Uint8Array|Array)} */
  this.input = input === void 0 ? new (USE_TYPEDARRAY ? Uint8Array : Array)() : input;
  /** @type {number} */

  this.ip = 0;
  /** @type {Zlib.RawInflateStream} */

  this.rawinflate = new Zlib.RawInflateStream(this.input, this.ip);
  /** @type {Zlib.CompressionMethod} */

  this.method;
  /** @type {!(Array|Uint8Array)} */

  this.output = this.rawinflate.output;
};
/**
 * decompress.
 * @return {!(Uint8Array|Array)} inflated buffer.
 */


Zlib.InflateStream.prototype.decompress = function (input) {
  /** @type {!(Uint8Array|Array)} inflated buffer. */
  var buffer;
  /** @type {number} adler-32 checksum */

  var adler32; // 新しい入力を入力バッファに結合する
  // XXX Array, Uint8Array のチェックを行うか確認する

  if (input !== void 0) {
    if (USE_TYPEDARRAY) {
      var tmp = new Uint8Array(this.input.length + input.length);
      tmp.set(this.input, 0);
      tmp.set(input, this.input.length);
      this.input = tmp;
    } else {
      this.input = this.input.concat(input);
    }
  }

  if (this.method === void 0) {
    if (this.readHeader() < 0) {
      return new (USE_TYPEDARRAY ? Uint8Array : Array)();
    }
  }

  buffer = this.rawinflate.decompress(this.input, this.ip);

  if (this.rawinflate.ip !== 0) {
    this.input = USE_TYPEDARRAY ? this.input.subarray(this.rawinflate.ip) : this.input.slice(this.rawinflate.ip);
    this.ip = 0;
  } // verify adler-32

  /*
  if (this.verify) {
    adler32 =
      input[this.ip++] << 24 | input[this.ip++] << 16 |
      input[this.ip++] << 8 | input[this.ip++];
     if (adler32 !== Zlib.Adler32(buffer)) {
      throw new Error('invalid adler-32 checksum');
    }
  }
  */


  return buffer;
};

Zlib.InflateStream.prototype.readHeader = function () {
  var ip = this.ip;
  var input = this.input; // Compression Method and Flags

  var cmf = input[ip++];
  var flg = input[ip++];

  if (cmf === void 0 || flg === void 0) {
    return -1;
  } // compression method


  switch (cmf & 0x0f) {
    case Zlib.CompressionMethod.DEFLATE:
      this.method = Zlib.CompressionMethod.DEFLATE;
      break;

    default:
      throw new Error('unsupported compression method');
  } // fcheck


  if (((cmf << 8) + flg) % 31 !== 0) {
    throw new Error('invalid fcheck flag:' + ((cmf << 8) + flg) % 31);
  } // fdict (not supported)


  if (flg & 0x20) {
    throw new Error('fdict flag is not supported');
  }

  this.ip = ip;
};
/**
 * @fileoverview GZIP (RFC1952) 展開コンテナ実装.
 */

/**
 * @constructor
 * @param {!(Array|Uint8Array)} input input buffer.
 * @param {Object=} opt_params option parameters.
 */


Zlib.Gunzip = function (input, opt_params) {
  /** @type {!(Array.<number>|Uint8Array)} input buffer. */
  this.input = input;
  /** @type {number} input buffer pointer. */

  this.ip = 0;
  /** @type {Array.<Zlib.GunzipMember>} */

  this.member = [];
  /** @type {boolean} */

  this.decompressed = false;
};
/**
 * @return {Array.<Zlib.GunzipMember>}
 */


Zlib.Gunzip.prototype.getMembers = function () {
  if (!this.decompressed) {
    this.decompress();
  }

  return this.member.slice();
};
/**
 * inflate gzip data.
 * @return {!(Array.<number>|Uint8Array)} inflated buffer.
 */


Zlib.Gunzip.prototype.decompress = function () {
  /** @type {number} input length. */
  var il = this.input.length;

  while (this.ip < il) {
    this.decodeMember();
  }

  this.decompressed = true;
  return this.concatMember();
};
/**
 * decode gzip member.
 */


Zlib.Gunzip.prototype.decodeMember = function () {
  /** @type {Zlib.GunzipMember} */
  var member = new Zlib.GunzipMember();
  /** @type {number} */

  var isize;
  /** @type {Zlib.RawInflate} RawInflate implementation. */

  var rawinflate;
  /** @type {!(Array.<number>|Uint8Array)} inflated data. */

  var inflated;
  /** @type {number} inflate size */

  var inflen;
  /** @type {number} character code */

  var c;
  /** @type {number} character index in string. */

  var ci;
  /** @type {Array.<string>} character array. */

  var str;
  /** @type {number} modification time. */

  var mtime;
  /** @type {number} */

  var crc32;
  var input = this.input;
  var ip = this.ip;
  member.id1 = input[ip++];
  member.id2 = input[ip++]; // check signature

  if (member.id1 !== 0x1f || member.id2 !== 0x8b) {
    throw new Error('invalid file signature:' + member.id1 + ',' + member.id2);
  } // check compression method


  member.cm = input[ip++];

  switch (member.cm) {
    case 8:
      /* XXX: use Zlib const */
      break;

    default:
      throw new Error('unknown compression method: ' + member.cm);
  } // flags


  member.flg = input[ip++]; // modification time

  mtime = input[ip++] | input[ip++] << 8 | input[ip++] << 16 | input[ip++] << 24;
  member.mtime = new Date(mtime * 1000); // extra flags

  member.xfl = input[ip++]; // operating system

  member.os = input[ip++]; // extra

  if ((member.flg & Zlib.Gzip.FlagsMask.FEXTRA) > 0) {
    member.xlen = input[ip++] | input[ip++] << 8;
    ip = this.decodeSubField(ip, member.xlen);
  } // fname


  if ((member.flg & Zlib.Gzip.FlagsMask.FNAME) > 0) {
    for (str = [], ci = 0; (c = input[ip++]) > 0;) {
      str[ci++] = String.fromCharCode(c);
    }

    member.name = str.join('');
  } // fcomment


  if ((member.flg & Zlib.Gzip.FlagsMask.FCOMMENT) > 0) {
    for (str = [], ci = 0; (c = input[ip++]) > 0;) {
      str[ci++] = String.fromCharCode(c);
    }

    member.comment = str.join('');
  } // fhcrc


  if ((member.flg & Zlib.Gzip.FlagsMask.FHCRC) > 0) {
    member.crc16 = Zlib.CRC32.calc(input, 0, ip) & 0xffff;

    if (member.crc16 !== (input[ip++] | input[ip++] << 8)) {
      throw new Error('invalid header crc16');
    }
  } // isize を事前に取得すると展開後のサイズが分かるため、
  // inflate処理のバッファサイズが事前に分かり、高速になる


  isize = input[input.length - 4] | input[input.length - 3] << 8 | input[input.length - 2] << 16 | input[input.length - 1] << 24; // isize の妥当性チェック
  // ハフマン符号では最小 2-bit のため、最大で 1/4 になる
  // LZ77 符号では 長さと距離 2-Byte で最大 258-Byte を表現できるため、
  // 1/128 になるとする
  // ここから入力バッファの残りが isize の 512 倍以上だったら
  // サイズ指定のバッファ確保は行わない事とする

  if (input.length - ip -
  /* CRC-32 */
  4 -
  /* ISIZE */
  4 < isize * 512) {
    inflen = isize;
  } // compressed block


  rawinflate = new Zlib.RawInflate(input, {
    'index': ip,
    'bufferSize': inflen
  });
  member.data = inflated = rawinflate.decompress();
  ip = rawinflate.ip; // crc32

  member.crc32 = crc32 = (input[ip++] | input[ip++] << 8 | input[ip++] << 16 | input[ip++] << 24) >>> 0;

  if (Zlib.CRC32.calc(inflated) !== crc32) {
    throw new Error('invalid CRC-32 checksum: 0x' + Zlib.CRC32.calc(inflated).toString(16) + ' / 0x' + crc32.toString(16));
  } // input size


  member.isize = isize = (input[ip++] | input[ip++] << 8 | input[ip++] << 16 | input[ip++] << 24) >>> 0;

  if ((inflated.length & 0xffffffff) !== isize) {
    throw new Error('invalid input size: ' + (inflated.length & 0xffffffff) + ' / ' + isize);
  }

  this.member.push(member);
  this.ip = ip;
};
/**
 * サブフィールドのデコード
 * XXX: 現在は何もせずスキップする
 */


Zlib.Gunzip.prototype.decodeSubField = function (ip, length) {
  return ip + length;
};
/**
 * @return {!(Array.<number>|Uint8Array)}
 */


Zlib.Gunzip.prototype.concatMember = function () {
  /** @type {Array.<Zlib.GunzipMember>} */
  var member = this.member;
  /** @type {number} */

  var i;
  /** @type {number} */

  var il;
  /** @type {number} */

  var p = 0;
  /** @type {number} */

  var size = 0;
  /** @type {!(Array.<number>|Uint8Array)} */

  var buffer;

  for (i = 0, il = member.length; i < il; ++i) {
    size += member[i].data.length;
  }

  if (USE_TYPEDARRAY) {
    buffer = new Uint8Array(size);

    for (i = 0; i < il; ++i) {
      buffer.set(member[i].data, p);
      p += member[i].data.length;
    }
  } else {
    buffer = [];

    for (i = 0; i < il; ++i) {
      buffer[i] = member[i].data;
    }

    buffer = Array.prototype.concat.apply([], buffer);
  }

  return buffer;
};
/**
 * @constructor
 */


Zlib.GunzipMember = function () {
  /** @type {number} signature first byte. */
  this.id1;
  /** @type {number} signature second byte. */

  this.id2;
  /** @type {number} compression method. */

  this.cm;
  /** @type {number} flags. */

  this.flg;
  /** @type {Date} modification time. */

  this.mtime;
  /** @type {number} extra flags. */

  this.xfl;
  /** @type {number} operating system number. */

  this.os;
  /** @type {number} CRC-16 value for FHCRC flag. */

  this.crc16;
  /** @type {number} extra length. */

  this.xlen;
  /** @type {number} CRC-32 value for verification. */

  this.crc32;
  /** @type {number} input size modulo 32 value. */

  this.isize;
  /** @type {string} filename. */

  this.name;
  /** @type {string} comment. */

  this.comment;
  /** @type {!(Uint8Array|Array.<number>)} */

  this.data;
};

Zlib.GunzipMember.prototype.getName = function () {
  return this.name;
};

Zlib.GunzipMember.prototype.getData = function () {
  return this.data;
};

Zlib.GunzipMember.prototype.getMtime = function () {
  return this.mtime;
};
/**
 * @fileoverview GZIP (RFC1952) 実装.
 */

/**
 * @constructor
 * @param {!(Array|Uint8Array)} input input buffer.
 * @param {Object=} opt_params option parameters.
 */


Zlib.Gzip = function (input, opt_params) {
  /** @type {!(Array.<number>|Uint8Array)} input buffer. */
  this.input = input;
  /** @type {number} input buffer pointer. */

  this.ip = 0;
  /** @type {!(Array.<number>|Uint8Array)} output buffer. */

  this.output;
  /** @type {number} output buffer. */

  this.op = 0;
  /** @type {!Object} flags option flags. */

  this.flags = {};
  /** @type {!string} filename. */

  this.filename;
  /** @type {!string} comment. */

  this.comment;
  /** @type {!Object} deflate options. */

  this.deflateOptions; // option parameters

  if (opt_params) {
    if (opt_params['flags']) {
      this.flags = opt_params['flags'];
    }

    if (typeof opt_params['filename'] === 'string') {
      this.filename = opt_params['filename'];
    }

    if (typeof opt_params['comment'] === 'string') {
      this.comment = opt_params['comment'];
    }

    if (opt_params['deflateOptions']) {
      this.deflateOptions = opt_params['deflateOptions'];
    }
  }

  if (!this.deflateOptions) {
    this.deflateOptions = {};
  }
};
/**
 * @type {number}
 * @const
 */


Zlib.Gzip.DefaultBufferSize = 0x8000;
/**
 * encode gzip members.
 * @return {!(Array|Uint8Array)} gzip binary array.
 */

Zlib.Gzip.prototype.compress = function () {
  /** @type {number} flags. */
  var flg;
  /** @type {number} modification time. */

  var mtime;
  /** @type {number} CRC-16 value for FHCRC flag. */

  var crc16;
  /** @type {number} CRC-32 value for verification. */

  var crc32;
  /** @type {!Zlib.RawDeflate} raw deflate object. */

  var rawdeflate;
  /** @type {number} character code */

  var c;
  /** @type {number} loop counter. */

  var i;
  /** @type {number} loop limiter. */

  var il;
  /** @type {!(Array|Uint8Array)} output buffer. */

  var output = new (USE_TYPEDARRAY ? Uint8Array : Array)(Zlib.Gzip.DefaultBufferSize);
  /** @type {number} output buffer pointer. */

  var op = 0;
  var input = this.input;
  var ip = this.ip;
  var filename = this.filename;
  var comment = this.comment; // check signature

  output[op++] = 0x1f;
  output[op++] = 0x8b; // check compression method

  output[op++] = 8;
  /* XXX: use Zlib const */
  // flags

  flg = 0;
  if (this.flags['fname']) flg |= Zlib.Gzip.FlagsMask.FNAME;
  if (this.flags['fcomment']) flg |= Zlib.Gzip.FlagsMask.FCOMMENT;
  if (this.flags['fhcrc']) flg |= Zlib.Gzip.FlagsMask.FHCRC; // XXX: FTEXT
  // XXX: FEXTRA

  output[op++] = flg; // modification time

  mtime = (Date.now ? Date.now() : +new Date()) / 1000 | 0;
  output[op++] = mtime & 0xff;
  output[op++] = mtime >>> 8 & 0xff;
  output[op++] = mtime >>> 16 & 0xff;
  output[op++] = mtime >>> 24 & 0xff; // extra flags

  output[op++] = 0; // operating system

  output[op++] = Zlib.Gzip.OperatingSystem.UNKNOWN; // extra

  /* NOP */
  // fname

  if (this.flags['fname'] !== void 0) {
    for (i = 0, il = filename.length; i < il; ++i) {
      c = filename.charCodeAt(i);

      if (c > 0xff) {
        output[op++] = c >>> 8 & 0xff;
      }

      output[op++] = c & 0xff;
    }

    output[op++] = 0; // null termination
  } // fcomment


  if (this.flags['comment']) {
    for (i = 0, il = comment.length; i < il; ++i) {
      c = comment.charCodeAt(i);

      if (c > 0xff) {
        output[op++] = c >>> 8 & 0xff;
      }

      output[op++] = c & 0xff;
    }

    output[op++] = 0; // null termination
  } // fhcrc


  if (this.flags['fhcrc']) {
    crc16 = Zlib.CRC32.calc(output, 0, op) & 0xffff;
    output[op++] = crc16 & 0xff;
    output[op++] = crc16 >>> 8 & 0xff;
  } // add compress option


  this.deflateOptions['outputBuffer'] = output;
  this.deflateOptions['outputIndex'] = op; // compress

  rawdeflate = new Zlib.RawDeflate(input, this.deflateOptions);
  output = rawdeflate.compress();
  op = rawdeflate.op; // expand buffer

  if (USE_TYPEDARRAY) {
    if (op + 8 > output.buffer.byteLength) {
      this.output = new Uint8Array(op + 8);
      this.output.set(new Uint8Array(output.buffer));
      output = this.output;
    } else {
      output = new Uint8Array(output.buffer);
    }
  } // crc32


  crc32 = Zlib.CRC32.calc(input);
  output[op++] = crc32 & 0xff;
  output[op++] = crc32 >>> 8 & 0xff;
  output[op++] = crc32 >>> 16 & 0xff;
  output[op++] = crc32 >>> 24 & 0xff; // input size

  il = input.length;
  output[op++] = il & 0xff;
  output[op++] = il >>> 8 & 0xff;
  output[op++] = il >>> 16 & 0xff;
  output[op++] = il >>> 24 & 0xff;
  this.ip = ip;

  if (USE_TYPEDARRAY && op < output.length) {
    this.output = output = output.subarray(0, op);
  }

  return output;
};
/** @enum {number} */


Zlib.Gzip.OperatingSystem = {
  FAT: 0,
  AMIGA: 1,
  VMS: 2,
  UNIX: 3,
  VM_CMS: 4,
  ATARI_TOS: 5,
  HPFS: 6,
  MACINTOSH: 7,
  Z_SYSTEM: 8,
  CP_M: 9,
  TOPS_20: 10,
  NTFS: 11,
  QDOS: 12,
  ACORN_RISCOS: 13,
  UNKNOWN: 255
};
/** @enum {number} */

Zlib.Gzip.FlagsMask = {
  FTEXT: 0x01,
  FHCRC: 0x02,
  FEXTRA: 0x04,
  FNAME: 0x08,
  FCOMMENT: 0x10
};
/**
 * @fileoverview Heap Sort 実装. ハフマン符号化で使用する.
 */

/**
 * カスタムハフマン符号で使用するヒープ実装
 * @param {number} length ヒープサイズ.
 * @constructor
 */

Zlib.Heap = function (length) {
  this.buffer = new (USE_TYPEDARRAY ? Uint16Array : Array)(length * 2);
  this.length = 0;
};
/**
 * 親ノードの index 取得
 * @param {number} index 子ノードの index.
 * @return {number} 親ノードの index.
 *
 */


Zlib.Heap.prototype.getParent = function (index) {
  return ((index - 2) / 4 | 0) * 2;
};
/**
 * 子ノードの index 取得
 * @param {number} index 親ノードの index.
 * @return {number} 子ノードの index.
 */


Zlib.Heap.prototype.getChild = function (index) {
  return 2 * index + 2;
};
/**
 * Heap に値を追加する
 * @param {number} index キー index.
 * @param {number} value 値.
 * @return {number} 現在のヒープ長.
 */


Zlib.Heap.prototype.push = function (index, value) {
  var current,
      parent,
      heap = this.buffer,
      swap;
  current = this.length;
  heap[this.length++] = value;
  heap[this.length++] = index; // ルートノードにたどり着くまで入れ替えを試みる

  while (current > 0) {
    parent = this.getParent(current); // 親ノードと比較して親の方が小さければ入れ替える

    if (heap[current] > heap[parent]) {
      swap = heap[current];
      heap[current] = heap[parent];
      heap[parent] = swap;
      swap = heap[current + 1];
      heap[current + 1] = heap[parent + 1];
      heap[parent + 1] = swap;
      current = parent; // 入れ替えが必要なくなったらそこで抜ける
    } else {
      break;
    }
  }

  return this.length;
};
/**
 * Heapから一番大きい値を返す
 * @return {{index: number, value: number, length: number}} {index: キーindex,
 *     value: 値, length: ヒープ長} の Object.
 */


Zlib.Heap.prototype.pop = function () {
  var index,
      value,
      heap = this.buffer,
      swap,
      current,
      parent;
  value = heap[0];
  index = heap[1]; // 後ろから値を取る

  this.length -= 2;
  heap[0] = heap[this.length];
  heap[1] = heap[this.length + 1];
  parent = 0; // ルートノードから下がっていく

  while (true) {
    current = this.getChild(parent); // 範囲チェック

    if (current >= this.length) {
      break;
    } // 隣のノードと比較して、隣の方が値が大きければ隣を現在ノードとして選択


    if (current + 2 < this.length && heap[current + 2] > heap[current]) {
      current += 2;
    } // 親ノードと比較して親の方が小さい場合は入れ替える


    if (heap[current] > heap[parent]) {
      swap = heap[parent];
      heap[parent] = heap[current];
      heap[current] = swap;
      swap = heap[parent + 1];
      heap[parent + 1] = heap[current + 1];
      heap[current + 1] = swap;
    } else {
      break;
    }

    parent = current;
  }

  return {
    index: index,
    value: value,
    length: this.length
  };
};
/* vim:set expandtab ts=2 sw=2 tw=80: */

/**
 * @fileoverview Deflate (RFC1951) 符号化アルゴリズム実装.
 */

/**
 * Raw Deflate 実装
 *
 * @constructor
 * @param {!(Array.<number>|Uint8Array)} input 符号化する対象のバッファ.
 * @param {Object=} opt_params option parameters.
 *
 * typed array が使用可能なとき、outputBuffer が Array は自動的に Uint8Array に
 * 変換されます.
 * 別のオブジェクトになるため出力バッファを参照している変数などは
 * 更新する必要があります.
 */


Zlib.RawDeflate = function (input, opt_params) {
  /** @type {Zlib.RawDeflate.CompressionType} */
  this.compressionType = Zlib.RawDeflate.CompressionType.DYNAMIC;
  /** @type {number} */

  this.lazy = 0;
  /** @type {!(Array.<number>|Uint32Array)} */

  this.freqsLitLen;
  /** @type {!(Array.<number>|Uint32Array)} */

  this.freqsDist;
  /** @type {!(Array.<number>|Uint8Array)} */

  this.input = USE_TYPEDARRAY && input instanceof Array ? new Uint8Array(input) : input;
  /** @type {!(Array.<number>|Uint8Array)} output output buffer. */

  this.output;
  /** @type {number} pos output buffer position. */

  this.op = 0; // option parameters

  if (opt_params) {
    if (opt_params['lazy']) {
      this.lazy = opt_params['lazy'];
    }

    if (typeof opt_params['compressionType'] === 'number') {
      this.compressionType = opt_params['compressionType'];
    }

    if (opt_params['outputBuffer']) {
      this.output = USE_TYPEDARRAY && opt_params['outputBuffer'] instanceof Array ? new Uint8Array(opt_params['outputBuffer']) : opt_params['outputBuffer'];
    }

    if (typeof opt_params['outputIndex'] === 'number') {
      this.op = opt_params['outputIndex'];
    }
  }

  if (!this.output) {
    this.output = new (USE_TYPEDARRAY ? Uint8Array : Array)(0x8000);
  }
};
/**
 * @enum {number}
 */


Zlib.RawDeflate.CompressionType = {
  NONE: 0,
  FIXED: 1,
  DYNAMIC: 2,
  RESERVED: 3
};
/**
 * LZ77 の最小マッチ長
 * @const
 * @type {number}
 */

Zlib.RawDeflate.Lz77MinLength = 3;
/**
 * LZ77 の最大マッチ長
 * @const
 * @type {number}
 */

Zlib.RawDeflate.Lz77MaxLength = 258;
/**
 * LZ77 のウィンドウサイズ
 * @const
 * @type {number}
 */

Zlib.RawDeflate.WindowSize = 0x8000;
/**
 * 最長の符号長
 * @const
 * @type {number}
 */

Zlib.RawDeflate.MaxCodeLength = 16;
/**
 * ハフマン符号の最大数値
 * @const
 * @type {number}
 */

Zlib.RawDeflate.HUFMAX = 286;
/**
 * 固定ハフマン符号の符号化テーブル
 * @const
 * @type {Array.<Array.<number, number>>}
 */

Zlib.RawDeflate.FixedHuffmanTable = function () {
  var table = [],
      i;

  for (i = 0; i < 288; i++) {
    switch (true) {
      case i <= 143:
        table.push([i + 0x030, 8]);
        break;

      case i <= 255:
        table.push([i - 144 + 0x190, 9]);
        break;

      case i <= 279:
        table.push([i - 256 + 0x000, 7]);
        break;

      case i <= 287:
        table.push([i - 280 + 0x0C0, 8]);
        break;

      default:
        throw 'invalid literal: ' + i;
    }
  }

  return table;
}();
/**
 * DEFLATE ブロックの作成
 * @return {!(Array.<number>|Uint8Array)} 圧縮済み byte array.
 */


Zlib.RawDeflate.prototype.compress = function () {
  /** @type {!(Array.<number>|Uint8Array)} */
  var blockArray;
  /** @type {number} */

  var position;
  /** @type {number} */

  var length;
  var input = this.input; // compression

  switch (this.compressionType) {
    case Zlib.RawDeflate.CompressionType.NONE:
      // each 65535-Byte (length header: 16-bit)
      for (position = 0, length = input.length; position < length;) {
        blockArray = USE_TYPEDARRAY ? input.subarray(position, position + 0xffff) : input.slice(position, position + 0xffff);
        position += blockArray.length;
        this.makeNocompressBlock(blockArray, position === length);
      }

      break;

    case Zlib.RawDeflate.CompressionType.FIXED:
      this.output = this.makeFixedHuffmanBlock(input, true);
      this.op = this.output.length;
      break;

    case Zlib.RawDeflate.CompressionType.DYNAMIC:
      this.output = this.makeDynamicHuffmanBlock(input, true);
      this.op = this.output.length;
      break;

    default:
      throw 'invalid compression type';
  }

  return this.output;
};
/**
 * 非圧縮ブロックの作成
 * @param {!(Array.<number>|Uint8Array)} blockArray ブロックデータ byte array.
 * @param {!boolean} isFinalBlock 最後のブロックならばtrue.
 * @return {!(Array.<number>|Uint8Array)} 非圧縮ブロック byte array.
 */


Zlib.RawDeflate.prototype.makeNocompressBlock = function (blockArray, isFinalBlock) {
  /** @type {number} */
  var bfinal;
  /** @type {Zlib.RawDeflate.CompressionType} */

  var btype;
  /** @type {number} */

  var len;
  /** @type {number} */

  var nlen;
  /** @type {number} */

  var i;
  /** @type {number} */

  var il;
  var output = this.output;
  var op = this.op; // expand buffer

  if (USE_TYPEDARRAY) {
    output = new Uint8Array(this.output.buffer);

    while (output.length <= op + blockArray.length + 5) {
      output = new Uint8Array(output.length << 1);
    }

    output.set(this.output);
  } // header


  bfinal = isFinalBlock ? 1 : 0;
  btype = Zlib.RawDeflate.CompressionType.NONE;
  output[op++] = bfinal | btype << 1; // length

  len = blockArray.length;
  nlen = ~len + 0x10000 & 0xffff;
  output[op++] = len & 0xff;
  output[op++] = len >>> 8 & 0xff;
  output[op++] = nlen & 0xff;
  output[op++] = nlen >>> 8 & 0xff; // copy buffer

  if (USE_TYPEDARRAY) {
    output.set(blockArray, op);
    op += blockArray.length;
    output = output.subarray(0, op);
  } else {
    for (i = 0, il = blockArray.length; i < il; ++i) {
      output[op++] = blockArray[i];
    }

    output.length = op;
  }

  this.op = op;
  this.output = output;
  return output;
};
/**
 * 固定ハフマンブロックの作成
 * @param {!(Array.<number>|Uint8Array)} blockArray ブロックデータ byte array.
 * @param {!boolean} isFinalBlock 最後のブロックならばtrue.
 * @return {!(Array.<number>|Uint8Array)} 固定ハフマン符号化ブロック byte array.
 */


Zlib.RawDeflate.prototype.makeFixedHuffmanBlock = function (blockArray, isFinalBlock) {
  /** @type {Zlib.BitStream} */
  var stream = new Zlib.BitStream(USE_TYPEDARRAY ? new Uint8Array(this.output.buffer) : this.output, this.op);
  /** @type {number} */

  var bfinal;
  /** @type {Zlib.RawDeflate.CompressionType} */

  var btype;
  /** @type {!(Array.<number>|Uint16Array)} */

  var data; // header

  bfinal = isFinalBlock ? 1 : 0;
  btype = Zlib.RawDeflate.CompressionType.FIXED;
  stream.writeBits(bfinal, 1, true);
  stream.writeBits(btype, 2, true);
  data = this.lz77(blockArray);
  this.fixedHuffman(data, stream);
  return stream.finish();
};
/**
 * 動的ハフマンブロックの作成
 * @param {!(Array.<number>|Uint8Array)} blockArray ブロックデータ byte array.
 * @param {!boolean} isFinalBlock 最後のブロックならばtrue.
 * @return {!(Array.<number>|Uint8Array)} 動的ハフマン符号ブロック byte array.
 */


Zlib.RawDeflate.prototype.makeDynamicHuffmanBlock = function (blockArray, isFinalBlock) {
  /** @type {Zlib.BitStream} */
  var stream = new Zlib.BitStream(USE_TYPEDARRAY ? new Uint8Array(this.output.buffer) : this.output, this.op);
  /** @type {number} */

  var bfinal;
  /** @type {Zlib.RawDeflate.CompressionType} */

  var btype;
  /** @type {!(Array.<number>|Uint16Array)} */

  var data;
  /** @type {number} */

  var hlit;
  /** @type {number} */

  var hdist;
  /** @type {number} */

  var hclen;
  /** @const @type {Array.<number>} */

  var hclenOrder = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];
  /** @type {!(Array.<number>|Uint8Array)} */

  var litLenLengths;
  /** @type {!(Array.<number>|Uint16Array)} */

  var litLenCodes;
  /** @type {!(Array.<number>|Uint8Array)} */

  var distLengths;
  /** @type {!(Array.<number>|Uint16Array)} */

  var distCodes;
  /** @type {{
   *   codes: !(Array.<number>|Uint32Array),
   *   freqs: !(Array.<number>|Uint8Array)
   * }} */

  var treeSymbols;
  /** @type {!(Array.<number>|Uint8Array)} */

  var treeLengths;
  /** @type {Array} */

  var transLengths = new Array(19);
  /** @type {!(Array.<number>|Uint16Array)} */

  var treeCodes;
  /** @type {number} */

  var code;
  /** @type {number} */

  var bitlen;
  /** @type {number} */

  var i;
  /** @type {number} */

  var il; // header

  bfinal = isFinalBlock ? 1 : 0;
  btype = Zlib.RawDeflate.CompressionType.DYNAMIC;
  stream.writeBits(bfinal, 1, true);
  stream.writeBits(btype, 2, true);
  data = this.lz77(blockArray); // リテラル・長さ, 距離のハフマン符号と符号長の算出

  litLenLengths = this.getLengths_(this.freqsLitLen, 15);
  litLenCodes = this.getCodesFromLengths_(litLenLengths);
  distLengths = this.getLengths_(this.freqsDist, 7);
  distCodes = this.getCodesFromLengths_(distLengths); // HLIT, HDIST の決定

  for (hlit = 286; hlit > 257 && litLenLengths[hlit - 1] === 0; hlit--) {}

  for (hdist = 30; hdist > 1 && distLengths[hdist - 1] === 0; hdist--) {} // HCLEN


  treeSymbols = this.getTreeSymbols_(hlit, litLenLengths, hdist, distLengths);
  treeLengths = this.getLengths_(treeSymbols.freqs, 7);

  for (i = 0; i < 19; i++) {
    transLengths[i] = treeLengths[hclenOrder[i]];
  }

  for (hclen = 19; hclen > 4 && transLengths[hclen - 1] === 0; hclen--) {}

  treeCodes = this.getCodesFromLengths_(treeLengths); // 出力

  stream.writeBits(hlit - 257, 5, true);
  stream.writeBits(hdist - 1, 5, true);
  stream.writeBits(hclen - 4, 4, true);

  for (i = 0; i < hclen; i++) {
    stream.writeBits(transLengths[i], 3, true);
  } // ツリーの出力


  for (i = 0, il = treeSymbols.codes.length; i < il; i++) {
    code = treeSymbols.codes[i];
    stream.writeBits(treeCodes[code], treeLengths[code], true); // extra bits

    if (code >= 16) {
      i++;

      switch (code) {
        case 16:
          bitlen = 2;
          break;

        case 17:
          bitlen = 3;
          break;

        case 18:
          bitlen = 7;
          break;

        default:
          throw 'invalid code: ' + code;
      }

      stream.writeBits(treeSymbols.codes[i], bitlen, true);
    }
  }

  this.dynamicHuffman(data, [litLenCodes, litLenLengths], [distCodes, distLengths], stream);
  return stream.finish();
};
/**
 * 動的ハフマン符号化(カスタムハフマンテーブル)
 * @param {!(Array.<number>|Uint16Array)} dataArray LZ77 符号化済み byte array.
 * @param {!Zlib.BitStream} stream 書き込み用ビットストリーム.
 * @return {!Zlib.BitStream} ハフマン符号化済みビットストリームオブジェクト.
 */


Zlib.RawDeflate.prototype.dynamicHuffman = function (dataArray, litLen, dist, stream) {
  /** @type {number} */
  var index;
  /** @type {number} */

  var length;
  /** @type {number} */

  var literal;
  /** @type {number} */

  var code;
  /** @type {number} */

  var litLenCodes;
  /** @type {number} */

  var litLenLengths;
  /** @type {number} */

  var distCodes;
  /** @type {number} */

  var distLengths;
  litLenCodes = litLen[0];
  litLenLengths = litLen[1];
  distCodes = dist[0];
  distLengths = dist[1]; // 符号を BitStream に書き込んでいく

  for (index = 0, length = dataArray.length; index < length; ++index) {
    literal = dataArray[index]; // literal or length

    stream.writeBits(litLenCodes[literal], litLenLengths[literal], true); // 長さ・距離符号

    if (literal > 256) {
      // length extra
      stream.writeBits(dataArray[++index], dataArray[++index], true); // distance

      code = dataArray[++index];
      stream.writeBits(distCodes[code], distLengths[code], true); // distance extra

      stream.writeBits(dataArray[++index], dataArray[++index], true); // 終端
    } else if (literal === 256) {
      break;
    }
  }

  return stream;
};
/**
 * 固定ハフマン符号化
 * @param {!(Array.<number>|Uint16Array)} dataArray LZ77 符号化済み byte array.
 * @param {!Zlib.BitStream} stream 書き込み用ビットストリーム.
 * @return {!Zlib.BitStream} ハフマン符号化済みビットストリームオブジェクト.
 */


Zlib.RawDeflate.prototype.fixedHuffman = function (dataArray, stream) {
  /** @type {number} */
  var index;
  /** @type {number} */

  var length;
  /** @type {number} */

  var literal; // 符号を BitStream に書き込んでいく

  for (index = 0, length = dataArray.length; index < length; index++) {
    literal = dataArray[index]; // 符号の書き込み

    Zlib.BitStream.prototype.writeBits.apply(stream, Zlib.RawDeflate.FixedHuffmanTable[literal]); // 長さ・距離符号

    if (literal > 0x100) {
      // length extra
      stream.writeBits(dataArray[++index], dataArray[++index], true); // distance

      stream.writeBits(dataArray[++index], 5); // distance extra

      stream.writeBits(dataArray[++index], dataArray[++index], true); // 終端
    } else if (literal === 0x100) {
      break;
    }
  }

  return stream;
};
/**
 * マッチ情報
 * @param {!number} length マッチした長さ.
 * @param {!number} backwardDistance マッチ位置との距離.
 * @constructor
 */


Zlib.RawDeflate.Lz77Match = function (length, backwardDistance) {
  /** @type {number} match length. */
  this.length = length;
  /** @type {number} backward distance. */

  this.backwardDistance = backwardDistance;
};
/**
 * 長さ符号テーブル.
 * [コード, 拡張ビット, 拡張ビット長] の配列となっている.
 * @const
 * @type {!(Array.<number>|Uint32Array)}
 */


Zlib.RawDeflate.Lz77Match.LengthCodeTable = function (table) {
  return USE_TYPEDARRAY ? new Uint32Array(table) : table;
}(function () {
  /** @type {!Array} */
  var table = [];
  /** @type {number} */

  var i;
  /** @type {!Array.<number>} */

  var c;

  for (i = 3; i <= 258; i++) {
    c = code(i);
    table[i] = c[2] << 24 | c[1] << 16 | c[0];
  }
  /**
   * @param {number} length lz77 length.
   * @return {!Array.<number>} lz77 codes.
   */


  function code(length) {
    switch (true) {
      case length === 3:
        return [257, length - 3, 0];
        break;

      case length === 4:
        return [258, length - 4, 0];
        break;

      case length === 5:
        return [259, length - 5, 0];
        break;

      case length === 6:
        return [260, length - 6, 0];
        break;

      case length === 7:
        return [261, length - 7, 0];
        break;

      case length === 8:
        return [262, length - 8, 0];
        break;

      case length === 9:
        return [263, length - 9, 0];
        break;

      case length === 10:
        return [264, length - 10, 0];
        break;

      case length <= 12:
        return [265, length - 11, 1];
        break;

      case length <= 14:
        return [266, length - 13, 1];
        break;

      case length <= 16:
        return [267, length - 15, 1];
        break;

      case length <= 18:
        return [268, length - 17, 1];
        break;

      case length <= 22:
        return [269, length - 19, 2];
        break;

      case length <= 26:
        return [270, length - 23, 2];
        break;

      case length <= 30:
        return [271, length - 27, 2];
        break;

      case length <= 34:
        return [272, length - 31, 2];
        break;

      case length <= 42:
        return [273, length - 35, 3];
        break;

      case length <= 50:
        return [274, length - 43, 3];
        break;

      case length <= 58:
        return [275, length - 51, 3];
        break;

      case length <= 66:
        return [276, length - 59, 3];
        break;

      case length <= 82:
        return [277, length - 67, 4];
        break;

      case length <= 98:
        return [278, length - 83, 4];
        break;

      case length <= 114:
        return [279, length - 99, 4];
        break;

      case length <= 130:
        return [280, length - 115, 4];
        break;

      case length <= 162:
        return [281, length - 131, 5];
        break;

      case length <= 194:
        return [282, length - 163, 5];
        break;

      case length <= 226:
        return [283, length - 195, 5];
        break;

      case length <= 257:
        return [284, length - 227, 5];
        break;

      case length === 258:
        return [285, length - 258, 0];
        break;

      default:
        throw 'invalid length: ' + length;
    }
  }

  return table;
}());
/**
 * 距離符号テーブル
 * @param {!number} dist 距離.
 * @return {!Array.<number>} コード、拡張ビット、拡張ビット長の配列.
 * @private
 */


Zlib.RawDeflate.Lz77Match.prototype.getDistanceCode_ = function (dist) {
  /** @type {!Array.<number>} distance code table. */
  var r;

  switch (true) {
    case dist === 1:
      r = [0, dist - 1, 0];
      break;

    case dist === 2:
      r = [1, dist - 2, 0];
      break;

    case dist === 3:
      r = [2, dist - 3, 0];
      break;

    case dist === 4:
      r = [3, dist - 4, 0];
      break;

    case dist <= 6:
      r = [4, dist - 5, 1];
      break;

    case dist <= 8:
      r = [5, dist - 7, 1];
      break;

    case dist <= 12:
      r = [6, dist - 9, 2];
      break;

    case dist <= 16:
      r = [7, dist - 13, 2];
      break;

    case dist <= 24:
      r = [8, dist - 17, 3];
      break;

    case dist <= 32:
      r = [9, dist - 25, 3];
      break;

    case dist <= 48:
      r = [10, dist - 33, 4];
      break;

    case dist <= 64:
      r = [11, dist - 49, 4];
      break;

    case dist <= 96:
      r = [12, dist - 65, 5];
      break;

    case dist <= 128:
      r = [13, dist - 97, 5];
      break;

    case dist <= 192:
      r = [14, dist - 129, 6];
      break;

    case dist <= 256:
      r = [15, dist - 193, 6];
      break;

    case dist <= 384:
      r = [16, dist - 257, 7];
      break;

    case dist <= 512:
      r = [17, dist - 385, 7];
      break;

    case dist <= 768:
      r = [18, dist - 513, 8];
      break;

    case dist <= 1024:
      r = [19, dist - 769, 8];
      break;

    case dist <= 1536:
      r = [20, dist - 1025, 9];
      break;

    case dist <= 2048:
      r = [21, dist - 1537, 9];
      break;

    case dist <= 3072:
      r = [22, dist - 2049, 10];
      break;

    case dist <= 4096:
      r = [23, dist - 3073, 10];
      break;

    case dist <= 6144:
      r = [24, dist - 4097, 11];
      break;

    case dist <= 8192:
      r = [25, dist - 6145, 11];
      break;

    case dist <= 12288:
      r = [26, dist - 8193, 12];
      break;

    case dist <= 16384:
      r = [27, dist - 12289, 12];
      break;

    case dist <= 24576:
      r = [28, dist - 16385, 13];
      break;

    case dist <= 32768:
      r = [29, dist - 24577, 13];
      break;

    default:
      throw 'invalid distance';
  }

  return r;
};
/**
 * マッチ情報を LZ77 符号化配列で返す.
 * なお、ここでは以下の内部仕様で符号化している
 * [ CODE, EXTRA-BIT-LEN, EXTRA, CODE, EXTRA-BIT-LEN, EXTRA ]
 * @return {!Array.<number>} LZ77 符号化 byte array.
 */


Zlib.RawDeflate.Lz77Match.prototype.toLz77Array = function () {
  /** @type {number} */
  var length = this.length;
  /** @type {number} */

  var dist = this.backwardDistance;
  /** @type {Array} */

  var codeArray = [];
  /** @type {number} */

  var pos = 0;
  /** @type {!Array.<number>} */

  var code; // length

  code = Zlib.RawDeflate.Lz77Match.LengthCodeTable[length];
  codeArray[pos++] = code & 0xffff;
  codeArray[pos++] = code >> 16 & 0xff;
  codeArray[pos++] = code >> 24; // distance

  code = this.getDistanceCode_(dist);
  codeArray[pos++] = code[0];
  codeArray[pos++] = code[1];
  codeArray[pos++] = code[2];
  return codeArray;
};
/**
 * LZ77 実装
 * @param {!(Array.<number>|Uint8Array)} dataArray LZ77 符号化するバイト配列.
 * @return {!(Array.<number>|Uint16Array)} LZ77 符号化した配列.
 */


Zlib.RawDeflate.prototype.lz77 = function (dataArray) {
  /** @type {number} input position */
  var position;
  /** @type {number} input length */

  var length;
  /** @type {number} loop counter */

  var i;
  /** @type {number} loop limiter */

  var il;
  /** @type {number} chained-hash-table key */

  var matchKey;
  /** @type {Object.<number, Array.<number>>} chained-hash-table */

  var table = {};
  /** @const @type {number} */

  var windowSize = Zlib.RawDeflate.WindowSize;
  /** @type {Array.<number>} match list */

  var matchList;
  /** @type {Zlib.RawDeflate.Lz77Match} longest match */

  var longestMatch;
  /** @type {Zlib.RawDeflate.Lz77Match} previous longest match */

  var prevMatch;
  /** @type {!(Array.<number>|Uint16Array)} lz77 buffer */

  var lz77buf = USE_TYPEDARRAY ? new Uint16Array(dataArray.length * 2) : [];
  /** @type {number} lz77 output buffer pointer */

  var pos = 0;
  /** @type {number} lz77 skip length */

  var skipLength = 0;
  /** @type {!(Array.<number>|Uint32Array)} */

  var freqsLitLen = new (USE_TYPEDARRAY ? Uint32Array : Array)(286);
  /** @type {!(Array.<number>|Uint32Array)} */

  var freqsDist = new (USE_TYPEDARRAY ? Uint32Array : Array)(30);
  /** @type {number} */

  var lazy = this.lazy;
  /** @type {*} temporary variable */

  var tmp; // 初期化

  if (!USE_TYPEDARRAY) {
    for (i = 0; i <= 285;) {
      freqsLitLen[i++] = 0;
    }

    for (i = 0; i <= 29;) {
      freqsDist[i++] = 0;
    }
  }

  freqsLitLen[256] = 1; // EOB の最低出現回数は 1

  /**
   * マッチデータの書き込み
   * @param {Zlib.RawDeflate.Lz77Match} match LZ77 Match data.
   * @param {!number} offset スキップ開始位置(相対指定).
   * @private
   */

  function writeMatch(match, offset) {
    /** @type {Array.<number>} */
    var lz77Array = match.toLz77Array();
    /** @type {number} */

    var i;
    /** @type {number} */

    var il;

    for (i = 0, il = lz77Array.length; i < il; ++i) {
      lz77buf[pos++] = lz77Array[i];
    }

    freqsLitLen[lz77Array[0]]++;
    freqsDist[lz77Array[3]]++;
    skipLength = match.length + offset - 1;
    prevMatch = null;
  } // LZ77 符号化


  for (position = 0, length = dataArray.length; position < length; ++position) {
    // ハッシュキーの作成
    for (matchKey = 0, i = 0, il = Zlib.RawDeflate.Lz77MinLength; i < il; ++i) {
      if (position + i === length) {
        break;
      }

      matchKey = matchKey << 8 | dataArray[position + i];
    } // テーブルが未定義だったら作成する


    if (table[matchKey] === void 0) {
      table[matchKey] = [];
    }

    matchList = table[matchKey]; // skip

    if (skipLength-- > 0) {
      matchList.push(position);
      continue;
    } // マッチテーブルの更新 (最大戻り距離を超えているものを削除する)


    while (matchList.length > 0 && position - matchList[0] > windowSize) {
      matchList.shift();
    } // データ末尾でマッチしようがない場合はそのまま流しこむ


    if (position + Zlib.RawDeflate.Lz77MinLength >= length) {
      if (prevMatch) {
        writeMatch(prevMatch, -1);
      }

      for (i = 0, il = length - position; i < il; ++i) {
        tmp = dataArray[position + i];
        lz77buf[pos++] = tmp;
        ++freqsLitLen[tmp];
      }

      break;
    } // マッチ候補から最長のものを探す


    if (matchList.length > 0) {
      longestMatch = this.searchLongestMatch_(dataArray, position, matchList);

      if (prevMatch) {
        // 現在のマッチの方が前回のマッチよりも長い
        if (prevMatch.length < longestMatch.length) {
          // write previous literal
          tmp = dataArray[position - 1];
          lz77buf[pos++] = tmp;
          ++freqsLitLen[tmp]; // write current match

          writeMatch(longestMatch, 0);
        } else {
          // write previous match
          writeMatch(prevMatch, -1);
        }
      } else if (longestMatch.length < lazy) {
        prevMatch = longestMatch;
      } else {
        writeMatch(longestMatch, 0);
      } // 前回マッチしていて今回マッチがなかったら前回のを採用

    } else if (prevMatch) {
      writeMatch(prevMatch, -1);
    } else {
      tmp = dataArray[position];
      lz77buf[pos++] = tmp;
      ++freqsLitLen[tmp];
    }

    matchList.push(position); // マッチテーブルに現在の位置を保存
  } // 終端処理


  lz77buf[pos++] = 256;
  freqsLitLen[256]++;
  this.freqsLitLen = freqsLitLen;
  this.freqsDist = freqsDist;
  return (
    /** @type {!(Uint16Array|Array.<number>)} */
    USE_TYPEDARRAY ? lz77buf.subarray(0, pos) : lz77buf
  );
};
/**
 * マッチした候補の中から最長一致を探す
 * @param {!Object} data plain data byte array.
 * @param {!number} position plain data byte array position.
 * @param {!Array.<number>} matchList 候補となる位置の配列.
 * @return {!Zlib.RawDeflate.Lz77Match} 最長かつ最短距離のマッチオブジェクト.
 * @private
 */


Zlib.RawDeflate.prototype.searchLongestMatch_ = function (data, position, matchList) {
  var match,
      currentMatch,
      matchMax = 0,
      matchLength,
      i,
      j,
      l,
      dl = data.length; // 候補を後ろから 1 つずつ絞り込んでゆく

  permatch: for (i = 0, l = matchList.length; i < l; i++) {
    match = matchList[l - i - 1];
    matchLength = Zlib.RawDeflate.Lz77MinLength; // 前回までの最長一致を末尾から一致検索する

    if (matchMax > Zlib.RawDeflate.Lz77MinLength) {
      for (j = matchMax; j > Zlib.RawDeflate.Lz77MinLength; j--) {
        if (data[match + j - 1] !== data[position + j - 1]) {
          continue permatch;
        }
      }

      matchLength = matchMax;
    } // 最長一致探索


    while (matchLength < Zlib.RawDeflate.Lz77MaxLength && position + matchLength < dl && data[match + matchLength] === data[position + matchLength]) {
      ++matchLength;
    } // マッチ長が同じ場合は後方を優先


    if (matchLength > matchMax) {
      currentMatch = match;
      matchMax = matchLength;
    } // 最長が確定したら後の処理は省略


    if (matchLength === Zlib.RawDeflate.Lz77MaxLength) {
      break;
    }
  }

  return new Zlib.RawDeflate.Lz77Match(matchMax, position - currentMatch);
};
/**
 * Tree-Transmit Symbols の算出
 * reference: PuTTY Deflate implementation
 * @param {number} hlit HLIT.
 * @param {!(Array.<number>|Uint8Array)} litlenLengths リテラルと長さ符号の符号長配列.
 * @param {number} hdist HDIST.
 * @param {!(Array.<number>|Uint8Array)} distLengths 距離符号の符号長配列.
 * @return {{
 *   codes: !(Array.<number>|Uint32Array),
 *   freqs: !(Array.<number>|Uint8Array)
 * }} Tree-Transmit Symbols.
 */


Zlib.RawDeflate.prototype.getTreeSymbols_ = function (hlit, litlenLengths, hdist, distLengths) {
  var src = new (USE_TYPEDARRAY ? Uint32Array : Array)(hlit + hdist),
      i,
      j,
      runLength,
      l,
      result = new (USE_TYPEDARRAY ? Uint32Array : Array)(286 + 30),
      nResult,
      rpt,
      freqs = new (USE_TYPEDARRAY ? Uint8Array : Array)(19);
  j = 0;

  for (i = 0; i < hlit; i++) {
    src[j++] = litlenLengths[i];
  }

  for (i = 0; i < hdist; i++) {
    src[j++] = distLengths[i];
  } // 初期化


  if (!USE_TYPEDARRAY) {
    for (i = 0, l = freqs.length; i < l; ++i) {
      freqs[i] = 0;
    }
  } // 符号化


  nResult = 0;

  for (i = 0, l = src.length; i < l; i += j) {
    // Run Length Encoding
    for (j = 1; i + j < l && src[i + j] === src[i]; ++j) {}

    runLength = j;

    if (src[i] === 0) {
      // 0 の繰り返しが 3 回未満ならばそのまま
      if (runLength < 3) {
        while (runLength-- > 0) {
          result[nResult++] = 0;
          freqs[0]++;
        }
      } else {
        while (runLength > 0) {
          // 繰り返しは最大 138 までなので切り詰める
          rpt = runLength < 138 ? runLength : 138;

          if (rpt > runLength - 3 && rpt < runLength) {
            rpt = runLength - 3;
          } // 3-10 回 -> 17


          if (rpt <= 10) {
            result[nResult++] = 17;
            result[nResult++] = rpt - 3;
            freqs[17]++; // 11-138 回 -> 18
          } else {
            result[nResult++] = 18;
            result[nResult++] = rpt - 11;
            freqs[18]++;
          }

          runLength -= rpt;
        }
      }
    } else {
      result[nResult++] = src[i];
      freqs[src[i]]++;
      runLength--; // 繰り返し回数が3回未満ならばランレングス符号は要らない

      if (runLength < 3) {
        while (runLength-- > 0) {
          result[nResult++] = src[i];
          freqs[src[i]]++;
        } // 3 回以上ならばランレングス符号化

      } else {
        while (runLength > 0) {
          // runLengthを 3-6 で分割
          rpt = runLength < 6 ? runLength : 6;

          if (rpt > runLength - 3 && rpt < runLength) {
            rpt = runLength - 3;
          }

          result[nResult++] = 16;
          result[nResult++] = rpt - 3;
          freqs[16]++;
          runLength -= rpt;
        }
      }
    }
  }

  return {
    codes: USE_TYPEDARRAY ? result.subarray(0, nResult) : result.slice(0, nResult),
    freqs: freqs
  };
};
/**
 * ハフマン符号の長さを取得する
 * @param {!(Array.<number>|Uint8Array|Uint32Array)} freqs 出現カウント.
 * @param {number} limit 符号長の制限.
 * @return {!(Array.<number>|Uint8Array)} 符号長配列.
 * @private
 */


Zlib.RawDeflate.prototype.getLengths_ = function (freqs, limit) {
  /** @type {number} */
  var nSymbols = freqs.length;
  /** @type {Zlib.Heap} */

  var heap = new Zlib.Heap(2 * Zlib.RawDeflate.HUFMAX);
  /** @type {!(Array.<number>|Uint8Array)} */

  var length = new (USE_TYPEDARRAY ? Uint8Array : Array)(nSymbols);
  /** @type {Array} */

  var nodes;
  /** @type {!(Array.<number>|Uint32Array)} */

  var values;
  /** @type {!(Array.<number>|Uint8Array)} */

  var codeLength;
  /** @type {number} */

  var i;
  /** @type {number} */

  var il; // 配列の初期化

  if (!USE_TYPEDARRAY) {
    for (i = 0; i < nSymbols; i++) {
      length[i] = 0;
    }
  } // ヒープの構築


  for (i = 0; i < nSymbols; ++i) {
    if (freqs[i] > 0) {
      heap.push(i, freqs[i]);
    }
  }

  nodes = new Array(heap.length / 2);
  values = new (USE_TYPEDARRAY ? Uint32Array : Array)(heap.length / 2); // 非 0 の要素が一つだけだった場合は、そのシンボルに符号長 1 を割り当てて終了

  if (nodes.length === 1) {
    length[heap.pop().index] = 1;
    return length;
  } // Reverse Package Merge Algorithm による Canonical Huffman Code の符号長決定


  for (i = 0, il = heap.length / 2; i < il; ++i) {
    nodes[i] = heap.pop();
    values[i] = nodes[i].value;
  }

  codeLength = this.reversePackageMerge_(values, values.length, limit);

  for (i = 0, il = nodes.length; i < il; ++i) {
    length[nodes[i].index] = codeLength[i];
  }

  return length;
};
/**
 * Reverse Package Merge Algorithm.
 * @param {!(Array.<number>|Uint32Array)} freqs sorted probability.
 * @param {number} symbols number of symbols.
 * @param {number} limit code length limit.
 * @return {!(Array.<number>|Uint8Array)} code lengths.
 */


Zlib.RawDeflate.prototype.reversePackageMerge_ = function (freqs, symbols, limit) {
  /** @type {!(Array.<number>|Uint16Array)} */
  var minimumCost = new (USE_TYPEDARRAY ? Uint16Array : Array)(limit);
  /** @type {!(Array.<number>|Uint8Array)} */

  var flag = new (USE_TYPEDARRAY ? Uint8Array : Array)(limit);
  /** @type {!(Array.<number>|Uint8Array)} */

  var codeLength = new (USE_TYPEDARRAY ? Uint8Array : Array)(symbols);
  /** @type {Array} */

  var value = new Array(limit);
  /** @type {Array} */

  var type = new Array(limit);
  /** @type {Array.<number>} */

  var currentPosition = new Array(limit);
  /** @type {number} */

  var excess = (1 << limit) - symbols;
  /** @type {number} */

  var half = 1 << limit - 1;
  /** @type {number} */

  var i;
  /** @type {number} */

  var j;
  /** @type {number} */

  var t;
  /** @type {number} */

  var weight;
  /** @type {number} */

  var next;
  /**
   * @param {number} j
   */

  function takePackage(j) {
    /** @type {number} */
    var x = type[j][currentPosition[j]];

    if (x === symbols) {
      takePackage(j + 1);
      takePackage(j + 1);
    } else {
      --codeLength[x];
    }

    ++currentPosition[j];
  }

  minimumCost[limit - 1] = symbols;

  for (j = 0; j < limit; ++j) {
    if (excess < half) {
      flag[j] = 0;
    } else {
      flag[j] = 1;
      excess -= half;
    }

    excess <<= 1;
    minimumCost[limit - 2 - j] = (minimumCost[limit - 1 - j] / 2 | 0) + symbols;
  }

  minimumCost[0] = flag[0];
  value[0] = new Array(minimumCost[0]);
  type[0] = new Array(minimumCost[0]);

  for (j = 1; j < limit; ++j) {
    if (minimumCost[j] > 2 * minimumCost[j - 1] + flag[j]) {
      minimumCost[j] = 2 * minimumCost[j - 1] + flag[j];
    }

    value[j] = new Array(minimumCost[j]);
    type[j] = new Array(minimumCost[j]);
  }

  for (i = 0; i < symbols; ++i) {
    codeLength[i] = limit;
  }

  for (t = 0; t < minimumCost[limit - 1]; ++t) {
    value[limit - 1][t] = freqs[t];
    type[limit - 1][t] = t;
  }

  for (i = 0; i < limit; ++i) {
    currentPosition[i] = 0;
  }

  if (flag[limit - 1] === 1) {
    --codeLength[0];
    ++currentPosition[limit - 1];
  }

  for (j = limit - 2; j >= 0; --j) {
    i = 0;
    weight = 0;
    next = currentPosition[j + 1];

    for (t = 0; t < minimumCost[j]; t++) {
      weight = value[j + 1][next] + value[j + 1][next + 1];

      if (weight > freqs[i]) {
        value[j][t] = weight;
        type[j][t] = symbols;
        next += 2;
      } else {
        value[j][t] = freqs[i];
        type[j][t] = i;
        ++i;
      }
    }

    currentPosition[j] = 0;

    if (flag[j] === 1) {
      takePackage(j);
    }
  }

  return codeLength;
};
/**
 * 符号長配列からハフマン符号を取得する
 * reference: PuTTY Deflate implementation
 * @param {!(Array.<number>|Uint8Array)} lengths 符号長配列.
 * @return {!(Array.<number>|Uint16Array)} ハフマン符号配列.
 * @private
 */


Zlib.RawDeflate.prototype.getCodesFromLengths_ = function (lengths) {
  var codes = new (USE_TYPEDARRAY ? Uint16Array : Array)(lengths.length),
      count = [],
      startCode = [],
      code = 0,
      i,
      il,
      j,
      m; // Count the codes of each length.

  for (i = 0, il = lengths.length; i < il; i++) {
    count[lengths[i]] = (count[lengths[i]] | 0) + 1;
  } // Determine the starting code for each length block.


  for (i = 1, il = Zlib.RawDeflate.MaxCodeLength; i <= il; i++) {
    startCode[i] = code;
    code += count[i] | 0;
    code <<= 1;
  } // Determine the code for each symbol. Mirrored, of course.


  for (i = 0, il = lengths.length; i < il; i++) {
    code = startCode[lengths[i]];
    startCode[lengths[i]] += 1;
    codes[i] = 0;

    for (j = 0, m = lengths[i]; j < m; j++) {
      codes[i] = codes[i] << 1 | code & 1;
      code >>>= 1;
    }
  }

  return codes;
};
/**
 * @param {!(Array.<number>|Uint8Array)} input input buffer.
 * @param {Object=} opt_params options.
 * @constructor
 */


Zlib.Unzip = function (input, opt_params) {
  opt_params = opt_params || {};
  /** @type {!(Array.<number>|Uint8Array)} */

  this.input = USE_TYPEDARRAY && input instanceof Array ? new Uint8Array(input) : input;
  /** @type {number} */

  this.ip = 0;
  /** @type {number} */

  this.eocdrOffset;
  /** @type {number} */

  this.numberOfThisDisk;
  /** @type {number} */

  this.startDisk;
  /** @type {number} */

  this.totalEntriesThisDisk;
  /** @type {number} */

  this.totalEntries;
  /** @type {number} */

  this.centralDirectorySize;
  /** @type {number} */

  this.centralDirectoryOffset;
  /** @type {number} */

  this.commentLength;
  /** @type {(Array.<number>|Uint8Array)} */

  this.comment;
  /** @type {Array.<Zlib.Unzip.FileHeader>} */

  this.fileHeaderList;
  /** @type {Object.<string, number>} */

  this.filenameToIndex;
  /** @type {boolean} */

  this.verify = opt_params['verify'] || false;
  /** @type {(Array.<number>|Uint8Array)} */

  this.password = opt_params['password'];
};

Zlib.Unzip.CompressionMethod = Zlib.Zip.CompressionMethod;
/**
 * @type {Array.<number>}
 * @const
 */

Zlib.Unzip.FileHeaderSignature = Zlib.Zip.FileHeaderSignature;
/**
 * @type {Array.<number>}
 * @const
 */

Zlib.Unzip.LocalFileHeaderSignature = Zlib.Zip.LocalFileHeaderSignature;
/**
 * @type {Array.<number>}
 * @const
 */

Zlib.Unzip.CentralDirectorySignature = Zlib.Zip.CentralDirectorySignature;
/**
 * @param {!(Array.<number>|Uint8Array)} input input buffer.
 * @param {number} ip input position.
 * @constructor
 */

Zlib.Unzip.FileHeader = function (input, ip) {
  /** @type {!(Array.<number>|Uint8Array)} */
  this.input = input;
  /** @type {number} */

  this.offset = ip;
  /** @type {number} */

  this.length;
  /** @type {number} */

  this.version;
  /** @type {number} */

  this.os;
  /** @type {number} */

  this.needVersion;
  /** @type {number} */

  this.flags;
  /** @type {number} */

  this.compression;
  /** @type {number} */

  this.time;
  /** @type {number} */

  this.date;
  /** @type {number} */

  this.crc32;
  /** @type {number} */

  this.compressedSize;
  /** @type {number} */

  this.plainSize;
  /** @type {number} */

  this.fileNameLength;
  /** @type {number} */

  this.extraFieldLength;
  /** @type {number} */

  this.fileCommentLength;
  /** @type {number} */

  this.diskNumberStart;
  /** @type {number} */

  this.internalFileAttributes;
  /** @type {number} */

  this.externalFileAttributes;
  /** @type {number} */

  this.relativeOffset;
  /** @type {string} */

  this.filename;
  /** @type {!(Array.<number>|Uint8Array)} */

  this.extraField;
  /** @type {!(Array.<number>|Uint8Array)} */

  this.comment;
};

Zlib.Unzip.FileHeader.prototype.parse = function () {
  /** @type {!(Array.<number>|Uint8Array)} */
  var input = this.input;
  /** @type {number} */

  var ip = this.offset; // central file header signature

  if (input[ip++] !== Zlib.Unzip.FileHeaderSignature[0] || input[ip++] !== Zlib.Unzip.FileHeaderSignature[1] || input[ip++] !== Zlib.Unzip.FileHeaderSignature[2] || input[ip++] !== Zlib.Unzip.FileHeaderSignature[3]) {
    throw new Error('invalid file header signature');
  } // version made by


  this.version = input[ip++];
  this.os = input[ip++]; // version needed to extract

  this.needVersion = input[ip++] | input[ip++] << 8; // general purpose bit flag

  this.flags = input[ip++] | input[ip++] << 8; // compression method

  this.compression = input[ip++] | input[ip++] << 8; // last mod file time

  this.time = input[ip++] | input[ip++] << 8; //last mod file date

  this.date = input[ip++] | input[ip++] << 8; // crc-32

  this.crc32 = (input[ip++] | input[ip++] << 8 | input[ip++] << 16 | input[ip++] << 24) >>> 0; // compressed size

  this.compressedSize = (input[ip++] | input[ip++] << 8 | input[ip++] << 16 | input[ip++] << 24) >>> 0; // uncompressed size

  this.plainSize = (input[ip++] | input[ip++] << 8 | input[ip++] << 16 | input[ip++] << 24) >>> 0; // file name length

  this.fileNameLength = input[ip++] | input[ip++] << 8; // extra field length

  this.extraFieldLength = input[ip++] | input[ip++] << 8; // file comment length

  this.fileCommentLength = input[ip++] | input[ip++] << 8; // disk number start

  this.diskNumberStart = input[ip++] | input[ip++] << 8; // internal file attributes

  this.internalFileAttributes = input[ip++] | input[ip++] << 8; // external file attributes

  this.externalFileAttributes = input[ip++] | input[ip++] << 8 | input[ip++] << 16 | input[ip++] << 24; // relative offset of local header

  this.relativeOffset = (input[ip++] | input[ip++] << 8 | input[ip++] << 16 | input[ip++] << 24) >>> 0; // file name

  this.filename = String.fromCharCode.apply(null, USE_TYPEDARRAY ? input.subarray(ip, ip += this.fileNameLength) : input.slice(ip, ip += this.fileNameLength)); // extra field

  this.extraField = USE_TYPEDARRAY ? input.subarray(ip, ip += this.extraFieldLength) : input.slice(ip, ip += this.extraFieldLength); // file comment

  this.comment = USE_TYPEDARRAY ? input.subarray(ip, ip + this.fileCommentLength) : input.slice(ip, ip + this.fileCommentLength);
  this.length = ip - this.offset;
};
/**
 * @param {!(Array.<number>|Uint8Array)} input input buffer.
 * @param {number} ip input position.
 * @constructor
 */


Zlib.Unzip.LocalFileHeader = function (input, ip) {
  /** @type {!(Array.<number>|Uint8Array)} */
  this.input = input;
  /** @type {number} */

  this.offset = ip;
  /** @type {number} */

  this.length;
  /** @type {number} */

  this.needVersion;
  /** @type {number} */

  this.flags;
  /** @type {number} */

  this.compression;
  /** @type {number} */

  this.time;
  /** @type {number} */

  this.date;
  /** @type {number} */

  this.crc32;
  /** @type {number} */

  this.compressedSize;
  /** @type {number} */

  this.plainSize;
  /** @type {number} */

  this.fileNameLength;
  /** @type {number} */

  this.extraFieldLength;
  /** @type {string} */

  this.filename;
  /** @type {!(Array.<number>|Uint8Array)} */

  this.extraField;
};

Zlib.Unzip.LocalFileHeader.Flags = Zlib.Zip.Flags;

Zlib.Unzip.LocalFileHeader.prototype.parse = function () {
  /** @type {!(Array.<number>|Uint8Array)} */
  var input = this.input;
  /** @type {number} */

  var ip = this.offset; // local file header signature

  if (input[ip++] !== Zlib.Unzip.LocalFileHeaderSignature[0] || input[ip++] !== Zlib.Unzip.LocalFileHeaderSignature[1] || input[ip++] !== Zlib.Unzip.LocalFileHeaderSignature[2] || input[ip++] !== Zlib.Unzip.LocalFileHeaderSignature[3]) {
    throw new Error('invalid local file header signature');
  } // version needed to extract


  this.needVersion = input[ip++] | input[ip++] << 8; // general purpose bit flag

  this.flags = input[ip++] | input[ip++] << 8; // compression method

  this.compression = input[ip++] | input[ip++] << 8; // last mod file time

  this.time = input[ip++] | input[ip++] << 8; //last mod file date

  this.date = input[ip++] | input[ip++] << 8; // crc-32

  this.crc32 = (input[ip++] | input[ip++] << 8 | input[ip++] << 16 | input[ip++] << 24) >>> 0; // compressed size

  this.compressedSize = (input[ip++] | input[ip++] << 8 | input[ip++] << 16 | input[ip++] << 24) >>> 0; // uncompressed size

  this.plainSize = (input[ip++] | input[ip++] << 8 | input[ip++] << 16 | input[ip++] << 24) >>> 0; // file name length

  this.fileNameLength = input[ip++] | input[ip++] << 8; // extra field length

  this.extraFieldLength = input[ip++] | input[ip++] << 8; // file name

  this.filename = String.fromCharCode.apply(null, USE_TYPEDARRAY ? input.subarray(ip, ip += this.fileNameLength) : input.slice(ip, ip += this.fileNameLength)); // extra field

  this.extraField = USE_TYPEDARRAY ? input.subarray(ip, ip += this.extraFieldLength) : input.slice(ip, ip += this.extraFieldLength);
  this.length = ip - this.offset;
};

Zlib.Unzip.prototype.searchEndOfCentralDirectoryRecord = function () {
  /** @type {!(Array.<number>|Uint8Array)} */
  var input = this.input;
  /** @type {number} */

  var ip;

  for (ip = input.length - 12; ip > 0; --ip) {
    if (input[ip] === Zlib.Unzip.CentralDirectorySignature[0] && input[ip + 1] === Zlib.Unzip.CentralDirectorySignature[1] && input[ip + 2] === Zlib.Unzip.CentralDirectorySignature[2] && input[ip + 3] === Zlib.Unzip.CentralDirectorySignature[3]) {
      this.eocdrOffset = ip;
      return;
    }
  }

  throw new Error('End of Central Directory Record not found');
};

Zlib.Unzip.prototype.parseEndOfCentralDirectoryRecord = function () {
  /** @type {!(Array.<number>|Uint8Array)} */
  var input = this.input;
  /** @type {number} */

  var ip;

  if (!this.eocdrOffset) {
    this.searchEndOfCentralDirectoryRecord();
  }

  ip = this.eocdrOffset; // signature

  if (input[ip++] !== Zlib.Unzip.CentralDirectorySignature[0] || input[ip++] !== Zlib.Unzip.CentralDirectorySignature[1] || input[ip++] !== Zlib.Unzip.CentralDirectorySignature[2] || input[ip++] !== Zlib.Unzip.CentralDirectorySignature[3]) {
    throw new Error('invalid signature');
  } // number of this disk


  this.numberOfThisDisk = input[ip++] | input[ip++] << 8; // number of the disk with the start of the central directory

  this.startDisk = input[ip++] | input[ip++] << 8; // total number of entries in the central directory on this disk

  this.totalEntriesThisDisk = input[ip++] | input[ip++] << 8; // total number of entries in the central directory

  this.totalEntries = input[ip++] | input[ip++] << 8; // size of the central directory

  this.centralDirectorySize = (input[ip++] | input[ip++] << 8 | input[ip++] << 16 | input[ip++] << 24) >>> 0; // offset of start of central directory with respect to the starting disk number

  this.centralDirectoryOffset = (input[ip++] | input[ip++] << 8 | input[ip++] << 16 | input[ip++] << 24) >>> 0; // .ZIP file comment length

  this.commentLength = input[ip++] | input[ip++] << 8; // .ZIP file comment

  this.comment = USE_TYPEDARRAY ? input.subarray(ip, ip + this.commentLength) : input.slice(ip, ip + this.commentLength);
};

Zlib.Unzip.prototype.parseFileHeader = function () {
  /** @type {Array.<Zlib.Unzip.FileHeader>} */
  var filelist = [];
  /** @type {Object.<string, number>} */

  var filetable = {};
  /** @type {number} */

  var ip;
  /** @type {Zlib.Unzip.FileHeader} */

  var fileHeader;
  /*: @type {number} */

  var i;
  /*: @type {number} */

  var il;

  if (this.fileHeaderList) {
    return;
  }

  if (this.centralDirectoryOffset === void 0) {
    this.parseEndOfCentralDirectoryRecord();
  }

  ip = this.centralDirectoryOffset;

  for (i = 0, il = this.totalEntries; i < il; ++i) {
    fileHeader = new Zlib.Unzip.FileHeader(this.input, ip);
    fileHeader.parse();
    ip += fileHeader.length;
    filelist[i] = fileHeader;
    filetable[fileHeader.filename] = i;
  }

  if (this.centralDirectorySize < ip - this.centralDirectoryOffset) {
    throw new Error('invalid file header size');
  }

  this.fileHeaderList = filelist;
  this.filenameToIndex = filetable;
};
/**
 * @param {number} index file header index.
 * @param {Object=} opt_params
 * @return {!(Array.<number>|Uint8Array)} file data.
 */


Zlib.Unzip.prototype.getFileData = function (index, opt_params) {
  opt_params = opt_params || {};
  /** @type {!(Array.<number>|Uint8Array)} */

  var input = this.input;
  /** @type {Array.<Zlib.Unzip.FileHeader>} */

  var fileHeaderList = this.fileHeaderList;
  /** @type {Zlib.Unzip.LocalFileHeader} */

  var localFileHeader;
  /** @type {number} */

  var offset;
  /** @type {number} */

  var length;
  /** @type {!(Array.<number>|Uint8Array)} */

  var buffer;
  /** @type {number} */

  var crc32;
  /** @type {Array.<number>|Uint32Array|Object} */

  var key;
  /** @type {number} */

  var i;
  /** @type {number} */

  var il;

  if (!fileHeaderList) {
    this.parseFileHeader();
  }

  if (fileHeaderList[index] === void 0) {
    throw new Error('wrong index');
  }

  offset = fileHeaderList[index].relativeOffset;
  localFileHeader = new Zlib.Unzip.LocalFileHeader(this.input, offset);
  localFileHeader.parse();
  offset += localFileHeader.length;
  length = localFileHeader.compressedSize; // decryption

  if ((localFileHeader.flags & Zlib.Unzip.LocalFileHeader.Flags.ENCRYPT) !== 0) {
    if (!(opt_params['password'] || this.password)) {
      throw new Error('please set password');
    }

    key = this.createDecryptionKey(opt_params['password'] || this.password); // encryption header

    for (i = offset, il = offset + 12; i < il; ++i) {
      this.decode(key, input[i]);
    }

    offset += 12;
    length -= 12; // decryption

    for (i = offset, il = offset + length; i < il; ++i) {
      input[i] = this.decode(key, input[i]);
    }
  }

  switch (localFileHeader.compression) {
    case Zlib.Unzip.CompressionMethod.STORE:
      buffer = USE_TYPEDARRAY ? this.input.subarray(offset, offset + length) : this.input.slice(offset, offset + length);
      break;

    case Zlib.Unzip.CompressionMethod.DEFLATE:
      buffer = new Zlib.RawInflate(this.input, {
        'index': offset,
        'bufferSize': localFileHeader.plainSize
      }).decompress();
      break;

    default:
      throw new Error('unknown compression type');
  }

  if (this.verify) {
    crc32 = Zlib.CRC32.calc(buffer);

    if (localFileHeader.crc32 !== crc32) {
      throw new Error('wrong crc: file=0x' + localFileHeader.crc32.toString(16) + ', data=0x' + crc32.toString(16));
    }
  }

  return buffer;
};
/**
 * @return {Array.<string>}
 */


Zlib.Unzip.prototype.getFilenames = function () {
  /** @type {Array.<string>} */
  var filenameList = [];
  /** @type {number} */

  var i;
  /** @type {number} */

  var il;
  /** @type {Array.<Zlib.Unzip.FileHeader>} */

  var fileHeaderList;

  if (!this.fileHeaderList) {
    this.parseFileHeader();
  }

  fileHeaderList = this.fileHeaderList;

  for (i = 0, il = fileHeaderList.length; i < il; ++i) {
    filenameList[i] = fileHeaderList[i].filename;
  }

  return filenameList;
};
/**
 * @param {string} filename extract filename.
 * @param {Object=} opt_params
 * @return {!(Array.<number>|Uint8Array)} decompressed data.
 */


Zlib.Unzip.prototype.decompress = function (filename, opt_params) {
  /** @type {number} */
  var index;

  if (!this.filenameToIndex) {
    this.parseFileHeader();
  }

  index = this.filenameToIndex[filename];

  if (index === void 0) {
    throw new Error(filename + ' not found');
  }

  return this.getFileData(index, opt_params);
};
/**
 * @param {(Array.<number>|Uint8Array)} password
 */


Zlib.Unzip.prototype.setPassword = function (password) {
  this.password = password;
};
/**
 * @param {(Array.<number>|Uint32Array|Object)} key
 * @param {number} n
 * @return {number}
 */


Zlib.Unzip.prototype.decode = function (key, n) {
  n ^= this.getByte(
  /** @type {(Array.<number>|Uint32Array)} */
  key);
  this.updateKeys(
  /** @type {(Array.<number>|Uint32Array)} */
  key, n);
  return n;
}; // common method


Zlib.Unzip.prototype.updateKeys = Zlib.Zip.prototype.updateKeys;
Zlib.Unzip.prototype.createDecryptionKey = Zlib.Zip.prototype.createEncryptionKey;
Zlib.Unzip.prototype.getByte = Zlib.Zip.prototype.getByte;
/**
 * @fileoverview 雑多な関数群をまとめたモジュール実装.
 */

/**
 * Byte String から Byte Array に変換.
 * @param {!string} str byte string.
 * @return {!Array.<number>} byte array.
 */

Zlib.Util.stringToByteArray = function (str) {
  /** @type {!Array.<(string|number)>} */
  var tmp = str.split('');
  /** @type {number} */

  var i;
  /** @type {number} */

  var il;

  for (i = 0, il = tmp.length; i < il; i++) {
    tmp[i] = (tmp[i].charCodeAt(0) & 0xff) >>> 0;
  }

  return tmp;
};
/**
 * @fileoverview Adler32 checksum 実装.
 */

/**
 * Adler32 ハッシュ値の作成
 * @param {!(Array|Uint8Array|string)} array 算出に使用する byte array.
 * @return {number} Adler32 ハッシュ値.
 */


Zlib.Adler32 = function (array) {
  if (typeof array === 'string') {
    array = Zlib.Util.stringToByteArray(array);
  }

  return Zlib.Adler32.update(1, array);
};
/**
 * Adler32 ハッシュ値の更新
 * @param {number} adler 現在のハッシュ値.
 * @param {!(Array|Uint8Array)} array 更新に使用する byte array.
 * @return {number} Adler32 ハッシュ値.
 */


Zlib.Adler32.update = function (adler, array) {
  /** @type {number} */
  var s1 = adler & 0xffff;
  /** @type {number} */

  var s2 = adler >>> 16 & 0xffff;
  /** @type {number} array length */

  var len = array.length;
  /** @type {number} loop length (don't overflow) */

  var tlen;
  /** @type {number} array index */

  var i = 0;

  while (len > 0) {
    tlen = len > Zlib.Adler32.OptimizationParameter ? Zlib.Adler32.OptimizationParameter : len;
    len -= tlen;

    do {
      s1 += array[i++];
      s2 += s1;
    } while (--tlen);

    s1 %= 65521;
    s2 %= 65521;
  }

  return (s2 << 16 | s1) >>> 0;
};
/**
 * Adler32 最適化パラメータ
 * 現状では 1024 程度が最適.
 * @see http://jsperf.com/adler-32-simple-vs-optimized/3
 * @define {number}
 */


Zlib.Adler32.OptimizationParameter = 1024;
/**
 * ビットストリーム
 * @constructor
 * @param {!(Array|Uint8Array)=} buffer output buffer.
 * @param {number=} bufferPosition start buffer pointer.
 */

Zlib.BitStream = function (buffer, bufferPosition) {
  /** @type {number} buffer index. */
  this.index = typeof bufferPosition === 'number' ? bufferPosition : 0;
  /** @type {number} bit index. */

  this.bitindex = 0;
  /** @type {!(Array|Uint8Array)} bit-stream output buffer. */

  this.buffer = buffer instanceof (USE_TYPEDARRAY ? Uint8Array : Array) ? buffer : new (USE_TYPEDARRAY ? Uint8Array : Array)(Zlib.BitStream.DefaultBlockSize); // 入力された index が足りなかったら拡張するが、倍にしてもダメなら不正とする

  if (this.buffer.length * 2 <= this.index) {
    throw new Error("invalid index");
  } else if (this.buffer.length <= this.index) {
    this.expandBuffer();
  }
};
/**
 * デフォルトブロックサイズ.
 * @const
 * @type {number}
 */


Zlib.BitStream.DefaultBlockSize = 0x8000;
/**
 * expand buffer.
 * @return {!(Array|Uint8Array)} new buffer.
 */

Zlib.BitStream.prototype.expandBuffer = function () {
  /** @type {!(Array|Uint8Array)} old buffer. */
  var oldbuf = this.buffer;
  /** @type {number} loop counter. */

  var i;
  /** @type {number} loop limiter. */

  var il = oldbuf.length;
  /** @type {!(Array|Uint8Array)} new buffer. */

  var buffer = new (USE_TYPEDARRAY ? Uint8Array : Array)(il << 1); // copy buffer

  if (USE_TYPEDARRAY) {
    buffer.set(oldbuf);
  } else {
    // XXX: loop unrolling
    for (i = 0; i < il; ++i) {
      buffer[i] = oldbuf[i];
    }
  }

  return this.buffer = buffer;
};
/**
 * 数値をビットで指定した数だけ書き込む.
 * @param {number} number 書き込む数値.
 * @param {number} n 書き込むビット数.
 * @param {boolean=} reverse 逆順に書き込むならば true.
 */


Zlib.BitStream.prototype.writeBits = function (number, n, reverse) {
  var buffer = this.buffer;
  var index = this.index;
  var bitindex = this.bitindex;
  /** @type {number} current octet. */

  var current = buffer[index];
  /** @type {number} loop counter. */

  var i;
  /**
   * 32-bit 整数のビット順を逆にする
   * @param {number} n 32-bit integer.
   * @return {number} reversed 32-bit integer.
   * @private
   */

  function rev32_(n) {
    return Zlib.BitStream.ReverseTable[n & 0xFF] << 24 | Zlib.BitStream.ReverseTable[n >>> 8 & 0xFF] << 16 | Zlib.BitStream.ReverseTable[n >>> 16 & 0xFF] << 8 | Zlib.BitStream.ReverseTable[n >>> 24 & 0xFF];
  }

  if (reverse && n > 1) {
    number = n > 8 ? rev32_(number) >> 32 - n : Zlib.BitStream.ReverseTable[number] >> 8 - n;
  } // Byte 境界を超えないとき


  if (n + bitindex < 8) {
    current = current << n | number;
    bitindex += n; // Byte 境界を超えるとき
  } else {
    for (i = 0; i < n; ++i) {
      current = current << 1 | number >> n - i - 1 & 1; // next byte

      if (++bitindex === 8) {
        bitindex = 0;
        buffer[index++] = Zlib.BitStream.ReverseTable[current];
        current = 0; // expand

        if (index === buffer.length) {
          buffer = this.expandBuffer();
        }
      }
    }
  }

  buffer[index] = current;
  this.buffer = buffer;
  this.bitindex = bitindex;
  this.index = index;
};
/**
 * ストリームの終端処理を行う
 * @return {!(Array|Uint8Array)} 終端処理後のバッファを byte array で返す.
 */


Zlib.BitStream.prototype.finish = function () {
  var buffer = this.buffer;
  var index = this.index;
  /** @type {!(Array|Uint8Array)} output buffer. */

  var output; // bitindex が 0 の時は余分に index が進んでいる状態

  if (this.bitindex > 0) {
    buffer[index] <<= 8 - this.bitindex;
    buffer[index] = Zlib.BitStream.ReverseTable[buffer[index]];
    index++;
  } // array truncation


  if (USE_TYPEDARRAY) {
    output = buffer.subarray(0, index);
  } else {
    buffer.length = index;
    output = buffer;
  }

  return output;
};
/**
 * 0-255 のビット順を反転したテーブル
 * @const
 * @type {!(Uint8Array|Array.<number>)}
 */


Zlib.BitStream.ReverseTable = function (table) {
  return table;
}(function () {
  /** @type {!(Array|Uint8Array)} reverse table. */
  var table = new (USE_TYPEDARRAY ? Uint8Array : Array)(256);
  /** @type {number} loop counter. */

  var i; // generate

  for (i = 0; i < 256; ++i) {
    table[i] = function (n) {
      var r = n;
      var s = 7;

      for (n >>>= 1; n; n >>>= 1) {
        r <<= 1;
        r |= n & 1;
        --s;
      }

      return (r << s & 0xff) >>> 0;
    }(i);
  }

  return table;
}());
/**
 * @fileoverview CRC32 実装.
 */

/** @define {boolean} */


var ZLIB_CRC32_COMPACT = false;
/**
 * CRC32 ハッシュ値を取得
 * @param {!(Array.<number>|Uint8Array)} data data byte array.
 * @param {number=} pos data position.
 * @param {number=} length data length.
 * @return {number} CRC32.
 */

Zlib.CRC32.calc = function (data, pos, length) {
  return Zlib.CRC32.update(data, 0, pos, length);
};
/**
 * CRC32ハッシュ値を更新
 * @param {!(Array.<number>|Uint8Array)} data data byte array.
 * @param {number} crc CRC32.
 * @param {number=} pos data position.
 * @param {number=} length data length.
 * @return {number} CRC32.
 */


Zlib.CRC32.update = function (data, crc, pos, length) {
  var table = Zlib.CRC32.Table;
  var i = typeof pos === 'number' ? pos : pos = 0;
  var il = typeof length === 'number' ? length : data.length;
  crc ^= 0xffffffff; // loop unrolling for performance

  for (i = il & 7; i--; ++pos) {
    crc = crc >>> 8 ^ table[(crc ^ data[pos]) & 0xff];
  }

  for (i = il >> 3; i--; pos += 8) {
    crc = crc >>> 8 ^ table[(crc ^ data[pos]) & 0xff];
    crc = crc >>> 8 ^ table[(crc ^ data[pos + 1]) & 0xff];
    crc = crc >>> 8 ^ table[(crc ^ data[pos + 2]) & 0xff];
    crc = crc >>> 8 ^ table[(crc ^ data[pos + 3]) & 0xff];
    crc = crc >>> 8 ^ table[(crc ^ data[pos + 4]) & 0xff];
    crc = crc >>> 8 ^ table[(crc ^ data[pos + 5]) & 0xff];
    crc = crc >>> 8 ^ table[(crc ^ data[pos + 6]) & 0xff];
    crc = crc >>> 8 ^ table[(crc ^ data[pos + 7]) & 0xff];
  }

  return (crc ^ 0xffffffff) >>> 0;
};
/**
 * @param {number} num
 * @param {number} crc
 * @returns {number}
 */


Zlib.CRC32.single = function (num, crc) {
  return (Zlib.CRC32.Table[(num ^ crc) & 0xff] ^ num >>> 8) >>> 0;
};
/**
 * @type {Array.<number>}
 * @const
 * @private
 */


Zlib.CRC32.Table_ = [0x00000000, 0x77073096, 0xee0e612c, 0x990951ba, 0x076dc419, 0x706af48f, 0xe963a535, 0x9e6495a3, 0x0edb8832, 0x79dcb8a4, 0xe0d5e91e, 0x97d2d988, 0x09b64c2b, 0x7eb17cbd, 0xe7b82d07, 0x90bf1d91, 0x1db71064, 0x6ab020f2, 0xf3b97148, 0x84be41de, 0x1adad47d, 0x6ddde4eb, 0xf4d4b551, 0x83d385c7, 0x136c9856, 0x646ba8c0, 0xfd62f97a, 0x8a65c9ec, 0x14015c4f, 0x63066cd9, 0xfa0f3d63, 0x8d080df5, 0x3b6e20c8, 0x4c69105e, 0xd56041e4, 0xa2677172, 0x3c03e4d1, 0x4b04d447, 0xd20d85fd, 0xa50ab56b, 0x35b5a8fa, 0x42b2986c, 0xdbbbc9d6, 0xacbcf940, 0x32d86ce3, 0x45df5c75, 0xdcd60dcf, 0xabd13d59, 0x26d930ac, 0x51de003a, 0xc8d75180, 0xbfd06116, 0x21b4f4b5, 0x56b3c423, 0xcfba9599, 0xb8bda50f, 0x2802b89e, 0x5f058808, 0xc60cd9b2, 0xb10be924, 0x2f6f7c87, 0x58684c11, 0xc1611dab, 0xb6662d3d, 0x76dc4190, 0x01db7106, 0x98d220bc, 0xefd5102a, 0x71b18589, 0x06b6b51f, 0x9fbfe4a5, 0xe8b8d433, 0x7807c9a2, 0x0f00f934, 0x9609a88e, 0xe10e9818, 0x7f6a0dbb, 0x086d3d2d, 0x91646c97, 0xe6635c01, 0x6b6b51f4, 0x1c6c6162, 0x856530d8, 0xf262004e, 0x6c0695ed, 0x1b01a57b, 0x8208f4c1, 0xf50fc457, 0x65b0d9c6, 0x12b7e950, 0x8bbeb8ea, 0xfcb9887c, 0x62dd1ddf, 0x15da2d49, 0x8cd37cf3, 0xfbd44c65, 0x4db26158, 0x3ab551ce, 0xa3bc0074, 0xd4bb30e2, 0x4adfa541, 0x3dd895d7, 0xa4d1c46d, 0xd3d6f4fb, 0x4369e96a, 0x346ed9fc, 0xad678846, 0xda60b8d0, 0x44042d73, 0x33031de5, 0xaa0a4c5f, 0xdd0d7cc9, 0x5005713c, 0x270241aa, 0xbe0b1010, 0xc90c2086, 0x5768b525, 0x206f85b3, 0xb966d409, 0xce61e49f, 0x5edef90e, 0x29d9c998, 0xb0d09822, 0xc7d7a8b4, 0x59b33d17, 0x2eb40d81, 0xb7bd5c3b, 0xc0ba6cad, 0xedb88320, 0x9abfb3b6, 0x03b6e20c, 0x74b1d29a, 0xead54739, 0x9dd277af, 0x04db2615, 0x73dc1683, 0xe3630b12, 0x94643b84, 0x0d6d6a3e, 0x7a6a5aa8, 0xe40ecf0b, 0x9309ff9d, 0x0a00ae27, 0x7d079eb1, 0xf00f9344, 0x8708a3d2, 0x1e01f268, 0x6906c2fe, 0xf762575d, 0x806567cb, 0x196c3671, 0x6e6b06e7, 0xfed41b76, 0x89d32be0, 0x10da7a5a, 0x67dd4acc, 0xf9b9df6f, 0x8ebeeff9, 0x17b7be43, 0x60b08ed5, 0xd6d6a3e8, 0xa1d1937e, 0x38d8c2c4, 0x4fdff252, 0xd1bb67f1, 0xa6bc5767, 0x3fb506dd, 0x48b2364b, 0xd80d2bda, 0xaf0a1b4c, 0x36034af6, 0x41047a60, 0xdf60efc3, 0xa867df55, 0x316e8eef, 0x4669be79, 0xcb61b38c, 0xbc66831a, 0x256fd2a0, 0x5268e236, 0xcc0c7795, 0xbb0b4703, 0x220216b9, 0x5505262f, 0xc5ba3bbe, 0xb2bd0b28, 0x2bb45a92, 0x5cb36a04, 0xc2d7ffa7, 0xb5d0cf31, 0x2cd99e8b, 0x5bdeae1d, 0x9b64c2b0, 0xec63f226, 0x756aa39c, 0x026d930a, 0x9c0906a9, 0xeb0e363f, 0x72076785, 0x05005713, 0x95bf4a82, 0xe2b87a14, 0x7bb12bae, 0x0cb61b38, 0x92d28e9b, 0xe5d5be0d, 0x7cdcefb7, 0x0bdbdf21, 0x86d3d2d4, 0xf1d4e242, 0x68ddb3f8, 0x1fda836e, 0x81be16cd, 0xf6b9265b, 0x6fb077e1, 0x18b74777, 0x88085ae6, 0xff0f6a70, 0x66063bca, 0x11010b5c, 0x8f659eff, 0xf862ae69, 0x616bffd3, 0x166ccf45, 0xa00ae278, 0xd70dd2ee, 0x4e048354, 0x3903b3c2, 0xa7672661, 0xd06016f7, 0x4969474d, 0x3e6e77db, 0xaed16a4a, 0xd9d65adc, 0x40df0b66, 0x37d83bf0, 0xa9bcae53, 0xdebb9ec5, 0x47b2cf7f, 0x30b5ffe9, 0xbdbdf21c, 0xcabac28a, 0x53b39330, 0x24b4a3a6, 0xbad03605, 0xcdd70693, 0x54de5729, 0x23d967bf, 0xb3667a2e, 0xc4614ab8, 0x5d681b02, 0x2a6f2b94, 0xb40bbe37, 0xc30c8ea1, 0x5a05df1b, 0x2d02ef8d];
/**
 * @type {!(Array.<number>|Uint32Array)} CRC-32 Table.
 * @const
 */

Zlib.CRC32.Table = ZLIB_CRC32_COMPACT ? function () {
  /** @type {!(Array.<number>|Uint32Array)} */
  var table = new (USE_TYPEDARRAY ? Uint32Array : Array)(256);
  /** @type {number} */

  var c;
  /** @type {number} */

  var i;
  /** @type {number} */

  var j;

  for (i = 0; i < 256; ++i) {
    c = i;

    for (j = 0; j < 8; ++j) {
      c = c & 1 ? 0xedB88320 ^ c >>> 1 : c >>> 1;
    }

    table[i] = c >>> 0;
  }

  return table;
}() : USE_TYPEDARRAY ? new Uint32Array(Zlib.CRC32.Table_) : Zlib.CRC32.Table_;
/**
 * @fileoverview Deflate (RFC1951) 実装.
 * Deflateアルゴリズム本体は Zlib.RawDeflate で実装されている.
 */

/**
 * Zlib Deflate
 * @constructor
 * @param {!(Array|Uint8Array)} input 符号化する対象の byte array.
 * @param {Object=} opt_params option parameters.
 */

Zlib.Deflate = function (input, opt_params) {
  /** @type {!(Array|Uint8Array)} */
  this.input = input;
  /** @type {!(Array|Uint8Array)} */

  this.output = new (USE_TYPEDARRAY ? Uint8Array : Array)(Zlib.Deflate.DefaultBufferSize);
  /** @type {Zlib.Deflate.CompressionType} */

  this.compressionType = Zlib.Deflate.CompressionType.DYNAMIC;
  /** @type {Zlib.RawDeflate} */

  this.rawDeflate;
  /** @type {Object} */

  var rawDeflateOption = {};
  /** @type {string} */

  var prop; // option parameters

  if (opt_params || !(opt_params = {})) {
    if (typeof opt_params['compressionType'] === 'number') {
      this.compressionType = opt_params['compressionType'];
    }
  } // copy options


  for (prop in opt_params) {
    rawDeflateOption[prop] = opt_params[prop];
  } // set raw-deflate output buffer


  rawDeflateOption['outputBuffer'] = this.output;
  this.rawDeflate = new Zlib.RawDeflate(this.input, rawDeflateOption);
};
/**
 * @const
 * @type {number} デフォルトバッファサイズ.
 */


Zlib.Deflate.DefaultBufferSize = 0x8000;
/**
 * @enum {number}
 */

Zlib.Deflate.CompressionType = Zlib.RawDeflate.CompressionType;
/**
 * 直接圧縮に掛ける.
 * @param {!(Array|Uint8Array)} input target buffer.
 * @param {Object=} opt_params option parameters.
 * @return {!(Array|Uint8Array)} compressed data byte array.
 */

Zlib.Deflate.compress = function (input, opt_params) {
  return new Zlib.Deflate(input, opt_params).compress();
};
/**
 * Deflate Compression.
 * @return {!(Array|Uint8Array)} compressed data byte array.
 */


Zlib.Deflate.prototype.compress = function () {
  /** @type {Zlib.CompressionMethod} */
  var cm;
  /** @type {number} */

  var cinfo;
  /** @type {number} */

  var cmf;
  /** @type {number} */

  var flg;
  /** @type {number} */

  var fcheck;
  /** @type {number} */

  var fdict;
  /** @type {number} */

  var flevel;
  /** @type {number} */

  var clevel;
  /** @type {number} */

  var adler;
  /** @type {boolean} */

  var error = false;
  /** @type {!(Array|Uint8Array)} */

  var output;
  /** @type {number} */

  var pos = 0;
  output = this.output; // Compression Method and Flags

  cm = Zlib.CompressionMethod.DEFLATE;

  switch (cm) {
    case Zlib.CompressionMethod.DEFLATE:
      cinfo = Math.LOG2E * Math.log(Zlib.RawDeflate.WindowSize) - 8;
      break;

    default:
      throw new Error('invalid compression method');
  }

  cmf = cinfo << 4 | cm;
  output[pos++] = cmf; // Flags

  fdict = 0;

  switch (cm) {
    case Zlib.CompressionMethod.DEFLATE:
      switch (this.compressionType) {
        case Zlib.Deflate.CompressionType.NONE:
          flevel = 0;
          break;

        case Zlib.Deflate.CompressionType.FIXED:
          flevel = 1;
          break;

        case Zlib.Deflate.CompressionType.DYNAMIC:
          flevel = 2;
          break;

        default:
          throw new Error('unsupported compression type');
      }

      break;

    default:
      throw new Error('invalid compression method');
  }

  flg = flevel << 6 | fdict << 5;
  fcheck = 31 - (cmf * 256 + flg) % 31;
  flg |= fcheck;
  output[pos++] = flg; // Adler-32 checksum

  adler = Zlib.Adler32(this.input);
  this.rawDeflate.op = pos;
  output = this.rawDeflate.compress();
  pos = output.length;

  if (USE_TYPEDARRAY) {
    // subarray 分を元にもどす
    output = new Uint8Array(output.buffer); // expand buffer

    if (output.length <= pos + 4) {
      this.output = new Uint8Array(output.length + 4);
      this.output.set(output);
      output = this.output;
    }

    output = output.subarray(0, pos + 4);
  } // adler32


  output[pos++] = adler >> 24 & 0xff;
  output[pos++] = adler >> 16 & 0xff;
  output[pos++] = adler >> 8 & 0xff;
  output[pos++] = adler & 0xff;
  return output;
};

/* harmony default export */ __webpack_exports__["default"] = (Zlib);

/***/ }),

/***/ "./website/js/app.js":
/*!***************************!*\
  !*** ./website/js/app.js ***!
  \***************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _site__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./site */ "./website/js/site.js");
/* harmony import */ var _vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../vendor/jquery-1.12.4 */ "./vendor/jquery-1.12.4.js");
/*
 *  The MIT License (MIT)
 *
 * Copyright (c) 2019 The Regents of the University of California
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
 * associated documentation files (the "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the
 * following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial
 * portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
 * BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,  FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 */


Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_1__["default"])(document).ready(function () {
  var config = {
    mapMenu: {
      id: 'dataset_selector',
      items: 'res/mapMenuData.txt'
    },
    trackMenu: {
      id: 'annotation-selector',
      items: 'https://hicfiles.s3.amazonaws.com/internal/tracksMenu_$GENOME_ID.txt'
    },
    trackMenu2D: {
      id: 'annotation-2D-selector',
      items: 'https://hicfiles.s3.amazonaws.com/internal/tracksMenu_2D.$GENOME_ID.txt'
    },
    // List of URL shorteners.  First in the list is the default and will be used for shortening URLs
    // Others potentiall used for expanding short URLs.  At least 1 shortener is required for the
    // "Share" button.
    // NOTE: you must provide an API key (Google) or access token (Bitly) to use these services on your site
    urlShortener: [{
      provider: "bitly",
      apiKey: "ABCD",
      // TODO -- replace with your Bitly access token
      hostname: 'bit.ly'
    }, {
      provider: "google",
      apiKey: "ABCD",
      // TODO -- replace with your Google API Key
      hostname: "goo.gl"
    }],
    apiKey: "ABCD" // TODO -- replace with your Google API Key

  };
  _site__WEBPACK_IMPORTED_MODULE_0__["default"].init(Object(_vendor_jquery_1_12_4__WEBPACK_IMPORTED_MODULE_1__["default"])('#app-container')[0], config);
});

/***/ }),

/***/ "./website/js/encode.js":
/*!******************************!*\
  !*** ./website/js/encode.js ***!
  \******************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2016-2017 The Regents of the University of California
 * Author: Jim Robinson
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
var EncodeDataSource = function EncodeDataSource(columnFormat) {
  this.columnFormat = columnFormat;
};

EncodeDataSource.prototype.retrieveData = function (genomeID, filter) {
  var self = this,
      assembly;
  assembly = genomeID;
  var url = "https://s3.amazonaws.com/igv.org.app/encode/" + assembly + ".txt.gz";
  return igv.xhr.loadString(url, {}).then(function (data) {
    return parseTabData(data, filter);
  }).then(function (records) {
    records.sort(encodeSort);
    return Promise.resolve(records);
  }); // .loadJson(urlString(assembly), {})
  // .then(function(json){
  //     return parseJSONData(json, assembly, self.fileFormats);
  // })
  // .then(function (data) {
  //     data.sort(encodeSort);
  //     return Promise.resolve(data);
  // });
};

function parseTabData(data, filter) {
  if (!data) return null;
  var dataWrapper, line;
  dataWrapper = igv.getDataWrapper(data);
  var records = [];
  dataWrapper.nextLine(); // Skip header

  while (line = dataWrapper.nextLine()) {
    var tokens = line.split("\t");
    var record = {
      "Assembly": tokens[1],
      "ExperimentID": tokens[0],
      "Experiment": tokens[0].substr(13).replace("/", ""),
      "Cell Type": tokens[2],
      "Assay Type": tokens[3],
      "Target": tokens[4],
      "Format": tokens[8],
      "Output Type": tokens[7],
      "Lab": tokens[9],
      "url": "https://www.encodeproject.org" + tokens[10],
      "Bio Rep": tokens[5],
      "Tech Rep": tokens[6],
      "Accession": tokens[11]
    };
    constructName(record);

    if (filter === undefined || filter(record)) {
      records.push(record);
    }
  }

  return records;
}

function constructName(record) {
  var name = record["Cell Type"] || "";

  if (record["Target"]) {
    name += " " + record["Target"];
  }

  if (record["Assay Type"].toLowerCase() !== "chip-seq") {
    name += " " + record["Assay Type"];
  }

  if (record["Bio Rep"]) {
    name += " " + record["Bio Rep"];
  }

  if (record["Tech Rep"]) {
    name += (record["Bio Rep"] ? ":" : " 0:") + record["Tech Rep"];
  }

  name += " " + record["Output Type"];
  name += " " + record["Experiment"];
  record["Name"] = name;
}

function encodeSort(a, b) {
  var aa1, aa2, cc1, cc2, tt1, tt2;
  aa1 = a['Assay Type'];
  aa2 = b['Assay Type'];
  cc1 = a['Cell Type'];
  cc2 = b['Cell Type'];
  tt1 = a['Target'];
  tt2 = b['Target'];

  if (aa1 === aa2) {
    if (cc1 === cc2) {
      if (tt1 === tt2) {
        return 0;
      } else if (tt1 < tt2) {
        return -1;
      } else {
        return 1;
      }
    } else if (cc1 < cc2) {
      return -1;
    } else {
      return 1;
    }
  } else {
    if (aa1 < aa2) {
      return -1;
    } else {
      return 1;
    }
  }
}

EncodeDataSource.prototype.tableData = function (data) {
  var self = this,
      mapped;
  mapped = data.map(function (row) {
    var displayKeys = self.columnFormat.map(function (col) {
      return col.title;
    });
    return displayKeys.map(function (key) {
      return row[key];
    });
  });
  return mapped;
};

EncodeDataSource.prototype.tableColumns = function () {
  return this.columnFormat;
};

EncodeDataSource.prototype.dataAtRowIndex = function (data, index) {
  var row = data[index];
  var format = getFormat(row);
  var type;

  if (format === 'bedpe-domain') {
    type = 'annotation';
  } else if (format === 'bedpe-loop') {
    type = 'interaction';
  }

  var obj = {
    url: row['url'],
    color: encodeAntibodyColor(row['Target']),
    name: row['Name'],
    format: format,
    type: type
  };
  return obj;

  function encodeAntibodyColor(antibody) {
    var colors, key;
    colors = {
      DEFAULT: "rgb(3, 116, 178)",
      H3K27AC: "rgb(200, 0, 0)",
      H3K27ME3: "rgb(130, 0, 4)",
      H3K36ME3: "rgb(0, 0, 150)",
      H3K4ME1: "rgb(0, 150, 0)",
      H3K4ME2: "rgb(0, 150, 0)",
      H3K4ME3: "rgb(0, 150, 0)",
      H3K9AC: "rgb(100, 0, 0)",
      H3K9ME1: "rgb(100, 0, 0)"
    };

    if (undefined === antibody || '' === antibody || '-' === antibody) {
      key = 'DEFAULT';
    } else {
      key = antibody.toUpperCase();
    }

    return colors[key];
  }

  function getFormat(row) {
    var format = row['Format'],
        outputType = row['Output Type'],
        assayType = row['Assay Type'];

    if (format === 'bedpe' && outputType && outputType.includes('domain')) {
      return 'bedpe-domain';
    } else if (format === 'tsv' && outputType.includes("interaction") && assayType.toLowerCase() === 'hic') {
      return "bedpe-loop";
    } else {
      return format.toLowerCase();
    }
  }
};

function urlString(assembly, fileFormat) {
  var str; // TODO - Test Error Handling with this URL.
  // str = "https://www.encodeproject.org/search/?type=experiment&assembly=/work/ea14/juicer/references/genome_collection/Hs2-HiC.chrom.sizes&files.file_format=bigWig&format=json&field=lab.title&field=biosample_term_name&field=assay_term_name&field=target.label&field=files.file_format&field=files.output_type&field=files.href&field=files.replicate.technical_replicate_number&field=files.replicate.biological_replicate_number&field=files.assembly&limit=all";

  str = "https://www.encodeproject.org/search/?" + "type=experiment&" + "assembly=" + assembly + "&" + //"files.file_format=" + fileFormat + "&" +
  "format=json&" + "field=lab.title&" + "field=biosample_term_name&" + "field=assay_term_name&" + "field=target.label&" + "field=files.file_format&" + "field=files.output_type&" + "field=files.href&" + "field=files.replicate.technical_replicate_number&" + "field=files.replicate.biological_replicate_number&" + "field=files.assembly&" + "limit=all";
  return str;
}

function parseJSONData(json, assembly, fileFormats) {
  var rows = [];
  json["@graph"].forEach(function (record) {
    var cellType, target, filtered, mapped, assayType;
    cellType = record.biosample_term_name;
    assayType = record.assay_term_name;
    target = record.target ? record.target.label : undefined;
    var id = record["@id"];

    if (record.files) {
      filtered = record.files.filter(function (file) {
        return assembly === file.assembly && (!fileFormats || fileFormats.has(file.file_format));
      });
      mapped = filtered.map(function (file) {
        var bioRep = file.replicate ? file.replicate.bioligcal_replicate_number : undefined,
            techRep = file.replicate ? file.replicate.technical_replicate_number : undefined,
            name = cellType || "";

        if (target) {
          name += " " + target;
        }

        if (assayType && assayType.toLowerCase() !== "chip-seq") {
          name += " " + assayType;
        }

        if (bioRep) {
          name += " " + bioRep;
        }

        if (techRep) {
          name += (bioRep ? ":" : " 0:") + techRep;
        }

        return {
          "Assembly": file.assembly,
          "ExperimentID": record['@id'],
          "Cell Type": cellType || '',
          "Assay Type": record.assay_term_name,
          "Target": target || '',
          "Lab": record.lab ? record.lab.title : "",
          "Format": file.file_format,
          "Output Type": file.output_type,
          "url": "https://www.encodeproject.org" + file.href,
          "Bio Rep": bioRep,
          "Tech Rep": techRep,
          "Name": name
        };
      });
    }

    Array.prototype.push.apply(rows, mapped);
  });
  return rows.map(function (row) {
    return Object.keys(row).map(function (key) {
      var val = row[key];
      return undefined === val || '' === val ? '-' : val;
    });
  });
}

/* harmony default export */ __webpack_exports__["default"] = (EncodeDataSource);

/***/ }),

/***/ "./website/js/modalTable.js":
/*!**********************************!*\
  !*** ./website/js/modalTable.js ***!
  \**********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2016-2017 The Regents of the University of California
 * Author: Jim Robinson
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

/**
 * Created by dat on 4/18/17.
 */
var ModalTable = function ModalTable(config) {
  this.config = config;
  this.datasource = config.datasource;
  this.browserHandler = config.browserHandler;
  teardownModalDOM(config);
  this.$table = $('<table cellpadding="0" cellspacing="0" border="0" class="display"></table>');
  config.$modalBody.append(this.$table);
  this.doRetrieveData = true;
  this.doBuildTable = true;
  this.$spinner = $('<div>');
  this.$table.append(this.$spinner);
  this.$spinner.append($('<i class="fa fa-lg fa-spinner fa-spin"></i>'));
};

function teardownModalDOM(configuration) {
  var list;
  list = [configuration.$modal, configuration.$modalTopCloseButton, configuration.$modalBottomCloseButton, configuration.$modalGoButton];
  list.forEach(function ($e) {
    $e.unbind();
  });
  configuration.$modalBody.empty();
}

function getSelectedTableRowsData($rows) {
  var self = this,
      dt,
      result;
  result = [];

  if ($rows.length > 0) {
    $rows.removeClass('selected');
    dt = self.$table.DataTable();
    $rows.each(function () {
      result.push(self.datasource.dataAtRowIndex(self.datasource.data, dt.row(this).index()));
    });
  }

  return result.length > 0 ? result : undefined;
}

ModalTable.prototype.startSpinner = function () {
  this.$spinner.show();
};

ModalTable.prototype.stopSpinner = function () {
  this.$spinner.hide();
};

ModalTable.prototype.hidePresentationButton = function () {
  this.config.$modalPresentationButton.addClass('igv-app-disabled');
  this.config.$modalPresentationButton.text('Genome not supported by ENCODE');
};

ModalTable.prototype.willRetrieveData = function () {
  //this.startSpinner();
  $('#hic-encode-modal-button').hide();
  $('#hic-encode-loading').show();
};

ModalTable.prototype.didRetrieveData = function () {
  //this.config.didRetrieveData();
  $('#hic-encode-modal-button').show();
  $('#hic-encode-loading').hide();
};

ModalTable.prototype.didFailToRetrieveData = function () {
  this.stopSpinner();
  this.buildTable(false);
};

ModalTable.prototype.loadData = function (genomeId) {
  var self = this,
      assembly;
  this.willRetrieveData();
  assembly = ModalTable.getAssembly(genomeId);

  if (assembly) {
    this.datasource.retrieveData(assembly, function (record) {
      // to bigwig only for now
      return record["Format"].toLowerCase() === "bigwig";
    }).then(function (data) {
      self.datasource.data = data;
      self.doRetrieveData = false;
      self.didRetrieveData();
      self.buildTable(true);
    }).catch(function (e) {
      self.didFailToRetrieveData();
    });
  }
};

ModalTable.prototype.buildTable = function (success) {
  var self = this;

  if (true === success) {
    this.config.$modal.on('shown.bs.modal', function (e) {
      if (true === self.doBuildTable) {
        self.tableWithDataAndColumns(self.datasource.tableData(self.datasource.data), self.datasource.tableColumns());
        self.stopSpinner();
        self.doBuildTable = false;
      }
    });
    this.config.$modalGoButton.on('click', function () {
      var selected;
      selected = getSelectedTableRowsData.call(self, self.$dataTables.$('tr.selected'));

      if (selected) {
        self.browserHandler(selected);
      }
    });
  }

  this.config.$modalTopCloseButton.on('click', function () {
    $('tr.selected').removeClass('selected');
  });
  this.config.$modalBottomCloseButton.on('click', function () {
    $('tr.selected').removeClass('selected');
  });
};

ModalTable.prototype.tableWithDataAndColumns = function (tableData, tableColumns) {
  var config;
  this.stopSpinner();
  config = {
    data: tableData,
    columns: tableColumns,
    autoWidth: false,
    paging: true,
    scrollX: true,
    scrollY: '400px',
    scroller: true,
    scrollCollapse: true
  };
  this.$dataTables = this.$table.dataTable(config);
  this.$table.find('tbody').on('click', 'tr', function () {
    if ($(this).hasClass('selected')) {
      $(this).removeClass('selected');
    } else {
      $(this).addClass('selected');
    }
  });
};

ModalTable.getAssembly = function (genomeID) {
  var lut, assembly;
  lut = {
    dm3: 'dm3',
    mm10: 'mm10',
    hg19: 'hg19',
    hg38: 'GRCh38'
  };
  assembly = lut[genomeID];
  return assembly;
};

/* harmony default export */ __webpack_exports__["default"] = (ModalTable);

/***/ }),

/***/ "./website/js/site.js":
/*!****************************!*\
  !*** ./website/js/site.js ***!
  \****************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _modalTable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./modalTable */ "./website/js/modalTable.js");
/* harmony import */ var _encode__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./encode */ "./website/js/encode.js");
/* harmony import */ var _js_hicBrowser__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../js/hicBrowser */ "./js/hicBrowser.js");
/* harmony import */ var _js_hic__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../js/hic */ "./js/hic.js");
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

/*
 *  The MIT License (MIT)
 *
 * Copyright (c) 2019 The Regents of the University of California
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
 * associated documentation files (the "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the
 * following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial
 * portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
 * BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,  FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 */

/**
 * Created by Jim Robinson on 3/4/17.
 *
 * Page (site specific) code for the example pages.
 *
 */
// This file depends on bootstrap modifications to jQuery => jquery & bootstrap are required.  Do not import
// $ here, need the jquery from the page.



 //import QRCode from './qrcode'

var juicebox = {};
/* harmony default export */ __webpack_exports__["default"] = (juicebox);
var encodeTable,
    lastGenomeId,
    qrcode,
    contact_map_dropdown_id = 'hic-contact-map-dropdown',
    control_map_dropdown_id = 'hic-control-map-dropdown';

juicebox.init =
/*#__PURE__*/
function () {
  var _ref = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee2(container, config) {
    var genomeChangeListener, $appContainer, query, $hic_share_url_modal, $e, postCreateBrowser, getEmbeddableSnippet, getEmbedTarget;
    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            getEmbedTarget = function _ref5() {
              var href, idx;
              href = new String(window.location.href);
              idx = href.indexOf("?");
              if (idx > 0) href = href.substring(0, idx);
              idx = href.lastIndexOf("/");
              return href.substring(0, idx) + "/embed.html";
            };

            getEmbeddableSnippet = function _ref4(jbUrl) {
              return new Promise(function (fulfill, reject) {
                var idx, embedUrl, params, width, height;
                idx = jbUrl.indexOf("?");
                params = jbUrl.substring(idx);
                embedUrl = (config.embedTarget || getEmbedTarget()) + params;
                width = $appContainer.width() + 50;
                height = $appContainer.height();
                fulfill('<iframe src="' + embedUrl + '" width="100%" height="' + height + '" frameborder="0" style="border:0" allowfullscreen></iframe>'); // Disable shortening the embedUrl for now -- we don't want to bake in the embedTarget
                // shortenURL(embedUrl)
                //     .then(function (shortURL) {
                //         fulfill('<iframe src="' + shortURL + '" width="100%" height="' + height + '" frameborder="0" style="border:0" allowfullscreen></iframe>');
                //     });
              });
            };

            postCreateBrowser = function _ref3() {
              var _iteratorNormalCompletion = true;
              var _didIteratorError = false;
              var _iteratorError = undefined;

              try {
                for (var _iterator = _js_hic__WEBPACK_IMPORTED_MODULE_3__["allBrowsers"][Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                  var browser = _step.value;
                  browser.eventBus.subscribe("GenomeChange", genomeChangeListener);
                  browser.eventBus.subscribe("MapLoad", checkBDropdown);
                  updateBDropdown(browser);
                } // Must manually trigger the genome change event on initial load

              } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion && _iterator.return != null) {
                    _iterator.return();
                  }
                } finally {
                  if (_didIteratorError) {
                    throw _iteratorError;
                  }
                }
              }

              if (_js_hicBrowser__WEBPACK_IMPORTED_MODULE_2__["default"].currentBrowser && _js_hicBrowser__WEBPACK_IMPORTED_MODULE_2__["default"].currentBrowser.genome) {
                genomeChangeListener.receiveEvent({
                  data: _js_hicBrowser__WEBPACK_IMPORTED_MODULE_2__["default"].currentBrowser.genome.id
                });
              }

              if (config.mapMenu) {
                populatePulldown(config.mapMenu);
              }

              $hic_share_url_modal = $('#hic-share-url-modal');

              function maybeShortenURL(url) {
                if (url.length < 2048) {
                  return _js_hic__WEBPACK_IMPORTED_MODULE_3__["shortenURL"](url);
                } else {
                  igv.presentAlert("URL too long to shorten");
                  return Promise.resolve(url);
                }
              }

              $hic_share_url_modal.on('show.bs.modal',
              /*#__PURE__*/
              function () {
                var _ref2 = _asyncToGenerator(
                /*#__PURE__*/
                regeneratorRuntime.mark(function _callee(e) {
                  var queryString, href, idx, jbUrl, shareUrl, tweetContainer, config, $hic_share_url;
                  return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                      switch (_context.prev = _context.next) {
                        case 0:
                          href = new String(window.location.href); // This js file is specific to the aidenlab site, and we know we have only juicebox parameters.
                          // Strip href of current parameters, if any

                          idx = href.indexOf("?");
                          if (idx > 0) href = href.substring(0, idx);
                          _context.next = 5;
                          return _js_hic__WEBPACK_IMPORTED_MODULE_3__["shortJuiceboxURL"](href);

                        case 5:
                          jbUrl = _context.sent;
                          getEmbeddableSnippet(jbUrl).then(function (embedSnippet) {
                            var $hic_embed_url;
                            $hic_embed_url = $('#hic-embed');
                            $hic_embed_url.val(embedSnippet);
                            $hic_embed_url.get(0).select();
                          });
                          shareUrl = jbUrl; // Shorten second time
                          // e.g. converts https://aidenlab.org/juicebox?juiceboxURL=https://goo.gl/WUb1mL  to https://goo.gl/ERHp5u

                          $hic_share_url = $('#hic-share-url');
                          $hic_share_url.val(shareUrl);
                          $hic_share_url.get(0).select();
                          tweetContainer = $('#tweetButtonContainer');
                          tweetContainer.empty();
                          config = {
                            text: 'Contact map: '
                          };
                          $('#emailButton').attr('href', 'mailto:?body=' + shareUrl);

                          if (shareUrl.length < 100) {
                            window.twttr.widgets.createShareButton(shareUrl, tweetContainer.get(0), config).then(function (el) {}); // QR code generation

                            if (qrcode) {
                              qrcode.clear();
                              $('hic-qr-code-image').empty();
                            } else {
                              config = {
                                width: 128,
                                height: 128,
                                correctLevel: QRCode.CorrectLevel.H
                              };
                              qrcode = new QRCode(document.getElementById("hic-qr-code-image"), config);
                            }

                            qrcode.makeCode(shareUrl);
                          }

                        case 16:
                        case "end":
                          return _context.stop();
                      }
                    }
                  }, _callee, this);
                }));

                return function (_x3) {
                  return _ref2.apply(this, arguments);
                };
              }());
              $hic_share_url_modal.on('hidden.bs.modal', function (e) {
                $('#hic-embed-container').hide();
                $('#hic-qr-code-image').hide();
              });
              $('#hic-track-dropdown').parent().on('shown.bs.dropdown', function () {
                var browser;
                browser = _js_hicBrowser__WEBPACK_IMPORTED_MODULE_2__["default"].getCurrentBrowser();

                if (undefined === browser || undefined === browser.dataset) {
                  igv.presentAlert('Contact map must be loaded and selected before loading tracks');
                }
              });
              $('#hic-embed-button').on('click', function (e) {
                $('#hic-qr-code-image').hide();
                $('#hic-embed-container').toggle();
              });
              $('#hic-qr-code-button').on('click', function (e) {
                $('#hic-embed-container').hide();
                $('#hic-qr-code-image').toggle();
              });
              $('#dataset_selector').on('change', function (e) {
                var $selected, url, browser;
                url = $(this).val();
                $selected = $(this).find('option:selected');
                browser = _js_hicBrowser__WEBPACK_IMPORTED_MODULE_2__["default"].getCurrentBrowser();

                if (undefined === browser) {
                  igv.presentAlert('ERROR: you must select a map panel by clicking the panel header.');
                } else {
                  loadHicFile(url, $selected.text());
                }

                $('#hic-contact-map-select-modal').modal('hide');
                $(this).find('option').removeAttr("selected");
              });
              $('.selectpicker').selectpicker();
              $('#hic-load-local-file').on('change', function (e) {
                var file, suffix;

                if (undefined === _js_hicBrowser__WEBPACK_IMPORTED_MODULE_2__["default"].getCurrentBrowser()) {
                  igv.presentAlert('ERROR: you must select a map panel.');
                } else {
                  file = $(this).get(0).files[0];
                  suffix = file.name.substr(file.name.lastIndexOf('.') + 1);

                  if ('hic' === suffix) {
                    loadHicFile(file, file.name);
                  } else {
                    _js_hicBrowser__WEBPACK_IMPORTED_MODULE_2__["default"].getCurrentBrowser().loadTracks([{
                      url: file,
                      name: file.name
                    }]);
                  }
                }

                $(this).val("");
                $('#hic-load-local-file-modal').modal('hide');
              });
              $('#hic-load-url').on('change', function (e) {
                var url, suffix, paramIdx, path;

                if (undefined === _js_hicBrowser__WEBPACK_IMPORTED_MODULE_2__["default"].getCurrentBrowser()) {
                  igv.presentAlert('ERROR: you must select a map panel.');
                } else {
                  url = $(this).val();
                  loadHicFile(url);
                }

                $(this).val("");
                $('#hic-load-url-modal').modal('hide');
              });
              $('#track-load-url').on('change', function (e) {
                var url;

                if (undefined === _js_hicBrowser__WEBPACK_IMPORTED_MODULE_2__["default"].getCurrentBrowser()) {
                  igv.presentAlert('ERROR: you must select a map panel.');
                } else {
                  url = $(this).val();
                  _js_hicBrowser__WEBPACK_IMPORTED_MODULE_2__["default"].getCurrentBrowser().loadTracks([{
                    url: url
                  }]);
                }

                $(this).val("");
                $('#track-load-url-modal').modal('hide');
              });
              $('#annotation-selector').on('change', function (e) {
                var path, name;

                if (undefined === _js_hicBrowser__WEBPACK_IMPORTED_MODULE_2__["default"].getCurrentBrowser()) {
                  igv.presentAlert('ERROR: you must select a map panel.');
                } else {
                  path = $(this).val();
                  name = $(this).find('option:selected').text();
                  var _config = {
                    url: path,
                    name: name
                  };

                  if (path.indexOf("hgdownload.cse.ucsc.edu") > 0) {
                    _config.indexed = false; //UCSC files are never indexed
                  }

                  _js_hicBrowser__WEBPACK_IMPORTED_MODULE_2__["default"].getCurrentBrowser().loadTracks([_config]);
                }

                $('#hic-annotation-select-modal').modal('hide');
                $(this).find('option').removeAttr("selected");
              });
              $('#annotation-2D-selector').on('change', function (e) {
                var path, name;

                if (undefined === _js_hicBrowser__WEBPACK_IMPORTED_MODULE_2__["default"].getCurrentBrowser()) {
                  igv.presentAlert('ERROR: you must select a map panel.');
                } else {
                  path = $(this).val();
                  name = $(this).find('option:selected').text();
                  _js_hicBrowser__WEBPACK_IMPORTED_MODULE_2__["default"].getCurrentBrowser().loadTracks([{
                    url: path,
                    name: name
                  }]);
                }

                $('#hic-annotation-2D-select-modal').modal('hide');
                $(this).find('option').removeAttr("selected");
              });
              $('.juicebox-app-clone-button').on('click', function (e) {
                var browser, config;
                config = {
                  initFromUrl: false,
                  updateHref: false
                };
                _js_hic__WEBPACK_IMPORTED_MODULE_3__["createBrowser"]($container.get(0), config).then(function (browser) {
                  browser.eventBus.subscribe("GenomeChange", genomeChangeListener);
                  _js_hicBrowser__WEBPACK_IMPORTED_MODULE_2__["default"].setCurrentBrowser(browser);
                });
              });
              $('#hic-copy-link').on('click', function (e) {
                var success;
                $('#hic-share-url')[0].select();
                success = document.execCommand('copy');

                if (success) {
                  $('#hic-share-url-modal').modal('hide');
                } else {
                  alert("Copy not successful");
                }
              });
              $('#hic-embed-copy-link').on('click', function (e) {
                var success;
                $('#hic-embed')[0].select();
                success = document.execCommand('copy');

                if (success) {
                  $('#hic-share-url-modal').modal('hide');
                } else {
                  alert("Copy not successful");
                }
              });
              $e = $('button[id$=-map-dropdown]');
              $e.parent().on('show.bs.dropdown', function () {
                var id = $(this).children('.dropdown-toggle').attr('id');
                juicebox.currentContactMapDropdownButtonID = id;
              });
              $e.parent().on('hide.bs.dropdown', function () {});
              _js_hic__WEBPACK_IMPORTED_MODULE_3__["eventBus"].subscribe("BrowserSelect", function (event) {
                updateBDropdown(event.data);
              });
            };

            //hic.captionManager = new CaptionManager($('#hic-caption'));
            $('#hic-encode-modal-button').hide();
            $('#hic-encode-loading').show();

            if (config.urlShortener) {
              _js_hic__WEBPACK_IMPORTED_MODULE_3__["setURLShortener"](config.urlShortener);
            }

            genomeChangeListener = {
              receiveEvent: function receiveEvent(event) {
                var genomeId = event.data;

                if (lastGenomeId !== genomeId) {
                  // lastGenomeId = genomeId;
                  if (config.trackMenu) {
                    var tracksURL = config.trackMenu.items.replace("$GENOME_ID", genomeId);
                    loadAnnotationSelector($('#' + config.trackMenu.id), tracksURL, "1D");
                  }

                  if (config.trackMenu2D) {
                    var annotations2dURL = config.trackMenu2D.items.replace("$GENOME_ID", genomeId);
                    loadAnnotationSelector($('#' + config.trackMenu2D.id), annotations2dURL, "2D");
                  }

                  createEncodeTable(genomeId);
                }
              }
            };
            config = config || {};
            $appContainer = $(container);
            _context2.next = 11;
            return _js_hic__WEBPACK_IMPORTED_MODULE_3__["initApp"](container, config);

          case 11:
            postCreateBrowser();

          case 12:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, this);
  }));

  return function (_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();

function checkBDropdown() {
  updateBDropdown(_js_hicBrowser__WEBPACK_IMPORTED_MODULE_2__["default"].getCurrentBrowser());
}

function updateBDropdown(browser) {
  if (browser) {
    if (browser.dataset) {
      $('#hic-control-map-dropdown').removeClass('disabled');
    } else {
      $('#hic-control-map-dropdown').addClass('disabled');
    }
  }
}

function loadHicFile(url, name) {
  var synchState, browsersWithMaps, isControl, browser, query, config, uriDecode;
  browsersWithMaps = _js_hic__WEBPACK_IMPORTED_MODULE_3__["allBrowsers"].filter(function (browser) {
    return browser.dataset !== undefined;
  });

  if (browsersWithMaps.length > 0) {
    synchState = browsersWithMaps[0].getSyncState();
  }

  isControl = juicebox.currentContactMapDropdownButtonID === control_map_dropdown_id;
  browser = _js_hicBrowser__WEBPACK_IMPORTED_MODULE_2__["default"].getCurrentBrowser();
  config = {
    url: url,
    name: name,
    isControl: isControl
  };

  if (igv.isString(url) && url.includes("?")) {
    query = _js_hic__WEBPACK_IMPORTED_MODULE_3__["extractQuery"](url);
    uriDecode = url.includes("%2C");
    igv.Browser.decodeQuery(query, config, uriDecode);
  }

  if (isControl) {
    browser.loadHicControlFile(config).then(function (dataset) {});
  } else {
    browser.reset();
    browsersWithMaps = _js_hic__WEBPACK_IMPORTED_MODULE_3__["allBrowsers"].filter(function (browser) {
      return browser.dataset !== undefined;
    });

    if (browsersWithMaps.length > 0) {
      config["synchState"] = browsersWithMaps[0].getSyncState();
    }

    browser.loadHicFile(config).then(function (ignore) {
      if (!isControl) {
        _js_hic__WEBPACK_IMPORTED_MODULE_3__["syncBrowsers"](_js_hic__WEBPACK_IMPORTED_MODULE_3__["allBrowsers"]);
      }

      $('#hic-control-map-dropdown').removeClass('disabled');
    });
  }
}

function populatePulldown(menu) {
  var parent;
  parent = $("#" + menu.id);
  igv.xhr.loadString(menu.items).then(function (data) {
    var lines = igv.splitLines(data),
        len = lines.length,
        tokens,
        i;

    for (i = 0; i < len; i++) {
      tokens = lines[i].split('\t');

      if (tokens.length > 1) {
        parent.append($('<option value="' + tokens[0] + '">' + tokens[1] + '</option>'));
      }
    }

    parent.selectpicker("refresh");
  }).catch(function (error) {});
}

function createEncodeTable(genomeId) {
  var config, columnFormat, encodeDatasource, loadTracks;

  if (encodeTable && genomeId === lastGenomeId) {// do nothing
  } else {
    lastGenomeId = genomeId;

    if (encodeTable) {
      discardEncodeTable();
    }

    columnFormat = [{
      title: 'Cell Type',
      width: '7%'
    }, {
      title: 'Target',
      width: '8%'
    }, {
      title: 'Assay Type',
      width: '20%'
    }, {
      title: 'Output Type',
      width: '20%'
    }, {
      title: 'Bio Rep',
      width: '5%'
    }, {
      title: 'Tech Rep',
      width: '5%'
    }, {
      title: 'Format',
      width: '5%'
    }, {
      title: 'Experiment',
      width: '7%'
    }, {
      title: 'Accession',
      width: '8%'
    }, {
      title: 'Lab',
      width: '20%'
    }];
    encodeDatasource = new _encode__WEBPACK_IMPORTED_MODULE_1__["default"](columnFormat);

    loadTracks = function loadTracks(configurationList) {
      _js_hicBrowser__WEBPACK_IMPORTED_MODULE_2__["default"].getCurrentBrowser().loadTracks(configurationList);
    };

    config = {
      $modal: $('#hicEncodeModal'),
      $modalBody: $('#encodeModalBody'),
      $modalTopCloseButton: $('#encodeModalTopCloseButton'),
      $modalBottomCloseButton: $('#encodeModalBottomCloseButton'),
      $modalGoButton: $('#encodeModalGoButton'),
      datasource: encodeDatasource,
      browserHandler: loadTracks
    };
    encodeTable = new _modalTable__WEBPACK_IMPORTED_MODULE_0__["default"](config);
    encodeTable.loadData(genomeId);
  }
}

function discardEncodeTable() {
  encodeTable = undefined;
}

function loadAnnotationSelector($container, url, type) {
  var elements;
  $container.empty();
  elements = [];
  elements.push('<option value=' + '-' + '>' + '-' + '</option>');
  igv.xhr.loadString(url).then(function (data) {
    var lines = data ? igv.splitLines(data) : [];
    lines.forEach(function (line) {
      var tokens = line.split('\t');

      if (tokens.length > 1 && ("2D" === type || igvSupports(tokens[1]))) {
        elements.push('<option value=' + tokens[1] + '>' + tokens[0] + '</option>');
      }
    });
    $container.append(elements.join(''));
  }).catch(function (error) {});
}

function igvSupports(path) {
  // For now we will pretend that igv does not support bedpe, we want these loaded as 2D tracks
  if (path.endsWith(".bedpe") || path.endsWith(".bedpe.gz")) {
    return false;
  }

  var config = {
    url: path
  };
  igv.inferTrackTypes(config);
  return config.type !== undefined;
}

/***/ })

/******/ });
});
//# sourceMappingURL=app-bundle.js.map